
ultrasonic_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d6c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08008e30  08008e30  00018e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092dc  080092dc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080092dc  080092dc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080092dc  080092dc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092dc  080092dc  000192dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092e0  080092e0  000192e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080092e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  200001dc  080094c0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  080094c0  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbcb  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b4  00000000  00000000  0002fdcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00032088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  00032d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000132d3  00000000  00000000  000339b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5aa  00000000  00000000  00046c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00072b8e  00000000  00000000  0005622d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c8dbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a8  00000000  00000000  000c8e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008e14 	.word	0x08008e14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08008e14 	.word	0x08008e14

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f82b 	bl	8001498 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff75 	bl	800133c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f81d 	bl	8001498 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f813 	bl	8001498 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff97 	bl	80013b4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff8d 	bl	80013b4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	1c08      	adds	r0, r1, #0
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 f8a7 	bl	8000604 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 f82b 	bl	800051c <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f899 	bl	8000604 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f88f 	bl	8000604 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f839 	bl	800056c <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 f82f 	bl	800056c <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__eqsf2>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	0042      	lsls	r2, r0, #1
 8000520:	024e      	lsls	r6, r1, #9
 8000522:	004c      	lsls	r4, r1, #1
 8000524:	0245      	lsls	r5, r0, #9
 8000526:	0a6d      	lsrs	r5, r5, #9
 8000528:	0e12      	lsrs	r2, r2, #24
 800052a:	0fc3      	lsrs	r3, r0, #31
 800052c:	0a76      	lsrs	r6, r6, #9
 800052e:	0e24      	lsrs	r4, r4, #24
 8000530:	0fc9      	lsrs	r1, r1, #31
 8000532:	2aff      	cmp	r2, #255	; 0xff
 8000534:	d00f      	beq.n	8000556 <__eqsf2+0x3a>
 8000536:	2cff      	cmp	r4, #255	; 0xff
 8000538:	d011      	beq.n	800055e <__eqsf2+0x42>
 800053a:	2001      	movs	r0, #1
 800053c:	42a2      	cmp	r2, r4
 800053e:	d000      	beq.n	8000542 <__eqsf2+0x26>
 8000540:	bd70      	pop	{r4, r5, r6, pc}
 8000542:	42b5      	cmp	r5, r6
 8000544:	d1fc      	bne.n	8000540 <__eqsf2+0x24>
 8000546:	428b      	cmp	r3, r1
 8000548:	d00d      	beq.n	8000566 <__eqsf2+0x4a>
 800054a:	2a00      	cmp	r2, #0
 800054c:	d1f8      	bne.n	8000540 <__eqsf2+0x24>
 800054e:	0028      	movs	r0, r5
 8000550:	1e45      	subs	r5, r0, #1
 8000552:	41a8      	sbcs	r0, r5
 8000554:	e7f4      	b.n	8000540 <__eqsf2+0x24>
 8000556:	2001      	movs	r0, #1
 8000558:	2d00      	cmp	r5, #0
 800055a:	d1f1      	bne.n	8000540 <__eqsf2+0x24>
 800055c:	e7eb      	b.n	8000536 <__eqsf2+0x1a>
 800055e:	2001      	movs	r0, #1
 8000560:	2e00      	cmp	r6, #0
 8000562:	d1ed      	bne.n	8000540 <__eqsf2+0x24>
 8000564:	e7e9      	b.n	800053a <__eqsf2+0x1e>
 8000566:	2000      	movs	r0, #0
 8000568:	e7ea      	b.n	8000540 <__eqsf2+0x24>
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__gesf2>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	0042      	lsls	r2, r0, #1
 8000570:	0246      	lsls	r6, r0, #9
 8000572:	024d      	lsls	r5, r1, #9
 8000574:	004c      	lsls	r4, r1, #1
 8000576:	0fc3      	lsrs	r3, r0, #31
 8000578:	0a76      	lsrs	r6, r6, #9
 800057a:	0e12      	lsrs	r2, r2, #24
 800057c:	0a6d      	lsrs	r5, r5, #9
 800057e:	0e24      	lsrs	r4, r4, #24
 8000580:	0fc8      	lsrs	r0, r1, #31
 8000582:	2aff      	cmp	r2, #255	; 0xff
 8000584:	d01f      	beq.n	80005c6 <__gesf2+0x5a>
 8000586:	2cff      	cmp	r4, #255	; 0xff
 8000588:	d010      	beq.n	80005ac <__gesf2+0x40>
 800058a:	2a00      	cmp	r2, #0
 800058c:	d11f      	bne.n	80005ce <__gesf2+0x62>
 800058e:	4271      	negs	r1, r6
 8000590:	4171      	adcs	r1, r6
 8000592:	2c00      	cmp	r4, #0
 8000594:	d101      	bne.n	800059a <__gesf2+0x2e>
 8000596:	2d00      	cmp	r5, #0
 8000598:	d01e      	beq.n	80005d8 <__gesf2+0x6c>
 800059a:	2900      	cmp	r1, #0
 800059c:	d10e      	bne.n	80005bc <__gesf2+0x50>
 800059e:	4283      	cmp	r3, r0
 80005a0:	d01e      	beq.n	80005e0 <__gesf2+0x74>
 80005a2:	2102      	movs	r1, #2
 80005a4:	1e58      	subs	r0, r3, #1
 80005a6:	4008      	ands	r0, r1
 80005a8:	3801      	subs	r0, #1
 80005aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ac:	2d00      	cmp	r5, #0
 80005ae:	d126      	bne.n	80005fe <__gesf2+0x92>
 80005b0:	2a00      	cmp	r2, #0
 80005b2:	d1f4      	bne.n	800059e <__gesf2+0x32>
 80005b4:	4271      	negs	r1, r6
 80005b6:	4171      	adcs	r1, r6
 80005b8:	2900      	cmp	r1, #0
 80005ba:	d0f0      	beq.n	800059e <__gesf2+0x32>
 80005bc:	2800      	cmp	r0, #0
 80005be:	d1f4      	bne.n	80005aa <__gesf2+0x3e>
 80005c0:	2001      	movs	r0, #1
 80005c2:	4240      	negs	r0, r0
 80005c4:	e7f1      	b.n	80005aa <__gesf2+0x3e>
 80005c6:	2e00      	cmp	r6, #0
 80005c8:	d119      	bne.n	80005fe <__gesf2+0x92>
 80005ca:	2cff      	cmp	r4, #255	; 0xff
 80005cc:	d0ee      	beq.n	80005ac <__gesf2+0x40>
 80005ce:	2c00      	cmp	r4, #0
 80005d0:	d1e5      	bne.n	800059e <__gesf2+0x32>
 80005d2:	2d00      	cmp	r5, #0
 80005d4:	d1e3      	bne.n	800059e <__gesf2+0x32>
 80005d6:	e7e4      	b.n	80005a2 <__gesf2+0x36>
 80005d8:	2000      	movs	r0, #0
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d0e5      	beq.n	80005aa <__gesf2+0x3e>
 80005de:	e7e0      	b.n	80005a2 <__gesf2+0x36>
 80005e0:	42a2      	cmp	r2, r4
 80005e2:	dc05      	bgt.n	80005f0 <__gesf2+0x84>
 80005e4:	dbea      	blt.n	80005bc <__gesf2+0x50>
 80005e6:	42ae      	cmp	r6, r5
 80005e8:	d802      	bhi.n	80005f0 <__gesf2+0x84>
 80005ea:	d3e7      	bcc.n	80005bc <__gesf2+0x50>
 80005ec:	2000      	movs	r0, #0
 80005ee:	e7dc      	b.n	80005aa <__gesf2+0x3e>
 80005f0:	4241      	negs	r1, r0
 80005f2:	4141      	adcs	r1, r0
 80005f4:	4248      	negs	r0, r1
 80005f6:	2102      	movs	r1, #2
 80005f8:	4008      	ands	r0, r1
 80005fa:	3801      	subs	r0, #1
 80005fc:	e7d5      	b.n	80005aa <__gesf2+0x3e>
 80005fe:	2002      	movs	r0, #2
 8000600:	4240      	negs	r0, r0
 8000602:	e7d2      	b.n	80005aa <__gesf2+0x3e>

08000604 <__lesf2>:
 8000604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000606:	0042      	lsls	r2, r0, #1
 8000608:	0246      	lsls	r6, r0, #9
 800060a:	024d      	lsls	r5, r1, #9
 800060c:	004c      	lsls	r4, r1, #1
 800060e:	0fc3      	lsrs	r3, r0, #31
 8000610:	0a76      	lsrs	r6, r6, #9
 8000612:	0e12      	lsrs	r2, r2, #24
 8000614:	0a6d      	lsrs	r5, r5, #9
 8000616:	0e24      	lsrs	r4, r4, #24
 8000618:	0fc8      	lsrs	r0, r1, #31
 800061a:	2aff      	cmp	r2, #255	; 0xff
 800061c:	d00d      	beq.n	800063a <__lesf2+0x36>
 800061e:	2cff      	cmp	r4, #255	; 0xff
 8000620:	d00f      	beq.n	8000642 <__lesf2+0x3e>
 8000622:	2a00      	cmp	r2, #0
 8000624:	d123      	bne.n	800066e <__lesf2+0x6a>
 8000626:	4271      	negs	r1, r6
 8000628:	4171      	adcs	r1, r6
 800062a:	2c00      	cmp	r4, #0
 800062c:	d10f      	bne.n	800064e <__lesf2+0x4a>
 800062e:	2d00      	cmp	r5, #0
 8000630:	d10d      	bne.n	800064e <__lesf2+0x4a>
 8000632:	2000      	movs	r0, #0
 8000634:	2e00      	cmp	r6, #0
 8000636:	d014      	beq.n	8000662 <__lesf2+0x5e>
 8000638:	e00d      	b.n	8000656 <__lesf2+0x52>
 800063a:	2e00      	cmp	r6, #0
 800063c:	d110      	bne.n	8000660 <__lesf2+0x5c>
 800063e:	2cff      	cmp	r4, #255	; 0xff
 8000640:	d115      	bne.n	800066e <__lesf2+0x6a>
 8000642:	2d00      	cmp	r5, #0
 8000644:	d10c      	bne.n	8000660 <__lesf2+0x5c>
 8000646:	2a00      	cmp	r2, #0
 8000648:	d103      	bne.n	8000652 <__lesf2+0x4e>
 800064a:	4271      	negs	r1, r6
 800064c:	4171      	adcs	r1, r6
 800064e:	2900      	cmp	r1, #0
 8000650:	d108      	bne.n	8000664 <__lesf2+0x60>
 8000652:	4283      	cmp	r3, r0
 8000654:	d010      	beq.n	8000678 <__lesf2+0x74>
 8000656:	2102      	movs	r1, #2
 8000658:	1e58      	subs	r0, r3, #1
 800065a:	4008      	ands	r0, r1
 800065c:	3801      	subs	r0, #1
 800065e:	e000      	b.n	8000662 <__lesf2+0x5e>
 8000660:	2002      	movs	r0, #2
 8000662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000664:	2800      	cmp	r0, #0
 8000666:	d1fc      	bne.n	8000662 <__lesf2+0x5e>
 8000668:	2001      	movs	r0, #1
 800066a:	4240      	negs	r0, r0
 800066c:	e7f9      	b.n	8000662 <__lesf2+0x5e>
 800066e:	2c00      	cmp	r4, #0
 8000670:	d1ef      	bne.n	8000652 <__lesf2+0x4e>
 8000672:	2d00      	cmp	r5, #0
 8000674:	d1ed      	bne.n	8000652 <__lesf2+0x4e>
 8000676:	e7ee      	b.n	8000656 <__lesf2+0x52>
 8000678:	42a2      	cmp	r2, r4
 800067a:	dc05      	bgt.n	8000688 <__lesf2+0x84>
 800067c:	dbf2      	blt.n	8000664 <__lesf2+0x60>
 800067e:	42ae      	cmp	r6, r5
 8000680:	d802      	bhi.n	8000688 <__lesf2+0x84>
 8000682:	d3ef      	bcc.n	8000664 <__lesf2+0x60>
 8000684:	2000      	movs	r0, #0
 8000686:	e7ec      	b.n	8000662 <__lesf2+0x5e>
 8000688:	4241      	negs	r1, r0
 800068a:	4141      	adcs	r1, r0
 800068c:	4248      	negs	r0, r1
 800068e:	2102      	movs	r1, #2
 8000690:	4008      	ands	r0, r1
 8000692:	3801      	subs	r0, #1
 8000694:	e7e5      	b.n	8000662 <__lesf2+0x5e>
 8000696:	46c0      	nop			; (mov r8, r8)

08000698 <__aeabi_dadd>:
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	464f      	mov	r7, r9
 800069c:	46d6      	mov	lr, sl
 800069e:	4646      	mov	r6, r8
 80006a0:	000d      	movs	r5, r1
 80006a2:	0001      	movs	r1, r0
 80006a4:	0018      	movs	r0, r3
 80006a6:	b5c0      	push	{r6, r7, lr}
 80006a8:	0017      	movs	r7, r2
 80006aa:	032b      	lsls	r3, r5, #12
 80006ac:	0a5a      	lsrs	r2, r3, #9
 80006ae:	0f4b      	lsrs	r3, r1, #29
 80006b0:	4313      	orrs	r3, r2
 80006b2:	00ca      	lsls	r2, r1, #3
 80006b4:	4691      	mov	r9, r2
 80006b6:	0302      	lsls	r2, r0, #12
 80006b8:	006e      	lsls	r6, r5, #1
 80006ba:	0041      	lsls	r1, r0, #1
 80006bc:	0a52      	lsrs	r2, r2, #9
 80006be:	0fec      	lsrs	r4, r5, #31
 80006c0:	0f7d      	lsrs	r5, r7, #29
 80006c2:	4315      	orrs	r5, r2
 80006c4:	0d76      	lsrs	r6, r6, #21
 80006c6:	0d49      	lsrs	r1, r1, #21
 80006c8:	0fc0      	lsrs	r0, r0, #31
 80006ca:	4682      	mov	sl, r0
 80006cc:	46ac      	mov	ip, r5
 80006ce:	00ff      	lsls	r7, r7, #3
 80006d0:	1a72      	subs	r2, r6, r1
 80006d2:	4284      	cmp	r4, r0
 80006d4:	d100      	bne.n	80006d8 <__aeabi_dadd+0x40>
 80006d6:	e098      	b.n	800080a <__aeabi_dadd+0x172>
 80006d8:	2a00      	cmp	r2, #0
 80006da:	dc00      	bgt.n	80006de <__aeabi_dadd+0x46>
 80006dc:	e081      	b.n	80007e2 <__aeabi_dadd+0x14a>
 80006de:	2900      	cmp	r1, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_dadd+0x4c>
 80006e2:	e0b6      	b.n	8000852 <__aeabi_dadd+0x1ba>
 80006e4:	49c9      	ldr	r1, [pc, #804]	; (8000a0c <__aeabi_dadd+0x374>)
 80006e6:	428e      	cmp	r6, r1
 80006e8:	d100      	bne.n	80006ec <__aeabi_dadd+0x54>
 80006ea:	e172      	b.n	80009d2 <__aeabi_dadd+0x33a>
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	0028      	movs	r0, r5
 80006f0:	0409      	lsls	r1, r1, #16
 80006f2:	4308      	orrs	r0, r1
 80006f4:	4684      	mov	ip, r0
 80006f6:	2a38      	cmp	r2, #56	; 0x38
 80006f8:	dd00      	ble.n	80006fc <__aeabi_dadd+0x64>
 80006fa:	e15e      	b.n	80009ba <__aeabi_dadd+0x322>
 80006fc:	2a1f      	cmp	r2, #31
 80006fe:	dd00      	ble.n	8000702 <__aeabi_dadd+0x6a>
 8000700:	e1ee      	b.n	8000ae0 <__aeabi_dadd+0x448>
 8000702:	2020      	movs	r0, #32
 8000704:	0039      	movs	r1, r7
 8000706:	4665      	mov	r5, ip
 8000708:	1a80      	subs	r0, r0, r2
 800070a:	4087      	lsls	r7, r0
 800070c:	40d1      	lsrs	r1, r2
 800070e:	4085      	lsls	r5, r0
 8000710:	430d      	orrs	r5, r1
 8000712:	0039      	movs	r1, r7
 8000714:	1e4f      	subs	r7, r1, #1
 8000716:	41b9      	sbcs	r1, r7
 8000718:	4667      	mov	r7, ip
 800071a:	40d7      	lsrs	r7, r2
 800071c:	4329      	orrs	r1, r5
 800071e:	1bdb      	subs	r3, r3, r7
 8000720:	464a      	mov	r2, r9
 8000722:	1a55      	subs	r5, r2, r1
 8000724:	45a9      	cmp	r9, r5
 8000726:	4189      	sbcs	r1, r1
 8000728:	4249      	negs	r1, r1
 800072a:	1a5b      	subs	r3, r3, r1
 800072c:	4698      	mov	r8, r3
 800072e:	4643      	mov	r3, r8
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	d400      	bmi.n	8000736 <__aeabi_dadd+0x9e>
 8000734:	e0cc      	b.n	80008d0 <__aeabi_dadd+0x238>
 8000736:	4643      	mov	r3, r8
 8000738:	025b      	lsls	r3, r3, #9
 800073a:	0a5b      	lsrs	r3, r3, #9
 800073c:	4698      	mov	r8, r3
 800073e:	4643      	mov	r3, r8
 8000740:	2b00      	cmp	r3, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_dadd+0xae>
 8000744:	e12c      	b.n	80009a0 <__aeabi_dadd+0x308>
 8000746:	4640      	mov	r0, r8
 8000748:	f001 fe8e 	bl	8002468 <__clzsi2>
 800074c:	0001      	movs	r1, r0
 800074e:	3908      	subs	r1, #8
 8000750:	2220      	movs	r2, #32
 8000752:	0028      	movs	r0, r5
 8000754:	4643      	mov	r3, r8
 8000756:	1a52      	subs	r2, r2, r1
 8000758:	408b      	lsls	r3, r1
 800075a:	40d0      	lsrs	r0, r2
 800075c:	408d      	lsls	r5, r1
 800075e:	4303      	orrs	r3, r0
 8000760:	428e      	cmp	r6, r1
 8000762:	dd00      	ble.n	8000766 <__aeabi_dadd+0xce>
 8000764:	e117      	b.n	8000996 <__aeabi_dadd+0x2fe>
 8000766:	1b8e      	subs	r6, r1, r6
 8000768:	1c72      	adds	r2, r6, #1
 800076a:	2a1f      	cmp	r2, #31
 800076c:	dd00      	ble.n	8000770 <__aeabi_dadd+0xd8>
 800076e:	e1a7      	b.n	8000ac0 <__aeabi_dadd+0x428>
 8000770:	2120      	movs	r1, #32
 8000772:	0018      	movs	r0, r3
 8000774:	002e      	movs	r6, r5
 8000776:	1a89      	subs	r1, r1, r2
 8000778:	408d      	lsls	r5, r1
 800077a:	4088      	lsls	r0, r1
 800077c:	40d6      	lsrs	r6, r2
 800077e:	40d3      	lsrs	r3, r2
 8000780:	1e69      	subs	r1, r5, #1
 8000782:	418d      	sbcs	r5, r1
 8000784:	4330      	orrs	r0, r6
 8000786:	4698      	mov	r8, r3
 8000788:	2600      	movs	r6, #0
 800078a:	4305      	orrs	r5, r0
 800078c:	076b      	lsls	r3, r5, #29
 800078e:	d009      	beq.n	80007a4 <__aeabi_dadd+0x10c>
 8000790:	230f      	movs	r3, #15
 8000792:	402b      	ands	r3, r5
 8000794:	2b04      	cmp	r3, #4
 8000796:	d005      	beq.n	80007a4 <__aeabi_dadd+0x10c>
 8000798:	1d2b      	adds	r3, r5, #4
 800079a:	42ab      	cmp	r3, r5
 800079c:	41ad      	sbcs	r5, r5
 800079e:	426d      	negs	r5, r5
 80007a0:	44a8      	add	r8, r5
 80007a2:	001d      	movs	r5, r3
 80007a4:	4643      	mov	r3, r8
 80007a6:	021b      	lsls	r3, r3, #8
 80007a8:	d400      	bmi.n	80007ac <__aeabi_dadd+0x114>
 80007aa:	e094      	b.n	80008d6 <__aeabi_dadd+0x23e>
 80007ac:	4b97      	ldr	r3, [pc, #604]	; (8000a0c <__aeabi_dadd+0x374>)
 80007ae:	1c72      	adds	r2, r6, #1
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d100      	bne.n	80007b6 <__aeabi_dadd+0x11e>
 80007b4:	e09d      	b.n	80008f2 <__aeabi_dadd+0x25a>
 80007b6:	4641      	mov	r1, r8
 80007b8:	4b95      	ldr	r3, [pc, #596]	; (8000a10 <__aeabi_dadd+0x378>)
 80007ba:	08ed      	lsrs	r5, r5, #3
 80007bc:	4019      	ands	r1, r3
 80007be:	000b      	movs	r3, r1
 80007c0:	0552      	lsls	r2, r2, #21
 80007c2:	0749      	lsls	r1, r1, #29
 80007c4:	025b      	lsls	r3, r3, #9
 80007c6:	4329      	orrs	r1, r5
 80007c8:	0b1b      	lsrs	r3, r3, #12
 80007ca:	0d52      	lsrs	r2, r2, #21
 80007cc:	0512      	lsls	r2, r2, #20
 80007ce:	4313      	orrs	r3, r2
 80007d0:	07e4      	lsls	r4, r4, #31
 80007d2:	4323      	orrs	r3, r4
 80007d4:	0008      	movs	r0, r1
 80007d6:	0019      	movs	r1, r3
 80007d8:	bce0      	pop	{r5, r6, r7}
 80007da:	46ba      	mov	sl, r7
 80007dc:	46b1      	mov	r9, r6
 80007de:	46a8      	mov	r8, r5
 80007e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e2:	2a00      	cmp	r2, #0
 80007e4:	d043      	beq.n	800086e <__aeabi_dadd+0x1d6>
 80007e6:	1b8a      	subs	r2, r1, r6
 80007e8:	2e00      	cmp	r6, #0
 80007ea:	d000      	beq.n	80007ee <__aeabi_dadd+0x156>
 80007ec:	e12a      	b.n	8000a44 <__aeabi_dadd+0x3ac>
 80007ee:	464c      	mov	r4, r9
 80007f0:	431c      	orrs	r4, r3
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x15e>
 80007f4:	e1d1      	b.n	8000b9a <__aeabi_dadd+0x502>
 80007f6:	1e54      	subs	r4, r2, #1
 80007f8:	2a01      	cmp	r2, #1
 80007fa:	d100      	bne.n	80007fe <__aeabi_dadd+0x166>
 80007fc:	e21f      	b.n	8000c3e <__aeabi_dadd+0x5a6>
 80007fe:	4d83      	ldr	r5, [pc, #524]	; (8000a0c <__aeabi_dadd+0x374>)
 8000800:	42aa      	cmp	r2, r5
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x16e>
 8000804:	e272      	b.n	8000cec <__aeabi_dadd+0x654>
 8000806:	0022      	movs	r2, r4
 8000808:	e123      	b.n	8000a52 <__aeabi_dadd+0x3ba>
 800080a:	2a00      	cmp	r2, #0
 800080c:	dc00      	bgt.n	8000810 <__aeabi_dadd+0x178>
 800080e:	e098      	b.n	8000942 <__aeabi_dadd+0x2aa>
 8000810:	2900      	cmp	r1, #0
 8000812:	d042      	beq.n	800089a <__aeabi_dadd+0x202>
 8000814:	497d      	ldr	r1, [pc, #500]	; (8000a0c <__aeabi_dadd+0x374>)
 8000816:	428e      	cmp	r6, r1
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x184>
 800081a:	e0da      	b.n	80009d2 <__aeabi_dadd+0x33a>
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	0028      	movs	r0, r5
 8000820:	0409      	lsls	r1, r1, #16
 8000822:	4308      	orrs	r0, r1
 8000824:	4684      	mov	ip, r0
 8000826:	2a38      	cmp	r2, #56	; 0x38
 8000828:	dd00      	ble.n	800082c <__aeabi_dadd+0x194>
 800082a:	e129      	b.n	8000a80 <__aeabi_dadd+0x3e8>
 800082c:	2a1f      	cmp	r2, #31
 800082e:	dc00      	bgt.n	8000832 <__aeabi_dadd+0x19a>
 8000830:	e187      	b.n	8000b42 <__aeabi_dadd+0x4aa>
 8000832:	0011      	movs	r1, r2
 8000834:	4665      	mov	r5, ip
 8000836:	3920      	subs	r1, #32
 8000838:	40cd      	lsrs	r5, r1
 800083a:	2a20      	cmp	r2, #32
 800083c:	d004      	beq.n	8000848 <__aeabi_dadd+0x1b0>
 800083e:	2040      	movs	r0, #64	; 0x40
 8000840:	4661      	mov	r1, ip
 8000842:	1a82      	subs	r2, r0, r2
 8000844:	4091      	lsls	r1, r2
 8000846:	430f      	orrs	r7, r1
 8000848:	0039      	movs	r1, r7
 800084a:	1e4f      	subs	r7, r1, #1
 800084c:	41b9      	sbcs	r1, r7
 800084e:	430d      	orrs	r5, r1
 8000850:	e11b      	b.n	8000a8a <__aeabi_dadd+0x3f2>
 8000852:	0029      	movs	r1, r5
 8000854:	4339      	orrs	r1, r7
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x1c2>
 8000858:	e0b5      	b.n	80009c6 <__aeabi_dadd+0x32e>
 800085a:	1e51      	subs	r1, r2, #1
 800085c:	2a01      	cmp	r2, #1
 800085e:	d100      	bne.n	8000862 <__aeabi_dadd+0x1ca>
 8000860:	e1ab      	b.n	8000bba <__aeabi_dadd+0x522>
 8000862:	486a      	ldr	r0, [pc, #424]	; (8000a0c <__aeabi_dadd+0x374>)
 8000864:	4282      	cmp	r2, r0
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x1d2>
 8000868:	e1b2      	b.n	8000bd0 <__aeabi_dadd+0x538>
 800086a:	000a      	movs	r2, r1
 800086c:	e743      	b.n	80006f6 <__aeabi_dadd+0x5e>
 800086e:	4969      	ldr	r1, [pc, #420]	; (8000a14 <__aeabi_dadd+0x37c>)
 8000870:	1c75      	adds	r5, r6, #1
 8000872:	420d      	tst	r5, r1
 8000874:	d000      	beq.n	8000878 <__aeabi_dadd+0x1e0>
 8000876:	e0cf      	b.n	8000a18 <__aeabi_dadd+0x380>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d000      	beq.n	800087e <__aeabi_dadd+0x1e6>
 800087c:	e193      	b.n	8000ba6 <__aeabi_dadd+0x50e>
 800087e:	4649      	mov	r1, r9
 8000880:	4319      	orrs	r1, r3
 8000882:	d100      	bne.n	8000886 <__aeabi_dadd+0x1ee>
 8000884:	e1d1      	b.n	8000c2a <__aeabi_dadd+0x592>
 8000886:	4661      	mov	r1, ip
 8000888:	4339      	orrs	r1, r7
 800088a:	d000      	beq.n	800088e <__aeabi_dadd+0x1f6>
 800088c:	e1e3      	b.n	8000c56 <__aeabi_dadd+0x5be>
 800088e:	4649      	mov	r1, r9
 8000890:	0758      	lsls	r0, r3, #29
 8000892:	08c9      	lsrs	r1, r1, #3
 8000894:	4301      	orrs	r1, r0
 8000896:	08db      	lsrs	r3, r3, #3
 8000898:	e026      	b.n	80008e8 <__aeabi_dadd+0x250>
 800089a:	0029      	movs	r1, r5
 800089c:	4339      	orrs	r1, r7
 800089e:	d100      	bne.n	80008a2 <__aeabi_dadd+0x20a>
 80008a0:	e091      	b.n	80009c6 <__aeabi_dadd+0x32e>
 80008a2:	1e51      	subs	r1, r2, #1
 80008a4:	2a01      	cmp	r2, #1
 80008a6:	d005      	beq.n	80008b4 <__aeabi_dadd+0x21c>
 80008a8:	4858      	ldr	r0, [pc, #352]	; (8000a0c <__aeabi_dadd+0x374>)
 80008aa:	4282      	cmp	r2, r0
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dadd+0x218>
 80008ae:	e18f      	b.n	8000bd0 <__aeabi_dadd+0x538>
 80008b0:	000a      	movs	r2, r1
 80008b2:	e7b8      	b.n	8000826 <__aeabi_dadd+0x18e>
 80008b4:	003d      	movs	r5, r7
 80008b6:	444d      	add	r5, r9
 80008b8:	454d      	cmp	r5, r9
 80008ba:	4189      	sbcs	r1, r1
 80008bc:	4463      	add	r3, ip
 80008be:	4698      	mov	r8, r3
 80008c0:	4249      	negs	r1, r1
 80008c2:	4488      	add	r8, r1
 80008c4:	4643      	mov	r3, r8
 80008c6:	2602      	movs	r6, #2
 80008c8:	021b      	lsls	r3, r3, #8
 80008ca:	d500      	bpl.n	80008ce <__aeabi_dadd+0x236>
 80008cc:	e0eb      	b.n	8000aa6 <__aeabi_dadd+0x40e>
 80008ce:	3e01      	subs	r6, #1
 80008d0:	076b      	lsls	r3, r5, #29
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dadd+0x23e>
 80008d4:	e75c      	b.n	8000790 <__aeabi_dadd+0xf8>
 80008d6:	4643      	mov	r3, r8
 80008d8:	08e9      	lsrs	r1, r5, #3
 80008da:	075a      	lsls	r2, r3, #29
 80008dc:	4311      	orrs	r1, r2
 80008de:	0032      	movs	r2, r6
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	484a      	ldr	r0, [pc, #296]	; (8000a0c <__aeabi_dadd+0x374>)
 80008e4:	4282      	cmp	r2, r0
 80008e6:	d021      	beq.n	800092c <__aeabi_dadd+0x294>
 80008e8:	031b      	lsls	r3, r3, #12
 80008ea:	0552      	lsls	r2, r2, #21
 80008ec:	0b1b      	lsrs	r3, r3, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	e76c      	b.n	80007cc <__aeabi_dadd+0x134>
 80008f2:	2300      	movs	r3, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	e769      	b.n	80007cc <__aeabi_dadd+0x134>
 80008f8:	002a      	movs	r2, r5
 80008fa:	433a      	orrs	r2, r7
 80008fc:	d069      	beq.n	80009d2 <__aeabi_dadd+0x33a>
 80008fe:	464a      	mov	r2, r9
 8000900:	0758      	lsls	r0, r3, #29
 8000902:	08d1      	lsrs	r1, r2, #3
 8000904:	08da      	lsrs	r2, r3, #3
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	031b      	lsls	r3, r3, #12
 800090a:	4308      	orrs	r0, r1
 800090c:	421a      	tst	r2, r3
 800090e:	d007      	beq.n	8000920 <__aeabi_dadd+0x288>
 8000910:	0029      	movs	r1, r5
 8000912:	08ed      	lsrs	r5, r5, #3
 8000914:	421d      	tst	r5, r3
 8000916:	d103      	bne.n	8000920 <__aeabi_dadd+0x288>
 8000918:	002a      	movs	r2, r5
 800091a:	08ff      	lsrs	r7, r7, #3
 800091c:	0748      	lsls	r0, r1, #29
 800091e:	4338      	orrs	r0, r7
 8000920:	0f43      	lsrs	r3, r0, #29
 8000922:	00c1      	lsls	r1, r0, #3
 8000924:	075b      	lsls	r3, r3, #29
 8000926:	08c9      	lsrs	r1, r1, #3
 8000928:	4319      	orrs	r1, r3
 800092a:	0013      	movs	r3, r2
 800092c:	000a      	movs	r2, r1
 800092e:	431a      	orrs	r2, r3
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x29c>
 8000932:	e213      	b.n	8000d5c <__aeabi_dadd+0x6c4>
 8000934:	2280      	movs	r2, #128	; 0x80
 8000936:	0312      	lsls	r2, r2, #12
 8000938:	4313      	orrs	r3, r2
 800093a:	031b      	lsls	r3, r3, #12
 800093c:	4a33      	ldr	r2, [pc, #204]	; (8000a0c <__aeabi_dadd+0x374>)
 800093e:	0b1b      	lsrs	r3, r3, #12
 8000940:	e744      	b.n	80007cc <__aeabi_dadd+0x134>
 8000942:	2a00      	cmp	r2, #0
 8000944:	d04b      	beq.n	80009de <__aeabi_dadd+0x346>
 8000946:	1b8a      	subs	r2, r1, r6
 8000948:	2e00      	cmp	r6, #0
 800094a:	d100      	bne.n	800094e <__aeabi_dadd+0x2b6>
 800094c:	e0e7      	b.n	8000b1e <__aeabi_dadd+0x486>
 800094e:	482f      	ldr	r0, [pc, #188]	; (8000a0c <__aeabi_dadd+0x374>)
 8000950:	4281      	cmp	r1, r0
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x2be>
 8000954:	e195      	b.n	8000c82 <__aeabi_dadd+0x5ea>
 8000956:	2080      	movs	r0, #128	; 0x80
 8000958:	0400      	lsls	r0, r0, #16
 800095a:	4303      	orrs	r3, r0
 800095c:	2a38      	cmp	r2, #56	; 0x38
 800095e:	dd00      	ble.n	8000962 <__aeabi_dadd+0x2ca>
 8000960:	e143      	b.n	8000bea <__aeabi_dadd+0x552>
 8000962:	2a1f      	cmp	r2, #31
 8000964:	dd00      	ble.n	8000968 <__aeabi_dadd+0x2d0>
 8000966:	e1db      	b.n	8000d20 <__aeabi_dadd+0x688>
 8000968:	2020      	movs	r0, #32
 800096a:	001d      	movs	r5, r3
 800096c:	464e      	mov	r6, r9
 800096e:	1a80      	subs	r0, r0, r2
 8000970:	4085      	lsls	r5, r0
 8000972:	40d6      	lsrs	r6, r2
 8000974:	4335      	orrs	r5, r6
 8000976:	464e      	mov	r6, r9
 8000978:	4086      	lsls	r6, r0
 800097a:	0030      	movs	r0, r6
 800097c:	40d3      	lsrs	r3, r2
 800097e:	1e46      	subs	r6, r0, #1
 8000980:	41b0      	sbcs	r0, r6
 8000982:	449c      	add	ip, r3
 8000984:	4305      	orrs	r5, r0
 8000986:	19ed      	adds	r5, r5, r7
 8000988:	42bd      	cmp	r5, r7
 800098a:	419b      	sbcs	r3, r3
 800098c:	425b      	negs	r3, r3
 800098e:	4463      	add	r3, ip
 8000990:	4698      	mov	r8, r3
 8000992:	000e      	movs	r6, r1
 8000994:	e07f      	b.n	8000a96 <__aeabi_dadd+0x3fe>
 8000996:	4a1e      	ldr	r2, [pc, #120]	; (8000a10 <__aeabi_dadd+0x378>)
 8000998:	1a76      	subs	r6, r6, r1
 800099a:	4013      	ands	r3, r2
 800099c:	4698      	mov	r8, r3
 800099e:	e6f5      	b.n	800078c <__aeabi_dadd+0xf4>
 80009a0:	0028      	movs	r0, r5
 80009a2:	f001 fd61 	bl	8002468 <__clzsi2>
 80009a6:	0001      	movs	r1, r0
 80009a8:	3118      	adds	r1, #24
 80009aa:	291f      	cmp	r1, #31
 80009ac:	dc00      	bgt.n	80009b0 <__aeabi_dadd+0x318>
 80009ae:	e6cf      	b.n	8000750 <__aeabi_dadd+0xb8>
 80009b0:	002b      	movs	r3, r5
 80009b2:	3808      	subs	r0, #8
 80009b4:	4083      	lsls	r3, r0
 80009b6:	2500      	movs	r5, #0
 80009b8:	e6d2      	b.n	8000760 <__aeabi_dadd+0xc8>
 80009ba:	4662      	mov	r2, ip
 80009bc:	433a      	orrs	r2, r7
 80009be:	0011      	movs	r1, r2
 80009c0:	1e4f      	subs	r7, r1, #1
 80009c2:	41b9      	sbcs	r1, r7
 80009c4:	e6ac      	b.n	8000720 <__aeabi_dadd+0x88>
 80009c6:	4649      	mov	r1, r9
 80009c8:	0758      	lsls	r0, r3, #29
 80009ca:	08c9      	lsrs	r1, r1, #3
 80009cc:	4301      	orrs	r1, r0
 80009ce:	08db      	lsrs	r3, r3, #3
 80009d0:	e787      	b.n	80008e2 <__aeabi_dadd+0x24a>
 80009d2:	4649      	mov	r1, r9
 80009d4:	075a      	lsls	r2, r3, #29
 80009d6:	08c9      	lsrs	r1, r1, #3
 80009d8:	4311      	orrs	r1, r2
 80009da:	08db      	lsrs	r3, r3, #3
 80009dc:	e7a6      	b.n	800092c <__aeabi_dadd+0x294>
 80009de:	490d      	ldr	r1, [pc, #52]	; (8000a14 <__aeabi_dadd+0x37c>)
 80009e0:	1c70      	adds	r0, r6, #1
 80009e2:	4208      	tst	r0, r1
 80009e4:	d000      	beq.n	80009e8 <__aeabi_dadd+0x350>
 80009e6:	e0bb      	b.n	8000b60 <__aeabi_dadd+0x4c8>
 80009e8:	2e00      	cmp	r6, #0
 80009ea:	d000      	beq.n	80009ee <__aeabi_dadd+0x356>
 80009ec:	e114      	b.n	8000c18 <__aeabi_dadd+0x580>
 80009ee:	4649      	mov	r1, r9
 80009f0:	4319      	orrs	r1, r3
 80009f2:	d100      	bne.n	80009f6 <__aeabi_dadd+0x35e>
 80009f4:	e175      	b.n	8000ce2 <__aeabi_dadd+0x64a>
 80009f6:	0029      	movs	r1, r5
 80009f8:	4339      	orrs	r1, r7
 80009fa:	d000      	beq.n	80009fe <__aeabi_dadd+0x366>
 80009fc:	e17e      	b.n	8000cfc <__aeabi_dadd+0x664>
 80009fe:	4649      	mov	r1, r9
 8000a00:	0758      	lsls	r0, r3, #29
 8000a02:	08c9      	lsrs	r1, r1, #3
 8000a04:	4301      	orrs	r1, r0
 8000a06:	08db      	lsrs	r3, r3, #3
 8000a08:	e76e      	b.n	80008e8 <__aeabi_dadd+0x250>
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	000007ff 	.word	0x000007ff
 8000a10:	ff7fffff 	.word	0xff7fffff
 8000a14:	000007fe 	.word	0x000007fe
 8000a18:	4649      	mov	r1, r9
 8000a1a:	1bcd      	subs	r5, r1, r7
 8000a1c:	4661      	mov	r1, ip
 8000a1e:	1a58      	subs	r0, r3, r1
 8000a20:	45a9      	cmp	r9, r5
 8000a22:	4189      	sbcs	r1, r1
 8000a24:	4249      	negs	r1, r1
 8000a26:	4688      	mov	r8, r1
 8000a28:	0001      	movs	r1, r0
 8000a2a:	4640      	mov	r0, r8
 8000a2c:	1a09      	subs	r1, r1, r0
 8000a2e:	4688      	mov	r8, r1
 8000a30:	0209      	lsls	r1, r1, #8
 8000a32:	d500      	bpl.n	8000a36 <__aeabi_dadd+0x39e>
 8000a34:	e0a6      	b.n	8000b84 <__aeabi_dadd+0x4ec>
 8000a36:	4641      	mov	r1, r8
 8000a38:	4329      	orrs	r1, r5
 8000a3a:	d000      	beq.n	8000a3e <__aeabi_dadd+0x3a6>
 8000a3c:	e67f      	b.n	800073e <__aeabi_dadd+0xa6>
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2400      	movs	r4, #0
 8000a42:	e751      	b.n	80008e8 <__aeabi_dadd+0x250>
 8000a44:	4cc7      	ldr	r4, [pc, #796]	; (8000d64 <__aeabi_dadd+0x6cc>)
 8000a46:	42a1      	cmp	r1, r4
 8000a48:	d100      	bne.n	8000a4c <__aeabi_dadd+0x3b4>
 8000a4a:	e0c7      	b.n	8000bdc <__aeabi_dadd+0x544>
 8000a4c:	2480      	movs	r4, #128	; 0x80
 8000a4e:	0424      	lsls	r4, r4, #16
 8000a50:	4323      	orrs	r3, r4
 8000a52:	2a38      	cmp	r2, #56	; 0x38
 8000a54:	dc54      	bgt.n	8000b00 <__aeabi_dadd+0x468>
 8000a56:	2a1f      	cmp	r2, #31
 8000a58:	dd00      	ble.n	8000a5c <__aeabi_dadd+0x3c4>
 8000a5a:	e0cc      	b.n	8000bf6 <__aeabi_dadd+0x55e>
 8000a5c:	2420      	movs	r4, #32
 8000a5e:	4648      	mov	r0, r9
 8000a60:	1aa4      	subs	r4, r4, r2
 8000a62:	001d      	movs	r5, r3
 8000a64:	464e      	mov	r6, r9
 8000a66:	40a0      	lsls	r0, r4
 8000a68:	40d6      	lsrs	r6, r2
 8000a6a:	40a5      	lsls	r5, r4
 8000a6c:	0004      	movs	r4, r0
 8000a6e:	40d3      	lsrs	r3, r2
 8000a70:	4662      	mov	r2, ip
 8000a72:	4335      	orrs	r5, r6
 8000a74:	1e66      	subs	r6, r4, #1
 8000a76:	41b4      	sbcs	r4, r6
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	469c      	mov	ip, r3
 8000a7c:	4325      	orrs	r5, r4
 8000a7e:	e044      	b.n	8000b0a <__aeabi_dadd+0x472>
 8000a80:	4662      	mov	r2, ip
 8000a82:	433a      	orrs	r2, r7
 8000a84:	0015      	movs	r5, r2
 8000a86:	1e6f      	subs	r7, r5, #1
 8000a88:	41bd      	sbcs	r5, r7
 8000a8a:	444d      	add	r5, r9
 8000a8c:	454d      	cmp	r5, r9
 8000a8e:	4189      	sbcs	r1, r1
 8000a90:	4249      	negs	r1, r1
 8000a92:	4688      	mov	r8, r1
 8000a94:	4498      	add	r8, r3
 8000a96:	4643      	mov	r3, r8
 8000a98:	021b      	lsls	r3, r3, #8
 8000a9a:	d400      	bmi.n	8000a9e <__aeabi_dadd+0x406>
 8000a9c:	e718      	b.n	80008d0 <__aeabi_dadd+0x238>
 8000a9e:	4bb1      	ldr	r3, [pc, #708]	; (8000d64 <__aeabi_dadd+0x6cc>)
 8000aa0:	3601      	adds	r6, #1
 8000aa2:	429e      	cmp	r6, r3
 8000aa4:	d049      	beq.n	8000b3a <__aeabi_dadd+0x4a2>
 8000aa6:	4642      	mov	r2, r8
 8000aa8:	4baf      	ldr	r3, [pc, #700]	; (8000d68 <__aeabi_dadd+0x6d0>)
 8000aaa:	2101      	movs	r1, #1
 8000aac:	401a      	ands	r2, r3
 8000aae:	0013      	movs	r3, r2
 8000ab0:	086a      	lsrs	r2, r5, #1
 8000ab2:	400d      	ands	r5, r1
 8000ab4:	4315      	orrs	r5, r2
 8000ab6:	07d9      	lsls	r1, r3, #31
 8000ab8:	085b      	lsrs	r3, r3, #1
 8000aba:	4698      	mov	r8, r3
 8000abc:	430d      	orrs	r5, r1
 8000abe:	e665      	b.n	800078c <__aeabi_dadd+0xf4>
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	3e1f      	subs	r6, #31
 8000ac4:	40f0      	lsrs	r0, r6
 8000ac6:	2a20      	cmp	r2, #32
 8000ac8:	d003      	beq.n	8000ad2 <__aeabi_dadd+0x43a>
 8000aca:	2140      	movs	r1, #64	; 0x40
 8000acc:	1a8a      	subs	r2, r1, r2
 8000ace:	4093      	lsls	r3, r2
 8000ad0:	431d      	orrs	r5, r3
 8000ad2:	1e69      	subs	r1, r5, #1
 8000ad4:	418d      	sbcs	r5, r1
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	2600      	movs	r6, #0
 8000ada:	4698      	mov	r8, r3
 8000adc:	4305      	orrs	r5, r0
 8000ade:	e6f7      	b.n	80008d0 <__aeabi_dadd+0x238>
 8000ae0:	0011      	movs	r1, r2
 8000ae2:	4665      	mov	r5, ip
 8000ae4:	3920      	subs	r1, #32
 8000ae6:	40cd      	lsrs	r5, r1
 8000ae8:	2a20      	cmp	r2, #32
 8000aea:	d004      	beq.n	8000af6 <__aeabi_dadd+0x45e>
 8000aec:	2040      	movs	r0, #64	; 0x40
 8000aee:	4661      	mov	r1, ip
 8000af0:	1a82      	subs	r2, r0, r2
 8000af2:	4091      	lsls	r1, r2
 8000af4:	430f      	orrs	r7, r1
 8000af6:	0039      	movs	r1, r7
 8000af8:	1e4f      	subs	r7, r1, #1
 8000afa:	41b9      	sbcs	r1, r7
 8000afc:	4329      	orrs	r1, r5
 8000afe:	e60f      	b.n	8000720 <__aeabi_dadd+0x88>
 8000b00:	464a      	mov	r2, r9
 8000b02:	4313      	orrs	r3, r2
 8000b04:	001d      	movs	r5, r3
 8000b06:	1e6b      	subs	r3, r5, #1
 8000b08:	419d      	sbcs	r5, r3
 8000b0a:	1b7d      	subs	r5, r7, r5
 8000b0c:	42af      	cmp	r7, r5
 8000b0e:	419b      	sbcs	r3, r3
 8000b10:	4662      	mov	r2, ip
 8000b12:	425b      	negs	r3, r3
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	4698      	mov	r8, r3
 8000b18:	4654      	mov	r4, sl
 8000b1a:	000e      	movs	r6, r1
 8000b1c:	e607      	b.n	800072e <__aeabi_dadd+0x96>
 8000b1e:	4648      	mov	r0, r9
 8000b20:	4318      	orrs	r0, r3
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x48e>
 8000b24:	e0b3      	b.n	8000c8e <__aeabi_dadd+0x5f6>
 8000b26:	1e50      	subs	r0, r2, #1
 8000b28:	2a01      	cmp	r2, #1
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_dadd+0x496>
 8000b2c:	e10d      	b.n	8000d4a <__aeabi_dadd+0x6b2>
 8000b2e:	4d8d      	ldr	r5, [pc, #564]	; (8000d64 <__aeabi_dadd+0x6cc>)
 8000b30:	42aa      	cmp	r2, r5
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dadd+0x49e>
 8000b34:	e0a5      	b.n	8000c82 <__aeabi_dadd+0x5ea>
 8000b36:	0002      	movs	r2, r0
 8000b38:	e710      	b.n	800095c <__aeabi_dadd+0x2c4>
 8000b3a:	0032      	movs	r2, r6
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	e644      	b.n	80007cc <__aeabi_dadd+0x134>
 8000b42:	2120      	movs	r1, #32
 8000b44:	0038      	movs	r0, r7
 8000b46:	1a89      	subs	r1, r1, r2
 8000b48:	4665      	mov	r5, ip
 8000b4a:	408f      	lsls	r7, r1
 8000b4c:	408d      	lsls	r5, r1
 8000b4e:	40d0      	lsrs	r0, r2
 8000b50:	1e79      	subs	r1, r7, #1
 8000b52:	418f      	sbcs	r7, r1
 8000b54:	4305      	orrs	r5, r0
 8000b56:	433d      	orrs	r5, r7
 8000b58:	4667      	mov	r7, ip
 8000b5a:	40d7      	lsrs	r7, r2
 8000b5c:	19db      	adds	r3, r3, r7
 8000b5e:	e794      	b.n	8000a8a <__aeabi_dadd+0x3f2>
 8000b60:	4a80      	ldr	r2, [pc, #512]	; (8000d64 <__aeabi_dadd+0x6cc>)
 8000b62:	4290      	cmp	r0, r2
 8000b64:	d100      	bne.n	8000b68 <__aeabi_dadd+0x4d0>
 8000b66:	e0ec      	b.n	8000d42 <__aeabi_dadd+0x6aa>
 8000b68:	0039      	movs	r1, r7
 8000b6a:	4449      	add	r1, r9
 8000b6c:	4549      	cmp	r1, r9
 8000b6e:	4192      	sbcs	r2, r2
 8000b70:	4463      	add	r3, ip
 8000b72:	4252      	negs	r2, r2
 8000b74:	189b      	adds	r3, r3, r2
 8000b76:	07dd      	lsls	r5, r3, #31
 8000b78:	0849      	lsrs	r1, r1, #1
 8000b7a:	085b      	lsrs	r3, r3, #1
 8000b7c:	4698      	mov	r8, r3
 8000b7e:	0006      	movs	r6, r0
 8000b80:	430d      	orrs	r5, r1
 8000b82:	e6a5      	b.n	80008d0 <__aeabi_dadd+0x238>
 8000b84:	464a      	mov	r2, r9
 8000b86:	1abd      	subs	r5, r7, r2
 8000b88:	42af      	cmp	r7, r5
 8000b8a:	4189      	sbcs	r1, r1
 8000b8c:	4662      	mov	r2, ip
 8000b8e:	4249      	negs	r1, r1
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	1a5b      	subs	r3, r3, r1
 8000b94:	4698      	mov	r8, r3
 8000b96:	4654      	mov	r4, sl
 8000b98:	e5d1      	b.n	800073e <__aeabi_dadd+0xa6>
 8000b9a:	076c      	lsls	r4, r5, #29
 8000b9c:	08f9      	lsrs	r1, r7, #3
 8000b9e:	4321      	orrs	r1, r4
 8000ba0:	08eb      	lsrs	r3, r5, #3
 8000ba2:	0004      	movs	r4, r0
 8000ba4:	e69d      	b.n	80008e2 <__aeabi_dadd+0x24a>
 8000ba6:	464a      	mov	r2, r9
 8000ba8:	431a      	orrs	r2, r3
 8000baa:	d175      	bne.n	8000c98 <__aeabi_dadd+0x600>
 8000bac:	4661      	mov	r1, ip
 8000bae:	4339      	orrs	r1, r7
 8000bb0:	d114      	bne.n	8000bdc <__aeabi_dadd+0x544>
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	2400      	movs	r4, #0
 8000bb6:	031b      	lsls	r3, r3, #12
 8000bb8:	e6bc      	b.n	8000934 <__aeabi_dadd+0x29c>
 8000bba:	464a      	mov	r2, r9
 8000bbc:	1bd5      	subs	r5, r2, r7
 8000bbe:	45a9      	cmp	r9, r5
 8000bc0:	4189      	sbcs	r1, r1
 8000bc2:	4662      	mov	r2, ip
 8000bc4:	4249      	negs	r1, r1
 8000bc6:	1a9b      	subs	r3, r3, r2
 8000bc8:	1a5b      	subs	r3, r3, r1
 8000bca:	4698      	mov	r8, r3
 8000bcc:	2601      	movs	r6, #1
 8000bce:	e5ae      	b.n	800072e <__aeabi_dadd+0x96>
 8000bd0:	464a      	mov	r2, r9
 8000bd2:	08d1      	lsrs	r1, r2, #3
 8000bd4:	075a      	lsls	r2, r3, #29
 8000bd6:	4311      	orrs	r1, r2
 8000bd8:	08db      	lsrs	r3, r3, #3
 8000bda:	e6a7      	b.n	800092c <__aeabi_dadd+0x294>
 8000bdc:	4663      	mov	r3, ip
 8000bde:	08f9      	lsrs	r1, r7, #3
 8000be0:	075a      	lsls	r2, r3, #29
 8000be2:	4654      	mov	r4, sl
 8000be4:	4311      	orrs	r1, r2
 8000be6:	08db      	lsrs	r3, r3, #3
 8000be8:	e6a0      	b.n	800092c <__aeabi_dadd+0x294>
 8000bea:	464a      	mov	r2, r9
 8000bec:	4313      	orrs	r3, r2
 8000bee:	001d      	movs	r5, r3
 8000bf0:	1e6b      	subs	r3, r5, #1
 8000bf2:	419d      	sbcs	r5, r3
 8000bf4:	e6c7      	b.n	8000986 <__aeabi_dadd+0x2ee>
 8000bf6:	0014      	movs	r4, r2
 8000bf8:	001e      	movs	r6, r3
 8000bfa:	3c20      	subs	r4, #32
 8000bfc:	40e6      	lsrs	r6, r4
 8000bfe:	2a20      	cmp	r2, #32
 8000c00:	d005      	beq.n	8000c0e <__aeabi_dadd+0x576>
 8000c02:	2440      	movs	r4, #64	; 0x40
 8000c04:	1aa2      	subs	r2, r4, r2
 8000c06:	4093      	lsls	r3, r2
 8000c08:	464a      	mov	r2, r9
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	4691      	mov	r9, r2
 8000c0e:	464d      	mov	r5, r9
 8000c10:	1e6b      	subs	r3, r5, #1
 8000c12:	419d      	sbcs	r5, r3
 8000c14:	4335      	orrs	r5, r6
 8000c16:	e778      	b.n	8000b0a <__aeabi_dadd+0x472>
 8000c18:	464a      	mov	r2, r9
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	d000      	beq.n	8000c20 <__aeabi_dadd+0x588>
 8000c1e:	e66b      	b.n	80008f8 <__aeabi_dadd+0x260>
 8000c20:	076b      	lsls	r3, r5, #29
 8000c22:	08f9      	lsrs	r1, r7, #3
 8000c24:	4319      	orrs	r1, r3
 8000c26:	08eb      	lsrs	r3, r5, #3
 8000c28:	e680      	b.n	800092c <__aeabi_dadd+0x294>
 8000c2a:	4661      	mov	r1, ip
 8000c2c:	4339      	orrs	r1, r7
 8000c2e:	d054      	beq.n	8000cda <__aeabi_dadd+0x642>
 8000c30:	4663      	mov	r3, ip
 8000c32:	08f9      	lsrs	r1, r7, #3
 8000c34:	075c      	lsls	r4, r3, #29
 8000c36:	4321      	orrs	r1, r4
 8000c38:	08db      	lsrs	r3, r3, #3
 8000c3a:	0004      	movs	r4, r0
 8000c3c:	e654      	b.n	80008e8 <__aeabi_dadd+0x250>
 8000c3e:	464a      	mov	r2, r9
 8000c40:	1abd      	subs	r5, r7, r2
 8000c42:	42af      	cmp	r7, r5
 8000c44:	4189      	sbcs	r1, r1
 8000c46:	4662      	mov	r2, ip
 8000c48:	4249      	negs	r1, r1
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	4698      	mov	r8, r3
 8000c50:	0004      	movs	r4, r0
 8000c52:	2601      	movs	r6, #1
 8000c54:	e56b      	b.n	800072e <__aeabi_dadd+0x96>
 8000c56:	464a      	mov	r2, r9
 8000c58:	1bd5      	subs	r5, r2, r7
 8000c5a:	45a9      	cmp	r9, r5
 8000c5c:	4189      	sbcs	r1, r1
 8000c5e:	4662      	mov	r2, ip
 8000c60:	4249      	negs	r1, r1
 8000c62:	1a9a      	subs	r2, r3, r2
 8000c64:	1a52      	subs	r2, r2, r1
 8000c66:	4690      	mov	r8, r2
 8000c68:	0212      	lsls	r2, r2, #8
 8000c6a:	d532      	bpl.n	8000cd2 <__aeabi_dadd+0x63a>
 8000c6c:	464a      	mov	r2, r9
 8000c6e:	1abd      	subs	r5, r7, r2
 8000c70:	42af      	cmp	r7, r5
 8000c72:	4189      	sbcs	r1, r1
 8000c74:	4662      	mov	r2, ip
 8000c76:	4249      	negs	r1, r1
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	1a5b      	subs	r3, r3, r1
 8000c7c:	4698      	mov	r8, r3
 8000c7e:	0004      	movs	r4, r0
 8000c80:	e584      	b.n	800078c <__aeabi_dadd+0xf4>
 8000c82:	4663      	mov	r3, ip
 8000c84:	08f9      	lsrs	r1, r7, #3
 8000c86:	075a      	lsls	r2, r3, #29
 8000c88:	4311      	orrs	r1, r2
 8000c8a:	08db      	lsrs	r3, r3, #3
 8000c8c:	e64e      	b.n	800092c <__aeabi_dadd+0x294>
 8000c8e:	08f9      	lsrs	r1, r7, #3
 8000c90:	0768      	lsls	r0, r5, #29
 8000c92:	4301      	orrs	r1, r0
 8000c94:	08eb      	lsrs	r3, r5, #3
 8000c96:	e624      	b.n	80008e2 <__aeabi_dadd+0x24a>
 8000c98:	4662      	mov	r2, ip
 8000c9a:	433a      	orrs	r2, r7
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_dadd+0x608>
 8000c9e:	e698      	b.n	80009d2 <__aeabi_dadd+0x33a>
 8000ca0:	464a      	mov	r2, r9
 8000ca2:	08d1      	lsrs	r1, r2, #3
 8000ca4:	075a      	lsls	r2, r3, #29
 8000ca6:	4311      	orrs	r1, r2
 8000ca8:	08da      	lsrs	r2, r3, #3
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	031b      	lsls	r3, r3, #12
 8000cae:	421a      	tst	r2, r3
 8000cb0:	d008      	beq.n	8000cc4 <__aeabi_dadd+0x62c>
 8000cb2:	4660      	mov	r0, ip
 8000cb4:	08c5      	lsrs	r5, r0, #3
 8000cb6:	421d      	tst	r5, r3
 8000cb8:	d104      	bne.n	8000cc4 <__aeabi_dadd+0x62c>
 8000cba:	4654      	mov	r4, sl
 8000cbc:	002a      	movs	r2, r5
 8000cbe:	08f9      	lsrs	r1, r7, #3
 8000cc0:	0743      	lsls	r3, r0, #29
 8000cc2:	4319      	orrs	r1, r3
 8000cc4:	0f4b      	lsrs	r3, r1, #29
 8000cc6:	00c9      	lsls	r1, r1, #3
 8000cc8:	075b      	lsls	r3, r3, #29
 8000cca:	08c9      	lsrs	r1, r1, #3
 8000ccc:	4319      	orrs	r1, r3
 8000cce:	0013      	movs	r3, r2
 8000cd0:	e62c      	b.n	800092c <__aeabi_dadd+0x294>
 8000cd2:	4641      	mov	r1, r8
 8000cd4:	4329      	orrs	r1, r5
 8000cd6:	d000      	beq.n	8000cda <__aeabi_dadd+0x642>
 8000cd8:	e5fa      	b.n	80008d0 <__aeabi_dadd+0x238>
 8000cda:	2300      	movs	r3, #0
 8000cdc:	000a      	movs	r2, r1
 8000cde:	2400      	movs	r4, #0
 8000ce0:	e602      	b.n	80008e8 <__aeabi_dadd+0x250>
 8000ce2:	076b      	lsls	r3, r5, #29
 8000ce4:	08f9      	lsrs	r1, r7, #3
 8000ce6:	4319      	orrs	r1, r3
 8000ce8:	08eb      	lsrs	r3, r5, #3
 8000cea:	e5fd      	b.n	80008e8 <__aeabi_dadd+0x250>
 8000cec:	4663      	mov	r3, ip
 8000cee:	08f9      	lsrs	r1, r7, #3
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4319      	orrs	r1, r3
 8000cf4:	4663      	mov	r3, ip
 8000cf6:	0004      	movs	r4, r0
 8000cf8:	08db      	lsrs	r3, r3, #3
 8000cfa:	e617      	b.n	800092c <__aeabi_dadd+0x294>
 8000cfc:	003d      	movs	r5, r7
 8000cfe:	444d      	add	r5, r9
 8000d00:	4463      	add	r3, ip
 8000d02:	454d      	cmp	r5, r9
 8000d04:	4189      	sbcs	r1, r1
 8000d06:	4698      	mov	r8, r3
 8000d08:	4249      	negs	r1, r1
 8000d0a:	4488      	add	r8, r1
 8000d0c:	4643      	mov	r3, r8
 8000d0e:	021b      	lsls	r3, r3, #8
 8000d10:	d400      	bmi.n	8000d14 <__aeabi_dadd+0x67c>
 8000d12:	e5dd      	b.n	80008d0 <__aeabi_dadd+0x238>
 8000d14:	4642      	mov	r2, r8
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <__aeabi_dadd+0x6d0>)
 8000d18:	2601      	movs	r6, #1
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	4690      	mov	r8, r2
 8000d1e:	e5d7      	b.n	80008d0 <__aeabi_dadd+0x238>
 8000d20:	0010      	movs	r0, r2
 8000d22:	001e      	movs	r6, r3
 8000d24:	3820      	subs	r0, #32
 8000d26:	40c6      	lsrs	r6, r0
 8000d28:	2a20      	cmp	r2, #32
 8000d2a:	d005      	beq.n	8000d38 <__aeabi_dadd+0x6a0>
 8000d2c:	2040      	movs	r0, #64	; 0x40
 8000d2e:	1a82      	subs	r2, r0, r2
 8000d30:	4093      	lsls	r3, r2
 8000d32:	464a      	mov	r2, r9
 8000d34:	431a      	orrs	r2, r3
 8000d36:	4691      	mov	r9, r2
 8000d38:	464d      	mov	r5, r9
 8000d3a:	1e6b      	subs	r3, r5, #1
 8000d3c:	419d      	sbcs	r5, r3
 8000d3e:	4335      	orrs	r5, r6
 8000d40:	e621      	b.n	8000986 <__aeabi_dadd+0x2ee>
 8000d42:	0002      	movs	r2, r0
 8000d44:	2300      	movs	r3, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	e540      	b.n	80007cc <__aeabi_dadd+0x134>
 8000d4a:	464a      	mov	r2, r9
 8000d4c:	19d5      	adds	r5, r2, r7
 8000d4e:	42bd      	cmp	r5, r7
 8000d50:	4189      	sbcs	r1, r1
 8000d52:	4463      	add	r3, ip
 8000d54:	4698      	mov	r8, r3
 8000d56:	4249      	negs	r1, r1
 8000d58:	4488      	add	r8, r1
 8000d5a:	e5b3      	b.n	80008c4 <__aeabi_dadd+0x22c>
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4a01      	ldr	r2, [pc, #4]	; (8000d64 <__aeabi_dadd+0x6cc>)
 8000d60:	000b      	movs	r3, r1
 8000d62:	e533      	b.n	80007cc <__aeabi_dadd+0x134>
 8000d64:	000007ff 	.word	0x000007ff
 8000d68:	ff7fffff 	.word	0xff7fffff

08000d6c <__aeabi_ddiv>:
 8000d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6e:	4657      	mov	r7, sl
 8000d70:	464e      	mov	r6, r9
 8000d72:	4645      	mov	r5, r8
 8000d74:	46de      	mov	lr, fp
 8000d76:	b5e0      	push	{r5, r6, r7, lr}
 8000d78:	4681      	mov	r9, r0
 8000d7a:	0005      	movs	r5, r0
 8000d7c:	030c      	lsls	r4, r1, #12
 8000d7e:	0048      	lsls	r0, r1, #1
 8000d80:	4692      	mov	sl, r2
 8000d82:	001f      	movs	r7, r3
 8000d84:	b085      	sub	sp, #20
 8000d86:	0b24      	lsrs	r4, r4, #12
 8000d88:	0d40      	lsrs	r0, r0, #21
 8000d8a:	0fce      	lsrs	r6, r1, #31
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d059      	beq.n	8000e44 <__aeabi_ddiv+0xd8>
 8000d90:	4b87      	ldr	r3, [pc, #540]	; (8000fb0 <__aeabi_ddiv+0x244>)
 8000d92:	4298      	cmp	r0, r3
 8000d94:	d100      	bne.n	8000d98 <__aeabi_ddiv+0x2c>
 8000d96:	e098      	b.n	8000eca <__aeabi_ddiv+0x15e>
 8000d98:	0f6b      	lsrs	r3, r5, #29
 8000d9a:	00e4      	lsls	r4, r4, #3
 8000d9c:	431c      	orrs	r4, r3
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	041b      	lsls	r3, r3, #16
 8000da2:	4323      	orrs	r3, r4
 8000da4:	4698      	mov	r8, r3
 8000da6:	4b83      	ldr	r3, [pc, #524]	; (8000fb4 <__aeabi_ddiv+0x248>)
 8000da8:	00ed      	lsls	r5, r5, #3
 8000daa:	469b      	mov	fp, r3
 8000dac:	2300      	movs	r3, #0
 8000dae:	4699      	mov	r9, r3
 8000db0:	4483      	add	fp, r0
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	033c      	lsls	r4, r7, #12
 8000db6:	007b      	lsls	r3, r7, #1
 8000db8:	4650      	mov	r0, sl
 8000dba:	0b24      	lsrs	r4, r4, #12
 8000dbc:	0d5b      	lsrs	r3, r3, #21
 8000dbe:	0fff      	lsrs	r7, r7, #31
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d067      	beq.n	8000e94 <__aeabi_ddiv+0x128>
 8000dc4:	4a7a      	ldr	r2, [pc, #488]	; (8000fb0 <__aeabi_ddiv+0x244>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d018      	beq.n	8000dfc <__aeabi_ddiv+0x90>
 8000dca:	497a      	ldr	r1, [pc, #488]	; (8000fb4 <__aeabi_ddiv+0x248>)
 8000dcc:	0f42      	lsrs	r2, r0, #29
 8000dce:	468c      	mov	ip, r1
 8000dd0:	00e4      	lsls	r4, r4, #3
 8000dd2:	4659      	mov	r1, fp
 8000dd4:	4314      	orrs	r4, r2
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	4463      	add	r3, ip
 8000dda:	0412      	lsls	r2, r2, #16
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	4314      	orrs	r4, r2
 8000de0:	469b      	mov	fp, r3
 8000de2:	00c2      	lsls	r2, r0, #3
 8000de4:	2000      	movs	r0, #0
 8000de6:	0033      	movs	r3, r6
 8000de8:	407b      	eors	r3, r7
 8000dea:	469a      	mov	sl, r3
 8000dec:	464b      	mov	r3, r9
 8000dee:	2b0f      	cmp	r3, #15
 8000df0:	d900      	bls.n	8000df4 <__aeabi_ddiv+0x88>
 8000df2:	e0ef      	b.n	8000fd4 <__aeabi_ddiv+0x268>
 8000df4:	4970      	ldr	r1, [pc, #448]	; (8000fb8 <__aeabi_ddiv+0x24c>)
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	58cb      	ldr	r3, [r1, r3]
 8000dfa:	469f      	mov	pc, r3
 8000dfc:	4b6f      	ldr	r3, [pc, #444]	; (8000fbc <__aeabi_ddiv+0x250>)
 8000dfe:	4652      	mov	r2, sl
 8000e00:	469c      	mov	ip, r3
 8000e02:	4322      	orrs	r2, r4
 8000e04:	44e3      	add	fp, ip
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	d000      	beq.n	8000e0c <__aeabi_ddiv+0xa0>
 8000e0a:	e095      	b.n	8000f38 <__aeabi_ddiv+0x1cc>
 8000e0c:	4649      	mov	r1, r9
 8000e0e:	2302      	movs	r3, #2
 8000e10:	4319      	orrs	r1, r3
 8000e12:	4689      	mov	r9, r1
 8000e14:	2400      	movs	r4, #0
 8000e16:	2002      	movs	r0, #2
 8000e18:	e7e5      	b.n	8000de6 <__aeabi_ddiv+0x7a>
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	2400      	movs	r4, #0
 8000e1e:	2500      	movs	r5, #0
 8000e20:	4652      	mov	r2, sl
 8000e22:	051b      	lsls	r3, r3, #20
 8000e24:	4323      	orrs	r3, r4
 8000e26:	07d2      	lsls	r2, r2, #31
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	0028      	movs	r0, r5
 8000e2c:	0019      	movs	r1, r3
 8000e2e:	b005      	add	sp, #20
 8000e30:	bcf0      	pop	{r4, r5, r6, r7}
 8000e32:	46bb      	mov	fp, r7
 8000e34:	46b2      	mov	sl, r6
 8000e36:	46a9      	mov	r9, r5
 8000e38:	46a0      	mov	r8, r4
 8000e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e3c:	2400      	movs	r4, #0
 8000e3e:	2500      	movs	r5, #0
 8000e40:	4b5b      	ldr	r3, [pc, #364]	; (8000fb0 <__aeabi_ddiv+0x244>)
 8000e42:	e7ed      	b.n	8000e20 <__aeabi_ddiv+0xb4>
 8000e44:	464b      	mov	r3, r9
 8000e46:	4323      	orrs	r3, r4
 8000e48:	4698      	mov	r8, r3
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_ddiv+0xe2>
 8000e4c:	e089      	b.n	8000f62 <__aeabi_ddiv+0x1f6>
 8000e4e:	2c00      	cmp	r4, #0
 8000e50:	d100      	bne.n	8000e54 <__aeabi_ddiv+0xe8>
 8000e52:	e1e0      	b.n	8001216 <__aeabi_ddiv+0x4aa>
 8000e54:	0020      	movs	r0, r4
 8000e56:	f001 fb07 	bl	8002468 <__clzsi2>
 8000e5a:	0001      	movs	r1, r0
 8000e5c:	0002      	movs	r2, r0
 8000e5e:	390b      	subs	r1, #11
 8000e60:	231d      	movs	r3, #29
 8000e62:	1a5b      	subs	r3, r3, r1
 8000e64:	4649      	mov	r1, r9
 8000e66:	0010      	movs	r0, r2
 8000e68:	40d9      	lsrs	r1, r3
 8000e6a:	3808      	subs	r0, #8
 8000e6c:	4084      	lsls	r4, r0
 8000e6e:	000b      	movs	r3, r1
 8000e70:	464d      	mov	r5, r9
 8000e72:	4323      	orrs	r3, r4
 8000e74:	4698      	mov	r8, r3
 8000e76:	4085      	lsls	r5, r0
 8000e78:	4851      	ldr	r0, [pc, #324]	; (8000fc0 <__aeabi_ddiv+0x254>)
 8000e7a:	033c      	lsls	r4, r7, #12
 8000e7c:	1a83      	subs	r3, r0, r2
 8000e7e:	469b      	mov	fp, r3
 8000e80:	2300      	movs	r3, #0
 8000e82:	4699      	mov	r9, r3
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	007b      	lsls	r3, r7, #1
 8000e88:	4650      	mov	r0, sl
 8000e8a:	0b24      	lsrs	r4, r4, #12
 8000e8c:	0d5b      	lsrs	r3, r3, #21
 8000e8e:	0fff      	lsrs	r7, r7, #31
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d197      	bne.n	8000dc4 <__aeabi_ddiv+0x58>
 8000e94:	4652      	mov	r2, sl
 8000e96:	4322      	orrs	r2, r4
 8000e98:	d055      	beq.n	8000f46 <__aeabi_ddiv+0x1da>
 8000e9a:	2c00      	cmp	r4, #0
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_ddiv+0x134>
 8000e9e:	e1ca      	b.n	8001236 <__aeabi_ddiv+0x4ca>
 8000ea0:	0020      	movs	r0, r4
 8000ea2:	f001 fae1 	bl	8002468 <__clzsi2>
 8000ea6:	0002      	movs	r2, r0
 8000ea8:	3a0b      	subs	r2, #11
 8000eaa:	231d      	movs	r3, #29
 8000eac:	0001      	movs	r1, r0
 8000eae:	1a9b      	subs	r3, r3, r2
 8000eb0:	4652      	mov	r2, sl
 8000eb2:	3908      	subs	r1, #8
 8000eb4:	40da      	lsrs	r2, r3
 8000eb6:	408c      	lsls	r4, r1
 8000eb8:	4314      	orrs	r4, r2
 8000eba:	4652      	mov	r2, sl
 8000ebc:	408a      	lsls	r2, r1
 8000ebe:	4b41      	ldr	r3, [pc, #260]	; (8000fc4 <__aeabi_ddiv+0x258>)
 8000ec0:	4458      	add	r0, fp
 8000ec2:	469b      	mov	fp, r3
 8000ec4:	4483      	add	fp, r0
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	e78d      	b.n	8000de6 <__aeabi_ddiv+0x7a>
 8000eca:	464b      	mov	r3, r9
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	4698      	mov	r8, r3
 8000ed0:	d140      	bne.n	8000f54 <__aeabi_ddiv+0x1e8>
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	4699      	mov	r9, r3
 8000ed6:	3b06      	subs	r3, #6
 8000ed8:	2500      	movs	r5, #0
 8000eda:	4683      	mov	fp, r0
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	e769      	b.n	8000db4 <__aeabi_ddiv+0x48>
 8000ee0:	46b2      	mov	sl, r6
 8000ee2:	9b00      	ldr	r3, [sp, #0]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d0a9      	beq.n	8000e3c <__aeabi_ddiv+0xd0>
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d100      	bne.n	8000eee <__aeabi_ddiv+0x182>
 8000eec:	e211      	b.n	8001312 <__aeabi_ddiv+0x5a6>
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d093      	beq.n	8000e1a <__aeabi_ddiv+0xae>
 8000ef2:	4a35      	ldr	r2, [pc, #212]	; (8000fc8 <__aeabi_ddiv+0x25c>)
 8000ef4:	445a      	add	r2, fp
 8000ef6:	2a00      	cmp	r2, #0
 8000ef8:	dc00      	bgt.n	8000efc <__aeabi_ddiv+0x190>
 8000efa:	e13c      	b.n	8001176 <__aeabi_ddiv+0x40a>
 8000efc:	076b      	lsls	r3, r5, #29
 8000efe:	d000      	beq.n	8000f02 <__aeabi_ddiv+0x196>
 8000f00:	e1a7      	b.n	8001252 <__aeabi_ddiv+0x4e6>
 8000f02:	08ed      	lsrs	r5, r5, #3
 8000f04:	4643      	mov	r3, r8
 8000f06:	01db      	lsls	r3, r3, #7
 8000f08:	d506      	bpl.n	8000f18 <__aeabi_ddiv+0x1ac>
 8000f0a:	4642      	mov	r2, r8
 8000f0c:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <__aeabi_ddiv+0x260>)
 8000f0e:	401a      	ands	r2, r3
 8000f10:	4690      	mov	r8, r2
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	00d2      	lsls	r2, r2, #3
 8000f16:	445a      	add	r2, fp
 8000f18:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <__aeabi_ddiv+0x264>)
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	dc8e      	bgt.n	8000e3c <__aeabi_ddiv+0xd0>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	0552      	lsls	r2, r2, #21
 8000f22:	0758      	lsls	r0, r3, #29
 8000f24:	025c      	lsls	r4, r3, #9
 8000f26:	4305      	orrs	r5, r0
 8000f28:	0b24      	lsrs	r4, r4, #12
 8000f2a:	0d53      	lsrs	r3, r2, #21
 8000f2c:	e778      	b.n	8000e20 <__aeabi_ddiv+0xb4>
 8000f2e:	46ba      	mov	sl, r7
 8000f30:	46a0      	mov	r8, r4
 8000f32:	0015      	movs	r5, r2
 8000f34:	9000      	str	r0, [sp, #0]
 8000f36:	e7d4      	b.n	8000ee2 <__aeabi_ddiv+0x176>
 8000f38:	464a      	mov	r2, r9
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	4691      	mov	r9, r2
 8000f40:	2003      	movs	r0, #3
 8000f42:	4652      	mov	r2, sl
 8000f44:	e74f      	b.n	8000de6 <__aeabi_ddiv+0x7a>
 8000f46:	4649      	mov	r1, r9
 8000f48:	2301      	movs	r3, #1
 8000f4a:	4319      	orrs	r1, r3
 8000f4c:	4689      	mov	r9, r1
 8000f4e:	2400      	movs	r4, #0
 8000f50:	2001      	movs	r0, #1
 8000f52:	e748      	b.n	8000de6 <__aeabi_ddiv+0x7a>
 8000f54:	230c      	movs	r3, #12
 8000f56:	4699      	mov	r9, r3
 8000f58:	3b09      	subs	r3, #9
 8000f5a:	46a0      	mov	r8, r4
 8000f5c:	4683      	mov	fp, r0
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	e728      	b.n	8000db4 <__aeabi_ddiv+0x48>
 8000f62:	2304      	movs	r3, #4
 8000f64:	4699      	mov	r9, r3
 8000f66:	2300      	movs	r3, #0
 8000f68:	469b      	mov	fp, r3
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	2500      	movs	r5, #0
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	e720      	b.n	8000db4 <__aeabi_ddiv+0x48>
 8000f72:	2300      	movs	r3, #0
 8000f74:	2480      	movs	r4, #128	; 0x80
 8000f76:	469a      	mov	sl, r3
 8000f78:	2500      	movs	r5, #0
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <__aeabi_ddiv+0x244>)
 8000f7c:	0324      	lsls	r4, r4, #12
 8000f7e:	e74f      	b.n	8000e20 <__aeabi_ddiv+0xb4>
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	4641      	mov	r1, r8
 8000f84:	031b      	lsls	r3, r3, #12
 8000f86:	4219      	tst	r1, r3
 8000f88:	d008      	beq.n	8000f9c <__aeabi_ddiv+0x230>
 8000f8a:	421c      	tst	r4, r3
 8000f8c:	d106      	bne.n	8000f9c <__aeabi_ddiv+0x230>
 8000f8e:	431c      	orrs	r4, r3
 8000f90:	0324      	lsls	r4, r4, #12
 8000f92:	46ba      	mov	sl, r7
 8000f94:	0015      	movs	r5, r2
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <__aeabi_ddiv+0x244>)
 8000f98:	0b24      	lsrs	r4, r4, #12
 8000f9a:	e741      	b.n	8000e20 <__aeabi_ddiv+0xb4>
 8000f9c:	2480      	movs	r4, #128	; 0x80
 8000f9e:	4643      	mov	r3, r8
 8000fa0:	0324      	lsls	r4, r4, #12
 8000fa2:	431c      	orrs	r4, r3
 8000fa4:	0324      	lsls	r4, r4, #12
 8000fa6:	46b2      	mov	sl, r6
 8000fa8:	4b01      	ldr	r3, [pc, #4]	; (8000fb0 <__aeabi_ddiv+0x244>)
 8000faa:	0b24      	lsrs	r4, r4, #12
 8000fac:	e738      	b.n	8000e20 <__aeabi_ddiv+0xb4>
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	000007ff 	.word	0x000007ff
 8000fb4:	fffffc01 	.word	0xfffffc01
 8000fb8:	08008e64 	.word	0x08008e64
 8000fbc:	fffff801 	.word	0xfffff801
 8000fc0:	fffffc0d 	.word	0xfffffc0d
 8000fc4:	000003f3 	.word	0x000003f3
 8000fc8:	000003ff 	.word	0x000003ff
 8000fcc:	feffffff 	.word	0xfeffffff
 8000fd0:	000007fe 	.word	0x000007fe
 8000fd4:	4544      	cmp	r4, r8
 8000fd6:	d200      	bcs.n	8000fda <__aeabi_ddiv+0x26e>
 8000fd8:	e116      	b.n	8001208 <__aeabi_ddiv+0x49c>
 8000fda:	d100      	bne.n	8000fde <__aeabi_ddiv+0x272>
 8000fdc:	e111      	b.n	8001202 <__aeabi_ddiv+0x496>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	425b      	negs	r3, r3
 8000fe2:	469c      	mov	ip, r3
 8000fe4:	002e      	movs	r6, r5
 8000fe6:	4640      	mov	r0, r8
 8000fe8:	2500      	movs	r5, #0
 8000fea:	44e3      	add	fp, ip
 8000fec:	0223      	lsls	r3, r4, #8
 8000fee:	0e14      	lsrs	r4, r2, #24
 8000ff0:	431c      	orrs	r4, r3
 8000ff2:	0c1b      	lsrs	r3, r3, #16
 8000ff4:	4699      	mov	r9, r3
 8000ff6:	0423      	lsls	r3, r4, #16
 8000ff8:	0c1f      	lsrs	r7, r3, #16
 8000ffa:	0212      	lsls	r2, r2, #8
 8000ffc:	4649      	mov	r1, r9
 8000ffe:	9200      	str	r2, [sp, #0]
 8001000:	9701      	str	r7, [sp, #4]
 8001002:	f7ff f923 	bl	800024c <__aeabi_uidivmod>
 8001006:	0002      	movs	r2, r0
 8001008:	437a      	muls	r2, r7
 800100a:	040b      	lsls	r3, r1, #16
 800100c:	0c31      	lsrs	r1, r6, #16
 800100e:	4680      	mov	r8, r0
 8001010:	4319      	orrs	r1, r3
 8001012:	428a      	cmp	r2, r1
 8001014:	d90b      	bls.n	800102e <__aeabi_ddiv+0x2c2>
 8001016:	2301      	movs	r3, #1
 8001018:	425b      	negs	r3, r3
 800101a:	469c      	mov	ip, r3
 800101c:	1909      	adds	r1, r1, r4
 800101e:	44e0      	add	r8, ip
 8001020:	428c      	cmp	r4, r1
 8001022:	d804      	bhi.n	800102e <__aeabi_ddiv+0x2c2>
 8001024:	428a      	cmp	r2, r1
 8001026:	d902      	bls.n	800102e <__aeabi_ddiv+0x2c2>
 8001028:	1e83      	subs	r3, r0, #2
 800102a:	4698      	mov	r8, r3
 800102c:	1909      	adds	r1, r1, r4
 800102e:	1a88      	subs	r0, r1, r2
 8001030:	4649      	mov	r1, r9
 8001032:	f7ff f90b 	bl	800024c <__aeabi_uidivmod>
 8001036:	0409      	lsls	r1, r1, #16
 8001038:	468c      	mov	ip, r1
 800103a:	0431      	lsls	r1, r6, #16
 800103c:	4666      	mov	r6, ip
 800103e:	9a01      	ldr	r2, [sp, #4]
 8001040:	0c09      	lsrs	r1, r1, #16
 8001042:	4342      	muls	r2, r0
 8001044:	0003      	movs	r3, r0
 8001046:	4331      	orrs	r1, r6
 8001048:	428a      	cmp	r2, r1
 800104a:	d904      	bls.n	8001056 <__aeabi_ddiv+0x2ea>
 800104c:	1909      	adds	r1, r1, r4
 800104e:	3b01      	subs	r3, #1
 8001050:	428c      	cmp	r4, r1
 8001052:	d800      	bhi.n	8001056 <__aeabi_ddiv+0x2ea>
 8001054:	e111      	b.n	800127a <__aeabi_ddiv+0x50e>
 8001056:	1a89      	subs	r1, r1, r2
 8001058:	4642      	mov	r2, r8
 800105a:	9e00      	ldr	r6, [sp, #0]
 800105c:	0412      	lsls	r2, r2, #16
 800105e:	431a      	orrs	r2, r3
 8001060:	0c33      	lsrs	r3, r6, #16
 8001062:	001f      	movs	r7, r3
 8001064:	0c10      	lsrs	r0, r2, #16
 8001066:	4690      	mov	r8, r2
 8001068:	9302      	str	r3, [sp, #8]
 800106a:	0413      	lsls	r3, r2, #16
 800106c:	0432      	lsls	r2, r6, #16
 800106e:	0c16      	lsrs	r6, r2, #16
 8001070:	0032      	movs	r2, r6
 8001072:	0c1b      	lsrs	r3, r3, #16
 8001074:	435a      	muls	r2, r3
 8001076:	9603      	str	r6, [sp, #12]
 8001078:	437b      	muls	r3, r7
 800107a:	4346      	muls	r6, r0
 800107c:	4378      	muls	r0, r7
 800107e:	0c17      	lsrs	r7, r2, #16
 8001080:	46bc      	mov	ip, r7
 8001082:	199b      	adds	r3, r3, r6
 8001084:	4463      	add	r3, ip
 8001086:	429e      	cmp	r6, r3
 8001088:	d903      	bls.n	8001092 <__aeabi_ddiv+0x326>
 800108a:	2680      	movs	r6, #128	; 0x80
 800108c:	0276      	lsls	r6, r6, #9
 800108e:	46b4      	mov	ip, r6
 8001090:	4460      	add	r0, ip
 8001092:	0c1e      	lsrs	r6, r3, #16
 8001094:	1830      	adds	r0, r6, r0
 8001096:	0416      	lsls	r6, r2, #16
 8001098:	041b      	lsls	r3, r3, #16
 800109a:	0c36      	lsrs	r6, r6, #16
 800109c:	199e      	adds	r6, r3, r6
 800109e:	4281      	cmp	r1, r0
 80010a0:	d200      	bcs.n	80010a4 <__aeabi_ddiv+0x338>
 80010a2:	e09c      	b.n	80011de <__aeabi_ddiv+0x472>
 80010a4:	d100      	bne.n	80010a8 <__aeabi_ddiv+0x33c>
 80010a6:	e097      	b.n	80011d8 <__aeabi_ddiv+0x46c>
 80010a8:	1bae      	subs	r6, r5, r6
 80010aa:	1a09      	subs	r1, r1, r0
 80010ac:	42b5      	cmp	r5, r6
 80010ae:	4180      	sbcs	r0, r0
 80010b0:	4240      	negs	r0, r0
 80010b2:	1a08      	subs	r0, r1, r0
 80010b4:	4284      	cmp	r4, r0
 80010b6:	d100      	bne.n	80010ba <__aeabi_ddiv+0x34e>
 80010b8:	e111      	b.n	80012de <__aeabi_ddiv+0x572>
 80010ba:	4649      	mov	r1, r9
 80010bc:	f7ff f8c6 	bl	800024c <__aeabi_uidivmod>
 80010c0:	9a01      	ldr	r2, [sp, #4]
 80010c2:	040b      	lsls	r3, r1, #16
 80010c4:	4342      	muls	r2, r0
 80010c6:	0c31      	lsrs	r1, r6, #16
 80010c8:	0005      	movs	r5, r0
 80010ca:	4319      	orrs	r1, r3
 80010cc:	428a      	cmp	r2, r1
 80010ce:	d907      	bls.n	80010e0 <__aeabi_ddiv+0x374>
 80010d0:	1909      	adds	r1, r1, r4
 80010d2:	3d01      	subs	r5, #1
 80010d4:	428c      	cmp	r4, r1
 80010d6:	d803      	bhi.n	80010e0 <__aeabi_ddiv+0x374>
 80010d8:	428a      	cmp	r2, r1
 80010da:	d901      	bls.n	80010e0 <__aeabi_ddiv+0x374>
 80010dc:	1e85      	subs	r5, r0, #2
 80010de:	1909      	adds	r1, r1, r4
 80010e0:	1a88      	subs	r0, r1, r2
 80010e2:	4649      	mov	r1, r9
 80010e4:	f7ff f8b2 	bl	800024c <__aeabi_uidivmod>
 80010e8:	0409      	lsls	r1, r1, #16
 80010ea:	468c      	mov	ip, r1
 80010ec:	0431      	lsls	r1, r6, #16
 80010ee:	4666      	mov	r6, ip
 80010f0:	9a01      	ldr	r2, [sp, #4]
 80010f2:	0c09      	lsrs	r1, r1, #16
 80010f4:	4342      	muls	r2, r0
 80010f6:	0003      	movs	r3, r0
 80010f8:	4331      	orrs	r1, r6
 80010fa:	428a      	cmp	r2, r1
 80010fc:	d907      	bls.n	800110e <__aeabi_ddiv+0x3a2>
 80010fe:	1909      	adds	r1, r1, r4
 8001100:	3b01      	subs	r3, #1
 8001102:	428c      	cmp	r4, r1
 8001104:	d803      	bhi.n	800110e <__aeabi_ddiv+0x3a2>
 8001106:	428a      	cmp	r2, r1
 8001108:	d901      	bls.n	800110e <__aeabi_ddiv+0x3a2>
 800110a:	1e83      	subs	r3, r0, #2
 800110c:	1909      	adds	r1, r1, r4
 800110e:	9e03      	ldr	r6, [sp, #12]
 8001110:	1a89      	subs	r1, r1, r2
 8001112:	0032      	movs	r2, r6
 8001114:	042d      	lsls	r5, r5, #16
 8001116:	431d      	orrs	r5, r3
 8001118:	9f02      	ldr	r7, [sp, #8]
 800111a:	042b      	lsls	r3, r5, #16
 800111c:	0c1b      	lsrs	r3, r3, #16
 800111e:	435a      	muls	r2, r3
 8001120:	437b      	muls	r3, r7
 8001122:	469c      	mov	ip, r3
 8001124:	0c28      	lsrs	r0, r5, #16
 8001126:	4346      	muls	r6, r0
 8001128:	0c13      	lsrs	r3, r2, #16
 800112a:	44b4      	add	ip, r6
 800112c:	4463      	add	r3, ip
 800112e:	4378      	muls	r0, r7
 8001130:	429e      	cmp	r6, r3
 8001132:	d903      	bls.n	800113c <__aeabi_ddiv+0x3d0>
 8001134:	2680      	movs	r6, #128	; 0x80
 8001136:	0276      	lsls	r6, r6, #9
 8001138:	46b4      	mov	ip, r6
 800113a:	4460      	add	r0, ip
 800113c:	0c1e      	lsrs	r6, r3, #16
 800113e:	0412      	lsls	r2, r2, #16
 8001140:	041b      	lsls	r3, r3, #16
 8001142:	0c12      	lsrs	r2, r2, #16
 8001144:	1830      	adds	r0, r6, r0
 8001146:	189b      	adds	r3, r3, r2
 8001148:	4281      	cmp	r1, r0
 800114a:	d306      	bcc.n	800115a <__aeabi_ddiv+0x3ee>
 800114c:	d002      	beq.n	8001154 <__aeabi_ddiv+0x3e8>
 800114e:	2301      	movs	r3, #1
 8001150:	431d      	orrs	r5, r3
 8001152:	e6ce      	b.n	8000ef2 <__aeabi_ddiv+0x186>
 8001154:	2b00      	cmp	r3, #0
 8001156:	d100      	bne.n	800115a <__aeabi_ddiv+0x3ee>
 8001158:	e6cb      	b.n	8000ef2 <__aeabi_ddiv+0x186>
 800115a:	1861      	adds	r1, r4, r1
 800115c:	1e6e      	subs	r6, r5, #1
 800115e:	42a1      	cmp	r1, r4
 8001160:	d200      	bcs.n	8001164 <__aeabi_ddiv+0x3f8>
 8001162:	e0a4      	b.n	80012ae <__aeabi_ddiv+0x542>
 8001164:	4281      	cmp	r1, r0
 8001166:	d200      	bcs.n	800116a <__aeabi_ddiv+0x3fe>
 8001168:	e0c9      	b.n	80012fe <__aeabi_ddiv+0x592>
 800116a:	d100      	bne.n	800116e <__aeabi_ddiv+0x402>
 800116c:	e0d9      	b.n	8001322 <__aeabi_ddiv+0x5b6>
 800116e:	0035      	movs	r5, r6
 8001170:	e7ed      	b.n	800114e <__aeabi_ddiv+0x3e2>
 8001172:	2501      	movs	r5, #1
 8001174:	426d      	negs	r5, r5
 8001176:	2101      	movs	r1, #1
 8001178:	1a89      	subs	r1, r1, r2
 800117a:	2938      	cmp	r1, #56	; 0x38
 800117c:	dd00      	ble.n	8001180 <__aeabi_ddiv+0x414>
 800117e:	e64c      	b.n	8000e1a <__aeabi_ddiv+0xae>
 8001180:	291f      	cmp	r1, #31
 8001182:	dc00      	bgt.n	8001186 <__aeabi_ddiv+0x41a>
 8001184:	e07f      	b.n	8001286 <__aeabi_ddiv+0x51a>
 8001186:	231f      	movs	r3, #31
 8001188:	425b      	negs	r3, r3
 800118a:	1a9a      	subs	r2, r3, r2
 800118c:	4643      	mov	r3, r8
 800118e:	40d3      	lsrs	r3, r2
 8001190:	2920      	cmp	r1, #32
 8001192:	d004      	beq.n	800119e <__aeabi_ddiv+0x432>
 8001194:	4644      	mov	r4, r8
 8001196:	4a65      	ldr	r2, [pc, #404]	; (800132c <__aeabi_ddiv+0x5c0>)
 8001198:	445a      	add	r2, fp
 800119a:	4094      	lsls	r4, r2
 800119c:	4325      	orrs	r5, r4
 800119e:	1e6a      	subs	r2, r5, #1
 80011a0:	4195      	sbcs	r5, r2
 80011a2:	2207      	movs	r2, #7
 80011a4:	432b      	orrs	r3, r5
 80011a6:	0015      	movs	r5, r2
 80011a8:	2400      	movs	r4, #0
 80011aa:	401d      	ands	r5, r3
 80011ac:	421a      	tst	r2, r3
 80011ae:	d100      	bne.n	80011b2 <__aeabi_ddiv+0x446>
 80011b0:	e0a1      	b.n	80012f6 <__aeabi_ddiv+0x58a>
 80011b2:	220f      	movs	r2, #15
 80011b4:	2400      	movs	r4, #0
 80011b6:	401a      	ands	r2, r3
 80011b8:	2a04      	cmp	r2, #4
 80011ba:	d100      	bne.n	80011be <__aeabi_ddiv+0x452>
 80011bc:	e098      	b.n	80012f0 <__aeabi_ddiv+0x584>
 80011be:	1d1a      	adds	r2, r3, #4
 80011c0:	429a      	cmp	r2, r3
 80011c2:	419b      	sbcs	r3, r3
 80011c4:	425b      	negs	r3, r3
 80011c6:	18e4      	adds	r4, r4, r3
 80011c8:	0013      	movs	r3, r2
 80011ca:	0222      	lsls	r2, r4, #8
 80011cc:	d400      	bmi.n	80011d0 <__aeabi_ddiv+0x464>
 80011ce:	e08f      	b.n	80012f0 <__aeabi_ddiv+0x584>
 80011d0:	2301      	movs	r3, #1
 80011d2:	2400      	movs	r4, #0
 80011d4:	2500      	movs	r5, #0
 80011d6:	e623      	b.n	8000e20 <__aeabi_ddiv+0xb4>
 80011d8:	42b5      	cmp	r5, r6
 80011da:	d300      	bcc.n	80011de <__aeabi_ddiv+0x472>
 80011dc:	e764      	b.n	80010a8 <__aeabi_ddiv+0x33c>
 80011de:	4643      	mov	r3, r8
 80011e0:	1e5a      	subs	r2, r3, #1
 80011e2:	9b00      	ldr	r3, [sp, #0]
 80011e4:	469c      	mov	ip, r3
 80011e6:	4465      	add	r5, ip
 80011e8:	001f      	movs	r7, r3
 80011ea:	429d      	cmp	r5, r3
 80011ec:	419b      	sbcs	r3, r3
 80011ee:	425b      	negs	r3, r3
 80011f0:	191b      	adds	r3, r3, r4
 80011f2:	18c9      	adds	r1, r1, r3
 80011f4:	428c      	cmp	r4, r1
 80011f6:	d23a      	bcs.n	800126e <__aeabi_ddiv+0x502>
 80011f8:	4288      	cmp	r0, r1
 80011fa:	d863      	bhi.n	80012c4 <__aeabi_ddiv+0x558>
 80011fc:	d060      	beq.n	80012c0 <__aeabi_ddiv+0x554>
 80011fe:	4690      	mov	r8, r2
 8001200:	e752      	b.n	80010a8 <__aeabi_ddiv+0x33c>
 8001202:	42aa      	cmp	r2, r5
 8001204:	d900      	bls.n	8001208 <__aeabi_ddiv+0x49c>
 8001206:	e6ea      	b.n	8000fde <__aeabi_ddiv+0x272>
 8001208:	4643      	mov	r3, r8
 800120a:	07de      	lsls	r6, r3, #31
 800120c:	0858      	lsrs	r0, r3, #1
 800120e:	086b      	lsrs	r3, r5, #1
 8001210:	431e      	orrs	r6, r3
 8001212:	07ed      	lsls	r5, r5, #31
 8001214:	e6ea      	b.n	8000fec <__aeabi_ddiv+0x280>
 8001216:	4648      	mov	r0, r9
 8001218:	f001 f926 	bl	8002468 <__clzsi2>
 800121c:	0001      	movs	r1, r0
 800121e:	0002      	movs	r2, r0
 8001220:	3115      	adds	r1, #21
 8001222:	3220      	adds	r2, #32
 8001224:	291c      	cmp	r1, #28
 8001226:	dc00      	bgt.n	800122a <__aeabi_ddiv+0x4be>
 8001228:	e61a      	b.n	8000e60 <__aeabi_ddiv+0xf4>
 800122a:	464b      	mov	r3, r9
 800122c:	3808      	subs	r0, #8
 800122e:	4083      	lsls	r3, r0
 8001230:	2500      	movs	r5, #0
 8001232:	4698      	mov	r8, r3
 8001234:	e620      	b.n	8000e78 <__aeabi_ddiv+0x10c>
 8001236:	f001 f917 	bl	8002468 <__clzsi2>
 800123a:	0003      	movs	r3, r0
 800123c:	001a      	movs	r2, r3
 800123e:	3215      	adds	r2, #21
 8001240:	3020      	adds	r0, #32
 8001242:	2a1c      	cmp	r2, #28
 8001244:	dc00      	bgt.n	8001248 <__aeabi_ddiv+0x4dc>
 8001246:	e630      	b.n	8000eaa <__aeabi_ddiv+0x13e>
 8001248:	4654      	mov	r4, sl
 800124a:	3b08      	subs	r3, #8
 800124c:	2200      	movs	r2, #0
 800124e:	409c      	lsls	r4, r3
 8001250:	e635      	b.n	8000ebe <__aeabi_ddiv+0x152>
 8001252:	230f      	movs	r3, #15
 8001254:	402b      	ands	r3, r5
 8001256:	2b04      	cmp	r3, #4
 8001258:	d100      	bne.n	800125c <__aeabi_ddiv+0x4f0>
 800125a:	e652      	b.n	8000f02 <__aeabi_ddiv+0x196>
 800125c:	2305      	movs	r3, #5
 800125e:	425b      	negs	r3, r3
 8001260:	42ab      	cmp	r3, r5
 8001262:	419b      	sbcs	r3, r3
 8001264:	3504      	adds	r5, #4
 8001266:	425b      	negs	r3, r3
 8001268:	08ed      	lsrs	r5, r5, #3
 800126a:	4498      	add	r8, r3
 800126c:	e64a      	b.n	8000f04 <__aeabi_ddiv+0x198>
 800126e:	428c      	cmp	r4, r1
 8001270:	d1c5      	bne.n	80011fe <__aeabi_ddiv+0x492>
 8001272:	42af      	cmp	r7, r5
 8001274:	d9c0      	bls.n	80011f8 <__aeabi_ddiv+0x48c>
 8001276:	4690      	mov	r8, r2
 8001278:	e716      	b.n	80010a8 <__aeabi_ddiv+0x33c>
 800127a:	428a      	cmp	r2, r1
 800127c:	d800      	bhi.n	8001280 <__aeabi_ddiv+0x514>
 800127e:	e6ea      	b.n	8001056 <__aeabi_ddiv+0x2ea>
 8001280:	1e83      	subs	r3, r0, #2
 8001282:	1909      	adds	r1, r1, r4
 8001284:	e6e7      	b.n	8001056 <__aeabi_ddiv+0x2ea>
 8001286:	4a2a      	ldr	r2, [pc, #168]	; (8001330 <__aeabi_ddiv+0x5c4>)
 8001288:	0028      	movs	r0, r5
 800128a:	445a      	add	r2, fp
 800128c:	4643      	mov	r3, r8
 800128e:	4095      	lsls	r5, r2
 8001290:	4093      	lsls	r3, r2
 8001292:	40c8      	lsrs	r0, r1
 8001294:	1e6a      	subs	r2, r5, #1
 8001296:	4195      	sbcs	r5, r2
 8001298:	4644      	mov	r4, r8
 800129a:	4303      	orrs	r3, r0
 800129c:	432b      	orrs	r3, r5
 800129e:	40cc      	lsrs	r4, r1
 80012a0:	075a      	lsls	r2, r3, #29
 80012a2:	d092      	beq.n	80011ca <__aeabi_ddiv+0x45e>
 80012a4:	220f      	movs	r2, #15
 80012a6:	401a      	ands	r2, r3
 80012a8:	2a04      	cmp	r2, #4
 80012aa:	d188      	bne.n	80011be <__aeabi_ddiv+0x452>
 80012ac:	e78d      	b.n	80011ca <__aeabi_ddiv+0x45e>
 80012ae:	0035      	movs	r5, r6
 80012b0:	4281      	cmp	r1, r0
 80012b2:	d000      	beq.n	80012b6 <__aeabi_ddiv+0x54a>
 80012b4:	e74b      	b.n	800114e <__aeabi_ddiv+0x3e2>
 80012b6:	9a00      	ldr	r2, [sp, #0]
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d000      	beq.n	80012be <__aeabi_ddiv+0x552>
 80012bc:	e747      	b.n	800114e <__aeabi_ddiv+0x3e2>
 80012be:	e618      	b.n	8000ef2 <__aeabi_ddiv+0x186>
 80012c0:	42ae      	cmp	r6, r5
 80012c2:	d99c      	bls.n	80011fe <__aeabi_ddiv+0x492>
 80012c4:	2302      	movs	r3, #2
 80012c6:	425b      	negs	r3, r3
 80012c8:	469c      	mov	ip, r3
 80012ca:	9b00      	ldr	r3, [sp, #0]
 80012cc:	44e0      	add	r8, ip
 80012ce:	469c      	mov	ip, r3
 80012d0:	4465      	add	r5, ip
 80012d2:	429d      	cmp	r5, r3
 80012d4:	419b      	sbcs	r3, r3
 80012d6:	425b      	negs	r3, r3
 80012d8:	191b      	adds	r3, r3, r4
 80012da:	18c9      	adds	r1, r1, r3
 80012dc:	e6e4      	b.n	80010a8 <__aeabi_ddiv+0x33c>
 80012de:	4a15      	ldr	r2, [pc, #84]	; (8001334 <__aeabi_ddiv+0x5c8>)
 80012e0:	445a      	add	r2, fp
 80012e2:	2a00      	cmp	r2, #0
 80012e4:	dc00      	bgt.n	80012e8 <__aeabi_ddiv+0x57c>
 80012e6:	e744      	b.n	8001172 <__aeabi_ddiv+0x406>
 80012e8:	2301      	movs	r3, #1
 80012ea:	2500      	movs	r5, #0
 80012ec:	4498      	add	r8, r3
 80012ee:	e609      	b.n	8000f04 <__aeabi_ddiv+0x198>
 80012f0:	0765      	lsls	r5, r4, #29
 80012f2:	0264      	lsls	r4, r4, #9
 80012f4:	0b24      	lsrs	r4, r4, #12
 80012f6:	08db      	lsrs	r3, r3, #3
 80012f8:	431d      	orrs	r5, r3
 80012fa:	2300      	movs	r3, #0
 80012fc:	e590      	b.n	8000e20 <__aeabi_ddiv+0xb4>
 80012fe:	9e00      	ldr	r6, [sp, #0]
 8001300:	3d02      	subs	r5, #2
 8001302:	0072      	lsls	r2, r6, #1
 8001304:	42b2      	cmp	r2, r6
 8001306:	41bf      	sbcs	r7, r7
 8001308:	427f      	negs	r7, r7
 800130a:	193c      	adds	r4, r7, r4
 800130c:	1909      	adds	r1, r1, r4
 800130e:	9200      	str	r2, [sp, #0]
 8001310:	e7ce      	b.n	80012b0 <__aeabi_ddiv+0x544>
 8001312:	2480      	movs	r4, #128	; 0x80
 8001314:	4643      	mov	r3, r8
 8001316:	0324      	lsls	r4, r4, #12
 8001318:	431c      	orrs	r4, r3
 800131a:	0324      	lsls	r4, r4, #12
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <__aeabi_ddiv+0x5cc>)
 800131e:	0b24      	lsrs	r4, r4, #12
 8001320:	e57e      	b.n	8000e20 <__aeabi_ddiv+0xb4>
 8001322:	9a00      	ldr	r2, [sp, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	d3ea      	bcc.n	80012fe <__aeabi_ddiv+0x592>
 8001328:	0035      	movs	r5, r6
 800132a:	e7c4      	b.n	80012b6 <__aeabi_ddiv+0x54a>
 800132c:	0000043e 	.word	0x0000043e
 8001330:	0000041e 	.word	0x0000041e
 8001334:	000003ff 	.word	0x000003ff
 8001338:	000007ff 	.word	0x000007ff

0800133c <__eqdf2>:
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133e:	464f      	mov	r7, r9
 8001340:	4646      	mov	r6, r8
 8001342:	46d6      	mov	lr, sl
 8001344:	4694      	mov	ip, r2
 8001346:	4691      	mov	r9, r2
 8001348:	031a      	lsls	r2, r3, #12
 800134a:	0b12      	lsrs	r2, r2, #12
 800134c:	4d18      	ldr	r5, [pc, #96]	; (80013b0 <__eqdf2+0x74>)
 800134e:	b5c0      	push	{r6, r7, lr}
 8001350:	004c      	lsls	r4, r1, #1
 8001352:	030f      	lsls	r7, r1, #12
 8001354:	4692      	mov	sl, r2
 8001356:	005a      	lsls	r2, r3, #1
 8001358:	0006      	movs	r6, r0
 800135a:	4680      	mov	r8, r0
 800135c:	0b3f      	lsrs	r7, r7, #12
 800135e:	2001      	movs	r0, #1
 8001360:	0d64      	lsrs	r4, r4, #21
 8001362:	0fc9      	lsrs	r1, r1, #31
 8001364:	0d52      	lsrs	r2, r2, #21
 8001366:	0fdb      	lsrs	r3, r3, #31
 8001368:	42ac      	cmp	r4, r5
 800136a:	d00a      	beq.n	8001382 <__eqdf2+0x46>
 800136c:	42aa      	cmp	r2, r5
 800136e:	d003      	beq.n	8001378 <__eqdf2+0x3c>
 8001370:	4294      	cmp	r4, r2
 8001372:	d101      	bne.n	8001378 <__eqdf2+0x3c>
 8001374:	4557      	cmp	r7, sl
 8001376:	d00d      	beq.n	8001394 <__eqdf2+0x58>
 8001378:	bce0      	pop	{r5, r6, r7}
 800137a:	46ba      	mov	sl, r7
 800137c:	46b1      	mov	r9, r6
 800137e:	46a8      	mov	r8, r5
 8001380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001382:	003d      	movs	r5, r7
 8001384:	4335      	orrs	r5, r6
 8001386:	d1f7      	bne.n	8001378 <__eqdf2+0x3c>
 8001388:	42a2      	cmp	r2, r4
 800138a:	d1f5      	bne.n	8001378 <__eqdf2+0x3c>
 800138c:	4652      	mov	r2, sl
 800138e:	4665      	mov	r5, ip
 8001390:	432a      	orrs	r2, r5
 8001392:	d1f1      	bne.n	8001378 <__eqdf2+0x3c>
 8001394:	2001      	movs	r0, #1
 8001396:	45c8      	cmp	r8, r9
 8001398:	d1ee      	bne.n	8001378 <__eqdf2+0x3c>
 800139a:	4299      	cmp	r1, r3
 800139c:	d006      	beq.n	80013ac <__eqdf2+0x70>
 800139e:	2c00      	cmp	r4, #0
 80013a0:	d1ea      	bne.n	8001378 <__eqdf2+0x3c>
 80013a2:	433e      	orrs	r6, r7
 80013a4:	0030      	movs	r0, r6
 80013a6:	1e46      	subs	r6, r0, #1
 80013a8:	41b0      	sbcs	r0, r6
 80013aa:	e7e5      	b.n	8001378 <__eqdf2+0x3c>
 80013ac:	2000      	movs	r0, #0
 80013ae:	e7e3      	b.n	8001378 <__eqdf2+0x3c>
 80013b0:	000007ff 	.word	0x000007ff

080013b4 <__gedf2>:
 80013b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b6:	464e      	mov	r6, r9
 80013b8:	4645      	mov	r5, r8
 80013ba:	4657      	mov	r7, sl
 80013bc:	46de      	mov	lr, fp
 80013be:	0004      	movs	r4, r0
 80013c0:	0018      	movs	r0, r3
 80013c2:	b5e0      	push	{r5, r6, r7, lr}
 80013c4:	0016      	movs	r6, r2
 80013c6:	031b      	lsls	r3, r3, #12
 80013c8:	0b1b      	lsrs	r3, r3, #12
 80013ca:	4d32      	ldr	r5, [pc, #200]	; (8001494 <__gedf2+0xe0>)
 80013cc:	030f      	lsls	r7, r1, #12
 80013ce:	004a      	lsls	r2, r1, #1
 80013d0:	4699      	mov	r9, r3
 80013d2:	0043      	lsls	r3, r0, #1
 80013d4:	46a4      	mov	ip, r4
 80013d6:	46b0      	mov	r8, r6
 80013d8:	0b3f      	lsrs	r7, r7, #12
 80013da:	0d52      	lsrs	r2, r2, #21
 80013dc:	0fc9      	lsrs	r1, r1, #31
 80013de:	0d5b      	lsrs	r3, r3, #21
 80013e0:	0fc0      	lsrs	r0, r0, #31
 80013e2:	42aa      	cmp	r2, r5
 80013e4:	d029      	beq.n	800143a <__gedf2+0x86>
 80013e6:	42ab      	cmp	r3, r5
 80013e8:	d018      	beq.n	800141c <__gedf2+0x68>
 80013ea:	2a00      	cmp	r2, #0
 80013ec:	d12a      	bne.n	8001444 <__gedf2+0x90>
 80013ee:	433c      	orrs	r4, r7
 80013f0:	46a3      	mov	fp, r4
 80013f2:	4265      	negs	r5, r4
 80013f4:	4165      	adcs	r5, r4
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d102      	bne.n	8001400 <__gedf2+0x4c>
 80013fa:	464c      	mov	r4, r9
 80013fc:	4326      	orrs	r6, r4
 80013fe:	d027      	beq.n	8001450 <__gedf2+0x9c>
 8001400:	2d00      	cmp	r5, #0
 8001402:	d115      	bne.n	8001430 <__gedf2+0x7c>
 8001404:	4281      	cmp	r1, r0
 8001406:	d028      	beq.n	800145a <__gedf2+0xa6>
 8001408:	2002      	movs	r0, #2
 800140a:	3901      	subs	r1, #1
 800140c:	4008      	ands	r0, r1
 800140e:	3801      	subs	r0, #1
 8001410:	bcf0      	pop	{r4, r5, r6, r7}
 8001412:	46bb      	mov	fp, r7
 8001414:	46b2      	mov	sl, r6
 8001416:	46a9      	mov	r9, r5
 8001418:	46a0      	mov	r8, r4
 800141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141c:	464d      	mov	r5, r9
 800141e:	432e      	orrs	r6, r5
 8001420:	d12f      	bne.n	8001482 <__gedf2+0xce>
 8001422:	2a00      	cmp	r2, #0
 8001424:	d1ee      	bne.n	8001404 <__gedf2+0x50>
 8001426:	433c      	orrs	r4, r7
 8001428:	4265      	negs	r5, r4
 800142a:	4165      	adcs	r5, r4
 800142c:	2d00      	cmp	r5, #0
 800142e:	d0e9      	beq.n	8001404 <__gedf2+0x50>
 8001430:	2800      	cmp	r0, #0
 8001432:	d1ed      	bne.n	8001410 <__gedf2+0x5c>
 8001434:	2001      	movs	r0, #1
 8001436:	4240      	negs	r0, r0
 8001438:	e7ea      	b.n	8001410 <__gedf2+0x5c>
 800143a:	003d      	movs	r5, r7
 800143c:	4325      	orrs	r5, r4
 800143e:	d120      	bne.n	8001482 <__gedf2+0xce>
 8001440:	4293      	cmp	r3, r2
 8001442:	d0eb      	beq.n	800141c <__gedf2+0x68>
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1dd      	bne.n	8001404 <__gedf2+0x50>
 8001448:	464c      	mov	r4, r9
 800144a:	4326      	orrs	r6, r4
 800144c:	d1da      	bne.n	8001404 <__gedf2+0x50>
 800144e:	e7db      	b.n	8001408 <__gedf2+0x54>
 8001450:	465b      	mov	r3, fp
 8001452:	2000      	movs	r0, #0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0db      	beq.n	8001410 <__gedf2+0x5c>
 8001458:	e7d6      	b.n	8001408 <__gedf2+0x54>
 800145a:	429a      	cmp	r2, r3
 800145c:	dc0a      	bgt.n	8001474 <__gedf2+0xc0>
 800145e:	dbe7      	blt.n	8001430 <__gedf2+0x7c>
 8001460:	454f      	cmp	r7, r9
 8001462:	d8d1      	bhi.n	8001408 <__gedf2+0x54>
 8001464:	d010      	beq.n	8001488 <__gedf2+0xd4>
 8001466:	2000      	movs	r0, #0
 8001468:	454f      	cmp	r7, r9
 800146a:	d2d1      	bcs.n	8001410 <__gedf2+0x5c>
 800146c:	2900      	cmp	r1, #0
 800146e:	d0e1      	beq.n	8001434 <__gedf2+0x80>
 8001470:	0008      	movs	r0, r1
 8001472:	e7cd      	b.n	8001410 <__gedf2+0x5c>
 8001474:	4243      	negs	r3, r0
 8001476:	4158      	adcs	r0, r3
 8001478:	2302      	movs	r3, #2
 800147a:	4240      	negs	r0, r0
 800147c:	4018      	ands	r0, r3
 800147e:	3801      	subs	r0, #1
 8001480:	e7c6      	b.n	8001410 <__gedf2+0x5c>
 8001482:	2002      	movs	r0, #2
 8001484:	4240      	negs	r0, r0
 8001486:	e7c3      	b.n	8001410 <__gedf2+0x5c>
 8001488:	45c4      	cmp	ip, r8
 800148a:	d8bd      	bhi.n	8001408 <__gedf2+0x54>
 800148c:	2000      	movs	r0, #0
 800148e:	45c4      	cmp	ip, r8
 8001490:	d2be      	bcs.n	8001410 <__gedf2+0x5c>
 8001492:	e7eb      	b.n	800146c <__gedf2+0xb8>
 8001494:	000007ff 	.word	0x000007ff

08001498 <__ledf2>:
 8001498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149a:	464e      	mov	r6, r9
 800149c:	4645      	mov	r5, r8
 800149e:	4657      	mov	r7, sl
 80014a0:	46de      	mov	lr, fp
 80014a2:	0004      	movs	r4, r0
 80014a4:	0018      	movs	r0, r3
 80014a6:	b5e0      	push	{r5, r6, r7, lr}
 80014a8:	0016      	movs	r6, r2
 80014aa:	031b      	lsls	r3, r3, #12
 80014ac:	0b1b      	lsrs	r3, r3, #12
 80014ae:	4d31      	ldr	r5, [pc, #196]	; (8001574 <__ledf2+0xdc>)
 80014b0:	030f      	lsls	r7, r1, #12
 80014b2:	004a      	lsls	r2, r1, #1
 80014b4:	4699      	mov	r9, r3
 80014b6:	0043      	lsls	r3, r0, #1
 80014b8:	46a4      	mov	ip, r4
 80014ba:	46b0      	mov	r8, r6
 80014bc:	0b3f      	lsrs	r7, r7, #12
 80014be:	0d52      	lsrs	r2, r2, #21
 80014c0:	0fc9      	lsrs	r1, r1, #31
 80014c2:	0d5b      	lsrs	r3, r3, #21
 80014c4:	0fc0      	lsrs	r0, r0, #31
 80014c6:	42aa      	cmp	r2, r5
 80014c8:	d011      	beq.n	80014ee <__ledf2+0x56>
 80014ca:	42ab      	cmp	r3, r5
 80014cc:	d014      	beq.n	80014f8 <__ledf2+0x60>
 80014ce:	2a00      	cmp	r2, #0
 80014d0:	d12f      	bne.n	8001532 <__ledf2+0x9a>
 80014d2:	433c      	orrs	r4, r7
 80014d4:	46a3      	mov	fp, r4
 80014d6:	4265      	negs	r5, r4
 80014d8:	4165      	adcs	r5, r4
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d114      	bne.n	8001508 <__ledf2+0x70>
 80014de:	464c      	mov	r4, r9
 80014e0:	4326      	orrs	r6, r4
 80014e2:	d111      	bne.n	8001508 <__ledf2+0x70>
 80014e4:	465b      	mov	r3, fp
 80014e6:	2000      	movs	r0, #0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d017      	beq.n	800151c <__ledf2+0x84>
 80014ec:	e010      	b.n	8001510 <__ledf2+0x78>
 80014ee:	003d      	movs	r5, r7
 80014f0:	4325      	orrs	r5, r4
 80014f2:	d112      	bne.n	800151a <__ledf2+0x82>
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d11c      	bne.n	8001532 <__ledf2+0x9a>
 80014f8:	464d      	mov	r5, r9
 80014fa:	432e      	orrs	r6, r5
 80014fc:	d10d      	bne.n	800151a <__ledf2+0x82>
 80014fe:	2a00      	cmp	r2, #0
 8001500:	d104      	bne.n	800150c <__ledf2+0x74>
 8001502:	433c      	orrs	r4, r7
 8001504:	4265      	negs	r5, r4
 8001506:	4165      	adcs	r5, r4
 8001508:	2d00      	cmp	r5, #0
 800150a:	d10d      	bne.n	8001528 <__ledf2+0x90>
 800150c:	4281      	cmp	r1, r0
 800150e:	d016      	beq.n	800153e <__ledf2+0xa6>
 8001510:	2002      	movs	r0, #2
 8001512:	3901      	subs	r1, #1
 8001514:	4008      	ands	r0, r1
 8001516:	3801      	subs	r0, #1
 8001518:	e000      	b.n	800151c <__ledf2+0x84>
 800151a:	2002      	movs	r0, #2
 800151c:	bcf0      	pop	{r4, r5, r6, r7}
 800151e:	46bb      	mov	fp, r7
 8001520:	46b2      	mov	sl, r6
 8001522:	46a9      	mov	r9, r5
 8001524:	46a0      	mov	r8, r4
 8001526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001528:	2800      	cmp	r0, #0
 800152a:	d1f7      	bne.n	800151c <__ledf2+0x84>
 800152c:	2001      	movs	r0, #1
 800152e:	4240      	negs	r0, r0
 8001530:	e7f4      	b.n	800151c <__ledf2+0x84>
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1ea      	bne.n	800150c <__ledf2+0x74>
 8001536:	464c      	mov	r4, r9
 8001538:	4326      	orrs	r6, r4
 800153a:	d1e7      	bne.n	800150c <__ledf2+0x74>
 800153c:	e7e8      	b.n	8001510 <__ledf2+0x78>
 800153e:	429a      	cmp	r2, r3
 8001540:	dd06      	ble.n	8001550 <__ledf2+0xb8>
 8001542:	4243      	negs	r3, r0
 8001544:	4158      	adcs	r0, r3
 8001546:	2302      	movs	r3, #2
 8001548:	4240      	negs	r0, r0
 800154a:	4018      	ands	r0, r3
 800154c:	3801      	subs	r0, #1
 800154e:	e7e5      	b.n	800151c <__ledf2+0x84>
 8001550:	429a      	cmp	r2, r3
 8001552:	dbe9      	blt.n	8001528 <__ledf2+0x90>
 8001554:	454f      	cmp	r7, r9
 8001556:	d8db      	bhi.n	8001510 <__ledf2+0x78>
 8001558:	d006      	beq.n	8001568 <__ledf2+0xd0>
 800155a:	2000      	movs	r0, #0
 800155c:	454f      	cmp	r7, r9
 800155e:	d2dd      	bcs.n	800151c <__ledf2+0x84>
 8001560:	2900      	cmp	r1, #0
 8001562:	d0e3      	beq.n	800152c <__ledf2+0x94>
 8001564:	0008      	movs	r0, r1
 8001566:	e7d9      	b.n	800151c <__ledf2+0x84>
 8001568:	45c4      	cmp	ip, r8
 800156a:	d8d1      	bhi.n	8001510 <__ledf2+0x78>
 800156c:	2000      	movs	r0, #0
 800156e:	45c4      	cmp	ip, r8
 8001570:	d2d4      	bcs.n	800151c <__ledf2+0x84>
 8001572:	e7f5      	b.n	8001560 <__ledf2+0xc8>
 8001574:	000007ff 	.word	0x000007ff

08001578 <__aeabi_dmul>:
 8001578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157a:	4657      	mov	r7, sl
 800157c:	464e      	mov	r6, r9
 800157e:	4645      	mov	r5, r8
 8001580:	46de      	mov	lr, fp
 8001582:	b5e0      	push	{r5, r6, r7, lr}
 8001584:	4698      	mov	r8, r3
 8001586:	030c      	lsls	r4, r1, #12
 8001588:	004b      	lsls	r3, r1, #1
 800158a:	0006      	movs	r6, r0
 800158c:	4692      	mov	sl, r2
 800158e:	b087      	sub	sp, #28
 8001590:	0b24      	lsrs	r4, r4, #12
 8001592:	0d5b      	lsrs	r3, r3, #21
 8001594:	0fcf      	lsrs	r7, r1, #31
 8001596:	2b00      	cmp	r3, #0
 8001598:	d06c      	beq.n	8001674 <__aeabi_dmul+0xfc>
 800159a:	4add      	ldr	r2, [pc, #884]	; (8001910 <__aeabi_dmul+0x398>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d100      	bne.n	80015a2 <__aeabi_dmul+0x2a>
 80015a0:	e086      	b.n	80016b0 <__aeabi_dmul+0x138>
 80015a2:	0f42      	lsrs	r2, r0, #29
 80015a4:	00e4      	lsls	r4, r4, #3
 80015a6:	4314      	orrs	r4, r2
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	0412      	lsls	r2, r2, #16
 80015ac:	4314      	orrs	r4, r2
 80015ae:	4ad9      	ldr	r2, [pc, #868]	; (8001914 <__aeabi_dmul+0x39c>)
 80015b0:	00c5      	lsls	r5, r0, #3
 80015b2:	4694      	mov	ip, r2
 80015b4:	4463      	add	r3, ip
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2300      	movs	r3, #0
 80015ba:	4699      	mov	r9, r3
 80015bc:	469b      	mov	fp, r3
 80015be:	4643      	mov	r3, r8
 80015c0:	4642      	mov	r2, r8
 80015c2:	031e      	lsls	r6, r3, #12
 80015c4:	0fd2      	lsrs	r2, r2, #31
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4650      	mov	r0, sl
 80015ca:	4690      	mov	r8, r2
 80015cc:	0b36      	lsrs	r6, r6, #12
 80015ce:	0d5b      	lsrs	r3, r3, #21
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dmul+0x5c>
 80015d2:	e078      	b.n	80016c6 <__aeabi_dmul+0x14e>
 80015d4:	4ace      	ldr	r2, [pc, #824]	; (8001910 <__aeabi_dmul+0x398>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d01d      	beq.n	8001616 <__aeabi_dmul+0x9e>
 80015da:	49ce      	ldr	r1, [pc, #824]	; (8001914 <__aeabi_dmul+0x39c>)
 80015dc:	0f42      	lsrs	r2, r0, #29
 80015de:	468c      	mov	ip, r1
 80015e0:	9900      	ldr	r1, [sp, #0]
 80015e2:	4463      	add	r3, ip
 80015e4:	00f6      	lsls	r6, r6, #3
 80015e6:	468c      	mov	ip, r1
 80015e8:	4316      	orrs	r6, r2
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	449c      	add	ip, r3
 80015ee:	0412      	lsls	r2, r2, #16
 80015f0:	4663      	mov	r3, ip
 80015f2:	4316      	orrs	r6, r2
 80015f4:	00c2      	lsls	r2, r0, #3
 80015f6:	2000      	movs	r0, #0
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	9900      	ldr	r1, [sp, #0]
 80015fc:	4643      	mov	r3, r8
 80015fe:	3101      	adds	r1, #1
 8001600:	468c      	mov	ip, r1
 8001602:	4649      	mov	r1, r9
 8001604:	407b      	eors	r3, r7
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	290f      	cmp	r1, #15
 800160a:	d900      	bls.n	800160e <__aeabi_dmul+0x96>
 800160c:	e07e      	b.n	800170c <__aeabi_dmul+0x194>
 800160e:	4bc2      	ldr	r3, [pc, #776]	; (8001918 <__aeabi_dmul+0x3a0>)
 8001610:	0089      	lsls	r1, r1, #2
 8001612:	5859      	ldr	r1, [r3, r1]
 8001614:	468f      	mov	pc, r1
 8001616:	4652      	mov	r2, sl
 8001618:	9b00      	ldr	r3, [sp, #0]
 800161a:	4332      	orrs	r2, r6
 800161c:	d000      	beq.n	8001620 <__aeabi_dmul+0xa8>
 800161e:	e156      	b.n	80018ce <__aeabi_dmul+0x356>
 8001620:	49bb      	ldr	r1, [pc, #748]	; (8001910 <__aeabi_dmul+0x398>)
 8001622:	2600      	movs	r6, #0
 8001624:	468c      	mov	ip, r1
 8001626:	4463      	add	r3, ip
 8001628:	4649      	mov	r1, r9
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2302      	movs	r3, #2
 800162e:	4319      	orrs	r1, r3
 8001630:	4689      	mov	r9, r1
 8001632:	2002      	movs	r0, #2
 8001634:	e7e1      	b.n	80015fa <__aeabi_dmul+0x82>
 8001636:	4643      	mov	r3, r8
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	0034      	movs	r4, r6
 800163c:	0015      	movs	r5, r2
 800163e:	4683      	mov	fp, r0
 8001640:	465b      	mov	r3, fp
 8001642:	2b02      	cmp	r3, #2
 8001644:	d05e      	beq.n	8001704 <__aeabi_dmul+0x18c>
 8001646:	2b03      	cmp	r3, #3
 8001648:	d100      	bne.n	800164c <__aeabi_dmul+0xd4>
 800164a:	e1f3      	b.n	8001a34 <__aeabi_dmul+0x4bc>
 800164c:	2b01      	cmp	r3, #1
 800164e:	d000      	beq.n	8001652 <__aeabi_dmul+0xda>
 8001650:	e118      	b.n	8001884 <__aeabi_dmul+0x30c>
 8001652:	2200      	movs	r2, #0
 8001654:	2400      	movs	r4, #0
 8001656:	2500      	movs	r5, #0
 8001658:	9b01      	ldr	r3, [sp, #4]
 800165a:	0512      	lsls	r2, r2, #20
 800165c:	4322      	orrs	r2, r4
 800165e:	07db      	lsls	r3, r3, #31
 8001660:	431a      	orrs	r2, r3
 8001662:	0028      	movs	r0, r5
 8001664:	0011      	movs	r1, r2
 8001666:	b007      	add	sp, #28
 8001668:	bcf0      	pop	{r4, r5, r6, r7}
 800166a:	46bb      	mov	fp, r7
 800166c:	46b2      	mov	sl, r6
 800166e:	46a9      	mov	r9, r5
 8001670:	46a0      	mov	r8, r4
 8001672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001674:	0025      	movs	r5, r4
 8001676:	4305      	orrs	r5, r0
 8001678:	d100      	bne.n	800167c <__aeabi_dmul+0x104>
 800167a:	e141      	b.n	8001900 <__aeabi_dmul+0x388>
 800167c:	2c00      	cmp	r4, #0
 800167e:	d100      	bne.n	8001682 <__aeabi_dmul+0x10a>
 8001680:	e1ad      	b.n	80019de <__aeabi_dmul+0x466>
 8001682:	0020      	movs	r0, r4
 8001684:	f000 fef0 	bl	8002468 <__clzsi2>
 8001688:	0001      	movs	r1, r0
 800168a:	0002      	movs	r2, r0
 800168c:	390b      	subs	r1, #11
 800168e:	231d      	movs	r3, #29
 8001690:	0010      	movs	r0, r2
 8001692:	1a5b      	subs	r3, r3, r1
 8001694:	0031      	movs	r1, r6
 8001696:	0035      	movs	r5, r6
 8001698:	3808      	subs	r0, #8
 800169a:	4084      	lsls	r4, r0
 800169c:	40d9      	lsrs	r1, r3
 800169e:	4085      	lsls	r5, r0
 80016a0:	430c      	orrs	r4, r1
 80016a2:	489e      	ldr	r0, [pc, #632]	; (800191c <__aeabi_dmul+0x3a4>)
 80016a4:	1a83      	subs	r3, r0, r2
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2300      	movs	r3, #0
 80016aa:	4699      	mov	r9, r3
 80016ac:	469b      	mov	fp, r3
 80016ae:	e786      	b.n	80015be <__aeabi_dmul+0x46>
 80016b0:	0005      	movs	r5, r0
 80016b2:	4325      	orrs	r5, r4
 80016b4:	d000      	beq.n	80016b8 <__aeabi_dmul+0x140>
 80016b6:	e11c      	b.n	80018f2 <__aeabi_dmul+0x37a>
 80016b8:	2208      	movs	r2, #8
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2302      	movs	r3, #2
 80016be:	2400      	movs	r4, #0
 80016c0:	4691      	mov	r9, r2
 80016c2:	469b      	mov	fp, r3
 80016c4:	e77b      	b.n	80015be <__aeabi_dmul+0x46>
 80016c6:	4652      	mov	r2, sl
 80016c8:	4332      	orrs	r2, r6
 80016ca:	d100      	bne.n	80016ce <__aeabi_dmul+0x156>
 80016cc:	e10a      	b.n	80018e4 <__aeabi_dmul+0x36c>
 80016ce:	2e00      	cmp	r6, #0
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dmul+0x15c>
 80016d2:	e176      	b.n	80019c2 <__aeabi_dmul+0x44a>
 80016d4:	0030      	movs	r0, r6
 80016d6:	f000 fec7 	bl	8002468 <__clzsi2>
 80016da:	0002      	movs	r2, r0
 80016dc:	3a0b      	subs	r2, #11
 80016de:	231d      	movs	r3, #29
 80016e0:	0001      	movs	r1, r0
 80016e2:	1a9b      	subs	r3, r3, r2
 80016e4:	4652      	mov	r2, sl
 80016e6:	3908      	subs	r1, #8
 80016e8:	40da      	lsrs	r2, r3
 80016ea:	408e      	lsls	r6, r1
 80016ec:	4316      	orrs	r6, r2
 80016ee:	4652      	mov	r2, sl
 80016f0:	408a      	lsls	r2, r1
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	4989      	ldr	r1, [pc, #548]	; (800191c <__aeabi_dmul+0x3a4>)
 80016f6:	1a18      	subs	r0, r3, r0
 80016f8:	0003      	movs	r3, r0
 80016fa:	468c      	mov	ip, r1
 80016fc:	4463      	add	r3, ip
 80016fe:	2000      	movs	r0, #0
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	e77a      	b.n	80015fa <__aeabi_dmul+0x82>
 8001704:	2400      	movs	r4, #0
 8001706:	2500      	movs	r5, #0
 8001708:	4a81      	ldr	r2, [pc, #516]	; (8001910 <__aeabi_dmul+0x398>)
 800170a:	e7a5      	b.n	8001658 <__aeabi_dmul+0xe0>
 800170c:	0c2f      	lsrs	r7, r5, #16
 800170e:	042d      	lsls	r5, r5, #16
 8001710:	0c2d      	lsrs	r5, r5, #16
 8001712:	002b      	movs	r3, r5
 8001714:	0c11      	lsrs	r1, r2, #16
 8001716:	0412      	lsls	r2, r2, #16
 8001718:	0c12      	lsrs	r2, r2, #16
 800171a:	4353      	muls	r3, r2
 800171c:	4698      	mov	r8, r3
 800171e:	0013      	movs	r3, r2
 8001720:	0028      	movs	r0, r5
 8001722:	437b      	muls	r3, r7
 8001724:	4699      	mov	r9, r3
 8001726:	4348      	muls	r0, r1
 8001728:	4448      	add	r0, r9
 800172a:	4683      	mov	fp, r0
 800172c:	4640      	mov	r0, r8
 800172e:	000b      	movs	r3, r1
 8001730:	0c00      	lsrs	r0, r0, #16
 8001732:	4682      	mov	sl, r0
 8001734:	4658      	mov	r0, fp
 8001736:	437b      	muls	r3, r7
 8001738:	4450      	add	r0, sl
 800173a:	9302      	str	r3, [sp, #8]
 800173c:	4581      	cmp	r9, r0
 800173e:	d906      	bls.n	800174e <__aeabi_dmul+0x1d6>
 8001740:	469a      	mov	sl, r3
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	025b      	lsls	r3, r3, #9
 8001746:	4699      	mov	r9, r3
 8001748:	44ca      	add	sl, r9
 800174a:	4653      	mov	r3, sl
 800174c:	9302      	str	r3, [sp, #8]
 800174e:	0c03      	lsrs	r3, r0, #16
 8001750:	469b      	mov	fp, r3
 8001752:	4643      	mov	r3, r8
 8001754:	041b      	lsls	r3, r3, #16
 8001756:	0400      	lsls	r0, r0, #16
 8001758:	0c1b      	lsrs	r3, r3, #16
 800175a:	4698      	mov	r8, r3
 800175c:	0003      	movs	r3, r0
 800175e:	4443      	add	r3, r8
 8001760:	9304      	str	r3, [sp, #16]
 8001762:	0c33      	lsrs	r3, r6, #16
 8001764:	4699      	mov	r9, r3
 8001766:	002b      	movs	r3, r5
 8001768:	0436      	lsls	r6, r6, #16
 800176a:	0c36      	lsrs	r6, r6, #16
 800176c:	4373      	muls	r3, r6
 800176e:	4698      	mov	r8, r3
 8001770:	0033      	movs	r3, r6
 8001772:	437b      	muls	r3, r7
 8001774:	469a      	mov	sl, r3
 8001776:	464b      	mov	r3, r9
 8001778:	435d      	muls	r5, r3
 800177a:	435f      	muls	r7, r3
 800177c:	4643      	mov	r3, r8
 800177e:	4455      	add	r5, sl
 8001780:	0c18      	lsrs	r0, r3, #16
 8001782:	1940      	adds	r0, r0, r5
 8001784:	4582      	cmp	sl, r0
 8001786:	d903      	bls.n	8001790 <__aeabi_dmul+0x218>
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	025b      	lsls	r3, r3, #9
 800178c:	469a      	mov	sl, r3
 800178e:	4457      	add	r7, sl
 8001790:	0c05      	lsrs	r5, r0, #16
 8001792:	19eb      	adds	r3, r5, r7
 8001794:	9305      	str	r3, [sp, #20]
 8001796:	4643      	mov	r3, r8
 8001798:	041d      	lsls	r5, r3, #16
 800179a:	0c2d      	lsrs	r5, r5, #16
 800179c:	0400      	lsls	r0, r0, #16
 800179e:	1940      	adds	r0, r0, r5
 80017a0:	0c25      	lsrs	r5, r4, #16
 80017a2:	0424      	lsls	r4, r4, #16
 80017a4:	0c24      	lsrs	r4, r4, #16
 80017a6:	0027      	movs	r7, r4
 80017a8:	4357      	muls	r7, r2
 80017aa:	436a      	muls	r2, r5
 80017ac:	4690      	mov	r8, r2
 80017ae:	002a      	movs	r2, r5
 80017b0:	0c3b      	lsrs	r3, r7, #16
 80017b2:	469a      	mov	sl, r3
 80017b4:	434a      	muls	r2, r1
 80017b6:	4361      	muls	r1, r4
 80017b8:	4441      	add	r1, r8
 80017ba:	4451      	add	r1, sl
 80017bc:	4483      	add	fp, r0
 80017be:	4588      	cmp	r8, r1
 80017c0:	d903      	bls.n	80017ca <__aeabi_dmul+0x252>
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	025b      	lsls	r3, r3, #9
 80017c6:	4698      	mov	r8, r3
 80017c8:	4442      	add	r2, r8
 80017ca:	043f      	lsls	r7, r7, #16
 80017cc:	0c0b      	lsrs	r3, r1, #16
 80017ce:	0c3f      	lsrs	r7, r7, #16
 80017d0:	0409      	lsls	r1, r1, #16
 80017d2:	19c9      	adds	r1, r1, r7
 80017d4:	0027      	movs	r7, r4
 80017d6:	4698      	mov	r8, r3
 80017d8:	464b      	mov	r3, r9
 80017da:	4377      	muls	r7, r6
 80017dc:	435c      	muls	r4, r3
 80017de:	436e      	muls	r6, r5
 80017e0:	435d      	muls	r5, r3
 80017e2:	0c3b      	lsrs	r3, r7, #16
 80017e4:	4699      	mov	r9, r3
 80017e6:	19a4      	adds	r4, r4, r6
 80017e8:	444c      	add	r4, r9
 80017ea:	4442      	add	r2, r8
 80017ec:	9503      	str	r5, [sp, #12]
 80017ee:	42a6      	cmp	r6, r4
 80017f0:	d904      	bls.n	80017fc <__aeabi_dmul+0x284>
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	025b      	lsls	r3, r3, #9
 80017f6:	4698      	mov	r8, r3
 80017f8:	4445      	add	r5, r8
 80017fa:	9503      	str	r5, [sp, #12]
 80017fc:	9b02      	ldr	r3, [sp, #8]
 80017fe:	043f      	lsls	r7, r7, #16
 8001800:	445b      	add	r3, fp
 8001802:	001e      	movs	r6, r3
 8001804:	4283      	cmp	r3, r0
 8001806:	4180      	sbcs	r0, r0
 8001808:	0423      	lsls	r3, r4, #16
 800180a:	4698      	mov	r8, r3
 800180c:	9b05      	ldr	r3, [sp, #20]
 800180e:	0c3f      	lsrs	r7, r7, #16
 8001810:	4447      	add	r7, r8
 8001812:	4698      	mov	r8, r3
 8001814:	1876      	adds	r6, r6, r1
 8001816:	428e      	cmp	r6, r1
 8001818:	4189      	sbcs	r1, r1
 800181a:	4447      	add	r7, r8
 800181c:	4240      	negs	r0, r0
 800181e:	183d      	adds	r5, r7, r0
 8001820:	46a8      	mov	r8, r5
 8001822:	4693      	mov	fp, r2
 8001824:	4249      	negs	r1, r1
 8001826:	468a      	mov	sl, r1
 8001828:	44c3      	add	fp, r8
 800182a:	429f      	cmp	r7, r3
 800182c:	41bf      	sbcs	r7, r7
 800182e:	4580      	cmp	r8, r0
 8001830:	4180      	sbcs	r0, r0
 8001832:	9b03      	ldr	r3, [sp, #12]
 8001834:	44da      	add	sl, fp
 8001836:	4698      	mov	r8, r3
 8001838:	4653      	mov	r3, sl
 800183a:	4240      	negs	r0, r0
 800183c:	427f      	negs	r7, r7
 800183e:	4307      	orrs	r7, r0
 8001840:	0c24      	lsrs	r4, r4, #16
 8001842:	4593      	cmp	fp, r2
 8001844:	4192      	sbcs	r2, r2
 8001846:	458a      	cmp	sl, r1
 8001848:	4189      	sbcs	r1, r1
 800184a:	193f      	adds	r7, r7, r4
 800184c:	0ddc      	lsrs	r4, r3, #23
 800184e:	9b04      	ldr	r3, [sp, #16]
 8001850:	0275      	lsls	r5, r6, #9
 8001852:	431d      	orrs	r5, r3
 8001854:	1e68      	subs	r0, r5, #1
 8001856:	4185      	sbcs	r5, r0
 8001858:	4653      	mov	r3, sl
 800185a:	4252      	negs	r2, r2
 800185c:	4249      	negs	r1, r1
 800185e:	430a      	orrs	r2, r1
 8001860:	18bf      	adds	r7, r7, r2
 8001862:	4447      	add	r7, r8
 8001864:	0df6      	lsrs	r6, r6, #23
 8001866:	027f      	lsls	r7, r7, #9
 8001868:	4335      	orrs	r5, r6
 800186a:	025a      	lsls	r2, r3, #9
 800186c:	433c      	orrs	r4, r7
 800186e:	4315      	orrs	r5, r2
 8001870:	01fb      	lsls	r3, r7, #7
 8001872:	d400      	bmi.n	8001876 <__aeabi_dmul+0x2fe>
 8001874:	e0c1      	b.n	80019fa <__aeabi_dmul+0x482>
 8001876:	2101      	movs	r1, #1
 8001878:	086a      	lsrs	r2, r5, #1
 800187a:	400d      	ands	r5, r1
 800187c:	4315      	orrs	r5, r2
 800187e:	07e2      	lsls	r2, r4, #31
 8001880:	4315      	orrs	r5, r2
 8001882:	0864      	lsrs	r4, r4, #1
 8001884:	4926      	ldr	r1, [pc, #152]	; (8001920 <__aeabi_dmul+0x3a8>)
 8001886:	4461      	add	r1, ip
 8001888:	2900      	cmp	r1, #0
 800188a:	dd56      	ble.n	800193a <__aeabi_dmul+0x3c2>
 800188c:	076b      	lsls	r3, r5, #29
 800188e:	d009      	beq.n	80018a4 <__aeabi_dmul+0x32c>
 8001890:	220f      	movs	r2, #15
 8001892:	402a      	ands	r2, r5
 8001894:	2a04      	cmp	r2, #4
 8001896:	d005      	beq.n	80018a4 <__aeabi_dmul+0x32c>
 8001898:	1d2a      	adds	r2, r5, #4
 800189a:	42aa      	cmp	r2, r5
 800189c:	41ad      	sbcs	r5, r5
 800189e:	426d      	negs	r5, r5
 80018a0:	1964      	adds	r4, r4, r5
 80018a2:	0015      	movs	r5, r2
 80018a4:	01e3      	lsls	r3, r4, #7
 80018a6:	d504      	bpl.n	80018b2 <__aeabi_dmul+0x33a>
 80018a8:	2180      	movs	r1, #128	; 0x80
 80018aa:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <__aeabi_dmul+0x3ac>)
 80018ac:	00c9      	lsls	r1, r1, #3
 80018ae:	4014      	ands	r4, r2
 80018b0:	4461      	add	r1, ip
 80018b2:	4a1d      	ldr	r2, [pc, #116]	; (8001928 <__aeabi_dmul+0x3b0>)
 80018b4:	4291      	cmp	r1, r2
 80018b6:	dd00      	ble.n	80018ba <__aeabi_dmul+0x342>
 80018b8:	e724      	b.n	8001704 <__aeabi_dmul+0x18c>
 80018ba:	0762      	lsls	r2, r4, #29
 80018bc:	08ed      	lsrs	r5, r5, #3
 80018be:	0264      	lsls	r4, r4, #9
 80018c0:	0549      	lsls	r1, r1, #21
 80018c2:	4315      	orrs	r5, r2
 80018c4:	0b24      	lsrs	r4, r4, #12
 80018c6:	0d4a      	lsrs	r2, r1, #21
 80018c8:	e6c6      	b.n	8001658 <__aeabi_dmul+0xe0>
 80018ca:	9701      	str	r7, [sp, #4]
 80018cc:	e6b8      	b.n	8001640 <__aeabi_dmul+0xc8>
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <__aeabi_dmul+0x398>)
 80018d0:	2003      	movs	r0, #3
 80018d2:	4694      	mov	ip, r2
 80018d4:	4463      	add	r3, ip
 80018d6:	464a      	mov	r2, r9
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2303      	movs	r3, #3
 80018dc:	431a      	orrs	r2, r3
 80018de:	4691      	mov	r9, r2
 80018e0:	4652      	mov	r2, sl
 80018e2:	e68a      	b.n	80015fa <__aeabi_dmul+0x82>
 80018e4:	4649      	mov	r1, r9
 80018e6:	2301      	movs	r3, #1
 80018e8:	4319      	orrs	r1, r3
 80018ea:	4689      	mov	r9, r1
 80018ec:	2600      	movs	r6, #0
 80018ee:	2001      	movs	r0, #1
 80018f0:	e683      	b.n	80015fa <__aeabi_dmul+0x82>
 80018f2:	220c      	movs	r2, #12
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2303      	movs	r3, #3
 80018f8:	0005      	movs	r5, r0
 80018fa:	4691      	mov	r9, r2
 80018fc:	469b      	mov	fp, r3
 80018fe:	e65e      	b.n	80015be <__aeabi_dmul+0x46>
 8001900:	2304      	movs	r3, #4
 8001902:	4699      	mov	r9, r3
 8001904:	2300      	movs	r3, #0
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	3301      	adds	r3, #1
 800190a:	2400      	movs	r4, #0
 800190c:	469b      	mov	fp, r3
 800190e:	e656      	b.n	80015be <__aeabi_dmul+0x46>
 8001910:	000007ff 	.word	0x000007ff
 8001914:	fffffc01 	.word	0xfffffc01
 8001918:	08008ea4 	.word	0x08008ea4
 800191c:	fffffc0d 	.word	0xfffffc0d
 8001920:	000003ff 	.word	0x000003ff
 8001924:	feffffff 	.word	0xfeffffff
 8001928:	000007fe 	.word	0x000007fe
 800192c:	2300      	movs	r3, #0
 800192e:	2480      	movs	r4, #128	; 0x80
 8001930:	2500      	movs	r5, #0
 8001932:	4a44      	ldr	r2, [pc, #272]	; (8001a44 <__aeabi_dmul+0x4cc>)
 8001934:	9301      	str	r3, [sp, #4]
 8001936:	0324      	lsls	r4, r4, #12
 8001938:	e68e      	b.n	8001658 <__aeabi_dmul+0xe0>
 800193a:	2001      	movs	r0, #1
 800193c:	1a40      	subs	r0, r0, r1
 800193e:	2838      	cmp	r0, #56	; 0x38
 8001940:	dd00      	ble.n	8001944 <__aeabi_dmul+0x3cc>
 8001942:	e686      	b.n	8001652 <__aeabi_dmul+0xda>
 8001944:	281f      	cmp	r0, #31
 8001946:	dd5b      	ble.n	8001a00 <__aeabi_dmul+0x488>
 8001948:	221f      	movs	r2, #31
 800194a:	0023      	movs	r3, r4
 800194c:	4252      	negs	r2, r2
 800194e:	1a51      	subs	r1, r2, r1
 8001950:	40cb      	lsrs	r3, r1
 8001952:	0019      	movs	r1, r3
 8001954:	2820      	cmp	r0, #32
 8001956:	d003      	beq.n	8001960 <__aeabi_dmul+0x3e8>
 8001958:	4a3b      	ldr	r2, [pc, #236]	; (8001a48 <__aeabi_dmul+0x4d0>)
 800195a:	4462      	add	r2, ip
 800195c:	4094      	lsls	r4, r2
 800195e:	4325      	orrs	r5, r4
 8001960:	1e6a      	subs	r2, r5, #1
 8001962:	4195      	sbcs	r5, r2
 8001964:	002a      	movs	r2, r5
 8001966:	430a      	orrs	r2, r1
 8001968:	2107      	movs	r1, #7
 800196a:	000d      	movs	r5, r1
 800196c:	2400      	movs	r4, #0
 800196e:	4015      	ands	r5, r2
 8001970:	4211      	tst	r1, r2
 8001972:	d05b      	beq.n	8001a2c <__aeabi_dmul+0x4b4>
 8001974:	210f      	movs	r1, #15
 8001976:	2400      	movs	r4, #0
 8001978:	4011      	ands	r1, r2
 800197a:	2904      	cmp	r1, #4
 800197c:	d053      	beq.n	8001a26 <__aeabi_dmul+0x4ae>
 800197e:	1d11      	adds	r1, r2, #4
 8001980:	4291      	cmp	r1, r2
 8001982:	4192      	sbcs	r2, r2
 8001984:	4252      	negs	r2, r2
 8001986:	18a4      	adds	r4, r4, r2
 8001988:	000a      	movs	r2, r1
 800198a:	0223      	lsls	r3, r4, #8
 800198c:	d54b      	bpl.n	8001a26 <__aeabi_dmul+0x4ae>
 800198e:	2201      	movs	r2, #1
 8001990:	2400      	movs	r4, #0
 8001992:	2500      	movs	r5, #0
 8001994:	e660      	b.n	8001658 <__aeabi_dmul+0xe0>
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	031b      	lsls	r3, r3, #12
 800199a:	421c      	tst	r4, r3
 800199c:	d009      	beq.n	80019b2 <__aeabi_dmul+0x43a>
 800199e:	421e      	tst	r6, r3
 80019a0:	d107      	bne.n	80019b2 <__aeabi_dmul+0x43a>
 80019a2:	4333      	orrs	r3, r6
 80019a4:	031c      	lsls	r4, r3, #12
 80019a6:	4643      	mov	r3, r8
 80019a8:	0015      	movs	r5, r2
 80019aa:	0b24      	lsrs	r4, r4, #12
 80019ac:	4a25      	ldr	r2, [pc, #148]	; (8001a44 <__aeabi_dmul+0x4cc>)
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	e652      	b.n	8001658 <__aeabi_dmul+0xe0>
 80019b2:	2280      	movs	r2, #128	; 0x80
 80019b4:	0312      	lsls	r2, r2, #12
 80019b6:	4314      	orrs	r4, r2
 80019b8:	0324      	lsls	r4, r4, #12
 80019ba:	4a22      	ldr	r2, [pc, #136]	; (8001a44 <__aeabi_dmul+0x4cc>)
 80019bc:	0b24      	lsrs	r4, r4, #12
 80019be:	9701      	str	r7, [sp, #4]
 80019c0:	e64a      	b.n	8001658 <__aeabi_dmul+0xe0>
 80019c2:	f000 fd51 	bl	8002468 <__clzsi2>
 80019c6:	0003      	movs	r3, r0
 80019c8:	001a      	movs	r2, r3
 80019ca:	3215      	adds	r2, #21
 80019cc:	3020      	adds	r0, #32
 80019ce:	2a1c      	cmp	r2, #28
 80019d0:	dc00      	bgt.n	80019d4 <__aeabi_dmul+0x45c>
 80019d2:	e684      	b.n	80016de <__aeabi_dmul+0x166>
 80019d4:	4656      	mov	r6, sl
 80019d6:	3b08      	subs	r3, #8
 80019d8:	2200      	movs	r2, #0
 80019da:	409e      	lsls	r6, r3
 80019dc:	e689      	b.n	80016f2 <__aeabi_dmul+0x17a>
 80019de:	f000 fd43 	bl	8002468 <__clzsi2>
 80019e2:	0001      	movs	r1, r0
 80019e4:	0002      	movs	r2, r0
 80019e6:	3115      	adds	r1, #21
 80019e8:	3220      	adds	r2, #32
 80019ea:	291c      	cmp	r1, #28
 80019ec:	dc00      	bgt.n	80019f0 <__aeabi_dmul+0x478>
 80019ee:	e64e      	b.n	800168e <__aeabi_dmul+0x116>
 80019f0:	0034      	movs	r4, r6
 80019f2:	3808      	subs	r0, #8
 80019f4:	2500      	movs	r5, #0
 80019f6:	4084      	lsls	r4, r0
 80019f8:	e653      	b.n	80016a2 <__aeabi_dmul+0x12a>
 80019fa:	9b00      	ldr	r3, [sp, #0]
 80019fc:	469c      	mov	ip, r3
 80019fe:	e741      	b.n	8001884 <__aeabi_dmul+0x30c>
 8001a00:	4912      	ldr	r1, [pc, #72]	; (8001a4c <__aeabi_dmul+0x4d4>)
 8001a02:	0022      	movs	r2, r4
 8001a04:	4461      	add	r1, ip
 8001a06:	002e      	movs	r6, r5
 8001a08:	408d      	lsls	r5, r1
 8001a0a:	408a      	lsls	r2, r1
 8001a0c:	40c6      	lsrs	r6, r0
 8001a0e:	1e69      	subs	r1, r5, #1
 8001a10:	418d      	sbcs	r5, r1
 8001a12:	4332      	orrs	r2, r6
 8001a14:	432a      	orrs	r2, r5
 8001a16:	40c4      	lsrs	r4, r0
 8001a18:	0753      	lsls	r3, r2, #29
 8001a1a:	d0b6      	beq.n	800198a <__aeabi_dmul+0x412>
 8001a1c:	210f      	movs	r1, #15
 8001a1e:	4011      	ands	r1, r2
 8001a20:	2904      	cmp	r1, #4
 8001a22:	d1ac      	bne.n	800197e <__aeabi_dmul+0x406>
 8001a24:	e7b1      	b.n	800198a <__aeabi_dmul+0x412>
 8001a26:	0765      	lsls	r5, r4, #29
 8001a28:	0264      	lsls	r4, r4, #9
 8001a2a:	0b24      	lsrs	r4, r4, #12
 8001a2c:	08d2      	lsrs	r2, r2, #3
 8001a2e:	4315      	orrs	r5, r2
 8001a30:	2200      	movs	r2, #0
 8001a32:	e611      	b.n	8001658 <__aeabi_dmul+0xe0>
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	0312      	lsls	r2, r2, #12
 8001a38:	4314      	orrs	r4, r2
 8001a3a:	0324      	lsls	r4, r4, #12
 8001a3c:	4a01      	ldr	r2, [pc, #4]	; (8001a44 <__aeabi_dmul+0x4cc>)
 8001a3e:	0b24      	lsrs	r4, r4, #12
 8001a40:	e60a      	b.n	8001658 <__aeabi_dmul+0xe0>
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	000007ff 	.word	0x000007ff
 8001a48:	0000043e 	.word	0x0000043e
 8001a4c:	0000041e 	.word	0x0000041e

08001a50 <__aeabi_dsub>:
 8001a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a52:	4657      	mov	r7, sl
 8001a54:	464e      	mov	r6, r9
 8001a56:	4645      	mov	r5, r8
 8001a58:	46de      	mov	lr, fp
 8001a5a:	0004      	movs	r4, r0
 8001a5c:	b5e0      	push	{r5, r6, r7, lr}
 8001a5e:	001f      	movs	r7, r3
 8001a60:	0010      	movs	r0, r2
 8001a62:	030b      	lsls	r3, r1, #12
 8001a64:	0f62      	lsrs	r2, r4, #29
 8001a66:	004e      	lsls	r6, r1, #1
 8001a68:	0fcd      	lsrs	r5, r1, #31
 8001a6a:	0a5b      	lsrs	r3, r3, #9
 8001a6c:	0339      	lsls	r1, r7, #12
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	0a49      	lsrs	r1, r1, #9
 8001a72:	00e2      	lsls	r2, r4, #3
 8001a74:	0f44      	lsrs	r4, r0, #29
 8001a76:	4321      	orrs	r1, r4
 8001a78:	4cc2      	ldr	r4, [pc, #776]	; (8001d84 <__aeabi_dsub+0x334>)
 8001a7a:	4691      	mov	r9, r2
 8001a7c:	4692      	mov	sl, r2
 8001a7e:	00c0      	lsls	r0, r0, #3
 8001a80:	007a      	lsls	r2, r7, #1
 8001a82:	4680      	mov	r8, r0
 8001a84:	0d76      	lsrs	r6, r6, #21
 8001a86:	0d52      	lsrs	r2, r2, #21
 8001a88:	0fff      	lsrs	r7, r7, #31
 8001a8a:	42a2      	cmp	r2, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dsub+0x40>
 8001a8e:	e0b4      	b.n	8001bfa <__aeabi_dsub+0x1aa>
 8001a90:	2401      	movs	r4, #1
 8001a92:	4067      	eors	r7, r4
 8001a94:	46bb      	mov	fp, r7
 8001a96:	42bd      	cmp	r5, r7
 8001a98:	d100      	bne.n	8001a9c <__aeabi_dsub+0x4c>
 8001a9a:	e088      	b.n	8001bae <__aeabi_dsub+0x15e>
 8001a9c:	1ab4      	subs	r4, r6, r2
 8001a9e:	46a4      	mov	ip, r4
 8001aa0:	2c00      	cmp	r4, #0
 8001aa2:	dc00      	bgt.n	8001aa6 <__aeabi_dsub+0x56>
 8001aa4:	e0b2      	b.n	8001c0c <__aeabi_dsub+0x1bc>
 8001aa6:	2a00      	cmp	r2, #0
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dsub+0x5c>
 8001aaa:	e0c5      	b.n	8001c38 <__aeabi_dsub+0x1e8>
 8001aac:	4ab5      	ldr	r2, [pc, #724]	; (8001d84 <__aeabi_dsub+0x334>)
 8001aae:	4296      	cmp	r6, r2
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_dsub+0x64>
 8001ab2:	e28b      	b.n	8001fcc <__aeabi_dsub+0x57c>
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	0412      	lsls	r2, r2, #16
 8001ab8:	4311      	orrs	r1, r2
 8001aba:	4662      	mov	r2, ip
 8001abc:	2a38      	cmp	r2, #56	; 0x38
 8001abe:	dd00      	ble.n	8001ac2 <__aeabi_dsub+0x72>
 8001ac0:	e1a1      	b.n	8001e06 <__aeabi_dsub+0x3b6>
 8001ac2:	2a1f      	cmp	r2, #31
 8001ac4:	dd00      	ble.n	8001ac8 <__aeabi_dsub+0x78>
 8001ac6:	e216      	b.n	8001ef6 <__aeabi_dsub+0x4a6>
 8001ac8:	2720      	movs	r7, #32
 8001aca:	000c      	movs	r4, r1
 8001acc:	1abf      	subs	r7, r7, r2
 8001ace:	40bc      	lsls	r4, r7
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	46a0      	mov	r8, r4
 8001ad4:	4664      	mov	r4, ip
 8001ad6:	40b8      	lsls	r0, r7
 8001ad8:	40e2      	lsrs	r2, r4
 8001ada:	4644      	mov	r4, r8
 8001adc:	4314      	orrs	r4, r2
 8001ade:	0002      	movs	r2, r0
 8001ae0:	1e50      	subs	r0, r2, #1
 8001ae2:	4182      	sbcs	r2, r0
 8001ae4:	4660      	mov	r0, ip
 8001ae6:	40c1      	lsrs	r1, r0
 8001ae8:	4322      	orrs	r2, r4
 8001aea:	1a5b      	subs	r3, r3, r1
 8001aec:	4649      	mov	r1, r9
 8001aee:	1a8c      	subs	r4, r1, r2
 8001af0:	45a1      	cmp	r9, r4
 8001af2:	4192      	sbcs	r2, r2
 8001af4:	4252      	negs	r2, r2
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	4698      	mov	r8, r3
 8001afa:	4643      	mov	r3, r8
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	d400      	bmi.n	8001b02 <__aeabi_dsub+0xb2>
 8001b00:	e117      	b.n	8001d32 <__aeabi_dsub+0x2e2>
 8001b02:	4643      	mov	r3, r8
 8001b04:	025b      	lsls	r3, r3, #9
 8001b06:	0a5b      	lsrs	r3, r3, #9
 8001b08:	4698      	mov	r8, r3
 8001b0a:	4643      	mov	r3, r8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dsub+0xc2>
 8001b10:	e16c      	b.n	8001dec <__aeabi_dsub+0x39c>
 8001b12:	4640      	mov	r0, r8
 8001b14:	f000 fca8 	bl	8002468 <__clzsi2>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	3a08      	subs	r2, #8
 8001b1c:	2120      	movs	r1, #32
 8001b1e:	0020      	movs	r0, r4
 8001b20:	4643      	mov	r3, r8
 8001b22:	1a89      	subs	r1, r1, r2
 8001b24:	4093      	lsls	r3, r2
 8001b26:	40c8      	lsrs	r0, r1
 8001b28:	4094      	lsls	r4, r2
 8001b2a:	4303      	orrs	r3, r0
 8001b2c:	4296      	cmp	r6, r2
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dsub+0xe2>
 8001b30:	e157      	b.n	8001de2 <__aeabi_dsub+0x392>
 8001b32:	1b96      	subs	r6, r2, r6
 8001b34:	1c71      	adds	r1, r6, #1
 8001b36:	291f      	cmp	r1, #31
 8001b38:	dd00      	ble.n	8001b3c <__aeabi_dsub+0xec>
 8001b3a:	e1cb      	b.n	8001ed4 <__aeabi_dsub+0x484>
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	0018      	movs	r0, r3
 8001b40:	0026      	movs	r6, r4
 8001b42:	1a52      	subs	r2, r2, r1
 8001b44:	4094      	lsls	r4, r2
 8001b46:	4090      	lsls	r0, r2
 8001b48:	40ce      	lsrs	r6, r1
 8001b4a:	40cb      	lsrs	r3, r1
 8001b4c:	1e62      	subs	r2, r4, #1
 8001b4e:	4194      	sbcs	r4, r2
 8001b50:	4330      	orrs	r0, r6
 8001b52:	4698      	mov	r8, r3
 8001b54:	2600      	movs	r6, #0
 8001b56:	4304      	orrs	r4, r0
 8001b58:	0763      	lsls	r3, r4, #29
 8001b5a:	d009      	beq.n	8001b70 <__aeabi_dsub+0x120>
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	4023      	ands	r3, r4
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d005      	beq.n	8001b70 <__aeabi_dsub+0x120>
 8001b64:	1d23      	adds	r3, r4, #4
 8001b66:	42a3      	cmp	r3, r4
 8001b68:	41a4      	sbcs	r4, r4
 8001b6a:	4264      	negs	r4, r4
 8001b6c:	44a0      	add	r8, r4
 8001b6e:	001c      	movs	r4, r3
 8001b70:	4643      	mov	r3, r8
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	d400      	bmi.n	8001b78 <__aeabi_dsub+0x128>
 8001b76:	e0df      	b.n	8001d38 <__aeabi_dsub+0x2e8>
 8001b78:	4b82      	ldr	r3, [pc, #520]	; (8001d84 <__aeabi_dsub+0x334>)
 8001b7a:	3601      	adds	r6, #1
 8001b7c:	429e      	cmp	r6, r3
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_dsub+0x132>
 8001b80:	e0fb      	b.n	8001d7a <__aeabi_dsub+0x32a>
 8001b82:	4642      	mov	r2, r8
 8001b84:	4b80      	ldr	r3, [pc, #512]	; (8001d88 <__aeabi_dsub+0x338>)
 8001b86:	08e4      	lsrs	r4, r4, #3
 8001b88:	401a      	ands	r2, r3
 8001b8a:	0013      	movs	r3, r2
 8001b8c:	0571      	lsls	r1, r6, #21
 8001b8e:	0752      	lsls	r2, r2, #29
 8001b90:	025b      	lsls	r3, r3, #9
 8001b92:	4322      	orrs	r2, r4
 8001b94:	0b1b      	lsrs	r3, r3, #12
 8001b96:	0d49      	lsrs	r1, r1, #21
 8001b98:	0509      	lsls	r1, r1, #20
 8001b9a:	07ed      	lsls	r5, r5, #31
 8001b9c:	4319      	orrs	r1, r3
 8001b9e:	4329      	orrs	r1, r5
 8001ba0:	0010      	movs	r0, r2
 8001ba2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba4:	46bb      	mov	fp, r7
 8001ba6:	46b2      	mov	sl, r6
 8001ba8:	46a9      	mov	r9, r5
 8001baa:	46a0      	mov	r8, r4
 8001bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bae:	1ab4      	subs	r4, r6, r2
 8001bb0:	46a4      	mov	ip, r4
 8001bb2:	2c00      	cmp	r4, #0
 8001bb4:	dd58      	ble.n	8001c68 <__aeabi_dsub+0x218>
 8001bb6:	2a00      	cmp	r2, #0
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_dsub+0x16c>
 8001bba:	e09e      	b.n	8001cfa <__aeabi_dsub+0x2aa>
 8001bbc:	4a71      	ldr	r2, [pc, #452]	; (8001d84 <__aeabi_dsub+0x334>)
 8001bbe:	4296      	cmp	r6, r2
 8001bc0:	d100      	bne.n	8001bc4 <__aeabi_dsub+0x174>
 8001bc2:	e13b      	b.n	8001e3c <__aeabi_dsub+0x3ec>
 8001bc4:	2280      	movs	r2, #128	; 0x80
 8001bc6:	0412      	lsls	r2, r2, #16
 8001bc8:	4311      	orrs	r1, r2
 8001bca:	4662      	mov	r2, ip
 8001bcc:	2a38      	cmp	r2, #56	; 0x38
 8001bce:	dd00      	ble.n	8001bd2 <__aeabi_dsub+0x182>
 8001bd0:	e0c1      	b.n	8001d56 <__aeabi_dsub+0x306>
 8001bd2:	2a1f      	cmp	r2, #31
 8001bd4:	dc00      	bgt.n	8001bd8 <__aeabi_dsub+0x188>
 8001bd6:	e1bb      	b.n	8001f50 <__aeabi_dsub+0x500>
 8001bd8:	000c      	movs	r4, r1
 8001bda:	3a20      	subs	r2, #32
 8001bdc:	40d4      	lsrs	r4, r2
 8001bde:	0022      	movs	r2, r4
 8001be0:	4664      	mov	r4, ip
 8001be2:	2c20      	cmp	r4, #32
 8001be4:	d004      	beq.n	8001bf0 <__aeabi_dsub+0x1a0>
 8001be6:	2740      	movs	r7, #64	; 0x40
 8001be8:	1b3f      	subs	r7, r7, r4
 8001bea:	40b9      	lsls	r1, r7
 8001bec:	4308      	orrs	r0, r1
 8001bee:	4680      	mov	r8, r0
 8001bf0:	4644      	mov	r4, r8
 8001bf2:	1e61      	subs	r1, r4, #1
 8001bf4:	418c      	sbcs	r4, r1
 8001bf6:	4314      	orrs	r4, r2
 8001bf8:	e0b1      	b.n	8001d5e <__aeabi_dsub+0x30e>
 8001bfa:	000c      	movs	r4, r1
 8001bfc:	4304      	orrs	r4, r0
 8001bfe:	d02a      	beq.n	8001c56 <__aeabi_dsub+0x206>
 8001c00:	46bb      	mov	fp, r7
 8001c02:	42bd      	cmp	r5, r7
 8001c04:	d02d      	beq.n	8001c62 <__aeabi_dsub+0x212>
 8001c06:	4c61      	ldr	r4, [pc, #388]	; (8001d8c <__aeabi_dsub+0x33c>)
 8001c08:	46a4      	mov	ip, r4
 8001c0a:	44b4      	add	ip, r6
 8001c0c:	4664      	mov	r4, ip
 8001c0e:	2c00      	cmp	r4, #0
 8001c10:	d05c      	beq.n	8001ccc <__aeabi_dsub+0x27c>
 8001c12:	1b94      	subs	r4, r2, r6
 8001c14:	46a4      	mov	ip, r4
 8001c16:	2e00      	cmp	r6, #0
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dsub+0x1cc>
 8001c1a:	e115      	b.n	8001e48 <__aeabi_dsub+0x3f8>
 8001c1c:	464d      	mov	r5, r9
 8001c1e:	431d      	orrs	r5, r3
 8001c20:	d100      	bne.n	8001c24 <__aeabi_dsub+0x1d4>
 8001c22:	e1c3      	b.n	8001fac <__aeabi_dsub+0x55c>
 8001c24:	1e65      	subs	r5, r4, #1
 8001c26:	2c01      	cmp	r4, #1
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dsub+0x1dc>
 8001c2a:	e20c      	b.n	8002046 <__aeabi_dsub+0x5f6>
 8001c2c:	4e55      	ldr	r6, [pc, #340]	; (8001d84 <__aeabi_dsub+0x334>)
 8001c2e:	42b4      	cmp	r4, r6
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dsub+0x1e4>
 8001c32:	e1f8      	b.n	8002026 <__aeabi_dsub+0x5d6>
 8001c34:	46ac      	mov	ip, r5
 8001c36:	e10e      	b.n	8001e56 <__aeabi_dsub+0x406>
 8001c38:	000a      	movs	r2, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_dsub+0x1f0>
 8001c3e:	e136      	b.n	8001eae <__aeabi_dsub+0x45e>
 8001c40:	0022      	movs	r2, r4
 8001c42:	3a01      	subs	r2, #1
 8001c44:	2c01      	cmp	r4, #1
 8001c46:	d100      	bne.n	8001c4a <__aeabi_dsub+0x1fa>
 8001c48:	e1c6      	b.n	8001fd8 <__aeabi_dsub+0x588>
 8001c4a:	4c4e      	ldr	r4, [pc, #312]	; (8001d84 <__aeabi_dsub+0x334>)
 8001c4c:	45a4      	cmp	ip, r4
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x202>
 8001c50:	e0f4      	b.n	8001e3c <__aeabi_dsub+0x3ec>
 8001c52:	4694      	mov	ip, r2
 8001c54:	e731      	b.n	8001aba <__aeabi_dsub+0x6a>
 8001c56:	2401      	movs	r4, #1
 8001c58:	4067      	eors	r7, r4
 8001c5a:	46bb      	mov	fp, r7
 8001c5c:	42bd      	cmp	r5, r7
 8001c5e:	d000      	beq.n	8001c62 <__aeabi_dsub+0x212>
 8001c60:	e71c      	b.n	8001a9c <__aeabi_dsub+0x4c>
 8001c62:	4c4a      	ldr	r4, [pc, #296]	; (8001d8c <__aeabi_dsub+0x33c>)
 8001c64:	46a4      	mov	ip, r4
 8001c66:	44b4      	add	ip, r6
 8001c68:	4664      	mov	r4, ip
 8001c6a:	2c00      	cmp	r4, #0
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x220>
 8001c6e:	e0cf      	b.n	8001e10 <__aeabi_dsub+0x3c0>
 8001c70:	1b94      	subs	r4, r2, r6
 8001c72:	46a4      	mov	ip, r4
 8001c74:	2e00      	cmp	r6, #0
 8001c76:	d100      	bne.n	8001c7a <__aeabi_dsub+0x22a>
 8001c78:	e15c      	b.n	8001f34 <__aeabi_dsub+0x4e4>
 8001c7a:	4e42      	ldr	r6, [pc, #264]	; (8001d84 <__aeabi_dsub+0x334>)
 8001c7c:	42b2      	cmp	r2, r6
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dsub+0x232>
 8001c80:	e1ec      	b.n	800205c <__aeabi_dsub+0x60c>
 8001c82:	2680      	movs	r6, #128	; 0x80
 8001c84:	0436      	lsls	r6, r6, #16
 8001c86:	4333      	orrs	r3, r6
 8001c88:	4664      	mov	r4, ip
 8001c8a:	2c38      	cmp	r4, #56	; 0x38
 8001c8c:	dd00      	ble.n	8001c90 <__aeabi_dsub+0x240>
 8001c8e:	e1b3      	b.n	8001ff8 <__aeabi_dsub+0x5a8>
 8001c90:	2c1f      	cmp	r4, #31
 8001c92:	dd00      	ble.n	8001c96 <__aeabi_dsub+0x246>
 8001c94:	e238      	b.n	8002108 <__aeabi_dsub+0x6b8>
 8001c96:	2620      	movs	r6, #32
 8001c98:	1b36      	subs	r6, r6, r4
 8001c9a:	001c      	movs	r4, r3
 8001c9c:	40b4      	lsls	r4, r6
 8001c9e:	464f      	mov	r7, r9
 8001ca0:	46a0      	mov	r8, r4
 8001ca2:	4664      	mov	r4, ip
 8001ca4:	40e7      	lsrs	r7, r4
 8001ca6:	4644      	mov	r4, r8
 8001ca8:	433c      	orrs	r4, r7
 8001caa:	464f      	mov	r7, r9
 8001cac:	40b7      	lsls	r7, r6
 8001cae:	003e      	movs	r6, r7
 8001cb0:	1e77      	subs	r7, r6, #1
 8001cb2:	41be      	sbcs	r6, r7
 8001cb4:	4334      	orrs	r4, r6
 8001cb6:	4666      	mov	r6, ip
 8001cb8:	40f3      	lsrs	r3, r6
 8001cba:	18c9      	adds	r1, r1, r3
 8001cbc:	1824      	adds	r4, r4, r0
 8001cbe:	4284      	cmp	r4, r0
 8001cc0:	419b      	sbcs	r3, r3
 8001cc2:	425b      	negs	r3, r3
 8001cc4:	4698      	mov	r8, r3
 8001cc6:	0016      	movs	r6, r2
 8001cc8:	4488      	add	r8, r1
 8001cca:	e04e      	b.n	8001d6a <__aeabi_dsub+0x31a>
 8001ccc:	4a30      	ldr	r2, [pc, #192]	; (8001d90 <__aeabi_dsub+0x340>)
 8001cce:	1c74      	adds	r4, r6, #1
 8001cd0:	4214      	tst	r4, r2
 8001cd2:	d000      	beq.n	8001cd6 <__aeabi_dsub+0x286>
 8001cd4:	e0d6      	b.n	8001e84 <__aeabi_dsub+0x434>
 8001cd6:	464a      	mov	r2, r9
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	2e00      	cmp	r6, #0
 8001cdc:	d000      	beq.n	8001ce0 <__aeabi_dsub+0x290>
 8001cde:	e15b      	b.n	8001f98 <__aeabi_dsub+0x548>
 8001ce0:	2a00      	cmp	r2, #0
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dsub+0x296>
 8001ce4:	e1a5      	b.n	8002032 <__aeabi_dsub+0x5e2>
 8001ce6:	000a      	movs	r2, r1
 8001ce8:	4302      	orrs	r2, r0
 8001cea:	d000      	beq.n	8001cee <__aeabi_dsub+0x29e>
 8001cec:	e1bb      	b.n	8002066 <__aeabi_dsub+0x616>
 8001cee:	464a      	mov	r2, r9
 8001cf0:	0759      	lsls	r1, r3, #29
 8001cf2:	08d2      	lsrs	r2, r2, #3
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	08db      	lsrs	r3, r3, #3
 8001cf8:	e027      	b.n	8001d4a <__aeabi_dsub+0x2fa>
 8001cfa:	000a      	movs	r2, r1
 8001cfc:	4302      	orrs	r2, r0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dsub+0x2b2>
 8001d00:	e174      	b.n	8001fec <__aeabi_dsub+0x59c>
 8001d02:	0022      	movs	r2, r4
 8001d04:	3a01      	subs	r2, #1
 8001d06:	2c01      	cmp	r4, #1
 8001d08:	d005      	beq.n	8001d16 <__aeabi_dsub+0x2c6>
 8001d0a:	4c1e      	ldr	r4, [pc, #120]	; (8001d84 <__aeabi_dsub+0x334>)
 8001d0c:	45a4      	cmp	ip, r4
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x2c2>
 8001d10:	e094      	b.n	8001e3c <__aeabi_dsub+0x3ec>
 8001d12:	4694      	mov	ip, r2
 8001d14:	e759      	b.n	8001bca <__aeabi_dsub+0x17a>
 8001d16:	4448      	add	r0, r9
 8001d18:	4548      	cmp	r0, r9
 8001d1a:	4192      	sbcs	r2, r2
 8001d1c:	185b      	adds	r3, r3, r1
 8001d1e:	4698      	mov	r8, r3
 8001d20:	0004      	movs	r4, r0
 8001d22:	4252      	negs	r2, r2
 8001d24:	4490      	add	r8, r2
 8001d26:	4643      	mov	r3, r8
 8001d28:	2602      	movs	r6, #2
 8001d2a:	021b      	lsls	r3, r3, #8
 8001d2c:	d500      	bpl.n	8001d30 <__aeabi_dsub+0x2e0>
 8001d2e:	e0c4      	b.n	8001eba <__aeabi_dsub+0x46a>
 8001d30:	3e01      	subs	r6, #1
 8001d32:	0763      	lsls	r3, r4, #29
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dsub+0x2e8>
 8001d36:	e711      	b.n	8001b5c <__aeabi_dsub+0x10c>
 8001d38:	4643      	mov	r3, r8
 8001d3a:	46b4      	mov	ip, r6
 8001d3c:	0759      	lsls	r1, r3, #29
 8001d3e:	08e2      	lsrs	r2, r4, #3
 8001d40:	430a      	orrs	r2, r1
 8001d42:	08db      	lsrs	r3, r3, #3
 8001d44:	490f      	ldr	r1, [pc, #60]	; (8001d84 <__aeabi_dsub+0x334>)
 8001d46:	458c      	cmp	ip, r1
 8001d48:	d040      	beq.n	8001dcc <__aeabi_dsub+0x37c>
 8001d4a:	4661      	mov	r1, ip
 8001d4c:	031b      	lsls	r3, r3, #12
 8001d4e:	0549      	lsls	r1, r1, #21
 8001d50:	0b1b      	lsrs	r3, r3, #12
 8001d52:	0d49      	lsrs	r1, r1, #21
 8001d54:	e720      	b.n	8001b98 <__aeabi_dsub+0x148>
 8001d56:	4301      	orrs	r1, r0
 8001d58:	000c      	movs	r4, r1
 8001d5a:	1e61      	subs	r1, r4, #1
 8001d5c:	418c      	sbcs	r4, r1
 8001d5e:	444c      	add	r4, r9
 8001d60:	454c      	cmp	r4, r9
 8001d62:	4192      	sbcs	r2, r2
 8001d64:	4252      	negs	r2, r2
 8001d66:	4690      	mov	r8, r2
 8001d68:	4498      	add	r8, r3
 8001d6a:	4643      	mov	r3, r8
 8001d6c:	021b      	lsls	r3, r3, #8
 8001d6e:	d5e0      	bpl.n	8001d32 <__aeabi_dsub+0x2e2>
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <__aeabi_dsub+0x334>)
 8001d72:	3601      	adds	r6, #1
 8001d74:	429e      	cmp	r6, r3
 8001d76:	d000      	beq.n	8001d7a <__aeabi_dsub+0x32a>
 8001d78:	e09f      	b.n	8001eba <__aeabi_dsub+0x46a>
 8001d7a:	0031      	movs	r1, r6
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2200      	movs	r2, #0
 8001d80:	e70a      	b.n	8001b98 <__aeabi_dsub+0x148>
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	000007ff 	.word	0x000007ff
 8001d88:	ff7fffff 	.word	0xff7fffff
 8001d8c:	fffff801 	.word	0xfffff801
 8001d90:	000007fe 	.word	0x000007fe
 8001d94:	2a00      	cmp	r2, #0
 8001d96:	d100      	bne.n	8001d9a <__aeabi_dsub+0x34a>
 8001d98:	e160      	b.n	800205c <__aeabi_dsub+0x60c>
 8001d9a:	000a      	movs	r2, r1
 8001d9c:	4302      	orrs	r2, r0
 8001d9e:	d04d      	beq.n	8001e3c <__aeabi_dsub+0x3ec>
 8001da0:	464a      	mov	r2, r9
 8001da2:	075c      	lsls	r4, r3, #29
 8001da4:	08d2      	lsrs	r2, r2, #3
 8001da6:	4322      	orrs	r2, r4
 8001da8:	2480      	movs	r4, #128	; 0x80
 8001daa:	08db      	lsrs	r3, r3, #3
 8001dac:	0324      	lsls	r4, r4, #12
 8001dae:	4223      	tst	r3, r4
 8001db0:	d007      	beq.n	8001dc2 <__aeabi_dsub+0x372>
 8001db2:	08ce      	lsrs	r6, r1, #3
 8001db4:	4226      	tst	r6, r4
 8001db6:	d104      	bne.n	8001dc2 <__aeabi_dsub+0x372>
 8001db8:	465d      	mov	r5, fp
 8001dba:	0033      	movs	r3, r6
 8001dbc:	08c2      	lsrs	r2, r0, #3
 8001dbe:	0749      	lsls	r1, r1, #29
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	0f51      	lsrs	r1, r2, #29
 8001dc4:	00d2      	lsls	r2, r2, #3
 8001dc6:	08d2      	lsrs	r2, r2, #3
 8001dc8:	0749      	lsls	r1, r1, #29
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	0011      	movs	r1, r2
 8001dce:	4319      	orrs	r1, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x384>
 8001dd2:	e1c8      	b.n	8002166 <__aeabi_dsub+0x716>
 8001dd4:	2180      	movs	r1, #128	; 0x80
 8001dd6:	0309      	lsls	r1, r1, #12
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	031b      	lsls	r3, r3, #12
 8001ddc:	49d5      	ldr	r1, [pc, #852]	; (8002134 <__aeabi_dsub+0x6e4>)
 8001dde:	0b1b      	lsrs	r3, r3, #12
 8001de0:	e6da      	b.n	8001b98 <__aeabi_dsub+0x148>
 8001de2:	49d5      	ldr	r1, [pc, #852]	; (8002138 <__aeabi_dsub+0x6e8>)
 8001de4:	1ab6      	subs	r6, r6, r2
 8001de6:	400b      	ands	r3, r1
 8001de8:	4698      	mov	r8, r3
 8001dea:	e6b5      	b.n	8001b58 <__aeabi_dsub+0x108>
 8001dec:	0020      	movs	r0, r4
 8001dee:	f000 fb3b 	bl	8002468 <__clzsi2>
 8001df2:	0002      	movs	r2, r0
 8001df4:	3218      	adds	r2, #24
 8001df6:	2a1f      	cmp	r2, #31
 8001df8:	dc00      	bgt.n	8001dfc <__aeabi_dsub+0x3ac>
 8001dfa:	e68f      	b.n	8001b1c <__aeabi_dsub+0xcc>
 8001dfc:	0023      	movs	r3, r4
 8001dfe:	3808      	subs	r0, #8
 8001e00:	4083      	lsls	r3, r0
 8001e02:	2400      	movs	r4, #0
 8001e04:	e692      	b.n	8001b2c <__aeabi_dsub+0xdc>
 8001e06:	4308      	orrs	r0, r1
 8001e08:	0002      	movs	r2, r0
 8001e0a:	1e50      	subs	r0, r2, #1
 8001e0c:	4182      	sbcs	r2, r0
 8001e0e:	e66d      	b.n	8001aec <__aeabi_dsub+0x9c>
 8001e10:	4cca      	ldr	r4, [pc, #808]	; (800213c <__aeabi_dsub+0x6ec>)
 8001e12:	1c72      	adds	r2, r6, #1
 8001e14:	4222      	tst	r2, r4
 8001e16:	d000      	beq.n	8001e1a <__aeabi_dsub+0x3ca>
 8001e18:	e0ad      	b.n	8001f76 <__aeabi_dsub+0x526>
 8001e1a:	464a      	mov	r2, r9
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	2e00      	cmp	r6, #0
 8001e20:	d1b8      	bne.n	8001d94 <__aeabi_dsub+0x344>
 8001e22:	2a00      	cmp	r2, #0
 8001e24:	d100      	bne.n	8001e28 <__aeabi_dsub+0x3d8>
 8001e26:	e158      	b.n	80020da <__aeabi_dsub+0x68a>
 8001e28:	000a      	movs	r2, r1
 8001e2a:	4302      	orrs	r2, r0
 8001e2c:	d000      	beq.n	8001e30 <__aeabi_dsub+0x3e0>
 8001e2e:	e159      	b.n	80020e4 <__aeabi_dsub+0x694>
 8001e30:	464a      	mov	r2, r9
 8001e32:	0759      	lsls	r1, r3, #29
 8001e34:	08d2      	lsrs	r2, r2, #3
 8001e36:	430a      	orrs	r2, r1
 8001e38:	08db      	lsrs	r3, r3, #3
 8001e3a:	e786      	b.n	8001d4a <__aeabi_dsub+0x2fa>
 8001e3c:	464a      	mov	r2, r9
 8001e3e:	0759      	lsls	r1, r3, #29
 8001e40:	08d2      	lsrs	r2, r2, #3
 8001e42:	430a      	orrs	r2, r1
 8001e44:	08db      	lsrs	r3, r3, #3
 8001e46:	e7c1      	b.n	8001dcc <__aeabi_dsub+0x37c>
 8001e48:	4dba      	ldr	r5, [pc, #744]	; (8002134 <__aeabi_dsub+0x6e4>)
 8001e4a:	42aa      	cmp	r2, r5
 8001e4c:	d100      	bne.n	8001e50 <__aeabi_dsub+0x400>
 8001e4e:	e11e      	b.n	800208e <__aeabi_dsub+0x63e>
 8001e50:	2580      	movs	r5, #128	; 0x80
 8001e52:	042d      	lsls	r5, r5, #16
 8001e54:	432b      	orrs	r3, r5
 8001e56:	4664      	mov	r4, ip
 8001e58:	2c38      	cmp	r4, #56	; 0x38
 8001e5a:	dc5d      	bgt.n	8001f18 <__aeabi_dsub+0x4c8>
 8001e5c:	2c1f      	cmp	r4, #31
 8001e5e:	dd00      	ble.n	8001e62 <__aeabi_dsub+0x412>
 8001e60:	e0d0      	b.n	8002004 <__aeabi_dsub+0x5b4>
 8001e62:	2520      	movs	r5, #32
 8001e64:	4667      	mov	r7, ip
 8001e66:	1b2d      	subs	r5, r5, r4
 8001e68:	464e      	mov	r6, r9
 8001e6a:	001c      	movs	r4, r3
 8001e6c:	40fe      	lsrs	r6, r7
 8001e6e:	40ac      	lsls	r4, r5
 8001e70:	4334      	orrs	r4, r6
 8001e72:	464e      	mov	r6, r9
 8001e74:	40ae      	lsls	r6, r5
 8001e76:	0035      	movs	r5, r6
 8001e78:	40fb      	lsrs	r3, r7
 8001e7a:	1e6e      	subs	r6, r5, #1
 8001e7c:	41b5      	sbcs	r5, r6
 8001e7e:	1ac9      	subs	r1, r1, r3
 8001e80:	432c      	orrs	r4, r5
 8001e82:	e04e      	b.n	8001f22 <__aeabi_dsub+0x4d2>
 8001e84:	464a      	mov	r2, r9
 8001e86:	1a14      	subs	r4, r2, r0
 8001e88:	45a1      	cmp	r9, r4
 8001e8a:	4192      	sbcs	r2, r2
 8001e8c:	4252      	negs	r2, r2
 8001e8e:	4690      	mov	r8, r2
 8001e90:	1a5f      	subs	r7, r3, r1
 8001e92:	003a      	movs	r2, r7
 8001e94:	4647      	mov	r7, r8
 8001e96:	1bd2      	subs	r2, r2, r7
 8001e98:	4690      	mov	r8, r2
 8001e9a:	0212      	lsls	r2, r2, #8
 8001e9c:	d500      	bpl.n	8001ea0 <__aeabi_dsub+0x450>
 8001e9e:	e08b      	b.n	8001fb8 <__aeabi_dsub+0x568>
 8001ea0:	4642      	mov	r2, r8
 8001ea2:	4322      	orrs	r2, r4
 8001ea4:	d000      	beq.n	8001ea8 <__aeabi_dsub+0x458>
 8001ea6:	e630      	b.n	8001b0a <__aeabi_dsub+0xba>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	2500      	movs	r5, #0
 8001eac:	e74d      	b.n	8001d4a <__aeabi_dsub+0x2fa>
 8001eae:	464a      	mov	r2, r9
 8001eb0:	0759      	lsls	r1, r3, #29
 8001eb2:	08d2      	lsrs	r2, r2, #3
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	08db      	lsrs	r3, r3, #3
 8001eb8:	e744      	b.n	8001d44 <__aeabi_dsub+0x2f4>
 8001eba:	4642      	mov	r2, r8
 8001ebc:	4b9e      	ldr	r3, [pc, #632]	; (8002138 <__aeabi_dsub+0x6e8>)
 8001ebe:	0861      	lsrs	r1, r4, #1
 8001ec0:	401a      	ands	r2, r3
 8001ec2:	0013      	movs	r3, r2
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	4014      	ands	r4, r2
 8001ec8:	430c      	orrs	r4, r1
 8001eca:	07da      	lsls	r2, r3, #31
 8001ecc:	085b      	lsrs	r3, r3, #1
 8001ece:	4698      	mov	r8, r3
 8001ed0:	4314      	orrs	r4, r2
 8001ed2:	e641      	b.n	8001b58 <__aeabi_dsub+0x108>
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	3e1f      	subs	r6, #31
 8001ed8:	40f2      	lsrs	r2, r6
 8001eda:	0016      	movs	r6, r2
 8001edc:	2920      	cmp	r1, #32
 8001ede:	d003      	beq.n	8001ee8 <__aeabi_dsub+0x498>
 8001ee0:	2240      	movs	r2, #64	; 0x40
 8001ee2:	1a51      	subs	r1, r2, r1
 8001ee4:	408b      	lsls	r3, r1
 8001ee6:	431c      	orrs	r4, r3
 8001ee8:	1e62      	subs	r2, r4, #1
 8001eea:	4194      	sbcs	r4, r2
 8001eec:	2300      	movs	r3, #0
 8001eee:	4334      	orrs	r4, r6
 8001ef0:	4698      	mov	r8, r3
 8001ef2:	2600      	movs	r6, #0
 8001ef4:	e71d      	b.n	8001d32 <__aeabi_dsub+0x2e2>
 8001ef6:	000c      	movs	r4, r1
 8001ef8:	3a20      	subs	r2, #32
 8001efa:	40d4      	lsrs	r4, r2
 8001efc:	0022      	movs	r2, r4
 8001efe:	4664      	mov	r4, ip
 8001f00:	2c20      	cmp	r4, #32
 8001f02:	d004      	beq.n	8001f0e <__aeabi_dsub+0x4be>
 8001f04:	2740      	movs	r7, #64	; 0x40
 8001f06:	1b3f      	subs	r7, r7, r4
 8001f08:	40b9      	lsls	r1, r7
 8001f0a:	4308      	orrs	r0, r1
 8001f0c:	4680      	mov	r8, r0
 8001f0e:	4644      	mov	r4, r8
 8001f10:	1e61      	subs	r1, r4, #1
 8001f12:	418c      	sbcs	r4, r1
 8001f14:	4322      	orrs	r2, r4
 8001f16:	e5e9      	b.n	8001aec <__aeabi_dsub+0x9c>
 8001f18:	464c      	mov	r4, r9
 8001f1a:	4323      	orrs	r3, r4
 8001f1c:	001c      	movs	r4, r3
 8001f1e:	1e63      	subs	r3, r4, #1
 8001f20:	419c      	sbcs	r4, r3
 8001f22:	1b04      	subs	r4, r0, r4
 8001f24:	42a0      	cmp	r0, r4
 8001f26:	419b      	sbcs	r3, r3
 8001f28:	425b      	negs	r3, r3
 8001f2a:	1acb      	subs	r3, r1, r3
 8001f2c:	4698      	mov	r8, r3
 8001f2e:	465d      	mov	r5, fp
 8001f30:	0016      	movs	r6, r2
 8001f32:	e5e2      	b.n	8001afa <__aeabi_dsub+0xaa>
 8001f34:	464e      	mov	r6, r9
 8001f36:	431e      	orrs	r6, r3
 8001f38:	d100      	bne.n	8001f3c <__aeabi_dsub+0x4ec>
 8001f3a:	e0ae      	b.n	800209a <__aeabi_dsub+0x64a>
 8001f3c:	1e66      	subs	r6, r4, #1
 8001f3e:	2c01      	cmp	r4, #1
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dsub+0x4f4>
 8001f42:	e0fd      	b.n	8002140 <__aeabi_dsub+0x6f0>
 8001f44:	4f7b      	ldr	r7, [pc, #492]	; (8002134 <__aeabi_dsub+0x6e4>)
 8001f46:	42bc      	cmp	r4, r7
 8001f48:	d100      	bne.n	8001f4c <__aeabi_dsub+0x4fc>
 8001f4a:	e107      	b.n	800215c <__aeabi_dsub+0x70c>
 8001f4c:	46b4      	mov	ip, r6
 8001f4e:	e69b      	b.n	8001c88 <__aeabi_dsub+0x238>
 8001f50:	4664      	mov	r4, ip
 8001f52:	2220      	movs	r2, #32
 8001f54:	1b12      	subs	r2, r2, r4
 8001f56:	000c      	movs	r4, r1
 8001f58:	4094      	lsls	r4, r2
 8001f5a:	0007      	movs	r7, r0
 8001f5c:	4090      	lsls	r0, r2
 8001f5e:	46a0      	mov	r8, r4
 8001f60:	4664      	mov	r4, ip
 8001f62:	1e42      	subs	r2, r0, #1
 8001f64:	4190      	sbcs	r0, r2
 8001f66:	4662      	mov	r2, ip
 8001f68:	40e7      	lsrs	r7, r4
 8001f6a:	4644      	mov	r4, r8
 8001f6c:	40d1      	lsrs	r1, r2
 8001f6e:	433c      	orrs	r4, r7
 8001f70:	4304      	orrs	r4, r0
 8001f72:	185b      	adds	r3, r3, r1
 8001f74:	e6f3      	b.n	8001d5e <__aeabi_dsub+0x30e>
 8001f76:	4c6f      	ldr	r4, [pc, #444]	; (8002134 <__aeabi_dsub+0x6e4>)
 8001f78:	42a2      	cmp	r2, r4
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_dsub+0x52e>
 8001f7c:	e0d5      	b.n	800212a <__aeabi_dsub+0x6da>
 8001f7e:	4448      	add	r0, r9
 8001f80:	185b      	adds	r3, r3, r1
 8001f82:	4548      	cmp	r0, r9
 8001f84:	4189      	sbcs	r1, r1
 8001f86:	4249      	negs	r1, r1
 8001f88:	185b      	adds	r3, r3, r1
 8001f8a:	07dc      	lsls	r4, r3, #31
 8001f8c:	0840      	lsrs	r0, r0, #1
 8001f8e:	085b      	lsrs	r3, r3, #1
 8001f90:	4698      	mov	r8, r3
 8001f92:	0016      	movs	r6, r2
 8001f94:	4304      	orrs	r4, r0
 8001f96:	e6cc      	b.n	8001d32 <__aeabi_dsub+0x2e2>
 8001f98:	2a00      	cmp	r2, #0
 8001f9a:	d000      	beq.n	8001f9e <__aeabi_dsub+0x54e>
 8001f9c:	e082      	b.n	80020a4 <__aeabi_dsub+0x654>
 8001f9e:	000a      	movs	r2, r1
 8001fa0:	4302      	orrs	r2, r0
 8001fa2:	d140      	bne.n	8002026 <__aeabi_dsub+0x5d6>
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	2500      	movs	r5, #0
 8001fa8:	031b      	lsls	r3, r3, #12
 8001faa:	e713      	b.n	8001dd4 <__aeabi_dsub+0x384>
 8001fac:	074b      	lsls	r3, r1, #29
 8001fae:	08c2      	lsrs	r2, r0, #3
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	465d      	mov	r5, fp
 8001fb4:	08cb      	lsrs	r3, r1, #3
 8001fb6:	e6c5      	b.n	8001d44 <__aeabi_dsub+0x2f4>
 8001fb8:	464a      	mov	r2, r9
 8001fba:	1a84      	subs	r4, r0, r2
 8001fbc:	42a0      	cmp	r0, r4
 8001fbe:	4192      	sbcs	r2, r2
 8001fc0:	1acb      	subs	r3, r1, r3
 8001fc2:	4252      	negs	r2, r2
 8001fc4:	1a9b      	subs	r3, r3, r2
 8001fc6:	4698      	mov	r8, r3
 8001fc8:	465d      	mov	r5, fp
 8001fca:	e59e      	b.n	8001b0a <__aeabi_dsub+0xba>
 8001fcc:	464a      	mov	r2, r9
 8001fce:	0759      	lsls	r1, r3, #29
 8001fd0:	08d2      	lsrs	r2, r2, #3
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	08db      	lsrs	r3, r3, #3
 8001fd6:	e6f9      	b.n	8001dcc <__aeabi_dsub+0x37c>
 8001fd8:	464a      	mov	r2, r9
 8001fda:	1a14      	subs	r4, r2, r0
 8001fdc:	45a1      	cmp	r9, r4
 8001fde:	4192      	sbcs	r2, r2
 8001fe0:	1a5b      	subs	r3, r3, r1
 8001fe2:	4252      	negs	r2, r2
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	4698      	mov	r8, r3
 8001fe8:	2601      	movs	r6, #1
 8001fea:	e586      	b.n	8001afa <__aeabi_dsub+0xaa>
 8001fec:	464a      	mov	r2, r9
 8001fee:	0759      	lsls	r1, r3, #29
 8001ff0:	08d2      	lsrs	r2, r2, #3
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	08db      	lsrs	r3, r3, #3
 8001ff6:	e6a5      	b.n	8001d44 <__aeabi_dsub+0x2f4>
 8001ff8:	464c      	mov	r4, r9
 8001ffa:	4323      	orrs	r3, r4
 8001ffc:	001c      	movs	r4, r3
 8001ffe:	1e63      	subs	r3, r4, #1
 8002000:	419c      	sbcs	r4, r3
 8002002:	e65b      	b.n	8001cbc <__aeabi_dsub+0x26c>
 8002004:	4665      	mov	r5, ip
 8002006:	001e      	movs	r6, r3
 8002008:	3d20      	subs	r5, #32
 800200a:	40ee      	lsrs	r6, r5
 800200c:	2c20      	cmp	r4, #32
 800200e:	d005      	beq.n	800201c <__aeabi_dsub+0x5cc>
 8002010:	2540      	movs	r5, #64	; 0x40
 8002012:	1b2d      	subs	r5, r5, r4
 8002014:	40ab      	lsls	r3, r5
 8002016:	464c      	mov	r4, r9
 8002018:	431c      	orrs	r4, r3
 800201a:	46a2      	mov	sl, r4
 800201c:	4654      	mov	r4, sl
 800201e:	1e63      	subs	r3, r4, #1
 8002020:	419c      	sbcs	r4, r3
 8002022:	4334      	orrs	r4, r6
 8002024:	e77d      	b.n	8001f22 <__aeabi_dsub+0x4d2>
 8002026:	074b      	lsls	r3, r1, #29
 8002028:	08c2      	lsrs	r2, r0, #3
 800202a:	431a      	orrs	r2, r3
 800202c:	465d      	mov	r5, fp
 800202e:	08cb      	lsrs	r3, r1, #3
 8002030:	e6cc      	b.n	8001dcc <__aeabi_dsub+0x37c>
 8002032:	000a      	movs	r2, r1
 8002034:	4302      	orrs	r2, r0
 8002036:	d100      	bne.n	800203a <__aeabi_dsub+0x5ea>
 8002038:	e736      	b.n	8001ea8 <__aeabi_dsub+0x458>
 800203a:	074b      	lsls	r3, r1, #29
 800203c:	08c2      	lsrs	r2, r0, #3
 800203e:	431a      	orrs	r2, r3
 8002040:	465d      	mov	r5, fp
 8002042:	08cb      	lsrs	r3, r1, #3
 8002044:	e681      	b.n	8001d4a <__aeabi_dsub+0x2fa>
 8002046:	464a      	mov	r2, r9
 8002048:	1a84      	subs	r4, r0, r2
 800204a:	42a0      	cmp	r0, r4
 800204c:	4192      	sbcs	r2, r2
 800204e:	1acb      	subs	r3, r1, r3
 8002050:	4252      	negs	r2, r2
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	4698      	mov	r8, r3
 8002056:	465d      	mov	r5, fp
 8002058:	2601      	movs	r6, #1
 800205a:	e54e      	b.n	8001afa <__aeabi_dsub+0xaa>
 800205c:	074b      	lsls	r3, r1, #29
 800205e:	08c2      	lsrs	r2, r0, #3
 8002060:	431a      	orrs	r2, r3
 8002062:	08cb      	lsrs	r3, r1, #3
 8002064:	e6b2      	b.n	8001dcc <__aeabi_dsub+0x37c>
 8002066:	464a      	mov	r2, r9
 8002068:	1a14      	subs	r4, r2, r0
 800206a:	45a1      	cmp	r9, r4
 800206c:	4192      	sbcs	r2, r2
 800206e:	1a5f      	subs	r7, r3, r1
 8002070:	4252      	negs	r2, r2
 8002072:	1aba      	subs	r2, r7, r2
 8002074:	4690      	mov	r8, r2
 8002076:	0212      	lsls	r2, r2, #8
 8002078:	d56b      	bpl.n	8002152 <__aeabi_dsub+0x702>
 800207a:	464a      	mov	r2, r9
 800207c:	1a84      	subs	r4, r0, r2
 800207e:	42a0      	cmp	r0, r4
 8002080:	4192      	sbcs	r2, r2
 8002082:	1acb      	subs	r3, r1, r3
 8002084:	4252      	negs	r2, r2
 8002086:	1a9b      	subs	r3, r3, r2
 8002088:	4698      	mov	r8, r3
 800208a:	465d      	mov	r5, fp
 800208c:	e564      	b.n	8001b58 <__aeabi_dsub+0x108>
 800208e:	074b      	lsls	r3, r1, #29
 8002090:	08c2      	lsrs	r2, r0, #3
 8002092:	431a      	orrs	r2, r3
 8002094:	465d      	mov	r5, fp
 8002096:	08cb      	lsrs	r3, r1, #3
 8002098:	e698      	b.n	8001dcc <__aeabi_dsub+0x37c>
 800209a:	074b      	lsls	r3, r1, #29
 800209c:	08c2      	lsrs	r2, r0, #3
 800209e:	431a      	orrs	r2, r3
 80020a0:	08cb      	lsrs	r3, r1, #3
 80020a2:	e64f      	b.n	8001d44 <__aeabi_dsub+0x2f4>
 80020a4:	000a      	movs	r2, r1
 80020a6:	4302      	orrs	r2, r0
 80020a8:	d090      	beq.n	8001fcc <__aeabi_dsub+0x57c>
 80020aa:	464a      	mov	r2, r9
 80020ac:	075c      	lsls	r4, r3, #29
 80020ae:	08d2      	lsrs	r2, r2, #3
 80020b0:	4314      	orrs	r4, r2
 80020b2:	2280      	movs	r2, #128	; 0x80
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	0312      	lsls	r2, r2, #12
 80020b8:	4213      	tst	r3, r2
 80020ba:	d008      	beq.n	80020ce <__aeabi_dsub+0x67e>
 80020bc:	08ce      	lsrs	r6, r1, #3
 80020be:	4216      	tst	r6, r2
 80020c0:	d105      	bne.n	80020ce <__aeabi_dsub+0x67e>
 80020c2:	08c0      	lsrs	r0, r0, #3
 80020c4:	0749      	lsls	r1, r1, #29
 80020c6:	4308      	orrs	r0, r1
 80020c8:	0004      	movs	r4, r0
 80020ca:	465d      	mov	r5, fp
 80020cc:	0033      	movs	r3, r6
 80020ce:	0f61      	lsrs	r1, r4, #29
 80020d0:	00e2      	lsls	r2, r4, #3
 80020d2:	0749      	lsls	r1, r1, #29
 80020d4:	08d2      	lsrs	r2, r2, #3
 80020d6:	430a      	orrs	r2, r1
 80020d8:	e678      	b.n	8001dcc <__aeabi_dsub+0x37c>
 80020da:	074b      	lsls	r3, r1, #29
 80020dc:	08c2      	lsrs	r2, r0, #3
 80020de:	431a      	orrs	r2, r3
 80020e0:	08cb      	lsrs	r3, r1, #3
 80020e2:	e632      	b.n	8001d4a <__aeabi_dsub+0x2fa>
 80020e4:	4448      	add	r0, r9
 80020e6:	185b      	adds	r3, r3, r1
 80020e8:	4548      	cmp	r0, r9
 80020ea:	4192      	sbcs	r2, r2
 80020ec:	4698      	mov	r8, r3
 80020ee:	4252      	negs	r2, r2
 80020f0:	4490      	add	r8, r2
 80020f2:	4643      	mov	r3, r8
 80020f4:	0004      	movs	r4, r0
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	d400      	bmi.n	80020fc <__aeabi_dsub+0x6ac>
 80020fa:	e61a      	b.n	8001d32 <__aeabi_dsub+0x2e2>
 80020fc:	4642      	mov	r2, r8
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <__aeabi_dsub+0x6e8>)
 8002100:	2601      	movs	r6, #1
 8002102:	401a      	ands	r2, r3
 8002104:	4690      	mov	r8, r2
 8002106:	e614      	b.n	8001d32 <__aeabi_dsub+0x2e2>
 8002108:	4666      	mov	r6, ip
 800210a:	001f      	movs	r7, r3
 800210c:	3e20      	subs	r6, #32
 800210e:	40f7      	lsrs	r7, r6
 8002110:	2c20      	cmp	r4, #32
 8002112:	d005      	beq.n	8002120 <__aeabi_dsub+0x6d0>
 8002114:	2640      	movs	r6, #64	; 0x40
 8002116:	1b36      	subs	r6, r6, r4
 8002118:	40b3      	lsls	r3, r6
 800211a:	464c      	mov	r4, r9
 800211c:	431c      	orrs	r4, r3
 800211e:	46a2      	mov	sl, r4
 8002120:	4654      	mov	r4, sl
 8002122:	1e63      	subs	r3, r4, #1
 8002124:	419c      	sbcs	r4, r3
 8002126:	433c      	orrs	r4, r7
 8002128:	e5c8      	b.n	8001cbc <__aeabi_dsub+0x26c>
 800212a:	0011      	movs	r1, r2
 800212c:	2300      	movs	r3, #0
 800212e:	2200      	movs	r2, #0
 8002130:	e532      	b.n	8001b98 <__aeabi_dsub+0x148>
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	000007ff 	.word	0x000007ff
 8002138:	ff7fffff 	.word	0xff7fffff
 800213c:	000007fe 	.word	0x000007fe
 8002140:	464a      	mov	r2, r9
 8002142:	1814      	adds	r4, r2, r0
 8002144:	4284      	cmp	r4, r0
 8002146:	4192      	sbcs	r2, r2
 8002148:	185b      	adds	r3, r3, r1
 800214a:	4698      	mov	r8, r3
 800214c:	4252      	negs	r2, r2
 800214e:	4490      	add	r8, r2
 8002150:	e5e9      	b.n	8001d26 <__aeabi_dsub+0x2d6>
 8002152:	4642      	mov	r2, r8
 8002154:	4322      	orrs	r2, r4
 8002156:	d100      	bne.n	800215a <__aeabi_dsub+0x70a>
 8002158:	e6a6      	b.n	8001ea8 <__aeabi_dsub+0x458>
 800215a:	e5ea      	b.n	8001d32 <__aeabi_dsub+0x2e2>
 800215c:	074b      	lsls	r3, r1, #29
 800215e:	08c2      	lsrs	r2, r0, #3
 8002160:	431a      	orrs	r2, r3
 8002162:	08cb      	lsrs	r3, r1, #3
 8002164:	e632      	b.n	8001dcc <__aeabi_dsub+0x37c>
 8002166:	2200      	movs	r2, #0
 8002168:	4901      	ldr	r1, [pc, #4]	; (8002170 <__aeabi_dsub+0x720>)
 800216a:	0013      	movs	r3, r2
 800216c:	e514      	b.n	8001b98 <__aeabi_dsub+0x148>
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	000007ff 	.word	0x000007ff

08002174 <__aeabi_dcmpun>:
 8002174:	b570      	push	{r4, r5, r6, lr}
 8002176:	0005      	movs	r5, r0
 8002178:	480c      	ldr	r0, [pc, #48]	; (80021ac <__aeabi_dcmpun+0x38>)
 800217a:	030c      	lsls	r4, r1, #12
 800217c:	0016      	movs	r6, r2
 800217e:	0049      	lsls	r1, r1, #1
 8002180:	031a      	lsls	r2, r3, #12
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	0b24      	lsrs	r4, r4, #12
 8002186:	0d49      	lsrs	r1, r1, #21
 8002188:	0b12      	lsrs	r2, r2, #12
 800218a:	0d5b      	lsrs	r3, r3, #21
 800218c:	4281      	cmp	r1, r0
 800218e:	d008      	beq.n	80021a2 <__aeabi_dcmpun+0x2e>
 8002190:	4906      	ldr	r1, [pc, #24]	; (80021ac <__aeabi_dcmpun+0x38>)
 8002192:	2000      	movs	r0, #0
 8002194:	428b      	cmp	r3, r1
 8002196:	d103      	bne.n	80021a0 <__aeabi_dcmpun+0x2c>
 8002198:	4332      	orrs	r2, r6
 800219a:	0010      	movs	r0, r2
 800219c:	1e42      	subs	r2, r0, #1
 800219e:	4190      	sbcs	r0, r2
 80021a0:	bd70      	pop	{r4, r5, r6, pc}
 80021a2:	2001      	movs	r0, #1
 80021a4:	432c      	orrs	r4, r5
 80021a6:	d1fb      	bne.n	80021a0 <__aeabi_dcmpun+0x2c>
 80021a8:	e7f2      	b.n	8002190 <__aeabi_dcmpun+0x1c>
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	000007ff 	.word	0x000007ff

080021b0 <__aeabi_d2iz>:
 80021b0:	000a      	movs	r2, r1
 80021b2:	b530      	push	{r4, r5, lr}
 80021b4:	4c13      	ldr	r4, [pc, #76]	; (8002204 <__aeabi_d2iz+0x54>)
 80021b6:	0053      	lsls	r3, r2, #1
 80021b8:	0309      	lsls	r1, r1, #12
 80021ba:	0005      	movs	r5, r0
 80021bc:	0b09      	lsrs	r1, r1, #12
 80021be:	2000      	movs	r0, #0
 80021c0:	0d5b      	lsrs	r3, r3, #21
 80021c2:	0fd2      	lsrs	r2, r2, #31
 80021c4:	42a3      	cmp	r3, r4
 80021c6:	dd04      	ble.n	80021d2 <__aeabi_d2iz+0x22>
 80021c8:	480f      	ldr	r0, [pc, #60]	; (8002208 <__aeabi_d2iz+0x58>)
 80021ca:	4283      	cmp	r3, r0
 80021cc:	dd02      	ble.n	80021d4 <__aeabi_d2iz+0x24>
 80021ce:	4b0f      	ldr	r3, [pc, #60]	; (800220c <__aeabi_d2iz+0x5c>)
 80021d0:	18d0      	adds	r0, r2, r3
 80021d2:	bd30      	pop	{r4, r5, pc}
 80021d4:	2080      	movs	r0, #128	; 0x80
 80021d6:	0340      	lsls	r0, r0, #13
 80021d8:	4301      	orrs	r1, r0
 80021da:	480d      	ldr	r0, [pc, #52]	; (8002210 <__aeabi_d2iz+0x60>)
 80021dc:	1ac0      	subs	r0, r0, r3
 80021de:	281f      	cmp	r0, #31
 80021e0:	dd08      	ble.n	80021f4 <__aeabi_d2iz+0x44>
 80021e2:	480c      	ldr	r0, [pc, #48]	; (8002214 <__aeabi_d2iz+0x64>)
 80021e4:	1ac3      	subs	r3, r0, r3
 80021e6:	40d9      	lsrs	r1, r3
 80021e8:	000b      	movs	r3, r1
 80021ea:	4258      	negs	r0, r3
 80021ec:	2a00      	cmp	r2, #0
 80021ee:	d1f0      	bne.n	80021d2 <__aeabi_d2iz+0x22>
 80021f0:	0018      	movs	r0, r3
 80021f2:	e7ee      	b.n	80021d2 <__aeabi_d2iz+0x22>
 80021f4:	4c08      	ldr	r4, [pc, #32]	; (8002218 <__aeabi_d2iz+0x68>)
 80021f6:	40c5      	lsrs	r5, r0
 80021f8:	46a4      	mov	ip, r4
 80021fa:	4463      	add	r3, ip
 80021fc:	4099      	lsls	r1, r3
 80021fe:	000b      	movs	r3, r1
 8002200:	432b      	orrs	r3, r5
 8002202:	e7f2      	b.n	80021ea <__aeabi_d2iz+0x3a>
 8002204:	000003fe 	.word	0x000003fe
 8002208:	0000041d 	.word	0x0000041d
 800220c:	7fffffff 	.word	0x7fffffff
 8002210:	00000433 	.word	0x00000433
 8002214:	00000413 	.word	0x00000413
 8002218:	fffffbed 	.word	0xfffffbed

0800221c <__aeabi_i2d>:
 800221c:	b570      	push	{r4, r5, r6, lr}
 800221e:	2800      	cmp	r0, #0
 8002220:	d016      	beq.n	8002250 <__aeabi_i2d+0x34>
 8002222:	17c3      	asrs	r3, r0, #31
 8002224:	18c5      	adds	r5, r0, r3
 8002226:	405d      	eors	r5, r3
 8002228:	0fc4      	lsrs	r4, r0, #31
 800222a:	0028      	movs	r0, r5
 800222c:	f000 f91c 	bl	8002468 <__clzsi2>
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <__aeabi_i2d+0x5c>)
 8002232:	1a12      	subs	r2, r2, r0
 8002234:	280a      	cmp	r0, #10
 8002236:	dc16      	bgt.n	8002266 <__aeabi_i2d+0x4a>
 8002238:	0003      	movs	r3, r0
 800223a:	002e      	movs	r6, r5
 800223c:	3315      	adds	r3, #21
 800223e:	409e      	lsls	r6, r3
 8002240:	230b      	movs	r3, #11
 8002242:	1a18      	subs	r0, r3, r0
 8002244:	40c5      	lsrs	r5, r0
 8002246:	0553      	lsls	r3, r2, #21
 8002248:	032d      	lsls	r5, r5, #12
 800224a:	0b2d      	lsrs	r5, r5, #12
 800224c:	0d5b      	lsrs	r3, r3, #21
 800224e:	e003      	b.n	8002258 <__aeabi_i2d+0x3c>
 8002250:	2400      	movs	r4, #0
 8002252:	2300      	movs	r3, #0
 8002254:	2500      	movs	r5, #0
 8002256:	2600      	movs	r6, #0
 8002258:	051b      	lsls	r3, r3, #20
 800225a:	432b      	orrs	r3, r5
 800225c:	07e4      	lsls	r4, r4, #31
 800225e:	4323      	orrs	r3, r4
 8002260:	0030      	movs	r0, r6
 8002262:	0019      	movs	r1, r3
 8002264:	bd70      	pop	{r4, r5, r6, pc}
 8002266:	380b      	subs	r0, #11
 8002268:	4085      	lsls	r5, r0
 800226a:	0553      	lsls	r3, r2, #21
 800226c:	032d      	lsls	r5, r5, #12
 800226e:	2600      	movs	r6, #0
 8002270:	0b2d      	lsrs	r5, r5, #12
 8002272:	0d5b      	lsrs	r3, r3, #21
 8002274:	e7f0      	b.n	8002258 <__aeabi_i2d+0x3c>
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	0000041e 	.word	0x0000041e

0800227c <__aeabi_ui2d>:
 800227c:	b510      	push	{r4, lr}
 800227e:	1e04      	subs	r4, r0, #0
 8002280:	d010      	beq.n	80022a4 <__aeabi_ui2d+0x28>
 8002282:	f000 f8f1 	bl	8002468 <__clzsi2>
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <__aeabi_ui2d+0x48>)
 8002288:	1a1b      	subs	r3, r3, r0
 800228a:	280a      	cmp	r0, #10
 800228c:	dc11      	bgt.n	80022b2 <__aeabi_ui2d+0x36>
 800228e:	220b      	movs	r2, #11
 8002290:	0021      	movs	r1, r4
 8002292:	1a12      	subs	r2, r2, r0
 8002294:	40d1      	lsrs	r1, r2
 8002296:	3015      	adds	r0, #21
 8002298:	030a      	lsls	r2, r1, #12
 800229a:	055b      	lsls	r3, r3, #21
 800229c:	4084      	lsls	r4, r0
 800229e:	0b12      	lsrs	r2, r2, #12
 80022a0:	0d5b      	lsrs	r3, r3, #21
 80022a2:	e001      	b.n	80022a8 <__aeabi_ui2d+0x2c>
 80022a4:	2300      	movs	r3, #0
 80022a6:	2200      	movs	r2, #0
 80022a8:	051b      	lsls	r3, r3, #20
 80022aa:	4313      	orrs	r3, r2
 80022ac:	0020      	movs	r0, r4
 80022ae:	0019      	movs	r1, r3
 80022b0:	bd10      	pop	{r4, pc}
 80022b2:	0022      	movs	r2, r4
 80022b4:	380b      	subs	r0, #11
 80022b6:	4082      	lsls	r2, r0
 80022b8:	055b      	lsls	r3, r3, #21
 80022ba:	0312      	lsls	r2, r2, #12
 80022bc:	2400      	movs	r4, #0
 80022be:	0b12      	lsrs	r2, r2, #12
 80022c0:	0d5b      	lsrs	r3, r3, #21
 80022c2:	e7f1      	b.n	80022a8 <__aeabi_ui2d+0x2c>
 80022c4:	0000041e 	.word	0x0000041e

080022c8 <__aeabi_f2d>:
 80022c8:	b570      	push	{r4, r5, r6, lr}
 80022ca:	0043      	lsls	r3, r0, #1
 80022cc:	0246      	lsls	r6, r0, #9
 80022ce:	0fc4      	lsrs	r4, r0, #31
 80022d0:	20fe      	movs	r0, #254	; 0xfe
 80022d2:	0e1b      	lsrs	r3, r3, #24
 80022d4:	1c59      	adds	r1, r3, #1
 80022d6:	0a75      	lsrs	r5, r6, #9
 80022d8:	4208      	tst	r0, r1
 80022da:	d00c      	beq.n	80022f6 <__aeabi_f2d+0x2e>
 80022dc:	22e0      	movs	r2, #224	; 0xe0
 80022de:	0092      	lsls	r2, r2, #2
 80022e0:	4694      	mov	ip, r2
 80022e2:	076d      	lsls	r5, r5, #29
 80022e4:	0b36      	lsrs	r6, r6, #12
 80022e6:	4463      	add	r3, ip
 80022e8:	051b      	lsls	r3, r3, #20
 80022ea:	4333      	orrs	r3, r6
 80022ec:	07e4      	lsls	r4, r4, #31
 80022ee:	4323      	orrs	r3, r4
 80022f0:	0028      	movs	r0, r5
 80022f2:	0019      	movs	r1, r3
 80022f4:	bd70      	pop	{r4, r5, r6, pc}
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d114      	bne.n	8002324 <__aeabi_f2d+0x5c>
 80022fa:	2d00      	cmp	r5, #0
 80022fc:	d01b      	beq.n	8002336 <__aeabi_f2d+0x6e>
 80022fe:	0028      	movs	r0, r5
 8002300:	f000 f8b2 	bl	8002468 <__clzsi2>
 8002304:	280a      	cmp	r0, #10
 8002306:	dc1c      	bgt.n	8002342 <__aeabi_f2d+0x7a>
 8002308:	230b      	movs	r3, #11
 800230a:	002a      	movs	r2, r5
 800230c:	1a1b      	subs	r3, r3, r0
 800230e:	40da      	lsrs	r2, r3
 8002310:	0003      	movs	r3, r0
 8002312:	3315      	adds	r3, #21
 8002314:	409d      	lsls	r5, r3
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <__aeabi_f2d+0x88>)
 8002318:	0312      	lsls	r2, r2, #12
 800231a:	1a1b      	subs	r3, r3, r0
 800231c:	055b      	lsls	r3, r3, #21
 800231e:	0b16      	lsrs	r6, r2, #12
 8002320:	0d5b      	lsrs	r3, r3, #21
 8002322:	e7e1      	b.n	80022e8 <__aeabi_f2d+0x20>
 8002324:	2d00      	cmp	r5, #0
 8002326:	d009      	beq.n	800233c <__aeabi_f2d+0x74>
 8002328:	0b32      	lsrs	r2, r6, #12
 800232a:	2680      	movs	r6, #128	; 0x80
 800232c:	0336      	lsls	r6, r6, #12
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <__aeabi_f2d+0x8c>)
 8002330:	076d      	lsls	r5, r5, #29
 8002332:	4316      	orrs	r6, r2
 8002334:	e7d8      	b.n	80022e8 <__aeabi_f2d+0x20>
 8002336:	2300      	movs	r3, #0
 8002338:	2600      	movs	r6, #0
 800233a:	e7d5      	b.n	80022e8 <__aeabi_f2d+0x20>
 800233c:	2600      	movs	r6, #0
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <__aeabi_f2d+0x8c>)
 8002340:	e7d2      	b.n	80022e8 <__aeabi_f2d+0x20>
 8002342:	0003      	movs	r3, r0
 8002344:	002a      	movs	r2, r5
 8002346:	3b0b      	subs	r3, #11
 8002348:	409a      	lsls	r2, r3
 800234a:	2500      	movs	r5, #0
 800234c:	e7e3      	b.n	8002316 <__aeabi_f2d+0x4e>
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	00000389 	.word	0x00000389
 8002354:	000007ff 	.word	0x000007ff

08002358 <__aeabi_d2f>:
 8002358:	0002      	movs	r2, r0
 800235a:	004b      	lsls	r3, r1, #1
 800235c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235e:	0308      	lsls	r0, r1, #12
 8002360:	0d5b      	lsrs	r3, r3, #21
 8002362:	4e3d      	ldr	r6, [pc, #244]	; (8002458 <__aeabi_d2f+0x100>)
 8002364:	0fcc      	lsrs	r4, r1, #31
 8002366:	0a40      	lsrs	r0, r0, #9
 8002368:	0f51      	lsrs	r1, r2, #29
 800236a:	1c5f      	adds	r7, r3, #1
 800236c:	4308      	orrs	r0, r1
 800236e:	00d5      	lsls	r5, r2, #3
 8002370:	4237      	tst	r7, r6
 8002372:	d00a      	beq.n	800238a <__aeabi_d2f+0x32>
 8002374:	4939      	ldr	r1, [pc, #228]	; (800245c <__aeabi_d2f+0x104>)
 8002376:	185e      	adds	r6, r3, r1
 8002378:	2efe      	cmp	r6, #254	; 0xfe
 800237a:	dd16      	ble.n	80023aa <__aeabi_d2f+0x52>
 800237c:	23ff      	movs	r3, #255	; 0xff
 800237e:	2100      	movs	r1, #0
 8002380:	05db      	lsls	r3, r3, #23
 8002382:	430b      	orrs	r3, r1
 8002384:	07e0      	lsls	r0, r4, #31
 8002386:	4318      	orrs	r0, r3
 8002388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <__aeabi_d2f+0x44>
 800238e:	4328      	orrs	r0, r5
 8002390:	d027      	beq.n	80023e2 <__aeabi_d2f+0x8a>
 8002392:	2105      	movs	r1, #5
 8002394:	0189      	lsls	r1, r1, #6
 8002396:	0a49      	lsrs	r1, r1, #9
 8002398:	b2db      	uxtb	r3, r3
 800239a:	e7f1      	b.n	8002380 <__aeabi_d2f+0x28>
 800239c:	4305      	orrs	r5, r0
 800239e:	d0ed      	beq.n	800237c <__aeabi_d2f+0x24>
 80023a0:	2180      	movs	r1, #128	; 0x80
 80023a2:	03c9      	lsls	r1, r1, #15
 80023a4:	23ff      	movs	r3, #255	; 0xff
 80023a6:	4301      	orrs	r1, r0
 80023a8:	e7ea      	b.n	8002380 <__aeabi_d2f+0x28>
 80023aa:	2e00      	cmp	r6, #0
 80023ac:	dd1c      	ble.n	80023e8 <__aeabi_d2f+0x90>
 80023ae:	0192      	lsls	r2, r2, #6
 80023b0:	0011      	movs	r1, r2
 80023b2:	1e4a      	subs	r2, r1, #1
 80023b4:	4191      	sbcs	r1, r2
 80023b6:	00c0      	lsls	r0, r0, #3
 80023b8:	0f6d      	lsrs	r5, r5, #29
 80023ba:	4301      	orrs	r1, r0
 80023bc:	4329      	orrs	r1, r5
 80023be:	074b      	lsls	r3, r1, #29
 80023c0:	d048      	beq.n	8002454 <__aeabi_d2f+0xfc>
 80023c2:	230f      	movs	r3, #15
 80023c4:	400b      	ands	r3, r1
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d000      	beq.n	80023cc <__aeabi_d2f+0x74>
 80023ca:	3104      	adds	r1, #4
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	04db      	lsls	r3, r3, #19
 80023d0:	400b      	ands	r3, r1
 80023d2:	d03f      	beq.n	8002454 <__aeabi_d2f+0xfc>
 80023d4:	1c72      	adds	r2, r6, #1
 80023d6:	2efe      	cmp	r6, #254	; 0xfe
 80023d8:	d0d0      	beq.n	800237c <__aeabi_d2f+0x24>
 80023da:	0189      	lsls	r1, r1, #6
 80023dc:	0a49      	lsrs	r1, r1, #9
 80023de:	b2d3      	uxtb	r3, r2
 80023e0:	e7ce      	b.n	8002380 <__aeabi_d2f+0x28>
 80023e2:	2300      	movs	r3, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	e7cb      	b.n	8002380 <__aeabi_d2f+0x28>
 80023e8:	0032      	movs	r2, r6
 80023ea:	3217      	adds	r2, #23
 80023ec:	db22      	blt.n	8002434 <__aeabi_d2f+0xdc>
 80023ee:	2180      	movs	r1, #128	; 0x80
 80023f0:	221e      	movs	r2, #30
 80023f2:	0409      	lsls	r1, r1, #16
 80023f4:	4308      	orrs	r0, r1
 80023f6:	1b92      	subs	r2, r2, r6
 80023f8:	2a1f      	cmp	r2, #31
 80023fa:	dd1d      	ble.n	8002438 <__aeabi_d2f+0xe0>
 80023fc:	2102      	movs	r1, #2
 80023fe:	4249      	negs	r1, r1
 8002400:	1b8e      	subs	r6, r1, r6
 8002402:	0001      	movs	r1, r0
 8002404:	40f1      	lsrs	r1, r6
 8002406:	000e      	movs	r6, r1
 8002408:	2a20      	cmp	r2, #32
 800240a:	d004      	beq.n	8002416 <__aeabi_d2f+0xbe>
 800240c:	4a14      	ldr	r2, [pc, #80]	; (8002460 <__aeabi_d2f+0x108>)
 800240e:	4694      	mov	ip, r2
 8002410:	4463      	add	r3, ip
 8002412:	4098      	lsls	r0, r3
 8002414:	4305      	orrs	r5, r0
 8002416:	0029      	movs	r1, r5
 8002418:	1e4d      	subs	r5, r1, #1
 800241a:	41a9      	sbcs	r1, r5
 800241c:	4331      	orrs	r1, r6
 800241e:	2600      	movs	r6, #0
 8002420:	074b      	lsls	r3, r1, #29
 8002422:	d1ce      	bne.n	80023c2 <__aeabi_d2f+0x6a>
 8002424:	2080      	movs	r0, #128	; 0x80
 8002426:	000b      	movs	r3, r1
 8002428:	04c0      	lsls	r0, r0, #19
 800242a:	2201      	movs	r2, #1
 800242c:	4003      	ands	r3, r0
 800242e:	4201      	tst	r1, r0
 8002430:	d1d3      	bne.n	80023da <__aeabi_d2f+0x82>
 8002432:	e7af      	b.n	8002394 <__aeabi_d2f+0x3c>
 8002434:	2300      	movs	r3, #0
 8002436:	e7ac      	b.n	8002392 <__aeabi_d2f+0x3a>
 8002438:	490a      	ldr	r1, [pc, #40]	; (8002464 <__aeabi_d2f+0x10c>)
 800243a:	468c      	mov	ip, r1
 800243c:	0029      	movs	r1, r5
 800243e:	4463      	add	r3, ip
 8002440:	40d1      	lsrs	r1, r2
 8002442:	409d      	lsls	r5, r3
 8002444:	000a      	movs	r2, r1
 8002446:	0029      	movs	r1, r5
 8002448:	4098      	lsls	r0, r3
 800244a:	1e4d      	subs	r5, r1, #1
 800244c:	41a9      	sbcs	r1, r5
 800244e:	4301      	orrs	r1, r0
 8002450:	4311      	orrs	r1, r2
 8002452:	e7e4      	b.n	800241e <__aeabi_d2f+0xc6>
 8002454:	0033      	movs	r3, r6
 8002456:	e79d      	b.n	8002394 <__aeabi_d2f+0x3c>
 8002458:	000007fe 	.word	0x000007fe
 800245c:	fffffc80 	.word	0xfffffc80
 8002460:	fffffca2 	.word	0xfffffca2
 8002464:	fffffc82 	.word	0xfffffc82

08002468 <__clzsi2>:
 8002468:	211c      	movs	r1, #28
 800246a:	2301      	movs	r3, #1
 800246c:	041b      	lsls	r3, r3, #16
 800246e:	4298      	cmp	r0, r3
 8002470:	d301      	bcc.n	8002476 <__clzsi2+0xe>
 8002472:	0c00      	lsrs	r0, r0, #16
 8002474:	3910      	subs	r1, #16
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	4298      	cmp	r0, r3
 800247a:	d301      	bcc.n	8002480 <__clzsi2+0x18>
 800247c:	0a00      	lsrs	r0, r0, #8
 800247e:	3908      	subs	r1, #8
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	4298      	cmp	r0, r3
 8002484:	d301      	bcc.n	800248a <__clzsi2+0x22>
 8002486:	0900      	lsrs	r0, r0, #4
 8002488:	3904      	subs	r1, #4
 800248a:	a202      	add	r2, pc, #8	; (adr r2, 8002494 <__clzsi2+0x2c>)
 800248c:	5c10      	ldrb	r0, [r2, r0]
 800248e:	1840      	adds	r0, r0, r1
 8002490:	4770      	bx	lr
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	02020304 	.word	0x02020304
 8002498:	01010101 	.word	0x01010101
	...

080024a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024a8:	f000 fcc0 	bl	8002e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024ac:	f000 f832 	bl	8002514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024b0:	f000 f942 	bl	8002738 <MX_GPIO_Init>
  MX_TIM1_Init();
 80024b4:	f000 f890 	bl	80025d8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80024b8:	f000 f90e 	bl	80026d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80024bc:	4b11      	ldr	r3, [pc, #68]	; (8002504 <main+0x60>)
 80024be:	2100      	movs	r1, #0
 80024c0:	0018      	movs	r0, r3
 80024c2:	f001 fe3d 	bl	8004140 <HAL_TIM_IC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Ultrasonic_Read();
 80024c6:	f000 f9cf 	bl	8002868 <Ultrasonic_Read>
	  if(Distance < 10)
 80024ca:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <main+0x64>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	490f      	ldr	r1, [pc, #60]	; (800250c <main+0x68>)
 80024d0:	1c18      	adds	r0, r3, #0
 80024d2:	f7fd fffb 	bl	80004cc <__aeabi_fcmplt>
 80024d6:	1e03      	subs	r3, r0, #0
 80024d8:	d007      	beq.n	80024ea <main+0x46>
	  {
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	480c      	ldr	r0, [pc, #48]	; (8002510 <main+0x6c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	0019      	movs	r1, r3
 80024e4:	f000 fff6 	bl	80034d4 <HAL_GPIO_WritePin>
 80024e8:	e006      	b.n	80024f8 <main+0x54>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4808      	ldr	r0, [pc, #32]	; (8002510 <main+0x6c>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	0019      	movs	r1, r3
 80024f4:	f000 ffee 	bl	80034d4 <HAL_GPIO_WritePin>
	  }
	  Send_Data();
 80024f8:	f000 fa7e 	bl	80029f8 <Send_Data>
	  HAL_Delay(200);
 80024fc:	20c8      	movs	r0, #200	; 0xc8
 80024fe:	f000 fcf9 	bl	8002ef4 <HAL_Delay>
	  Ultrasonic_Read();
 8002502:	e7e0      	b.n	80024c6 <main+0x22>
 8002504:	200002b8 	.word	0x200002b8
 8002508:	20000208 	.word	0x20000208
 800250c:	41200000 	.word	0x41200000
 8002510:	48000800 	.word	0x48000800

08002514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002514:	b590      	push	{r4, r7, lr}
 8002516:	b097      	sub	sp, #92	; 0x5c
 8002518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800251a:	2428      	movs	r4, #40	; 0x28
 800251c:	193b      	adds	r3, r7, r4
 800251e:	0018      	movs	r0, r3
 8002520:	2330      	movs	r3, #48	; 0x30
 8002522:	001a      	movs	r2, r3
 8002524:	2100      	movs	r1, #0
 8002526:	f003 fd21 	bl	8005f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800252a:	2318      	movs	r3, #24
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	0018      	movs	r0, r3
 8002530:	2310      	movs	r3, #16
 8002532:	001a      	movs	r2, r3
 8002534:	2100      	movs	r1, #0
 8002536:	f003 fd19 	bl	8005f6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	0018      	movs	r0, r3
 800253e:	2314      	movs	r3, #20
 8002540:	001a      	movs	r2, r3
 8002542:	2100      	movs	r1, #0
 8002544:	f003 fd12 	bl	8005f6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002548:	0021      	movs	r1, r4
 800254a:	187b      	adds	r3, r7, r1
 800254c:	2202      	movs	r2, #2
 800254e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002550:	187b      	adds	r3, r7, r1
 8002552:	2201      	movs	r2, #1
 8002554:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002556:	187b      	adds	r3, r7, r1
 8002558:	2210      	movs	r2, #16
 800255a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800255c:	187b      	adds	r3, r7, r1
 800255e:	2202      	movs	r2, #2
 8002560:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002562:	187b      	adds	r3, r7, r1
 8002564:	2200      	movs	r2, #0
 8002566:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002568:	187b      	adds	r3, r7, r1
 800256a:	22a0      	movs	r2, #160	; 0xa0
 800256c:	0392      	lsls	r2, r2, #14
 800256e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002570:	187b      	adds	r3, r7, r1
 8002572:	2200      	movs	r2, #0
 8002574:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002576:	187b      	adds	r3, r7, r1
 8002578:	0018      	movs	r0, r3
 800257a:	f000 ffef 	bl	800355c <HAL_RCC_OscConfig>
 800257e:	1e03      	subs	r3, r0, #0
 8002580:	d001      	beq.n	8002586 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002582:	f000 fa57 	bl	8002a34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002586:	2118      	movs	r1, #24
 8002588:	187b      	adds	r3, r7, r1
 800258a:	2207      	movs	r2, #7
 800258c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800258e:	187b      	adds	r3, r7, r1
 8002590:	2202      	movs	r2, #2
 8002592:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002594:	187b      	adds	r3, r7, r1
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800259a:	187b      	adds	r3, r7, r1
 800259c:	2200      	movs	r2, #0
 800259e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80025a0:	187b      	adds	r3, r7, r1
 80025a2:	2101      	movs	r1, #1
 80025a4:	0018      	movs	r0, r3
 80025a6:	f001 faf3 	bl	8003b90 <HAL_RCC_ClockConfig>
 80025aa:	1e03      	subs	r3, r0, #0
 80025ac:	d001      	beq.n	80025b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80025ae:	f000 fa41 	bl	8002a34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	2201      	movs	r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	0018      	movs	r0, r3
 80025c2:	f001 fc37 	bl	8003e34 <HAL_RCCEx_PeriphCLKConfig>
 80025c6:	1e03      	subs	r3, r0, #0
 80025c8:	d001      	beq.n	80025ce <SystemClock_Config+0xba>
  {
    Error_Handler();
 80025ca:	f000 fa33 	bl	8002a34 <Error_Handler>
  }
}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b017      	add	sp, #92	; 0x5c
 80025d4:	bd90      	pop	{r4, r7, pc}
	...

080025d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08a      	sub	sp, #40	; 0x28
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025de:	2318      	movs	r3, #24
 80025e0:	18fb      	adds	r3, r7, r3
 80025e2:	0018      	movs	r0, r3
 80025e4:	2310      	movs	r3, #16
 80025e6:	001a      	movs	r2, r3
 80025e8:	2100      	movs	r1, #0
 80025ea:	f003 fcbf 	bl	8005f6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ee:	2310      	movs	r3, #16
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	0018      	movs	r0, r3
 80025f4:	2308      	movs	r3, #8
 80025f6:	001a      	movs	r2, r3
 80025f8:	2100      	movs	r1, #0
 80025fa:	f003 fcb7 	bl	8005f6c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80025fe:	003b      	movs	r3, r7
 8002600:	0018      	movs	r0, r3
 8002602:	2310      	movs	r3, #16
 8002604:	001a      	movs	r2, r3
 8002606:	2100      	movs	r1, #0
 8002608:	f003 fcb0 	bl	8005f6c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800260c:	4b2f      	ldr	r3, [pc, #188]	; (80026cc <MX_TIM1_Init+0xf4>)
 800260e:	4a30      	ldr	r2, [pc, #192]	; (80026d0 <MX_TIM1_Init+0xf8>)
 8002610:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8002612:	4b2e      	ldr	r3, [pc, #184]	; (80026cc <MX_TIM1_Init+0xf4>)
 8002614:	222f      	movs	r2, #47	; 0x2f
 8002616:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002618:	4b2c      	ldr	r3, [pc, #176]	; (80026cc <MX_TIM1_Init+0xf4>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800261e:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <MX_TIM1_Init+0xf4>)
 8002620:	4a2c      	ldr	r2, [pc, #176]	; (80026d4 <MX_TIM1_Init+0xfc>)
 8002622:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002624:	4b29      	ldr	r3, [pc, #164]	; (80026cc <MX_TIM1_Init+0xf4>)
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800262a:	4b28      	ldr	r3, [pc, #160]	; (80026cc <MX_TIM1_Init+0xf4>)
 800262c:	2200      	movs	r2, #0
 800262e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002630:	4b26      	ldr	r3, [pc, #152]	; (80026cc <MX_TIM1_Init+0xf4>)
 8002632:	2200      	movs	r2, #0
 8002634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002636:	4b25      	ldr	r3, [pc, #148]	; (80026cc <MX_TIM1_Init+0xf4>)
 8002638:	0018      	movs	r0, r3
 800263a:	f001 fcd9 	bl	8003ff0 <HAL_TIM_Base_Init>
 800263e:	1e03      	subs	r3, r0, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002642:	f000 f9f7 	bl	8002a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002646:	2118      	movs	r1, #24
 8002648:	187b      	adds	r3, r7, r1
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	0152      	lsls	r2, r2, #5
 800264e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002650:	187a      	adds	r2, r7, r1
 8002652:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <MX_TIM1_Init+0xf4>)
 8002654:	0011      	movs	r1, r2
 8002656:	0018      	movs	r0, r3
 8002658:	f002 f83a 	bl	80046d0 <HAL_TIM_ConfigClockSource>
 800265c:	1e03      	subs	r3, r0, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8002660:	f000 f9e8 	bl	8002a34 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002664:	4b19      	ldr	r3, [pc, #100]	; (80026cc <MX_TIM1_Init+0xf4>)
 8002666:	0018      	movs	r0, r3
 8002668:	f001 fd12 	bl	8004090 <HAL_TIM_IC_Init>
 800266c:	1e03      	subs	r3, r0, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002670:	f000 f9e0 	bl	8002a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002674:	2110      	movs	r1, #16
 8002676:	187b      	adds	r3, r7, r1
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800267c:	187b      	adds	r3, r7, r1
 800267e:	2200      	movs	r2, #0
 8002680:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002682:	187a      	adds	r2, r7, r1
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <MX_TIM1_Init+0xf4>)
 8002686:	0011      	movs	r1, r2
 8002688:	0018      	movs	r0, r3
 800268a:	f002 fbab 	bl	8004de4 <HAL_TIMEx_MasterConfigSynchronization>
 800268e:	1e03      	subs	r3, r0, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002692:	f000 f9cf 	bl	8002a34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002696:	003b      	movs	r3, r7
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800269c:	003b      	movs	r3, r7
 800269e:	2201      	movs	r2, #1
 80026a0:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80026a2:	003b      	movs	r3, r7
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80026a8:	003b      	movs	r3, r7
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80026ae:	0039      	movs	r1, r7
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <MX_TIM1_Init+0xf4>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	0018      	movs	r0, r3
 80026b6:	f001 ff67 	bl	8004588 <HAL_TIM_IC_ConfigChannel>
 80026ba:	1e03      	subs	r3, r0, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 80026be:	f000 f9b9 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b00a      	add	sp, #40	; 0x28
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	200002b8 	.word	0x200002b8
 80026d0:	40012c00 	.word	0x40012c00
 80026d4:	0000fffe 	.word	0x0000fffe

080026d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026dc:	4b14      	ldr	r3, [pc, #80]	; (8002730 <MX_USART1_UART_Init+0x58>)
 80026de:	4a15      	ldr	r2, [pc, #84]	; (8002734 <MX_USART1_UART_Init+0x5c>)
 80026e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80026e2:	4b13      	ldr	r3, [pc, #76]	; (8002730 <MX_USART1_UART_Init+0x58>)
 80026e4:	2296      	movs	r2, #150	; 0x96
 80026e6:	0192      	lsls	r2, r2, #6
 80026e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <MX_USART1_UART_Init+0x58>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <MX_USART1_UART_Init+0x58>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <MX_USART1_UART_Init+0x58>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <MX_USART1_UART_Init+0x58>)
 80026fe:	220c      	movs	r2, #12
 8002700:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <MX_USART1_UART_Init+0x58>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <MX_USART1_UART_Init+0x58>)
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <MX_USART1_UART_Init+0x58>)
 8002710:	2200      	movs	r2, #0
 8002712:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <MX_USART1_UART_Init+0x58>)
 8002716:	2200      	movs	r2, #0
 8002718:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <MX_USART1_UART_Init+0x58>)
 800271c:	0018      	movs	r0, r3
 800271e:	f002 fbcf 	bl	8004ec0 <HAL_UART_Init>
 8002722:	1e03      	subs	r3, r0, #0
 8002724:	d001      	beq.n	800272a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002726:	f000 f985 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000234 	.word	0x20000234
 8002734:	40013800 	.word	0x40013800

08002738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b089      	sub	sp, #36	; 0x24
 800273c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273e:	240c      	movs	r4, #12
 8002740:	193b      	adds	r3, r7, r4
 8002742:	0018      	movs	r0, r3
 8002744:	2314      	movs	r3, #20
 8002746:	001a      	movs	r2, r3
 8002748:	2100      	movs	r1, #0
 800274a:	f003 fc0f 	bl	8005f6c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800274e:	4b37      	ldr	r3, [pc, #220]	; (800282c <MX_GPIO_Init+0xf4>)
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	4b36      	ldr	r3, [pc, #216]	; (800282c <MX_GPIO_Init+0xf4>)
 8002754:	2180      	movs	r1, #128	; 0x80
 8002756:	0289      	lsls	r1, r1, #10
 8002758:	430a      	orrs	r2, r1
 800275a:	615a      	str	r2, [r3, #20]
 800275c:	4b33      	ldr	r3, [pc, #204]	; (800282c <MX_GPIO_Init+0xf4>)
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	029b      	lsls	r3, r3, #10
 8002764:	4013      	ands	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800276a:	4b30      	ldr	r3, [pc, #192]	; (800282c <MX_GPIO_Init+0xf4>)
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	4b2f      	ldr	r3, [pc, #188]	; (800282c <MX_GPIO_Init+0xf4>)
 8002770:	2180      	movs	r1, #128	; 0x80
 8002772:	0309      	lsls	r1, r1, #12
 8002774:	430a      	orrs	r2, r1
 8002776:	615a      	str	r2, [r3, #20]
 8002778:	4b2c      	ldr	r3, [pc, #176]	; (800282c <MX_GPIO_Init+0xf4>)
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	031b      	lsls	r3, r3, #12
 8002780:	4013      	ands	r3, r2
 8002782:	607b      	str	r3, [r7, #4]
 8002784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 8002786:	2390      	movs	r3, #144	; 0x90
 8002788:	05db      	lsls	r3, r3, #23
 800278a:	2200      	movs	r2, #0
 800278c:	2140      	movs	r1, #64	; 0x40
 800278e:	0018      	movs	r0, r3
 8002790:	f000 fea0 	bl	80034d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4825      	ldr	r0, [pc, #148]	; (8002830 <MX_GPIO_Init+0xf8>)
 800279a:	2200      	movs	r2, #0
 800279c:	0019      	movs	r1, r3
 800279e:	f000 fe99 	bl	80034d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80027a2:	193b      	adds	r3, r7, r4
 80027a4:	2201      	movs	r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027a8:	193b      	adds	r3, r7, r4
 80027aa:	2288      	movs	r2, #136	; 0x88
 80027ac:	0352      	lsls	r2, r2, #13
 80027ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	193b      	adds	r3, r7, r4
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80027b6:	193a      	adds	r2, r7, r4
 80027b8:	2390      	movs	r3, #144	; 0x90
 80027ba:	05db      	lsls	r3, r3, #23
 80027bc:	0011      	movs	r1, r2
 80027be:	0018      	movs	r0, r3
 80027c0:	f000 fd18 	bl	80031f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : US_TRIG_Pin */
  GPIO_InitStruct.Pin = US_TRIG_Pin;
 80027c4:	193b      	adds	r3, r7, r4
 80027c6:	2240      	movs	r2, #64	; 0x40
 80027c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ca:	193b      	adds	r3, r7, r4
 80027cc:	2201      	movs	r2, #1
 80027ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	193b      	adds	r3, r7, r4
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	193b      	adds	r3, r7, r4
 80027d8:	2200      	movs	r2, #0
 80027da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(US_TRIG_GPIO_Port, &GPIO_InitStruct);
 80027dc:	193a      	adds	r2, r7, r4
 80027de:	2390      	movs	r3, #144	; 0x90
 80027e0:	05db      	lsls	r3, r3, #23
 80027e2:	0011      	movs	r1, r2
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 fd05 	bl	80031f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80027ea:	0021      	movs	r1, r4
 80027ec:	187b      	adds	r3, r7, r1
 80027ee:	2280      	movs	r2, #128	; 0x80
 80027f0:	0052      	lsls	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f4:	187b      	adds	r3, r7, r1
 80027f6:	2201      	movs	r2, #1
 80027f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	187b      	adds	r3, r7, r1
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002800:	187b      	adds	r3, r7, r1
 8002802:	2200      	movs	r2, #0
 8002804:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002806:	187b      	adds	r3, r7, r1
 8002808:	4a09      	ldr	r2, [pc, #36]	; (8002830 <MX_GPIO_Init+0xf8>)
 800280a:	0019      	movs	r1, r3
 800280c:	0010      	movs	r0, r2
 800280e:	f000 fcf1 	bl	80031f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	2100      	movs	r1, #0
 8002816:	2005      	movs	r0, #5
 8002818:	f000 fc3c 	bl	8003094 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800281c:	2005      	movs	r0, #5
 800281e:	f000 fc4e 	bl	80030be <HAL_NVIC_EnableIRQ>

}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	b009      	add	sp, #36	; 0x24
 8002828:	bd90      	pop	{r4, r7, pc}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	40021000 	.word	0x40021000
 8002830:	48000800 	.word	0x48000800

08002834 <delay>:

/* USER CODE BEGIN 4 */
void delay (uint16_t time)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	0002      	movs	r2, r0
 800283c:	1dbb      	adds	r3, r7, #6
 800283e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002840:	4b08      	ldr	r3, [pc, #32]	; (8002864 <delay+0x30>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2200      	movs	r2, #0
 8002846:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <delay+0x30>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002850:	1dbb      	adds	r3, r7, #6
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d3f8      	bcc.n	800284a <delay+0x16>
}
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	46bd      	mov	sp, r7
 800285e:	b002      	add	sp, #8
 8002860:	bd80      	pop	{r7, pc}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	200002b8 	.word	0x200002b8

08002868 <Ultrasonic_Read>:

void Ultrasonic_Read()
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_SET);
 800286c:	2390      	movs	r3, #144	; 0x90
 800286e:	05db      	lsls	r3, r3, #23
 8002870:	2201      	movs	r2, #1
 8002872:	2140      	movs	r1, #64	; 0x40
 8002874:	0018      	movs	r0, r3
 8002876:	f000 fe2d 	bl	80034d4 <HAL_GPIO_WritePin>
	delay(10);
 800287a:	200a      	movs	r0, #10
 800287c:	f7ff ffda 	bl	8002834 <delay>
	HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 8002880:	2390      	movs	r3, #144	; 0x90
 8002882:	05db      	lsls	r3, r3, #23
 8002884:	2200      	movs	r2, #0
 8002886:	2140      	movs	r1, #64	; 0x40
 8002888:	0018      	movs	r0, r3
 800288a:	f000 fe23 	bl	80034d4 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <Ultrasonic_Read+0x3c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	4b03      	ldr	r3, [pc, #12]	; (80028a4 <Ultrasonic_Read+0x3c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2102      	movs	r1, #2
 800289a:	430a      	orrs	r2, r1
 800289c:	60da      	str	r2, [r3, #12]

}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	200002b8 	.word	0x200002b8

080028a8 <HAL_TIM_IC_CaptureCallback>:


// the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
	if((htim->Instance == TIM1) && (htim-> Channel == HAL_TIM_ACTIVE_CHANNEL_1))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a46      	ldr	r2, [pc, #280]	; (80029d0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d000      	beq.n	80028bc <HAL_TIM_IC_CaptureCallback+0x14>
 80028ba:	e084      	b.n	80029c6 <HAL_TIM_IC_CaptureCallback+0x11e>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	7f1b      	ldrb	r3, [r3, #28]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d000      	beq.n	80028c6 <HAL_TIM_IC_CaptureCallback+0x1e>
 80028c4:	e07f      	b.n	80029c6 <HAL_TIM_IC_CaptureCallback+0x11e>
	{
	// if the interrupt source is channel1

			if (!Is_First_Captured) // if the first value is not captured
 80028c6:	4b43      	ldr	r3, [pc, #268]	; (80029d4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2201      	movs	r2, #1
 80028cc:	4053      	eors	r3, r2
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01b      	beq.n	800290c <HAL_TIM_IC_CaptureCallback+0x64>
			{
				First_Val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2100      	movs	r1, #0
 80028d8:	0018      	movs	r0, r3
 80028da:	f001 ffcd 	bl	8004878 <HAL_TIM_ReadCapturedValue>
 80028de:	0002      	movs	r2, r0
 80028e0:	4b3d      	ldr	r3, [pc, #244]	; (80029d8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80028e2:	601a      	str	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6a1a      	ldr	r2, [r3, #32]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	210a      	movs	r1, #10
 80028f0:	438a      	bics	r2, r1
 80028f2:	621a      	str	r2, [r3, #32]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6a1a      	ldr	r2, [r3, #32]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2102      	movs	r1, #2
 8002900:	430a      	orrs	r2, r1
 8002902:	621a      	str	r2, [r3, #32]
				Is_First_Captured = 1;  // set the first captured as true
 8002904:	4b33      	ldr	r3, [pc, #204]	; (80029d4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002906:	2201      	movs	r2, #1
 8002908:	701a      	strb	r2, [r3, #0]
				Is_First_Captured = 0; // set it back to false
			}

	}

}
 800290a:	e05c      	b.n	80029c6 <HAL_TIM_IC_CaptureCallback+0x11e>
				Sec_Val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2100      	movs	r1, #0
 8002910:	0018      	movs	r0, r3
 8002912:	f001 ffb1 	bl	8004878 <HAL_TIM_ReadCapturedValue>
 8002916:	0002      	movs	r2, r0
 8002918:	4b30      	ldr	r3, [pc, #192]	; (80029dc <HAL_TIM_IC_CaptureCallback+0x134>)
 800291a:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2200      	movs	r2, #0
 8002922:	625a      	str	r2, [r3, #36]	; 0x24
				if (Sec_Val > First_Val)
 8002924:	4b2d      	ldr	r3, [pc, #180]	; (80029dc <HAL_TIM_IC_CaptureCallback+0x134>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_TIM_IC_CaptureCallback+0x130>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d907      	bls.n	8002940 <HAL_TIM_IC_CaptureCallback+0x98>
					Difference = Sec_Val-First_Val;
 8002930:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <HAL_TIM_IC_CaptureCallback+0x134>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	1ad2      	subs	r2, r2, r3
 800293a:	4b29      	ldr	r3, [pc, #164]	; (80029e0 <HAL_TIM_IC_CaptureCallback+0x138>)
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	e00e      	b.n	800295e <HAL_TIM_IC_CaptureCallback+0xb6>
				else if (First_Val > Sec_Val)
 8002940:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b25      	ldr	r3, [pc, #148]	; (80029dc <HAL_TIM_IC_CaptureCallback+0x134>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d908      	bls.n	800295e <HAL_TIM_IC_CaptureCallback+0xb6>
					Difference = (0xffff - First_Val) + Sec_Val;
 800294c:	4b23      	ldr	r3, [pc, #140]	; (80029dc <HAL_TIM_IC_CaptureCallback+0x134>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b21      	ldr	r3, [pc, #132]	; (80029d8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	4a23      	ldr	r2, [pc, #140]	; (80029e4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002958:	189a      	adds	r2, r3, r2
 800295a:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <HAL_TIM_IC_CaptureCallback+0x138>)
 800295c:	601a      	str	r2, [r3, #0]
				Distance = Difference * .034/2;
 800295e:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	0018      	movs	r0, r3
 8002964:	f7ff fc8a 	bl	800227c <__aeabi_ui2d>
 8002968:	4a1f      	ldr	r2, [pc, #124]	; (80029e8 <HAL_TIM_IC_CaptureCallback+0x140>)
 800296a:	4b20      	ldr	r3, [pc, #128]	; (80029ec <HAL_TIM_IC_CaptureCallback+0x144>)
 800296c:	f7fe fe04 	bl	8001578 <__aeabi_dmul>
 8002970:	0002      	movs	r2, r0
 8002972:	000b      	movs	r3, r1
 8002974:	0010      	movs	r0, r2
 8002976:	0019      	movs	r1, r3
 8002978:	2200      	movs	r2, #0
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	05db      	lsls	r3, r3, #23
 800297e:	f7fe f9f5 	bl	8000d6c <__aeabi_ddiv>
 8002982:	0002      	movs	r2, r0
 8002984:	000b      	movs	r3, r1
 8002986:	0010      	movs	r0, r2
 8002988:	0019      	movs	r1, r3
 800298a:	f7ff fce5 	bl	8002358 <__aeabi_d2f>
 800298e:	1c02      	adds	r2, r0, #0
 8002990:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <HAL_TIM_IC_CaptureCallback+0x148>)
 8002992:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6a1a      	ldr	r2, [r3, #32]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	210a      	movs	r1, #10
 80029a0:	438a      	bics	r2, r1
 80029a2:	621a      	str	r2, [r3, #32]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6a12      	ldr	r2, [r2, #32]
 80029ae:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80029b0:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2102      	movs	r1, #2
 80029bc:	438a      	bics	r2, r1
 80029be:	60da      	str	r2, [r3, #12]
				Is_First_Captured = 0; // set it back to false
 80029c0:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b002      	add	sp, #8
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	20000204 	.word	0x20000204
 80029d8:	200001f8 	.word	0x200001f8
 80029dc:	200001fc 	.word	0x200001fc
 80029e0:	20000200 	.word	0x20000200
 80029e4:	0000ffff 	.word	0x0000ffff
 80029e8:	b020c49c 	.word	0xb020c49c
 80029ec:	3fa16872 	.word	0x3fa16872
 80029f0:	20000208 	.word	0x20000208
 80029f4:	200002b8 	.word	0x200002b8

080029f8 <Send_Data>:

char TEXT[25] = {0};


void Send_Data()
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
    sprintf(TEXT, "Distance = %.2fcm\r\n", Distance);
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <Send_Data+0x2c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	1c18      	adds	r0, r3, #0
 8002a02:	f7ff fc61 	bl	80022c8 <__aeabi_f2d>
 8002a06:	0002      	movs	r2, r0
 8002a08:	000b      	movs	r3, r1
 8002a0a:	4907      	ldr	r1, [pc, #28]	; (8002a28 <Send_Data+0x30>)
 8002a0c:	4807      	ldr	r0, [pc, #28]	; (8002a2c <Send_Data+0x34>)
 8002a0e:	f003 ff2f 	bl	8006870 <siprintf>
//    sprintf(TEXT, "%.2f\r\n", Difference);
//    sprintf(str, "%d, %d\r\n", First_Val, Sec_Val);

    HAL_UART_Transmit_IT(&huart1, TEXT, sizeof(TEXT));
 8002a12:	4906      	ldr	r1, [pc, #24]	; (8002a2c <Send_Data+0x34>)
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <Send_Data+0x38>)
 8002a16:	2219      	movs	r2, #25
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f002 faa5 	bl	8004f68 <HAL_UART_Transmit_IT>
}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000208 	.word	0x20000208
 8002a28:	08008e30 	.word	0x08008e30
 8002a2c:	2000020c 	.word	0x2000020c
 8002a30:	20000234 	.word	0x20000234

08002a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a38:	b672      	cpsid	i
}
 8002a3a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a3c:	e7fe      	b.n	8002a3c <Error_Handler+0x8>
	...

08002a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a46:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <HAL_MspInit+0x44>)
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <HAL_MspInit+0x44>)
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	619a      	str	r2, [r3, #24]
 8002a52:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <HAL_MspInit+0x44>)
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2201      	movs	r2, #1
 8002a58:	4013      	ands	r3, r2
 8002a5a:	607b      	str	r3, [r7, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_MspInit+0x44>)
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <HAL_MspInit+0x44>)
 8002a64:	2180      	movs	r1, #128	; 0x80
 8002a66:	0549      	lsls	r1, r1, #21
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	61da      	str	r2, [r3, #28]
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_MspInit+0x44>)
 8002a6e:	69da      	ldr	r2, [r3, #28]
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	055b      	lsls	r3, r3, #21
 8002a74:	4013      	ands	r3, r2
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b002      	add	sp, #8
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	40021000 	.word	0x40021000

08002a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a88:	b590      	push	{r4, r7, lr}
 8002a8a:	b08b      	sub	sp, #44	; 0x2c
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	2414      	movs	r4, #20
 8002a92:	193b      	adds	r3, r7, r4
 8002a94:	0018      	movs	r0, r3
 8002a96:	2314      	movs	r3, #20
 8002a98:	001a      	movs	r2, r3
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	f003 fa66 	bl	8005f6c <memset>
  if(htim_base->Instance==TIM1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a21      	ldr	r2, [pc, #132]	; (8002b2c <HAL_TIM_Base_MspInit+0xa4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d13b      	bne.n	8002b22 <HAL_TIM_Base_MspInit+0x9a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002aaa:	4b21      	ldr	r3, [pc, #132]	; (8002b30 <HAL_TIM_Base_MspInit+0xa8>)
 8002aac:	699a      	ldr	r2, [r3, #24]
 8002aae:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <HAL_TIM_Base_MspInit+0xa8>)
 8002ab0:	2180      	movs	r1, #128	; 0x80
 8002ab2:	0109      	lsls	r1, r1, #4
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	619a      	str	r2, [r3, #24]
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <HAL_TIM_Base_MspInit+0xa8>)
 8002aba:	699a      	ldr	r2, [r3, #24]
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac6:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <HAL_TIM_Base_MspInit+0xa8>)
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <HAL_TIM_Base_MspInit+0xa8>)
 8002acc:	2180      	movs	r1, #128	; 0x80
 8002ace:	0289      	lsls	r1, r1, #10
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	615a      	str	r2, [r3, #20]
 8002ad4:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <HAL_TIM_Base_MspInit+0xa8>)
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	029b      	lsls	r3, r3, #10
 8002adc:	4013      	ands	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ae2:	193b      	adds	r3, r7, r4
 8002ae4:	2280      	movs	r2, #128	; 0x80
 8002ae6:	0052      	lsls	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aea:	0021      	movs	r1, r4
 8002aec:	187b      	adds	r3, r7, r1
 8002aee:	2202      	movs	r2, #2
 8002af0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	187b      	adds	r3, r7, r1
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af8:	187b      	adds	r3, r7, r1
 8002afa:	2200      	movs	r2, #0
 8002afc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	2202      	movs	r2, #2
 8002b02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b04:	187a      	adds	r2, r7, r1
 8002b06:	2390      	movs	r3, #144	; 0x90
 8002b08:	05db      	lsls	r3, r3, #23
 8002b0a:	0011      	movs	r1, r2
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f000 fb71 	bl	80031f4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002b12:	2200      	movs	r2, #0
 8002b14:	2100      	movs	r1, #0
 8002b16:	200e      	movs	r0, #14
 8002b18:	f000 fabc 	bl	8003094 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002b1c:	200e      	movs	r0, #14
 8002b1e:	f000 face 	bl	80030be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b00b      	add	sp, #44	; 0x2c
 8002b28:	bd90      	pop	{r4, r7, pc}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	40012c00 	.word	0x40012c00
 8002b30:	40021000 	.word	0x40021000

08002b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b34:	b590      	push	{r4, r7, lr}
 8002b36:	b08b      	sub	sp, #44	; 0x2c
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3c:	2414      	movs	r4, #20
 8002b3e:	193b      	adds	r3, r7, r4
 8002b40:	0018      	movs	r0, r3
 8002b42:	2314      	movs	r3, #20
 8002b44:	001a      	movs	r2, r3
 8002b46:	2100      	movs	r1, #0
 8002b48:	f003 fa10 	bl	8005f6c <memset>
  if(huart->Instance==USART1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a21      	ldr	r2, [pc, #132]	; (8002bd8 <HAL_UART_MspInit+0xa4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d13b      	bne.n	8002bce <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b56:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <HAL_UART_MspInit+0xa8>)
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	4b20      	ldr	r3, [pc, #128]	; (8002bdc <HAL_UART_MspInit+0xa8>)
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	01c9      	lsls	r1, r1, #7
 8002b60:	430a      	orrs	r2, r1
 8002b62:	619a      	str	r2, [r3, #24]
 8002b64:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <HAL_UART_MspInit+0xa8>)
 8002b66:	699a      	ldr	r2, [r3, #24]
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	01db      	lsls	r3, r3, #7
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b72:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <HAL_UART_MspInit+0xa8>)
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_UART_MspInit+0xa8>)
 8002b78:	2180      	movs	r1, #128	; 0x80
 8002b7a:	0289      	lsls	r1, r1, #10
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	615a      	str	r2, [r3, #20]
 8002b80:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <HAL_UART_MspInit+0xa8>)
 8002b82:	695a      	ldr	r2, [r3, #20]
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	029b      	lsls	r3, r3, #10
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b8e:	193b      	adds	r3, r7, r4
 8002b90:	22c0      	movs	r2, #192	; 0xc0
 8002b92:	00d2      	lsls	r2, r2, #3
 8002b94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b96:	0021      	movs	r1, r4
 8002b98:	187b      	adds	r3, r7, r1
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	187b      	adds	r3, r7, r1
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ba4:	187b      	adds	r3, r7, r1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002baa:	187b      	adds	r3, r7, r1
 8002bac:	2201      	movs	r2, #1
 8002bae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb0:	187a      	adds	r2, r7, r1
 8002bb2:	2390      	movs	r3, #144	; 0x90
 8002bb4:	05db      	lsls	r3, r3, #23
 8002bb6:	0011      	movs	r1, r2
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 fb1b 	bl	80031f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	201b      	movs	r0, #27
 8002bc4:	f000 fa66 	bl	8003094 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bc8:	201b      	movs	r0, #27
 8002bca:	f000 fa78 	bl	80030be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b00b      	add	sp, #44	; 0x2c
 8002bd4:	bd90      	pop	{r4, r7, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	40013800 	.word	0x40013800
 8002bdc:	40021000 	.word	0x40021000

08002be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002be4:	e7fe      	b.n	8002be4 <NMI_Handler+0x4>

08002be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bea:	e7fe      	b.n	8002bea <HardFault_Handler+0x4>

08002bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c04:	f000 f95a 	bl	8002ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c08:	46c0      	nop			; (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002c12:	2001      	movs	r0, #1
 8002c14:	f000 fc7c 	bl	8003510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002c18:	46c0      	nop			; (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <TIM1_CC_IRQHandler+0x14>)
 8002c26:	0018      	movs	r0, r3
 8002c28:	f001 fb98 	bl	800435c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002c2c:	46c0      	nop			; (mov r8, r8)
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	200002b8 	.word	0x200002b8

08002c38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c3c:	4b03      	ldr	r3, [pc, #12]	; (8002c4c <USART1_IRQHandler+0x14>)
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f002 fa12 	bl	8005068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c44:	46c0      	nop			; (mov r8, r8)
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	20000234 	.word	0x20000234

08002c50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
	return 1;
 8002c54:	2301      	movs	r3, #1
}
 8002c56:	0018      	movs	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <_kill>:

int _kill(int pid, int sig)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c66:	f003 f957 	bl	8005f18 <__errno>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	2216      	movs	r2, #22
 8002c6e:	601a      	str	r2, [r3, #0]
	return -1;
 8002c70:	2301      	movs	r3, #1
 8002c72:	425b      	negs	r3, r3
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b002      	add	sp, #8
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <_exit>:

void _exit (int status)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c84:	2301      	movs	r3, #1
 8002c86:	425a      	negs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	0011      	movs	r1, r2
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7ff ffe5 	bl	8002c5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c92:	e7fe      	b.n	8002c92 <_exit+0x16>

08002c94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	e00a      	b.n	8002cbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ca6:	e000      	b.n	8002caa <_read+0x16>
 8002ca8:	bf00      	nop
 8002caa:	0001      	movs	r1, r0
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	60ba      	str	r2, [r7, #8]
 8002cb2:	b2ca      	uxtb	r2, r1
 8002cb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	dbf0      	blt.n	8002ca6 <_read+0x12>
	}

return len;
 8002cc4:	687b      	ldr	r3, [r7, #4]
}
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b006      	add	sp, #24
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	e009      	b.n	8002cf4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	60ba      	str	r2, [r7, #8]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	0018      	movs	r0, r3
 8002cea:	e000      	b.n	8002cee <_write+0x20>
 8002cec:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	dbf1      	blt.n	8002ce0 <_write+0x12>
	}
	return len;
 8002cfc:	687b      	ldr	r3, [r7, #4]
}
 8002cfe:	0018      	movs	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b006      	add	sp, #24
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_close>:

int _close(int file)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
	return -1;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	425b      	negs	r3, r3
}
 8002d12:	0018      	movs	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b002      	add	sp, #8
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2280      	movs	r2, #128	; 0x80
 8002d28:	0192      	lsls	r2, r2, #6
 8002d2a:	605a      	str	r2, [r3, #4]
	return 0;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	0018      	movs	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b002      	add	sp, #8
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <_isatty>:

int _isatty(int file)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
	return 1;
 8002d3e:	2301      	movs	r3, #1
}
 8002d40:	0018      	movs	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b002      	add	sp, #8
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
	return 0;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	0018      	movs	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b004      	add	sp, #16
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d68:	4a14      	ldr	r2, [pc, #80]	; (8002dbc <_sbrk+0x5c>)
 8002d6a:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <_sbrk+0x60>)
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d74:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <_sbrk+0x64>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d102      	bne.n	8002d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <_sbrk+0x64>)
 8002d7e:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <_sbrk+0x68>)
 8002d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <_sbrk+0x64>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	18d3      	adds	r3, r2, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d207      	bcs.n	8002da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d90:	f003 f8c2 	bl	8005f18 <__errno>
 8002d94:	0003      	movs	r3, r0
 8002d96:	220c      	movs	r2, #12
 8002d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	425b      	negs	r3, r3
 8002d9e:	e009      	b.n	8002db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <_sbrk+0x64>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002da6:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <_sbrk+0x64>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	18d2      	adds	r2, r2, r3
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <_sbrk+0x64>)
 8002db0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002db2:	68fb      	ldr	r3, [r7, #12]
}
 8002db4:	0018      	movs	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b006      	add	sp, #24
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20002000 	.word	0x20002000
 8002dc0:	00000400 	.word	0x00000400
 8002dc4:	20000228 	.word	0x20000228
 8002dc8:	20000318 	.word	0x20000318

08002dcc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002dd0:	46c0      	nop			; (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002dd8:	480d      	ldr	r0, [pc, #52]	; (8002e10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dda:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ddc:	480d      	ldr	r0, [pc, #52]	; (8002e14 <LoopForever+0x6>)
  ldr r1, =_edata
 8002dde:	490e      	ldr	r1, [pc, #56]	; (8002e18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002de0:	4a0e      	ldr	r2, [pc, #56]	; (8002e1c <LoopForever+0xe>)
  movs r3, #0
 8002de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002de4:	e002      	b.n	8002dec <LoopCopyDataInit>

08002de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dea:	3304      	adds	r3, #4

08002dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002df0:	d3f9      	bcc.n	8002de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002df2:	4a0b      	ldr	r2, [pc, #44]	; (8002e20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002df4:	4c0b      	ldr	r4, [pc, #44]	; (8002e24 <LoopForever+0x16>)
  movs r3, #0
 8002df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df8:	e001      	b.n	8002dfe <LoopFillZerobss>

08002dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dfc:	3204      	adds	r2, #4

08002dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e00:	d3fb      	bcc.n	8002dfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002e02:	f7ff ffe3 	bl	8002dcc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002e06:	f003 f88d 	bl	8005f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e0a:	f7ff fb4b 	bl	80024a4 <main>

08002e0e <LoopForever>:

LoopForever:
    b LoopForever
 8002e0e:	e7fe      	b.n	8002e0e <LoopForever>
  ldr   r0, =_estack
 8002e10:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e18:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002e1c:	080092e4 	.word	0x080092e4
  ldr r2, =_sbss
 8002e20:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002e24:	20000314 	.word	0x20000314

08002e28 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e28:	e7fe      	b.n	8002e28 <ADC1_COMP_IRQHandler>
	...

08002e2c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e30:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <HAL_Init+0x24>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <HAL_Init+0x24>)
 8002e36:	2110      	movs	r1, #16
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002e3c:	2003      	movs	r0, #3
 8002e3e:	f000 f809 	bl	8002e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e42:	f7ff fdfd 	bl	8002a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	40022000 	.word	0x40022000

08002e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e54:	b590      	push	{r4, r7, lr}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <HAL_InitTick+0x5c>)
 8002e5e:	681c      	ldr	r4, [r3, #0]
 8002e60:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <HAL_InitTick+0x60>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	0019      	movs	r1, r3
 8002e66:	23fa      	movs	r3, #250	; 0xfa
 8002e68:	0098      	lsls	r0, r3, #2
 8002e6a:	f7fd f969 	bl	8000140 <__udivsi3>
 8002e6e:	0003      	movs	r3, r0
 8002e70:	0019      	movs	r1, r3
 8002e72:	0020      	movs	r0, r4
 8002e74:	f7fd f964 	bl	8000140 <__udivsi3>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 f92f 	bl	80030de <HAL_SYSTICK_Config>
 8002e80:	1e03      	subs	r3, r0, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e00f      	b.n	8002ea8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d80b      	bhi.n	8002ea6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	2301      	movs	r3, #1
 8002e92:	425b      	negs	r3, r3
 8002e94:	2200      	movs	r2, #0
 8002e96:	0018      	movs	r0, r3
 8002e98:	f000 f8fc 	bl	8003094 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_InitTick+0x64>)
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e000      	b.n	8002ea8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b003      	add	sp, #12
 8002eae:	bd90      	pop	{r4, r7, pc}
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	20000008 	.word	0x20000008
 8002eb8:	20000004 	.word	0x20000004

08002ebc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <HAL_IncTick+0x1c>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	001a      	movs	r2, r3
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_IncTick+0x20>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	18d2      	adds	r2, r2, r3
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <HAL_IncTick+0x20>)
 8002ece:	601a      	str	r2, [r3, #0]
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	20000008 	.word	0x20000008
 8002edc:	20000300 	.word	0x20000300

08002ee0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee4:	4b02      	ldr	r3, [pc, #8]	; (8002ef0 <HAL_GetTick+0x10>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	20000300 	.word	0x20000300

08002ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002efc:	f7ff fff0 	bl	8002ee0 <HAL_GetTick>
 8002f00:	0003      	movs	r3, r0
 8002f02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	d005      	beq.n	8002f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <HAL_Delay+0x44>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	001a      	movs	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	189b      	adds	r3, r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	f7ff ffe0 	bl	8002ee0 <HAL_GetTick>
 8002f20:	0002      	movs	r2, r0
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d8f7      	bhi.n	8002f1c <HAL_Delay+0x28>
  {
  }
}
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b004      	add	sp, #16
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	20000008 	.word	0x20000008

08002f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	0002      	movs	r2, r0
 8002f44:	1dfb      	adds	r3, r7, #7
 8002f46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f48:	1dfb      	adds	r3, r7, #7
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8002f4e:	d809      	bhi.n	8002f64 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f50:	1dfb      	adds	r3, r7, #7
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	001a      	movs	r2, r3
 8002f56:	231f      	movs	r3, #31
 8002f58:	401a      	ands	r2, r3
 8002f5a:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <__NVIC_EnableIRQ+0x30>)
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	4091      	lsls	r1, r2
 8002f60:	000a      	movs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]
  }
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b002      	add	sp, #8
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	e000e100 	.word	0xe000e100

08002f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	0002      	movs	r2, r0
 8002f78:	6039      	str	r1, [r7, #0]
 8002f7a:	1dfb      	adds	r3, r7, #7
 8002f7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f7e:	1dfb      	adds	r3, r7, #7
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b7f      	cmp	r3, #127	; 0x7f
 8002f84:	d828      	bhi.n	8002fd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f86:	4a2f      	ldr	r2, [pc, #188]	; (8003044 <__NVIC_SetPriority+0xd4>)
 8002f88:	1dfb      	adds	r3, r7, #7
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	b25b      	sxtb	r3, r3
 8002f8e:	089b      	lsrs	r3, r3, #2
 8002f90:	33c0      	adds	r3, #192	; 0xc0
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	589b      	ldr	r3, [r3, r2]
 8002f96:	1dfa      	adds	r2, r7, #7
 8002f98:	7812      	ldrb	r2, [r2, #0]
 8002f9a:	0011      	movs	r1, r2
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	00d2      	lsls	r2, r2, #3
 8002fa2:	21ff      	movs	r1, #255	; 0xff
 8002fa4:	4091      	lsls	r1, r2
 8002fa6:	000a      	movs	r2, r1
 8002fa8:	43d2      	mvns	r2, r2
 8002faa:	401a      	ands	r2, r3
 8002fac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	019b      	lsls	r3, r3, #6
 8002fb2:	22ff      	movs	r2, #255	; 0xff
 8002fb4:	401a      	ands	r2, r3
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	0018      	movs	r0, r3
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	4003      	ands	r3, r0
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fc4:	481f      	ldr	r0, [pc, #124]	; (8003044 <__NVIC_SetPriority+0xd4>)
 8002fc6:	1dfb      	adds	r3, r7, #7
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	b25b      	sxtb	r3, r3
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	33c0      	adds	r3, #192	; 0xc0
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002fd6:	e031      	b.n	800303c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fd8:	4a1b      	ldr	r2, [pc, #108]	; (8003048 <__NVIC_SetPriority+0xd8>)
 8002fda:	1dfb      	adds	r3, r7, #7
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	0019      	movs	r1, r3
 8002fe0:	230f      	movs	r3, #15
 8002fe2:	400b      	ands	r3, r1
 8002fe4:	3b08      	subs	r3, #8
 8002fe6:	089b      	lsrs	r3, r3, #2
 8002fe8:	3306      	adds	r3, #6
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	18d3      	adds	r3, r2, r3
 8002fee:	3304      	adds	r3, #4
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	1dfa      	adds	r2, r7, #7
 8002ff4:	7812      	ldrb	r2, [r2, #0]
 8002ff6:	0011      	movs	r1, r2
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	400a      	ands	r2, r1
 8002ffc:	00d2      	lsls	r2, r2, #3
 8002ffe:	21ff      	movs	r1, #255	; 0xff
 8003000:	4091      	lsls	r1, r2
 8003002:	000a      	movs	r2, r1
 8003004:	43d2      	mvns	r2, r2
 8003006:	401a      	ands	r2, r3
 8003008:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	019b      	lsls	r3, r3, #6
 800300e:	22ff      	movs	r2, #255	; 0xff
 8003010:	401a      	ands	r2, r3
 8003012:	1dfb      	adds	r3, r7, #7
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	0018      	movs	r0, r3
 8003018:	2303      	movs	r3, #3
 800301a:	4003      	ands	r3, r0
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003020:	4809      	ldr	r0, [pc, #36]	; (8003048 <__NVIC_SetPriority+0xd8>)
 8003022:	1dfb      	adds	r3, r7, #7
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	001c      	movs	r4, r3
 8003028:	230f      	movs	r3, #15
 800302a:	4023      	ands	r3, r4
 800302c:	3b08      	subs	r3, #8
 800302e:	089b      	lsrs	r3, r3, #2
 8003030:	430a      	orrs	r2, r1
 8003032:	3306      	adds	r3, #6
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	18c3      	adds	r3, r0, r3
 8003038:	3304      	adds	r3, #4
 800303a:	601a      	str	r2, [r3, #0]
}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b003      	add	sp, #12
 8003042:	bd90      	pop	{r4, r7, pc}
 8003044:	e000e100 	.word	0xe000e100
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	1e5a      	subs	r2, r3, #1
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	045b      	lsls	r3, r3, #17
 800305c:	429a      	cmp	r2, r3
 800305e:	d301      	bcc.n	8003064 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003060:	2301      	movs	r3, #1
 8003062:	e010      	b.n	8003086 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003064:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <SysTick_Config+0x44>)
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	3a01      	subs	r2, #1
 800306a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800306c:	2301      	movs	r3, #1
 800306e:	425b      	negs	r3, r3
 8003070:	2103      	movs	r1, #3
 8003072:	0018      	movs	r0, r3
 8003074:	f7ff ff7c 	bl	8002f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <SysTick_Config+0x44>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800307e:	4b04      	ldr	r3, [pc, #16]	; (8003090 <SysTick_Config+0x44>)
 8003080:	2207      	movs	r2, #7
 8003082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003084:	2300      	movs	r3, #0
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b002      	add	sp, #8
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	e000e010 	.word	0xe000e010

08003094 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	210f      	movs	r1, #15
 80030a0:	187b      	adds	r3, r7, r1
 80030a2:	1c02      	adds	r2, r0, #0
 80030a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	b25b      	sxtb	r3, r3
 80030ae:	0011      	movs	r1, r2
 80030b0:	0018      	movs	r0, r3
 80030b2:	f7ff ff5d 	bl	8002f70 <__NVIC_SetPriority>
}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b004      	add	sp, #16
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	0002      	movs	r2, r0
 80030c6:	1dfb      	adds	r3, r7, #7
 80030c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ca:	1dfb      	adds	r3, r7, #7
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	b25b      	sxtb	r3, r3
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7ff ff33 	bl	8002f3c <__NVIC_EnableIRQ>
}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	46bd      	mov	sp, r7
 80030da:	b002      	add	sp, #8
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	0018      	movs	r0, r3
 80030ea:	f7ff ffaf 	bl	800304c <SysTick_Config>
 80030ee:	0003      	movs	r3, r0
}
 80030f0:	0018      	movs	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b002      	add	sp, #8
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2221      	movs	r2, #33	; 0x21
 8003104:	5c9b      	ldrb	r3, [r3, r2]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d008      	beq.n	800311e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2204      	movs	r2, #4
 8003110:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2220      	movs	r2, #32
 8003116:	2100      	movs	r1, #0
 8003118:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e020      	b.n	8003160 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	210e      	movs	r1, #14
 800312a:	438a      	bics	r2, r1
 800312c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2101      	movs	r1, #1
 800313a:	438a      	bics	r2, r1
 800313c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003146:	2101      	movs	r1, #1
 8003148:	4091      	lsls	r1, r2
 800314a:	000a      	movs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2221      	movs	r2, #33	; 0x21
 8003152:	2101      	movs	r1, #1
 8003154:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	2100      	movs	r1, #0
 800315c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	b002      	add	sp, #8
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003170:	210f      	movs	r1, #15
 8003172:	187b      	adds	r3, r7, r1
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2221      	movs	r2, #33	; 0x21
 800317c:	5c9b      	ldrb	r3, [r3, r2]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d006      	beq.n	8003192 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2204      	movs	r2, #4
 8003188:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800318a:	187b      	adds	r3, r7, r1
 800318c:	2201      	movs	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]
 8003190:	e028      	b.n	80031e4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	210e      	movs	r1, #14
 800319e:	438a      	bics	r2, r1
 80031a0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2101      	movs	r1, #1
 80031ae:	438a      	bics	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ba:	2101      	movs	r1, #1
 80031bc:	4091      	lsls	r1, r2
 80031be:	000a      	movs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2221      	movs	r2, #33	; 0x21
 80031c6:	2101      	movs	r1, #1
 80031c8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2220      	movs	r2, #32
 80031ce:	2100      	movs	r1, #0
 80031d0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d004      	beq.n	80031e4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	0010      	movs	r0, r2
 80031e2:	4798      	blx	r3
    } 
  }
  return status;
 80031e4:	230f      	movs	r3, #15
 80031e6:	18fb      	adds	r3, r7, r3
 80031e8:	781b      	ldrb	r3, [r3, #0]
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b004      	add	sp, #16
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003202:	e14f      	b.n	80034a4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2101      	movs	r1, #1
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4091      	lsls	r1, r2
 800320e:	000a      	movs	r2, r1
 8003210:	4013      	ands	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d100      	bne.n	800321c <HAL_GPIO_Init+0x28>
 800321a:	e140      	b.n	800349e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2203      	movs	r2, #3
 8003222:	4013      	ands	r3, r2
 8003224:	2b01      	cmp	r3, #1
 8003226:	d005      	beq.n	8003234 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2203      	movs	r2, #3
 800322e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003230:	2b02      	cmp	r3, #2
 8003232:	d130      	bne.n	8003296 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	2203      	movs	r2, #3
 8003240:	409a      	lsls	r2, r3
 8003242:	0013      	movs	r3, r2
 8003244:	43da      	mvns	r2, r3
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4013      	ands	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	409a      	lsls	r2, r3
 8003256:	0013      	movs	r3, r2
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800326a:	2201      	movs	r2, #1
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	409a      	lsls	r2, r3
 8003270:	0013      	movs	r3, r2
 8003272:	43da      	mvns	r2, r3
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4013      	ands	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	2201      	movs	r2, #1
 8003282:	401a      	ands	r2, r3
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	409a      	lsls	r2, r3
 8003288:	0013      	movs	r3, r2
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2203      	movs	r2, #3
 800329c:	4013      	ands	r3, r2
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d017      	beq.n	80032d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	2203      	movs	r2, #3
 80032ae:	409a      	lsls	r2, r3
 80032b0:	0013      	movs	r3, r2
 80032b2:	43da      	mvns	r2, r3
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4013      	ands	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	409a      	lsls	r2, r3
 80032c4:	0013      	movs	r3, r2
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2203      	movs	r2, #3
 80032d8:	4013      	ands	r3, r2
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d123      	bne.n	8003326 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	08da      	lsrs	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3208      	adds	r2, #8
 80032e6:	0092      	lsls	r2, r2, #2
 80032e8:	58d3      	ldr	r3, [r2, r3]
 80032ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2207      	movs	r2, #7
 80032f0:	4013      	ands	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	220f      	movs	r2, #15
 80032f6:	409a      	lsls	r2, r3
 80032f8:	0013      	movs	r3, r2
 80032fa:	43da      	mvns	r2, r3
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4013      	ands	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2107      	movs	r1, #7
 800330a:	400b      	ands	r3, r1
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	409a      	lsls	r2, r3
 8003310:	0013      	movs	r3, r2
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	08da      	lsrs	r2, r3, #3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3208      	adds	r2, #8
 8003320:	0092      	lsls	r2, r2, #2
 8003322:	6939      	ldr	r1, [r7, #16]
 8003324:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	2203      	movs	r2, #3
 8003332:	409a      	lsls	r2, r3
 8003334:	0013      	movs	r3, r2
 8003336:	43da      	mvns	r2, r3
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4013      	ands	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2203      	movs	r2, #3
 8003344:	401a      	ands	r2, r3
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	409a      	lsls	r2, r3
 800334c:	0013      	movs	r3, r2
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	23c0      	movs	r3, #192	; 0xc0
 8003360:	029b      	lsls	r3, r3, #10
 8003362:	4013      	ands	r3, r2
 8003364:	d100      	bne.n	8003368 <HAL_GPIO_Init+0x174>
 8003366:	e09a      	b.n	800349e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003368:	4b54      	ldr	r3, [pc, #336]	; (80034bc <HAL_GPIO_Init+0x2c8>)
 800336a:	699a      	ldr	r2, [r3, #24]
 800336c:	4b53      	ldr	r3, [pc, #332]	; (80034bc <HAL_GPIO_Init+0x2c8>)
 800336e:	2101      	movs	r1, #1
 8003370:	430a      	orrs	r2, r1
 8003372:	619a      	str	r2, [r3, #24]
 8003374:	4b51      	ldr	r3, [pc, #324]	; (80034bc <HAL_GPIO_Init+0x2c8>)
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	2201      	movs	r2, #1
 800337a:	4013      	ands	r3, r2
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003380:	4a4f      	ldr	r2, [pc, #316]	; (80034c0 <HAL_GPIO_Init+0x2cc>)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	089b      	lsrs	r3, r3, #2
 8003386:	3302      	adds	r3, #2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	589b      	ldr	r3, [r3, r2]
 800338c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2203      	movs	r2, #3
 8003392:	4013      	ands	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	220f      	movs	r2, #15
 8003398:	409a      	lsls	r2, r3
 800339a:	0013      	movs	r3, r2
 800339c:	43da      	mvns	r2, r3
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4013      	ands	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	2390      	movs	r3, #144	; 0x90
 80033a8:	05db      	lsls	r3, r3, #23
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d013      	beq.n	80033d6 <HAL_GPIO_Init+0x1e2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a44      	ldr	r2, [pc, #272]	; (80034c4 <HAL_GPIO_Init+0x2d0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00d      	beq.n	80033d2 <HAL_GPIO_Init+0x1de>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a43      	ldr	r2, [pc, #268]	; (80034c8 <HAL_GPIO_Init+0x2d4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d007      	beq.n	80033ce <HAL_GPIO_Init+0x1da>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a42      	ldr	r2, [pc, #264]	; (80034cc <HAL_GPIO_Init+0x2d8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d101      	bne.n	80033ca <HAL_GPIO_Init+0x1d6>
 80033c6:	2303      	movs	r3, #3
 80033c8:	e006      	b.n	80033d8 <HAL_GPIO_Init+0x1e4>
 80033ca:	2305      	movs	r3, #5
 80033cc:	e004      	b.n	80033d8 <HAL_GPIO_Init+0x1e4>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e002      	b.n	80033d8 <HAL_GPIO_Init+0x1e4>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_GPIO_Init+0x1e4>
 80033d6:	2300      	movs	r3, #0
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	2103      	movs	r1, #3
 80033dc:	400a      	ands	r2, r1
 80033de:	0092      	lsls	r2, r2, #2
 80033e0:	4093      	lsls	r3, r2
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033e8:	4935      	ldr	r1, [pc, #212]	; (80034c0 <HAL_GPIO_Init+0x2cc>)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	3302      	adds	r3, #2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033f6:	4b36      	ldr	r3, [pc, #216]	; (80034d0 <HAL_GPIO_Init+0x2dc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	43da      	mvns	r2, r3
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	2380      	movs	r3, #128	; 0x80
 800340c:	025b      	lsls	r3, r3, #9
 800340e:	4013      	ands	r3, r2
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800341a:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <HAL_GPIO_Init+0x2dc>)
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003420:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <HAL_GPIO_Init+0x2dc>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	43da      	mvns	r2, r3
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4013      	ands	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	2380      	movs	r3, #128	; 0x80
 8003436:	029b      	lsls	r3, r3, #10
 8003438:	4013      	ands	r3, r2
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003444:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <HAL_GPIO_Init+0x2dc>)
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800344a:	4b21      	ldr	r3, [pc, #132]	; (80034d0 <HAL_GPIO_Init+0x2dc>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	43da      	mvns	r2, r3
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4013      	ands	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	035b      	lsls	r3, r3, #13
 8003462:	4013      	ands	r3, r2
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <HAL_GPIO_Init+0x2dc>)
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003474:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <HAL_GPIO_Init+0x2dc>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	43da      	mvns	r2, r3
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4013      	ands	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	2380      	movs	r3, #128	; 0x80
 800348a:	039b      	lsls	r3, r3, #14
 800348c:	4013      	ands	r3, r2
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003498:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <HAL_GPIO_Init+0x2dc>)
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	3301      	adds	r3, #1
 80034a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	1e13      	subs	r3, r2, #0
 80034ae:	d000      	beq.n	80034b2 <HAL_GPIO_Init+0x2be>
 80034b0:	e6a8      	b.n	8003204 <HAL_GPIO_Init+0x10>
  } 
}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	46c0      	nop			; (mov r8, r8)
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b006      	add	sp, #24
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40010000 	.word	0x40010000
 80034c4:	48000400 	.word	0x48000400
 80034c8:	48000800 	.word	0x48000800
 80034cc:	48000c00 	.word	0x48000c00
 80034d0:	40010400 	.word	0x40010400

080034d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	0008      	movs	r0, r1
 80034de:	0011      	movs	r1, r2
 80034e0:	1cbb      	adds	r3, r7, #2
 80034e2:	1c02      	adds	r2, r0, #0
 80034e4:	801a      	strh	r2, [r3, #0]
 80034e6:	1c7b      	adds	r3, r7, #1
 80034e8:	1c0a      	adds	r2, r1, #0
 80034ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034ec:	1c7b      	adds	r3, r7, #1
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d004      	beq.n	80034fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034f4:	1cbb      	adds	r3, r7, #2
 80034f6:	881a      	ldrh	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034fc:	e003      	b.n	8003506 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034fe:	1cbb      	adds	r3, r7, #2
 8003500:	881a      	ldrh	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	b002      	add	sp, #8
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	0002      	movs	r2, r0
 8003518:	1dbb      	adds	r3, r7, #6
 800351a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800351c:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	1dba      	adds	r2, r7, #6
 8003522:	8812      	ldrh	r2, [r2, #0]
 8003524:	4013      	ands	r3, r2
 8003526:	d008      	beq.n	800353a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800352a:	1dba      	adds	r2, r7, #6
 800352c:	8812      	ldrh	r2, [r2, #0]
 800352e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003530:	1dbb      	adds	r3, r7, #6
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	0018      	movs	r0, r3
 8003536:	f000 f807 	bl	8003548 <HAL_GPIO_EXTI_Callback>
  }
}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	46bd      	mov	sp, r7
 800353e:	b002      	add	sp, #8
 8003540:	bd80      	pop	{r7, pc}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	40010400 	.word	0x40010400

08003548 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	0002      	movs	r2, r0
 8003550:	1dbb      	adds	r3, r7, #6
 8003552:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	b002      	add	sp, #8
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e301      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2201      	movs	r2, #1
 8003574:	4013      	ands	r3, r2
 8003576:	d100      	bne.n	800357a <HAL_RCC_OscConfig+0x1e>
 8003578:	e08d      	b.n	8003696 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800357a:	4bc3      	ldr	r3, [pc, #780]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	220c      	movs	r2, #12
 8003580:	4013      	ands	r3, r2
 8003582:	2b04      	cmp	r3, #4
 8003584:	d00e      	beq.n	80035a4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003586:	4bc0      	ldr	r3, [pc, #768]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	220c      	movs	r2, #12
 800358c:	4013      	ands	r3, r2
 800358e:	2b08      	cmp	r3, #8
 8003590:	d116      	bne.n	80035c0 <HAL_RCC_OscConfig+0x64>
 8003592:	4bbd      	ldr	r3, [pc, #756]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	025b      	lsls	r3, r3, #9
 800359a:	401a      	ands	r2, r3
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	025b      	lsls	r3, r3, #9
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d10d      	bne.n	80035c0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	4bb8      	ldr	r3, [pc, #736]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	2380      	movs	r3, #128	; 0x80
 80035aa:	029b      	lsls	r3, r3, #10
 80035ac:	4013      	ands	r3, r2
 80035ae:	d100      	bne.n	80035b2 <HAL_RCC_OscConfig+0x56>
 80035b0:	e070      	b.n	8003694 <HAL_RCC_OscConfig+0x138>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d000      	beq.n	80035bc <HAL_RCC_OscConfig+0x60>
 80035ba:	e06b      	b.n	8003694 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e2d8      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d107      	bne.n	80035d8 <HAL_RCC_OscConfig+0x7c>
 80035c8:	4baf      	ldr	r3, [pc, #700]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4bae      	ldr	r3, [pc, #696]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 80035ce:	2180      	movs	r1, #128	; 0x80
 80035d0:	0249      	lsls	r1, r1, #9
 80035d2:	430a      	orrs	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	e02f      	b.n	8003638 <HAL_RCC_OscConfig+0xdc>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10c      	bne.n	80035fa <HAL_RCC_OscConfig+0x9e>
 80035e0:	4ba9      	ldr	r3, [pc, #676]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4ba8      	ldr	r3, [pc, #672]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 80035e6:	49a9      	ldr	r1, [pc, #676]	; (800388c <HAL_RCC_OscConfig+0x330>)
 80035e8:	400a      	ands	r2, r1
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	4ba6      	ldr	r3, [pc, #664]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	4ba5      	ldr	r3, [pc, #660]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 80035f2:	49a7      	ldr	r1, [pc, #668]	; (8003890 <HAL_RCC_OscConfig+0x334>)
 80035f4:	400a      	ands	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	e01e      	b.n	8003638 <HAL_RCC_OscConfig+0xdc>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b05      	cmp	r3, #5
 8003600:	d10e      	bne.n	8003620 <HAL_RCC_OscConfig+0xc4>
 8003602:	4ba1      	ldr	r3, [pc, #644]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	4ba0      	ldr	r3, [pc, #640]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003608:	2180      	movs	r1, #128	; 0x80
 800360a:	02c9      	lsls	r1, r1, #11
 800360c:	430a      	orrs	r2, r1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	4b9d      	ldr	r3, [pc, #628]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4b9c      	ldr	r3, [pc, #624]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003616:	2180      	movs	r1, #128	; 0x80
 8003618:	0249      	lsls	r1, r1, #9
 800361a:	430a      	orrs	r2, r1
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	e00b      	b.n	8003638 <HAL_RCC_OscConfig+0xdc>
 8003620:	4b99      	ldr	r3, [pc, #612]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	4b98      	ldr	r3, [pc, #608]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003626:	4999      	ldr	r1, [pc, #612]	; (800388c <HAL_RCC_OscConfig+0x330>)
 8003628:	400a      	ands	r2, r1
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	4b96      	ldr	r3, [pc, #600]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	4b95      	ldr	r3, [pc, #596]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003632:	4997      	ldr	r1, [pc, #604]	; (8003890 <HAL_RCC_OscConfig+0x334>)
 8003634:	400a      	ands	r2, r1
 8003636:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d014      	beq.n	800366a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7ff fc4e 	bl	8002ee0 <HAL_GetTick>
 8003644:	0003      	movs	r3, r0
 8003646:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800364a:	f7ff fc49 	bl	8002ee0 <HAL_GetTick>
 800364e:	0002      	movs	r2, r0
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b64      	cmp	r3, #100	; 0x64
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e28a      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365c:	4b8a      	ldr	r3, [pc, #552]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	029b      	lsls	r3, r3, #10
 8003664:	4013      	ands	r3, r2
 8003666:	d0f0      	beq.n	800364a <HAL_RCC_OscConfig+0xee>
 8003668:	e015      	b.n	8003696 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366a:	f7ff fc39 	bl	8002ee0 <HAL_GetTick>
 800366e:	0003      	movs	r3, r0
 8003670:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003674:	f7ff fc34 	bl	8002ee0 <HAL_GetTick>
 8003678:	0002      	movs	r2, r0
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	; 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e275      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003686:	4b80      	ldr	r3, [pc, #512]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	2380      	movs	r3, #128	; 0x80
 800368c:	029b      	lsls	r3, r3, #10
 800368e:	4013      	ands	r3, r2
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x118>
 8003692:	e000      	b.n	8003696 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003694:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2202      	movs	r2, #2
 800369c:	4013      	ands	r3, r2
 800369e:	d100      	bne.n	80036a2 <HAL_RCC_OscConfig+0x146>
 80036a0:	e069      	b.n	8003776 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036a2:	4b79      	ldr	r3, [pc, #484]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	220c      	movs	r2, #12
 80036a8:	4013      	ands	r3, r2
 80036aa:	d00b      	beq.n	80036c4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80036ac:	4b76      	ldr	r3, [pc, #472]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	220c      	movs	r2, #12
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d11c      	bne.n	80036f2 <HAL_RCC_OscConfig+0x196>
 80036b8:	4b73      	ldr	r3, [pc, #460]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	2380      	movs	r3, #128	; 0x80
 80036be:	025b      	lsls	r3, r3, #9
 80036c0:	4013      	ands	r3, r2
 80036c2:	d116      	bne.n	80036f2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c4:	4b70      	ldr	r3, [pc, #448]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2202      	movs	r2, #2
 80036ca:	4013      	ands	r3, r2
 80036cc:	d005      	beq.n	80036da <HAL_RCC_OscConfig+0x17e>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d001      	beq.n	80036da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e24b      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036da:	4b6b      	ldr	r3, [pc, #428]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	22f8      	movs	r2, #248	; 0xf8
 80036e0:	4393      	bics	r3, r2
 80036e2:	0019      	movs	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	00da      	lsls	r2, r3, #3
 80036ea:	4b67      	ldr	r3, [pc, #412]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 80036ec:	430a      	orrs	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f0:	e041      	b.n	8003776 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d024      	beq.n	8003744 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036fa:	4b63      	ldr	r3, [pc, #396]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b62      	ldr	r3, [pc, #392]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003700:	2101      	movs	r1, #1
 8003702:	430a      	orrs	r2, r1
 8003704:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003706:	f7ff fbeb 	bl	8002ee0 <HAL_GetTick>
 800370a:	0003      	movs	r3, r0
 800370c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003710:	f7ff fbe6 	bl	8002ee0 <HAL_GetTick>
 8003714:	0002      	movs	r2, r0
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e227      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003722:	4b59      	ldr	r3, [pc, #356]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2202      	movs	r2, #2
 8003728:	4013      	ands	r3, r2
 800372a:	d0f1      	beq.n	8003710 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372c:	4b56      	ldr	r3, [pc, #344]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	22f8      	movs	r2, #248	; 0xf8
 8003732:	4393      	bics	r3, r2
 8003734:	0019      	movs	r1, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	00da      	lsls	r2, r3, #3
 800373c:	4b52      	ldr	r3, [pc, #328]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 800373e:	430a      	orrs	r2, r1
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	e018      	b.n	8003776 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003744:	4b50      	ldr	r3, [pc, #320]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b4f      	ldr	r3, [pc, #316]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 800374a:	2101      	movs	r1, #1
 800374c:	438a      	bics	r2, r1
 800374e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003750:	f7ff fbc6 	bl	8002ee0 <HAL_GetTick>
 8003754:	0003      	movs	r3, r0
 8003756:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800375a:	f7ff fbc1 	bl	8002ee0 <HAL_GetTick>
 800375e:	0002      	movs	r2, r0
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e202      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376c:	4b46      	ldr	r3, [pc, #280]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2202      	movs	r2, #2
 8003772:	4013      	ands	r3, r2
 8003774:	d1f1      	bne.n	800375a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2208      	movs	r2, #8
 800377c:	4013      	ands	r3, r2
 800377e:	d036      	beq.n	80037ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d019      	beq.n	80037bc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003788:	4b3f      	ldr	r3, [pc, #252]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 800378a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800378c:	4b3e      	ldr	r3, [pc, #248]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 800378e:	2101      	movs	r1, #1
 8003790:	430a      	orrs	r2, r1
 8003792:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003794:	f7ff fba4 	bl	8002ee0 <HAL_GetTick>
 8003798:	0003      	movs	r3, r0
 800379a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800379e:	f7ff fb9f 	bl	8002ee0 <HAL_GetTick>
 80037a2:	0002      	movs	r2, r0
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e1e0      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b0:	4b35      	ldr	r3, [pc, #212]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	2202      	movs	r2, #2
 80037b6:	4013      	ands	r3, r2
 80037b8:	d0f1      	beq.n	800379e <HAL_RCC_OscConfig+0x242>
 80037ba:	e018      	b.n	80037ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037bc:	4b32      	ldr	r3, [pc, #200]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 80037be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037c0:	4b31      	ldr	r3, [pc, #196]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 80037c2:	2101      	movs	r1, #1
 80037c4:	438a      	bics	r2, r1
 80037c6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c8:	f7ff fb8a 	bl	8002ee0 <HAL_GetTick>
 80037cc:	0003      	movs	r3, r0
 80037ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037d2:	f7ff fb85 	bl	8002ee0 <HAL_GetTick>
 80037d6:	0002      	movs	r2, r0
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e1c6      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e4:	4b28      	ldr	r3, [pc, #160]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	2202      	movs	r2, #2
 80037ea:	4013      	ands	r3, r2
 80037ec:	d1f1      	bne.n	80037d2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2204      	movs	r2, #4
 80037f4:	4013      	ands	r3, r2
 80037f6:	d100      	bne.n	80037fa <HAL_RCC_OscConfig+0x29e>
 80037f8:	e0b4      	b.n	8003964 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037fa:	201f      	movs	r0, #31
 80037fc:	183b      	adds	r3, r7, r0
 80037fe:	2200      	movs	r2, #0
 8003800:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003802:	4b21      	ldr	r3, [pc, #132]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003804:	69da      	ldr	r2, [r3, #28]
 8003806:	2380      	movs	r3, #128	; 0x80
 8003808:	055b      	lsls	r3, r3, #21
 800380a:	4013      	ands	r3, r2
 800380c:	d110      	bne.n	8003830 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800380e:	4b1e      	ldr	r3, [pc, #120]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003810:	69da      	ldr	r2, [r3, #28]
 8003812:	4b1d      	ldr	r3, [pc, #116]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003814:	2180      	movs	r1, #128	; 0x80
 8003816:	0549      	lsls	r1, r1, #21
 8003818:	430a      	orrs	r2, r1
 800381a:	61da      	str	r2, [r3, #28]
 800381c:	4b1a      	ldr	r3, [pc, #104]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 800381e:	69da      	ldr	r2, [r3, #28]
 8003820:	2380      	movs	r3, #128	; 0x80
 8003822:	055b      	lsls	r3, r3, #21
 8003824:	4013      	ands	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800382a:	183b      	adds	r3, r7, r0
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003830:	4b18      	ldr	r3, [pc, #96]	; (8003894 <HAL_RCC_OscConfig+0x338>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4013      	ands	r3, r2
 800383a:	d11a      	bne.n	8003872 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800383c:	4b15      	ldr	r3, [pc, #84]	; (8003894 <HAL_RCC_OscConfig+0x338>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b14      	ldr	r3, [pc, #80]	; (8003894 <HAL_RCC_OscConfig+0x338>)
 8003842:	2180      	movs	r1, #128	; 0x80
 8003844:	0049      	lsls	r1, r1, #1
 8003846:	430a      	orrs	r2, r1
 8003848:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384a:	f7ff fb49 	bl	8002ee0 <HAL_GetTick>
 800384e:	0003      	movs	r3, r0
 8003850:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003854:	f7ff fb44 	bl	8002ee0 <HAL_GetTick>
 8003858:	0002      	movs	r2, r0
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e185      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003866:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_RCC_OscConfig+0x338>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	4013      	ands	r3, r2
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d10e      	bne.n	8003898 <HAL_RCC_OscConfig+0x33c>
 800387a:	4b03      	ldr	r3, [pc, #12]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 800387c:	6a1a      	ldr	r2, [r3, #32]
 800387e:	4b02      	ldr	r3, [pc, #8]	; (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003880:	2101      	movs	r1, #1
 8003882:	430a      	orrs	r2, r1
 8003884:	621a      	str	r2, [r3, #32]
 8003886:	e035      	b.n	80038f4 <HAL_RCC_OscConfig+0x398>
 8003888:	40021000 	.word	0x40021000
 800388c:	fffeffff 	.word	0xfffeffff
 8003890:	fffbffff 	.word	0xfffbffff
 8003894:	40007000 	.word	0x40007000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10c      	bne.n	80038ba <HAL_RCC_OscConfig+0x35e>
 80038a0:	4bb6      	ldr	r3, [pc, #728]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038a2:	6a1a      	ldr	r2, [r3, #32]
 80038a4:	4bb5      	ldr	r3, [pc, #724]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038a6:	2101      	movs	r1, #1
 80038a8:	438a      	bics	r2, r1
 80038aa:	621a      	str	r2, [r3, #32]
 80038ac:	4bb3      	ldr	r3, [pc, #716]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038ae:	6a1a      	ldr	r2, [r3, #32]
 80038b0:	4bb2      	ldr	r3, [pc, #712]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038b2:	2104      	movs	r1, #4
 80038b4:	438a      	bics	r2, r1
 80038b6:	621a      	str	r2, [r3, #32]
 80038b8:	e01c      	b.n	80038f4 <HAL_RCC_OscConfig+0x398>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b05      	cmp	r3, #5
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0x380>
 80038c2:	4bae      	ldr	r3, [pc, #696]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038c4:	6a1a      	ldr	r2, [r3, #32]
 80038c6:	4bad      	ldr	r3, [pc, #692]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038c8:	2104      	movs	r1, #4
 80038ca:	430a      	orrs	r2, r1
 80038cc:	621a      	str	r2, [r3, #32]
 80038ce:	4bab      	ldr	r3, [pc, #684]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038d0:	6a1a      	ldr	r2, [r3, #32]
 80038d2:	4baa      	ldr	r3, [pc, #680]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038d4:	2101      	movs	r1, #1
 80038d6:	430a      	orrs	r2, r1
 80038d8:	621a      	str	r2, [r3, #32]
 80038da:	e00b      	b.n	80038f4 <HAL_RCC_OscConfig+0x398>
 80038dc:	4ba7      	ldr	r3, [pc, #668]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038de:	6a1a      	ldr	r2, [r3, #32]
 80038e0:	4ba6      	ldr	r3, [pc, #664]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038e2:	2101      	movs	r1, #1
 80038e4:	438a      	bics	r2, r1
 80038e6:	621a      	str	r2, [r3, #32]
 80038e8:	4ba4      	ldr	r3, [pc, #656]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038ea:	6a1a      	ldr	r2, [r3, #32]
 80038ec:	4ba3      	ldr	r3, [pc, #652]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038ee:	2104      	movs	r1, #4
 80038f0:	438a      	bics	r2, r1
 80038f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d014      	beq.n	8003926 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fc:	f7ff faf0 	bl	8002ee0 <HAL_GetTick>
 8003900:	0003      	movs	r3, r0
 8003902:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003904:	e009      	b.n	800391a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003906:	f7ff faeb 	bl	8002ee0 <HAL_GetTick>
 800390a:	0002      	movs	r2, r0
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	4a9b      	ldr	r2, [pc, #620]	; (8003b80 <HAL_RCC_OscConfig+0x624>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e12b      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391a:	4b98      	ldr	r3, [pc, #608]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	2202      	movs	r2, #2
 8003920:	4013      	ands	r3, r2
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x3aa>
 8003924:	e013      	b.n	800394e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003926:	f7ff fadb 	bl	8002ee0 <HAL_GetTick>
 800392a:	0003      	movs	r3, r0
 800392c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800392e:	e009      	b.n	8003944 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003930:	f7ff fad6 	bl	8002ee0 <HAL_GetTick>
 8003934:	0002      	movs	r2, r0
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	4a91      	ldr	r2, [pc, #580]	; (8003b80 <HAL_RCC_OscConfig+0x624>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e116      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003944:	4b8d      	ldr	r3, [pc, #564]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	2202      	movs	r2, #2
 800394a:	4013      	ands	r3, r2
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800394e:	231f      	movs	r3, #31
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d105      	bne.n	8003964 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003958:	4b88      	ldr	r3, [pc, #544]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	4b87      	ldr	r3, [pc, #540]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 800395e:	4989      	ldr	r1, [pc, #548]	; (8003b84 <HAL_RCC_OscConfig+0x628>)
 8003960:	400a      	ands	r2, r1
 8003962:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2210      	movs	r2, #16
 800396a:	4013      	ands	r3, r2
 800396c:	d063      	beq.n	8003a36 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d12a      	bne.n	80039cc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003976:	4b81      	ldr	r3, [pc, #516]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800397a:	4b80      	ldr	r3, [pc, #512]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 800397c:	2104      	movs	r1, #4
 800397e:	430a      	orrs	r2, r1
 8003980:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003982:	4b7e      	ldr	r3, [pc, #504]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003986:	4b7d      	ldr	r3, [pc, #500]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003988:	2101      	movs	r1, #1
 800398a:	430a      	orrs	r2, r1
 800398c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398e:	f7ff faa7 	bl	8002ee0 <HAL_GetTick>
 8003992:	0003      	movs	r3, r0
 8003994:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003998:	f7ff faa2 	bl	8002ee0 <HAL_GetTick>
 800399c:	0002      	movs	r2, r0
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e0e3      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80039aa:	4b74      	ldr	r3, [pc, #464]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80039ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ae:	2202      	movs	r2, #2
 80039b0:	4013      	ands	r3, r2
 80039b2:	d0f1      	beq.n	8003998 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80039b4:	4b71      	ldr	r3, [pc, #452]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80039b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b8:	22f8      	movs	r2, #248	; 0xf8
 80039ba:	4393      	bics	r3, r2
 80039bc:	0019      	movs	r1, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	00da      	lsls	r2, r3, #3
 80039c4:	4b6d      	ldr	r3, [pc, #436]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80039c6:	430a      	orrs	r2, r1
 80039c8:	635a      	str	r2, [r3, #52]	; 0x34
 80039ca:	e034      	b.n	8003a36 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	3305      	adds	r3, #5
 80039d2:	d111      	bne.n	80039f8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80039d4:	4b69      	ldr	r3, [pc, #420]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80039d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039d8:	4b68      	ldr	r3, [pc, #416]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80039da:	2104      	movs	r1, #4
 80039dc:	438a      	bics	r2, r1
 80039de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80039e0:	4b66      	ldr	r3, [pc, #408]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80039e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e4:	22f8      	movs	r2, #248	; 0xf8
 80039e6:	4393      	bics	r3, r2
 80039e8:	0019      	movs	r1, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	00da      	lsls	r2, r3, #3
 80039f0:	4b62      	ldr	r3, [pc, #392]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80039f2:	430a      	orrs	r2, r1
 80039f4:	635a      	str	r2, [r3, #52]	; 0x34
 80039f6:	e01e      	b.n	8003a36 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80039f8:	4b60      	ldr	r3, [pc, #384]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80039fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039fc:	4b5f      	ldr	r3, [pc, #380]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 80039fe:	2104      	movs	r1, #4
 8003a00:	430a      	orrs	r2, r1
 8003a02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003a04:	4b5d      	ldr	r3, [pc, #372]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a08:	4b5c      	ldr	r3, [pc, #368]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	438a      	bics	r2, r1
 8003a0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a10:	f7ff fa66 	bl	8002ee0 <HAL_GetTick>
 8003a14:	0003      	movs	r3, r0
 8003a16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003a1a:	f7ff fa61 	bl	8002ee0 <HAL_GetTick>
 8003a1e:	0002      	movs	r2, r0
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e0a2      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003a2c:	4b53      	ldr	r3, [pc, #332]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a30:	2202      	movs	r2, #2
 8003a32:	4013      	ands	r3, r2
 8003a34:	d1f1      	bne.n	8003a1a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d100      	bne.n	8003a40 <HAL_RCC_OscConfig+0x4e4>
 8003a3e:	e097      	b.n	8003b70 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a40:	4b4e      	ldr	r3, [pc, #312]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	220c      	movs	r2, #12
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d100      	bne.n	8003a4e <HAL_RCC_OscConfig+0x4f2>
 8003a4c:	e06b      	b.n	8003b26 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d14c      	bne.n	8003af0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a56:	4b49      	ldr	r3, [pc, #292]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	4b48      	ldr	r3, [pc, #288]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003a5c:	494a      	ldr	r1, [pc, #296]	; (8003b88 <HAL_RCC_OscConfig+0x62c>)
 8003a5e:	400a      	ands	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a62:	f7ff fa3d 	bl	8002ee0 <HAL_GetTick>
 8003a66:	0003      	movs	r3, r0
 8003a68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a6c:	f7ff fa38 	bl	8002ee0 <HAL_GetTick>
 8003a70:	0002      	movs	r2, r0
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e079      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a7e:	4b3f      	ldr	r3, [pc, #252]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	049b      	lsls	r3, r3, #18
 8003a86:	4013      	ands	r3, r2
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a8a:	4b3c      	ldr	r3, [pc, #240]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	220f      	movs	r2, #15
 8003a90:	4393      	bics	r3, r2
 8003a92:	0019      	movs	r1, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a98:	4b38      	ldr	r3, [pc, #224]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a9e:	4b37      	ldr	r3, [pc, #220]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4a3a      	ldr	r2, [pc, #232]	; (8003b8c <HAL_RCC_OscConfig+0x630>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	4b32      	ldr	r3, [pc, #200]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab8:	4b30      	ldr	r3, [pc, #192]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b2f      	ldr	r3, [pc, #188]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003abe:	2180      	movs	r1, #128	; 0x80
 8003ac0:	0449      	lsls	r1, r1, #17
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac6:	f7ff fa0b 	bl	8002ee0 <HAL_GetTick>
 8003aca:	0003      	movs	r3, r0
 8003acc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad0:	f7ff fa06 	bl	8002ee0 <HAL_GetTick>
 8003ad4:	0002      	movs	r2, r0
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e047      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ae2:	4b26      	ldr	r3, [pc, #152]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	2380      	movs	r3, #128	; 0x80
 8003ae8:	049b      	lsls	r3, r3, #18
 8003aea:	4013      	ands	r3, r2
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x574>
 8003aee:	e03f      	b.n	8003b70 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af0:	4b22      	ldr	r3, [pc, #136]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	4b21      	ldr	r3, [pc, #132]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003af6:	4924      	ldr	r1, [pc, #144]	; (8003b88 <HAL_RCC_OscConfig+0x62c>)
 8003af8:	400a      	ands	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afc:	f7ff f9f0 	bl	8002ee0 <HAL_GetTick>
 8003b00:	0003      	movs	r3, r0
 8003b02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b06:	f7ff f9eb 	bl	8002ee0 <HAL_GetTick>
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e02c      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b18:	4b18      	ldr	r3, [pc, #96]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	049b      	lsls	r3, r3, #18
 8003b20:	4013      	ands	r3, r2
 8003b22:	d1f0      	bne.n	8003b06 <HAL_RCC_OscConfig+0x5aa>
 8003b24:	e024      	b.n	8003b70 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e01f      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003b32:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003b38:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	025b      	lsls	r3, r3, #9
 8003b44:	401a      	ands	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d10e      	bne.n	8003b6c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	220f      	movs	r2, #15
 8003b52:	401a      	ands	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d107      	bne.n	8003b6c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	23f0      	movs	r3, #240	; 0xf0
 8003b60:	039b      	lsls	r3, r3, #14
 8003b62:	401a      	ands	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	0018      	movs	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b008      	add	sp, #32
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	00001388 	.word	0x00001388
 8003b84:	efffffff 	.word	0xefffffff
 8003b88:	feffffff 	.word	0xfeffffff
 8003b8c:	ffc2ffff 	.word	0xffc2ffff

08003b90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0b3      	b.n	8003d0c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba4:	4b5b      	ldr	r3, [pc, #364]	; (8003d14 <HAL_RCC_ClockConfig+0x184>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	4013      	ands	r3, r2
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d911      	bls.n	8003bd6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb2:	4b58      	ldr	r3, [pc, #352]	; (8003d14 <HAL_RCC_ClockConfig+0x184>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	4393      	bics	r3, r2
 8003bba:	0019      	movs	r1, r3
 8003bbc:	4b55      	ldr	r3, [pc, #340]	; (8003d14 <HAL_RCC_ClockConfig+0x184>)
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc4:	4b53      	ldr	r3, [pc, #332]	; (8003d14 <HAL_RCC_ClockConfig+0x184>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	4013      	ands	r3, r2
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d001      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e09a      	b.n	8003d0c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	4013      	ands	r3, r2
 8003bde:	d015      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2204      	movs	r2, #4
 8003be6:	4013      	ands	r3, r2
 8003be8:	d006      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003bea:	4b4b      	ldr	r3, [pc, #300]	; (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	4b4a      	ldr	r3, [pc, #296]	; (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003bf0:	21e0      	movs	r1, #224	; 0xe0
 8003bf2:	00c9      	lsls	r1, r1, #3
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf8:	4b47      	ldr	r3, [pc, #284]	; (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	22f0      	movs	r2, #240	; 0xf0
 8003bfe:	4393      	bics	r3, r2
 8003c00:	0019      	movs	r1, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	4b44      	ldr	r3, [pc, #272]	; (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2201      	movs	r2, #1
 8003c12:	4013      	ands	r3, r2
 8003c14:	d040      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d107      	bne.n	8003c2e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1e:	4b3e      	ldr	r3, [pc, #248]	; (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	2380      	movs	r3, #128	; 0x80
 8003c24:	029b      	lsls	r3, r3, #10
 8003c26:	4013      	ands	r3, r2
 8003c28:	d114      	bne.n	8003c54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e06e      	b.n	8003d0c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d107      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c36:	4b38      	ldr	r3, [pc, #224]	; (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	2380      	movs	r3, #128	; 0x80
 8003c3c:	049b      	lsls	r3, r3, #18
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d108      	bne.n	8003c54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e062      	b.n	8003d0c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c46:	4b34      	ldr	r3, [pc, #208]	; (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d101      	bne.n	8003c54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e05b      	b.n	8003d0c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c54:	4b30      	ldr	r3, [pc, #192]	; (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2203      	movs	r2, #3
 8003c5a:	4393      	bics	r3, r2
 8003c5c:	0019      	movs	r1, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	4b2d      	ldr	r3, [pc, #180]	; (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003c64:	430a      	orrs	r2, r1
 8003c66:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c68:	f7ff f93a 	bl	8002ee0 <HAL_GetTick>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c70:	e009      	b.n	8003c86 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c72:	f7ff f935 	bl	8002ee0 <HAL_GetTick>
 8003c76:	0002      	movs	r2, r0
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	4a27      	ldr	r2, [pc, #156]	; (8003d1c <HAL_RCC_ClockConfig+0x18c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e042      	b.n	8003d0c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c86:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	220c      	movs	r2, #12
 8003c8c:	401a      	ands	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d1ec      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c98:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <HAL_RCC_ClockConfig+0x184>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d211      	bcs.n	8003cca <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca6:	4b1b      	ldr	r3, [pc, #108]	; (8003d14 <HAL_RCC_ClockConfig+0x184>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2201      	movs	r2, #1
 8003cac:	4393      	bics	r3, r2
 8003cae:	0019      	movs	r1, r3
 8003cb0:	4b18      	ldr	r3, [pc, #96]	; (8003d14 <HAL_RCC_ClockConfig+0x184>)
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb8:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <HAL_RCC_ClockConfig+0x184>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d001      	beq.n	8003cca <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e020      	b.n	8003d0c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2204      	movs	r2, #4
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	d009      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd4:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	4a11      	ldr	r2, [pc, #68]	; (8003d20 <HAL_RCC_ClockConfig+0x190>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	0019      	movs	r1, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ce8:	f000 f820 	bl	8003d2c <HAL_RCC_GetSysClockFreq>
 8003cec:	0001      	movs	r1, r0
 8003cee:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	091b      	lsrs	r3, r3, #4
 8003cf4:	220f      	movs	r2, #15
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	4a0a      	ldr	r2, [pc, #40]	; (8003d24 <HAL_RCC_ClockConfig+0x194>)
 8003cfa:	5cd3      	ldrb	r3, [r2, r3]
 8003cfc:	000a      	movs	r2, r1
 8003cfe:	40da      	lsrs	r2, r3
 8003d00:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <HAL_RCC_ClockConfig+0x198>)
 8003d02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003d04:	2003      	movs	r0, #3
 8003d06:	f7ff f8a5 	bl	8002e54 <HAL_InitTick>
  
  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b004      	add	sp, #16
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40022000 	.word	0x40022000
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	00001388 	.word	0x00001388
 8003d20:	fffff8ff 	.word	0xfffff8ff
 8003d24:	08008ee4 	.word	0x08008ee4
 8003d28:	20000000 	.word	0x20000000

08003d2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d2c:	b590      	push	{r4, r7, lr}
 8003d2e:	b08f      	sub	sp, #60	; 0x3c
 8003d30:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003d32:	2314      	movs	r3, #20
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	4a2b      	ldr	r2, [pc, #172]	; (8003de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d38:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003d3a:	c313      	stmia	r3!, {r0, r1, r4}
 8003d3c:	6812      	ldr	r2, [r2, #0]
 8003d3e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003d40:	1d3b      	adds	r3, r7, #4
 8003d42:	4a29      	ldr	r2, [pc, #164]	; (8003de8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d44:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003d46:	c313      	stmia	r3!, {r0, r1, r4}
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d50:	2300      	movs	r3, #0
 8003d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d54:	2300      	movs	r3, #0
 8003d56:	637b      	str	r3, [r7, #52]	; 0x34
 8003d58:	2300      	movs	r3, #0
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003d60:	4b22      	ldr	r3, [pc, #136]	; (8003dec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d68:	220c      	movs	r2, #12
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d002      	beq.n	8003d76 <HAL_RCC_GetSysClockFreq+0x4a>
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d003      	beq.n	8003d7c <HAL_RCC_GetSysClockFreq+0x50>
 8003d74:	e02d      	b.n	8003dd2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d76:	4b1e      	ldr	r3, [pc, #120]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d78:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d7a:	e02d      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7e:	0c9b      	lsrs	r3, r3, #18
 8003d80:	220f      	movs	r2, #15
 8003d82:	4013      	ands	r3, r2
 8003d84:	2214      	movs	r2, #20
 8003d86:	18ba      	adds	r2, r7, r2
 8003d88:	5cd3      	ldrb	r3, [r2, r3]
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003d8c:	4b17      	ldr	r3, [pc, #92]	; (8003dec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	220f      	movs	r2, #15
 8003d92:	4013      	ands	r3, r2
 8003d94:	1d3a      	adds	r2, r7, #4
 8003d96:	5cd3      	ldrb	r3, [r2, r3]
 8003d98:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d9c:	2380      	movs	r3, #128	; 0x80
 8003d9e:	025b      	lsls	r3, r3, #9
 8003da0:	4013      	ands	r3, r2
 8003da2:	d009      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003da4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003da6:	4812      	ldr	r0, [pc, #72]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003da8:	f7fc f9ca 	bl	8000140 <__udivsi3>
 8003dac:	0003      	movs	r3, r0
 8003dae:	001a      	movs	r2, r3
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	4353      	muls	r3, r2
 8003db4:	637b      	str	r3, [r7, #52]	; 0x34
 8003db6:	e009      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003db8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dba:	000a      	movs	r2, r1
 8003dbc:	0152      	lsls	r2, r2, #5
 8003dbe:	1a52      	subs	r2, r2, r1
 8003dc0:	0193      	lsls	r3, r2, #6
 8003dc2:	1a9b      	subs	r3, r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	185b      	adds	r3, r3, r1
 8003dc8:	021b      	lsls	r3, r3, #8
 8003dca:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003dd0:	e002      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dd2:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003dd4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003dd6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003dda:	0018      	movs	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b00f      	add	sp, #60	; 0x3c
 8003de0:	bd90      	pop	{r4, r7, pc}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	08008e44 	.word	0x08008e44
 8003de8:	08008e54 	.word	0x08008e54
 8003dec:	40021000 	.word	0x40021000
 8003df0:	007a1200 	.word	0x007a1200

08003df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003df8:	4b02      	ldr	r3, [pc, #8]	; (8003e04 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
}
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	20000000 	.word	0x20000000

08003e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003e0c:	f7ff fff2 	bl	8003df4 <HAL_RCC_GetHCLKFreq>
 8003e10:	0001      	movs	r1, r0
 8003e12:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	0a1b      	lsrs	r3, r3, #8
 8003e18:	2207      	movs	r2, #7
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	4a04      	ldr	r2, [pc, #16]	; (8003e30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e1e:	5cd3      	ldrb	r3, [r2, r3]
 8003e20:	40d9      	lsrs	r1, r3
 8003e22:	000b      	movs	r3, r1
}    
 8003e24:	0018      	movs	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	08008ef4 	.word	0x08008ef4

08003e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	2380      	movs	r3, #128	; 0x80
 8003e4a:	025b      	lsls	r3, r3, #9
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d100      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003e50:	e08e      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003e52:	2017      	movs	r0, #23
 8003e54:	183b      	adds	r3, r7, r0
 8003e56:	2200      	movs	r2, #0
 8003e58:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e5a:	4b5f      	ldr	r3, [pc, #380]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e5c:	69da      	ldr	r2, [r3, #28]
 8003e5e:	2380      	movs	r3, #128	; 0x80
 8003e60:	055b      	lsls	r3, r3, #21
 8003e62:	4013      	ands	r3, r2
 8003e64:	d110      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e66:	4b5c      	ldr	r3, [pc, #368]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e68:	69da      	ldr	r2, [r3, #28]
 8003e6a:	4b5b      	ldr	r3, [pc, #364]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e6c:	2180      	movs	r1, #128	; 0x80
 8003e6e:	0549      	lsls	r1, r1, #21
 8003e70:	430a      	orrs	r2, r1
 8003e72:	61da      	str	r2, [r3, #28]
 8003e74:	4b58      	ldr	r3, [pc, #352]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e76:	69da      	ldr	r2, [r3, #28]
 8003e78:	2380      	movs	r3, #128	; 0x80
 8003e7a:	055b      	lsls	r3, r3, #21
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	60bb      	str	r3, [r7, #8]
 8003e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e82:	183b      	adds	r3, r7, r0
 8003e84:	2201      	movs	r2, #1
 8003e86:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e88:	4b54      	ldr	r3, [pc, #336]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	2380      	movs	r3, #128	; 0x80
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	4013      	ands	r3, r2
 8003e92:	d11a      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e94:	4b51      	ldr	r3, [pc, #324]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	4b50      	ldr	r3, [pc, #320]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003e9a:	2180      	movs	r1, #128	; 0x80
 8003e9c:	0049      	lsls	r1, r1, #1
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea2:	f7ff f81d 	bl	8002ee0 <HAL_GetTick>
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eaa:	e008      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eac:	f7ff f818 	bl	8002ee0 <HAL_GetTick>
 8003eb0:	0002      	movs	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	; 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e087      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebe:	4b47      	ldr	r3, [pc, #284]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	2380      	movs	r3, #128	; 0x80
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eca:	4b43      	ldr	r3, [pc, #268]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003ecc:	6a1a      	ldr	r2, [r3, #32]
 8003ece:	23c0      	movs	r3, #192	; 0xc0
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d034      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	23c0      	movs	r3, #192	; 0xc0
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d02c      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eec:	4b3a      	ldr	r3, [pc, #232]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	4a3b      	ldr	r2, [pc, #236]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ef6:	4b38      	ldr	r3, [pc, #224]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003ef8:	6a1a      	ldr	r2, [r3, #32]
 8003efa:	4b37      	ldr	r3, [pc, #220]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003efc:	2180      	movs	r1, #128	; 0x80
 8003efe:	0249      	lsls	r1, r1, #9
 8003f00:	430a      	orrs	r2, r1
 8003f02:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f04:	4b34      	ldr	r3, [pc, #208]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003f06:	6a1a      	ldr	r2, [r3, #32]
 8003f08:	4b33      	ldr	r3, [pc, #204]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003f0a:	4936      	ldr	r1, [pc, #216]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003f0c:	400a      	ands	r2, r1
 8003f0e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f10:	4b31      	ldr	r3, [pc, #196]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1e:	f7fe ffdf 	bl	8002ee0 <HAL_GetTick>
 8003f22:	0003      	movs	r3, r0
 8003f24:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f26:	e009      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f28:	f7fe ffda 	bl	8002ee0 <HAL_GetTick>
 8003f2c:	0002      	movs	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	4a2d      	ldr	r2, [pc, #180]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e048      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3c:	4b26      	ldr	r3, [pc, #152]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	2202      	movs	r2, #2
 8003f42:	4013      	ands	r3, r2
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f46:	4b24      	ldr	r3, [pc, #144]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	4a25      	ldr	r2, [pc, #148]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	0019      	movs	r1, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003f56:	430a      	orrs	r2, r1
 8003f58:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f5a:	2317      	movs	r3, #23
 8003f5c:	18fb      	adds	r3, r7, r3
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d105      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f64:	4b1c      	ldr	r3, [pc, #112]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	4b1b      	ldr	r3, [pc, #108]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003f6a:	4920      	ldr	r1, [pc, #128]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f6c:	400a      	ands	r2, r1
 8003f6e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2201      	movs	r2, #1
 8003f76:	4013      	ands	r3, r2
 8003f78:	d009      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f7a:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	2203      	movs	r2, #3
 8003f80:	4393      	bics	r3, r2
 8003f82:	0019      	movs	r1, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2220      	movs	r2, #32
 8003f94:	4013      	ands	r3, r2
 8003f96:	d009      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f98:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	2210      	movs	r2, #16
 8003f9e:	4393      	bics	r3, r2
 8003fa0:	0019      	movs	r1, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d009      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fb8:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	2240      	movs	r2, #64	; 0x40
 8003fbe:	4393      	bics	r3, r2
 8003fc0:	0019      	movs	r1, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691a      	ldr	r2, [r3, #16]
 8003fc6:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	0018      	movs	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	b006      	add	sp, #24
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40007000 	.word	0x40007000
 8003fe0:	fffffcff 	.word	0xfffffcff
 8003fe4:	fffeffff 	.word	0xfffeffff
 8003fe8:	00001388 	.word	0x00001388
 8003fec:	efffffff 	.word	0xefffffff

08003ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e042      	b.n	8004088 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	223d      	movs	r2, #61	; 0x3d
 8004006:	5c9b      	ldrb	r3, [r3, r2]
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d107      	bne.n	800401e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	223c      	movs	r2, #60	; 0x3c
 8004012:	2100      	movs	r1, #0
 8004014:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	0018      	movs	r0, r3
 800401a:	f7fe fd35 	bl	8002a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	223d      	movs	r2, #61	; 0x3d
 8004022:	2102      	movs	r1, #2
 8004024:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3304      	adds	r3, #4
 800402e:	0019      	movs	r1, r3
 8004030:	0010      	movs	r0, r2
 8004032:	f000 fc75 	bl	8004920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2246      	movs	r2, #70	; 0x46
 800403a:	2101      	movs	r1, #1
 800403c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	223e      	movs	r2, #62	; 0x3e
 8004042:	2101      	movs	r1, #1
 8004044:	5499      	strb	r1, [r3, r2]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	223f      	movs	r2, #63	; 0x3f
 800404a:	2101      	movs	r1, #1
 800404c:	5499      	strb	r1, [r3, r2]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2240      	movs	r2, #64	; 0x40
 8004052:	2101      	movs	r1, #1
 8004054:	5499      	strb	r1, [r3, r2]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2241      	movs	r2, #65	; 0x41
 800405a:	2101      	movs	r1, #1
 800405c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2242      	movs	r2, #66	; 0x42
 8004062:	2101      	movs	r1, #1
 8004064:	5499      	strb	r1, [r3, r2]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2243      	movs	r2, #67	; 0x43
 800406a:	2101      	movs	r1, #1
 800406c:	5499      	strb	r1, [r3, r2]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2244      	movs	r2, #68	; 0x44
 8004072:	2101      	movs	r1, #1
 8004074:	5499      	strb	r1, [r3, r2]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2245      	movs	r2, #69	; 0x45
 800407a:	2101      	movs	r1, #1
 800407c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	223d      	movs	r2, #61	; 0x3d
 8004082:	2101      	movs	r1, #1
 8004084:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b002      	add	sp, #8
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e042      	b.n	8004128 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	223d      	movs	r2, #61	; 0x3d
 80040a6:	5c9b      	ldrb	r3, [r3, r2]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d107      	bne.n	80040be <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	223c      	movs	r2, #60	; 0x3c
 80040b2:	2100      	movs	r1, #0
 80040b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	0018      	movs	r0, r3
 80040ba:	f000 f839 	bl	8004130 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	223d      	movs	r2, #61	; 0x3d
 80040c2:	2102      	movs	r1, #2
 80040c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3304      	adds	r3, #4
 80040ce:	0019      	movs	r1, r3
 80040d0:	0010      	movs	r0, r2
 80040d2:	f000 fc25 	bl	8004920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2246      	movs	r2, #70	; 0x46
 80040da:	2101      	movs	r1, #1
 80040dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	223e      	movs	r2, #62	; 0x3e
 80040e2:	2101      	movs	r1, #1
 80040e4:	5499      	strb	r1, [r3, r2]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	223f      	movs	r2, #63	; 0x3f
 80040ea:	2101      	movs	r1, #1
 80040ec:	5499      	strb	r1, [r3, r2]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2240      	movs	r2, #64	; 0x40
 80040f2:	2101      	movs	r1, #1
 80040f4:	5499      	strb	r1, [r3, r2]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2241      	movs	r2, #65	; 0x41
 80040fa:	2101      	movs	r1, #1
 80040fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2242      	movs	r2, #66	; 0x42
 8004102:	2101      	movs	r1, #1
 8004104:	5499      	strb	r1, [r3, r2]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2243      	movs	r2, #67	; 0x43
 800410a:	2101      	movs	r1, #1
 800410c:	5499      	strb	r1, [r3, r2]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2244      	movs	r2, #68	; 0x44
 8004112:	2101      	movs	r1, #1
 8004114:	5499      	strb	r1, [r3, r2]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2245      	movs	r2, #69	; 0x45
 800411a:	2101      	movs	r1, #1
 800411c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	223d      	movs	r2, #61	; 0x3d
 8004122:	2101      	movs	r1, #1
 8004124:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	0018      	movs	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	b002      	add	sp, #8
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004138:	46c0      	nop			; (mov r8, r8)
 800413a:	46bd      	mov	sp, r7
 800413c:	b002      	add	sp, #8
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800414a:	230f      	movs	r3, #15
 800414c:	18fb      	adds	r3, r7, r3
 800414e:	2200      	movs	r2, #0
 8004150:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d104      	bne.n	8004162 <HAL_TIM_IC_Start_IT+0x22>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	223e      	movs	r2, #62	; 0x3e
 800415c:	5c9b      	ldrb	r3, [r3, r2]
 800415e:	b2db      	uxtb	r3, r3
 8004160:	e013      	b.n	800418a <HAL_TIM_IC_Start_IT+0x4a>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b04      	cmp	r3, #4
 8004166:	d104      	bne.n	8004172 <HAL_TIM_IC_Start_IT+0x32>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	223f      	movs	r2, #63	; 0x3f
 800416c:	5c9b      	ldrb	r3, [r3, r2]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	e00b      	b.n	800418a <HAL_TIM_IC_Start_IT+0x4a>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b08      	cmp	r3, #8
 8004176:	d104      	bne.n	8004182 <HAL_TIM_IC_Start_IT+0x42>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2240      	movs	r2, #64	; 0x40
 800417c:	5c9b      	ldrb	r3, [r3, r2]
 800417e:	b2db      	uxtb	r3, r3
 8004180:	e003      	b.n	800418a <HAL_TIM_IC_Start_IT+0x4a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2241      	movs	r2, #65	; 0x41
 8004186:	5c9b      	ldrb	r3, [r3, r2]
 8004188:	b2db      	uxtb	r3, r3
 800418a:	220e      	movs	r2, #14
 800418c:	18ba      	adds	r2, r7, r2
 800418e:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d104      	bne.n	80041a0 <HAL_TIM_IC_Start_IT+0x60>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2242      	movs	r2, #66	; 0x42
 800419a:	5c9b      	ldrb	r3, [r3, r2]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	e013      	b.n	80041c8 <HAL_TIM_IC_Start_IT+0x88>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d104      	bne.n	80041b0 <HAL_TIM_IC_Start_IT+0x70>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2243      	movs	r2, #67	; 0x43
 80041aa:	5c9b      	ldrb	r3, [r3, r2]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	e00b      	b.n	80041c8 <HAL_TIM_IC_Start_IT+0x88>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d104      	bne.n	80041c0 <HAL_TIM_IC_Start_IT+0x80>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2244      	movs	r2, #68	; 0x44
 80041ba:	5c9b      	ldrb	r3, [r3, r2]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	e003      	b.n	80041c8 <HAL_TIM_IC_Start_IT+0x88>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2245      	movs	r2, #69	; 0x45
 80041c4:	5c9b      	ldrb	r3, [r3, r2]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	210d      	movs	r1, #13
 80041ca:	187a      	adds	r2, r7, r1
 80041cc:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80041ce:	230e      	movs	r3, #14
 80041d0:	18fb      	adds	r3, r7, r3
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d103      	bne.n	80041e0 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80041d8:	187b      	adds	r3, r7, r1
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d001      	beq.n	80041e4 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0b1      	b.n	8004348 <HAL_TIM_IC_Start_IT+0x208>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d104      	bne.n	80041f4 <HAL_TIM_IC_Start_IT+0xb4>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	223e      	movs	r2, #62	; 0x3e
 80041ee:	2102      	movs	r1, #2
 80041f0:	5499      	strb	r1, [r3, r2]
 80041f2:	e013      	b.n	800421c <HAL_TIM_IC_Start_IT+0xdc>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d104      	bne.n	8004204 <HAL_TIM_IC_Start_IT+0xc4>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	223f      	movs	r2, #63	; 0x3f
 80041fe:	2102      	movs	r1, #2
 8004200:	5499      	strb	r1, [r3, r2]
 8004202:	e00b      	b.n	800421c <HAL_TIM_IC_Start_IT+0xdc>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b08      	cmp	r3, #8
 8004208:	d104      	bne.n	8004214 <HAL_TIM_IC_Start_IT+0xd4>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2240      	movs	r2, #64	; 0x40
 800420e:	2102      	movs	r1, #2
 8004210:	5499      	strb	r1, [r3, r2]
 8004212:	e003      	b.n	800421c <HAL_TIM_IC_Start_IT+0xdc>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2241      	movs	r2, #65	; 0x41
 8004218:	2102      	movs	r1, #2
 800421a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d104      	bne.n	800422c <HAL_TIM_IC_Start_IT+0xec>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2242      	movs	r2, #66	; 0x42
 8004226:	2102      	movs	r1, #2
 8004228:	5499      	strb	r1, [r3, r2]
 800422a:	e013      	b.n	8004254 <HAL_TIM_IC_Start_IT+0x114>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2b04      	cmp	r3, #4
 8004230:	d104      	bne.n	800423c <HAL_TIM_IC_Start_IT+0xfc>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2243      	movs	r2, #67	; 0x43
 8004236:	2102      	movs	r1, #2
 8004238:	5499      	strb	r1, [r3, r2]
 800423a:	e00b      	b.n	8004254 <HAL_TIM_IC_Start_IT+0x114>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b08      	cmp	r3, #8
 8004240:	d104      	bne.n	800424c <HAL_TIM_IC_Start_IT+0x10c>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2244      	movs	r2, #68	; 0x44
 8004246:	2102      	movs	r1, #2
 8004248:	5499      	strb	r1, [r3, r2]
 800424a:	e003      	b.n	8004254 <HAL_TIM_IC_Start_IT+0x114>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2245      	movs	r2, #69	; 0x45
 8004250:	2102      	movs	r1, #2
 8004252:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b0c      	cmp	r3, #12
 8004258:	d02a      	beq.n	80042b0 <HAL_TIM_IC_Start_IT+0x170>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b0c      	cmp	r3, #12
 800425e:	d830      	bhi.n	80042c2 <HAL_TIM_IC_Start_IT+0x182>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b08      	cmp	r3, #8
 8004264:	d01b      	beq.n	800429e <HAL_TIM_IC_Start_IT+0x15e>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b08      	cmp	r3, #8
 800426a:	d82a      	bhi.n	80042c2 <HAL_TIM_IC_Start_IT+0x182>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_TIM_IC_Start_IT+0x13a>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b04      	cmp	r3, #4
 8004276:	d009      	beq.n	800428c <HAL_TIM_IC_Start_IT+0x14c>
 8004278:	e023      	b.n	80042c2 <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2102      	movs	r1, #2
 8004286:	430a      	orrs	r2, r1
 8004288:	60da      	str	r2, [r3, #12]
      break;
 800428a:	e01f      	b.n	80042cc <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2104      	movs	r1, #4
 8004298:	430a      	orrs	r2, r1
 800429a:	60da      	str	r2, [r3, #12]
      break;
 800429c:	e016      	b.n	80042cc <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2108      	movs	r1, #8
 80042aa:	430a      	orrs	r2, r1
 80042ac:	60da      	str	r2, [r3, #12]
      break;
 80042ae:	e00d      	b.n	80042cc <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2110      	movs	r1, #16
 80042bc:	430a      	orrs	r2, r1
 80042be:	60da      	str	r2, [r3, #12]
      break;
 80042c0:	e004      	b.n	80042cc <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 80042c2:	230f      	movs	r3, #15
 80042c4:	18fb      	adds	r3, r7, r3
 80042c6:	2201      	movs	r2, #1
 80042c8:	701a      	strb	r2, [r3, #0]
      break;
 80042ca:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80042cc:	230f      	movs	r3, #15
 80042ce:	18fb      	adds	r3, r7, r3
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d135      	bne.n	8004342 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6839      	ldr	r1, [r7, #0]
 80042dc:	2201      	movs	r2, #1
 80042de:	0018      	movs	r0, r3
 80042e0:	f000 fd5c 	bl	8004d9c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a19      	ldr	r2, [pc, #100]	; (8004350 <HAL_TIM_IC_Start_IT+0x210>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00f      	beq.n	800430e <HAL_TIM_IC_Start_IT+0x1ce>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	2380      	movs	r3, #128	; 0x80
 80042f4:	05db      	lsls	r3, r3, #23
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d009      	beq.n	800430e <HAL_TIM_IC_Start_IT+0x1ce>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a15      	ldr	r2, [pc, #84]	; (8004354 <HAL_TIM_IC_Start_IT+0x214>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d004      	beq.n	800430e <HAL_TIM_IC_Start_IT+0x1ce>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a13      	ldr	r2, [pc, #76]	; (8004358 <HAL_TIM_IC_Start_IT+0x218>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d111      	bne.n	8004332 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2207      	movs	r2, #7
 8004316:	4013      	ands	r3, r2
 8004318:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b06      	cmp	r3, #6
 800431e:	d010      	beq.n	8004342 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2101      	movs	r1, #1
 800432c:	430a      	orrs	r2, r1
 800432e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004330:	e007      	b.n	8004342 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2101      	movs	r1, #1
 800433e:	430a      	orrs	r2, r1
 8004340:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004342:	230f      	movs	r3, #15
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	781b      	ldrb	r3, [r3, #0]
}
 8004348:	0018      	movs	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	b004      	add	sp, #16
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40012c00 	.word	0x40012c00
 8004354:	40000400 	.word	0x40000400
 8004358:	40014000 	.word	0x40014000

0800435c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	2202      	movs	r2, #2
 800436c:	4013      	ands	r3, r2
 800436e:	2b02      	cmp	r3, #2
 8004370:	d124      	bne.n	80043bc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2202      	movs	r2, #2
 800437a:	4013      	ands	r3, r2
 800437c:	2b02      	cmp	r3, #2
 800437e:	d11d      	bne.n	80043bc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2203      	movs	r2, #3
 8004386:	4252      	negs	r2, r2
 8004388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	2203      	movs	r2, #3
 8004398:	4013      	ands	r3, r2
 800439a:	d004      	beq.n	80043a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	0018      	movs	r0, r3
 80043a0:	f7fe fa82 	bl	80028a8 <HAL_TIM_IC_CaptureCallback>
 80043a4:	e007      	b.n	80043b6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	0018      	movs	r0, r3
 80043aa:	f000 faa1 	bl	80048f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	0018      	movs	r0, r3
 80043b2:	f000 faa5 	bl	8004900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	2204      	movs	r2, #4
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d125      	bne.n	8004416 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	2204      	movs	r2, #4
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d11e      	bne.n	8004416 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2205      	movs	r2, #5
 80043de:	4252      	negs	r2, r2
 80043e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2202      	movs	r2, #2
 80043e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	23c0      	movs	r3, #192	; 0xc0
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4013      	ands	r3, r2
 80043f4:	d004      	beq.n	8004400 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	0018      	movs	r0, r3
 80043fa:	f7fe fa55 	bl	80028a8 <HAL_TIM_IC_CaptureCallback>
 80043fe:	e007      	b.n	8004410 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	0018      	movs	r0, r3
 8004404:	f000 fa74 	bl	80048f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	0018      	movs	r0, r3
 800440c:	f000 fa78 	bl	8004900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2208      	movs	r2, #8
 800441e:	4013      	ands	r3, r2
 8004420:	2b08      	cmp	r3, #8
 8004422:	d124      	bne.n	800446e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	2208      	movs	r2, #8
 800442c:	4013      	ands	r3, r2
 800442e:	2b08      	cmp	r3, #8
 8004430:	d11d      	bne.n	800446e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2209      	movs	r2, #9
 8004438:	4252      	negs	r2, r2
 800443a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2204      	movs	r2, #4
 8004440:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	2203      	movs	r2, #3
 800444a:	4013      	ands	r3, r2
 800444c:	d004      	beq.n	8004458 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	0018      	movs	r0, r3
 8004452:	f7fe fa29 	bl	80028a8 <HAL_TIM_IC_CaptureCallback>
 8004456:	e007      	b.n	8004468 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	0018      	movs	r0, r3
 800445c:	f000 fa48 	bl	80048f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	0018      	movs	r0, r3
 8004464:	f000 fa4c 	bl	8004900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2210      	movs	r2, #16
 8004476:	4013      	ands	r3, r2
 8004478:	2b10      	cmp	r3, #16
 800447a:	d125      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	2210      	movs	r2, #16
 8004484:	4013      	ands	r3, r2
 8004486:	2b10      	cmp	r3, #16
 8004488:	d11e      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2211      	movs	r2, #17
 8004490:	4252      	negs	r2, r2
 8004492:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2208      	movs	r2, #8
 8004498:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	69da      	ldr	r2, [r3, #28]
 80044a0:	23c0      	movs	r3, #192	; 0xc0
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4013      	ands	r3, r2
 80044a6:	d004      	beq.n	80044b2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	0018      	movs	r0, r3
 80044ac:	f7fe f9fc 	bl	80028a8 <HAL_TIM_IC_CaptureCallback>
 80044b0:	e007      	b.n	80044c2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	0018      	movs	r0, r3
 80044b6:	f000 fa1b 	bl	80048f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	0018      	movs	r0, r3
 80044be:	f000 fa1f 	bl	8004900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	2201      	movs	r2, #1
 80044d0:	4013      	ands	r3, r2
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d10f      	bne.n	80044f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	4013      	ands	r3, r2
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d108      	bne.n	80044f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2202      	movs	r2, #2
 80044ea:	4252      	negs	r2, r2
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	0018      	movs	r0, r3
 80044f2:	f000 f9f5 	bl	80048e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	2280      	movs	r2, #128	; 0x80
 80044fe:	4013      	ands	r3, r2
 8004500:	2b80      	cmp	r3, #128	; 0x80
 8004502:	d10f      	bne.n	8004524 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	2280      	movs	r2, #128	; 0x80
 800450c:	4013      	ands	r3, r2
 800450e:	2b80      	cmp	r3, #128	; 0x80
 8004510:	d108      	bne.n	8004524 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2281      	movs	r2, #129	; 0x81
 8004518:	4252      	negs	r2, r2
 800451a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	0018      	movs	r0, r3
 8004520:	f000 fcc6 	bl	8004eb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2240      	movs	r2, #64	; 0x40
 800452c:	4013      	ands	r3, r2
 800452e:	2b40      	cmp	r3, #64	; 0x40
 8004530:	d10f      	bne.n	8004552 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2240      	movs	r2, #64	; 0x40
 800453a:	4013      	ands	r3, r2
 800453c:	2b40      	cmp	r3, #64	; 0x40
 800453e:	d108      	bne.n	8004552 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2241      	movs	r2, #65	; 0x41
 8004546:	4252      	negs	r2, r2
 8004548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	0018      	movs	r0, r3
 800454e:	f000 f9df 	bl	8004910 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	2220      	movs	r2, #32
 800455a:	4013      	ands	r3, r2
 800455c:	2b20      	cmp	r3, #32
 800455e:	d10f      	bne.n	8004580 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2220      	movs	r2, #32
 8004568:	4013      	ands	r3, r2
 800456a:	2b20      	cmp	r3, #32
 800456c:	d108      	bne.n	8004580 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2221      	movs	r2, #33	; 0x21
 8004574:	4252      	negs	r2, r2
 8004576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	0018      	movs	r0, r3
 800457c:	f000 fc90 	bl	8004ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004580:	46c0      	nop			; (mov r8, r8)
 8004582:	46bd      	mov	sp, r7
 8004584:	b002      	add	sp, #8
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004594:	2317      	movs	r3, #23
 8004596:	18fb      	adds	r3, r7, r3
 8004598:	2200      	movs	r2, #0
 800459a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	223c      	movs	r2, #60	; 0x3c
 80045a0:	5c9b      	ldrb	r3, [r3, r2]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_TIM_IC_ConfigChannel+0x22>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e08c      	b.n	80046c4 <HAL_TIM_IC_ConfigChannel+0x13c>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	223c      	movs	r2, #60	; 0x3c
 80045ae:	2101      	movs	r1, #1
 80045b0:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d11b      	bne.n	80045f0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	6819      	ldr	r1, [r3, #0]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f000 fa2a 	bl	8004a20 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	210c      	movs	r1, #12
 80045d8:	438a      	bics	r2, r1
 80045da:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6999      	ldr	r1, [r3, #24]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	619a      	str	r2, [r3, #24]
 80045ee:	e062      	b.n	80046b6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d11c      	bne.n	8004630 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	6819      	ldr	r1, [r3, #0]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f000 fa95 	bl	8004b34 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699a      	ldr	r2, [r3, #24]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	492d      	ldr	r1, [pc, #180]	; (80046cc <HAL_TIM_IC_ConfigChannel+0x144>)
 8004616:	400a      	ands	r2, r1
 8004618:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6999      	ldr	r1, [r3, #24]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	021a      	lsls	r2, r3, #8
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	619a      	str	r2, [r3, #24]
 800462e:	e042      	b.n	80046b6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b08      	cmp	r3, #8
 8004634:	d11b      	bne.n	800466e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6818      	ldr	r0, [r3, #0]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	6819      	ldr	r1, [r3, #0]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f000 fae9 	bl	8004c1c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69da      	ldr	r2, [r3, #28]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	210c      	movs	r1, #12
 8004656:	438a      	bics	r2, r1
 8004658:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69d9      	ldr	r1, [r3, #28]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	61da      	str	r2, [r3, #28]
 800466c:	e023      	b.n	80046b6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b0c      	cmp	r3, #12
 8004672:	d11c      	bne.n	80046ae <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6818      	ldr	r0, [r3, #0]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	6819      	ldr	r1, [r3, #0]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f000 fb0a 	bl	8004c9c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	69da      	ldr	r2, [r3, #28]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	490e      	ldr	r1, [pc, #56]	; (80046cc <HAL_TIM_IC_ConfigChannel+0x144>)
 8004694:	400a      	ands	r2, r1
 8004696:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69d9      	ldr	r1, [r3, #28]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	021a      	lsls	r2, r3, #8
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	61da      	str	r2, [r3, #28]
 80046ac:	e003      	b.n	80046b6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80046ae:	2317      	movs	r3, #23
 80046b0:	18fb      	adds	r3, r7, r3
 80046b2:	2201      	movs	r2, #1
 80046b4:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	223c      	movs	r2, #60	; 0x3c
 80046ba:	2100      	movs	r1, #0
 80046bc:	5499      	strb	r1, [r3, r2]

  return status;
 80046be:	2317      	movs	r3, #23
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	781b      	ldrb	r3, [r3, #0]
}
 80046c4:	0018      	movs	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b006      	add	sp, #24
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	fffff3ff 	.word	0xfffff3ff

080046d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046da:	230f      	movs	r3, #15
 80046dc:	18fb      	adds	r3, r7, r3
 80046de:	2200      	movs	r2, #0
 80046e0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	223c      	movs	r2, #60	; 0x3c
 80046e6:	5c9b      	ldrb	r3, [r3, r2]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_TIM_ConfigClockSource+0x20>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e0bc      	b.n	800486a <HAL_TIM_ConfigClockSource+0x19a>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	223c      	movs	r2, #60	; 0x3c
 80046f4:	2101      	movs	r1, #1
 80046f6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	223d      	movs	r2, #61	; 0x3d
 80046fc:	2102      	movs	r1, #2
 80046fe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2277      	movs	r2, #119	; 0x77
 800470c:	4393      	bics	r3, r2
 800470e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4a58      	ldr	r2, [pc, #352]	; (8004874 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004714:	4013      	ands	r3, r2
 8004716:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2280      	movs	r2, #128	; 0x80
 8004726:	0192      	lsls	r2, r2, #6
 8004728:	4293      	cmp	r3, r2
 800472a:	d040      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0xde>
 800472c:	2280      	movs	r2, #128	; 0x80
 800472e:	0192      	lsls	r2, r2, #6
 8004730:	4293      	cmp	r3, r2
 8004732:	d900      	bls.n	8004736 <HAL_TIM_ConfigClockSource+0x66>
 8004734:	e088      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x178>
 8004736:	2280      	movs	r2, #128	; 0x80
 8004738:	0152      	lsls	r2, r2, #5
 800473a:	4293      	cmp	r3, r2
 800473c:	d100      	bne.n	8004740 <HAL_TIM_ConfigClockSource+0x70>
 800473e:	e088      	b.n	8004852 <HAL_TIM_ConfigClockSource+0x182>
 8004740:	2280      	movs	r2, #128	; 0x80
 8004742:	0152      	lsls	r2, r2, #5
 8004744:	4293      	cmp	r3, r2
 8004746:	d900      	bls.n	800474a <HAL_TIM_ConfigClockSource+0x7a>
 8004748:	e07e      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x178>
 800474a:	2b70      	cmp	r3, #112	; 0x70
 800474c:	d018      	beq.n	8004780 <HAL_TIM_ConfigClockSource+0xb0>
 800474e:	d900      	bls.n	8004752 <HAL_TIM_ConfigClockSource+0x82>
 8004750:	e07a      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x178>
 8004752:	2b60      	cmp	r3, #96	; 0x60
 8004754:	d04f      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0x126>
 8004756:	d900      	bls.n	800475a <HAL_TIM_ConfigClockSource+0x8a>
 8004758:	e076      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x178>
 800475a:	2b50      	cmp	r3, #80	; 0x50
 800475c:	d03b      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x106>
 800475e:	d900      	bls.n	8004762 <HAL_TIM_ConfigClockSource+0x92>
 8004760:	e072      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x178>
 8004762:	2b40      	cmp	r3, #64	; 0x40
 8004764:	d057      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x146>
 8004766:	d900      	bls.n	800476a <HAL_TIM_ConfigClockSource+0x9a>
 8004768:	e06e      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x178>
 800476a:	2b30      	cmp	r3, #48	; 0x30
 800476c:	d063      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x166>
 800476e:	d86b      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x178>
 8004770:	2b20      	cmp	r3, #32
 8004772:	d060      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x166>
 8004774:	d868      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x178>
 8004776:	2b00      	cmp	r3, #0
 8004778:	d05d      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x166>
 800477a:	2b10      	cmp	r3, #16
 800477c:	d05b      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x166>
 800477e:	e063      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	6899      	ldr	r1, [r3, #8]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f000 fae4 	bl	8004d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2277      	movs	r2, #119	; 0x77
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	609a      	str	r2, [r3, #8]
      break;
 80047ac:	e052      	b.n	8004854 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6899      	ldr	r1, [r3, #8]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f000 facd 	bl	8004d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2180      	movs	r1, #128	; 0x80
 80047ce:	01c9      	lsls	r1, r1, #7
 80047d0:	430a      	orrs	r2, r1
 80047d2:	609a      	str	r2, [r3, #8]
      break;
 80047d4:	e03e      	b.n	8004854 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6859      	ldr	r1, [r3, #4]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	001a      	movs	r2, r3
 80047e4:	f000 f978 	bl	8004ad8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2150      	movs	r1, #80	; 0x50
 80047ee:	0018      	movs	r0, r3
 80047f0:	f000 fa9a 	bl	8004d28 <TIM_ITRx_SetConfig>
      break;
 80047f4:	e02e      	b.n	8004854 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6859      	ldr	r1, [r3, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	001a      	movs	r2, r3
 8004804:	f000 f9d8 	bl	8004bb8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2160      	movs	r1, #96	; 0x60
 800480e:	0018      	movs	r0, r3
 8004810:	f000 fa8a 	bl	8004d28 <TIM_ITRx_SetConfig>
      break;
 8004814:	e01e      	b.n	8004854 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6859      	ldr	r1, [r3, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	001a      	movs	r2, r3
 8004824:	f000 f958 	bl	8004ad8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2140      	movs	r1, #64	; 0x40
 800482e:	0018      	movs	r0, r3
 8004830:	f000 fa7a 	bl	8004d28 <TIM_ITRx_SetConfig>
      break;
 8004834:	e00e      	b.n	8004854 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	0019      	movs	r1, r3
 8004840:	0010      	movs	r0, r2
 8004842:	f000 fa71 	bl	8004d28 <TIM_ITRx_SetConfig>
      break;
 8004846:	e005      	b.n	8004854 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004848:	230f      	movs	r3, #15
 800484a:	18fb      	adds	r3, r7, r3
 800484c:	2201      	movs	r2, #1
 800484e:	701a      	strb	r2, [r3, #0]
      break;
 8004850:	e000      	b.n	8004854 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004852:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	223d      	movs	r2, #61	; 0x3d
 8004858:	2101      	movs	r1, #1
 800485a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	223c      	movs	r2, #60	; 0x3c
 8004860:	2100      	movs	r1, #0
 8004862:	5499      	strb	r1, [r3, r2]

  return status;
 8004864:	230f      	movs	r3, #15
 8004866:	18fb      	adds	r3, r7, r3
 8004868:	781b      	ldrb	r3, [r3, #0]
}
 800486a:	0018      	movs	r0, r3
 800486c:	46bd      	mov	sp, r7
 800486e:	b004      	add	sp, #16
 8004870:	bd80      	pop	{r7, pc}
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	ffff00ff 	.word	0xffff00ff

08004878 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b0c      	cmp	r3, #12
 800488a:	d01e      	beq.n	80048ca <HAL_TIM_ReadCapturedValue+0x52>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b0c      	cmp	r3, #12
 8004890:	d820      	bhi.n	80048d4 <HAL_TIM_ReadCapturedValue+0x5c>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b08      	cmp	r3, #8
 8004896:	d013      	beq.n	80048c0 <HAL_TIM_ReadCapturedValue+0x48>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b08      	cmp	r3, #8
 800489c:	d81a      	bhi.n	80048d4 <HAL_TIM_ReadCapturedValue+0x5c>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_TIM_ReadCapturedValue+0x34>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d005      	beq.n	80048b6 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 80048aa:	e013      	b.n	80048d4 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b2:	60fb      	str	r3, [r7, #12]
      break;
 80048b4:	e00f      	b.n	80048d6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048bc:	60fb      	str	r3, [r7, #12]
      break;
 80048be:	e00a      	b.n	80048d6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c6:	60fb      	str	r3, [r7, #12]
      break;
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	60fb      	str	r3, [r7, #12]
      break;
 80048d2:	e000      	b.n	80048d6 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 80048d4:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 80048d6:	68fb      	ldr	r3, [r7, #12]
}
 80048d8:	0018      	movs	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	b004      	add	sp, #16
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048e8:	46c0      	nop			; (mov r8, r8)
 80048ea:	46bd      	mov	sp, r7
 80048ec:	b002      	add	sp, #8
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048f8:	46c0      	nop			; (mov r8, r8)
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b002      	add	sp, #8
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004908:	46c0      	nop			; (mov r8, r8)
 800490a:	46bd      	mov	sp, r7
 800490c:	b002      	add	sp, #8
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004918:	46c0      	nop			; (mov r8, r8)
 800491a:	46bd      	mov	sp, r7
 800491c:	b002      	add	sp, #8
 800491e:	bd80      	pop	{r7, pc}

08004920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a34      	ldr	r2, [pc, #208]	; (8004a04 <TIM_Base_SetConfig+0xe4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d008      	beq.n	800494a <TIM_Base_SetConfig+0x2a>
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	2380      	movs	r3, #128	; 0x80
 800493c:	05db      	lsls	r3, r3, #23
 800493e:	429a      	cmp	r2, r3
 8004940:	d003      	beq.n	800494a <TIM_Base_SetConfig+0x2a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a30      	ldr	r2, [pc, #192]	; (8004a08 <TIM_Base_SetConfig+0xe8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d108      	bne.n	800495c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2270      	movs	r2, #112	; 0x70
 800494e:	4393      	bics	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a29      	ldr	r2, [pc, #164]	; (8004a04 <TIM_Base_SetConfig+0xe4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d018      	beq.n	8004996 <TIM_Base_SetConfig+0x76>
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	2380      	movs	r3, #128	; 0x80
 8004968:	05db      	lsls	r3, r3, #23
 800496a:	429a      	cmp	r2, r3
 800496c:	d013      	beq.n	8004996 <TIM_Base_SetConfig+0x76>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a25      	ldr	r2, [pc, #148]	; (8004a08 <TIM_Base_SetConfig+0xe8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00f      	beq.n	8004996 <TIM_Base_SetConfig+0x76>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a24      	ldr	r2, [pc, #144]	; (8004a0c <TIM_Base_SetConfig+0xec>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00b      	beq.n	8004996 <TIM_Base_SetConfig+0x76>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a23      	ldr	r2, [pc, #140]	; (8004a10 <TIM_Base_SetConfig+0xf0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d007      	beq.n	8004996 <TIM_Base_SetConfig+0x76>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a22      	ldr	r2, [pc, #136]	; (8004a14 <TIM_Base_SetConfig+0xf4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d003      	beq.n	8004996 <TIM_Base_SetConfig+0x76>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a21      	ldr	r2, [pc, #132]	; (8004a18 <TIM_Base_SetConfig+0xf8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d108      	bne.n	80049a8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a20      	ldr	r2, [pc, #128]	; (8004a1c <TIM_Base_SetConfig+0xfc>)
 800499a:	4013      	ands	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2280      	movs	r2, #128	; 0x80
 80049ac:	4393      	bics	r3, r2
 80049ae:	001a      	movs	r2, r3
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a0c      	ldr	r2, [pc, #48]	; (8004a04 <TIM_Base_SetConfig+0xe4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00b      	beq.n	80049ee <TIM_Base_SetConfig+0xce>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a0d      	ldr	r2, [pc, #52]	; (8004a10 <TIM_Base_SetConfig+0xf0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d007      	beq.n	80049ee <TIM_Base_SetConfig+0xce>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a0c      	ldr	r2, [pc, #48]	; (8004a14 <TIM_Base_SetConfig+0xf4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d003      	beq.n	80049ee <TIM_Base_SetConfig+0xce>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a0b      	ldr	r2, [pc, #44]	; (8004a18 <TIM_Base_SetConfig+0xf8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d103      	bne.n	80049f6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	691a      	ldr	r2, [r3, #16]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	615a      	str	r2, [r3, #20]
}
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	46bd      	mov	sp, r7
 8004a00:	b004      	add	sp, #16
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40012c00 	.word	0x40012c00
 8004a08:	40000400 	.word	0x40000400
 8004a0c:	40002000 	.word	0x40002000
 8004a10:	40014000 	.word	0x40014000
 8004a14:	40014400 	.word	0x40014400
 8004a18:	40014800 	.word	0x40014800
 8004a1c:	fffffcff 	.word	0xfffffcff

08004a20 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	2201      	movs	r2, #1
 8004a34:	4393      	bics	r3, r2
 8004a36:	001a      	movs	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4a20      	ldr	r2, [pc, #128]	; (8004acc <TIM_TI1_SetConfig+0xac>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00c      	beq.n	8004a6a <TIM_TI1_SetConfig+0x4a>
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	2380      	movs	r3, #128	; 0x80
 8004a54:	05db      	lsls	r3, r3, #23
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d007      	beq.n	8004a6a <TIM_TI1_SetConfig+0x4a>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4a1c      	ldr	r2, [pc, #112]	; (8004ad0 <TIM_TI1_SetConfig+0xb0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d003      	beq.n	8004a6a <TIM_TI1_SetConfig+0x4a>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4a1b      	ldr	r2, [pc, #108]	; (8004ad4 <TIM_TI1_SetConfig+0xb4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d101      	bne.n	8004a6e <TIM_TI1_SetConfig+0x4e>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <TIM_TI1_SetConfig+0x50>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d008      	beq.n	8004a86 <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2203      	movs	r2, #3
 8004a78:	4393      	bics	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	e003      	b.n	8004a8e <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	22f0      	movs	r2, #240	; 0xf0
 8004a92:	4393      	bics	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	22ff      	movs	r2, #255	; 0xff
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	220a      	movs	r2, #10
 8004aa8:	4393      	bics	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	220a      	movs	r2, #10
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	621a      	str	r2, [r3, #32]
}
 8004ac4:	46c0      	nop			; (mov r8, r8)
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b006      	add	sp, #24
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40012c00 	.word	0x40012c00
 8004ad0:	40000400 	.word	0x40000400
 8004ad4:	40014000 	.word	0x40014000

08004ad8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	2201      	movs	r2, #1
 8004af0:	4393      	bics	r3, r2
 8004af2:	001a      	movs	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	22f0      	movs	r2, #240	; 0xf0
 8004b02:	4393      	bics	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	220a      	movs	r2, #10
 8004b14:	4393      	bics	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	621a      	str	r2, [r3, #32]
}
 8004b2c:	46c0      	nop			; (mov r8, r8)
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b006      	add	sp, #24
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	2210      	movs	r2, #16
 8004b48:	4393      	bics	r3, r2
 8004b4a:	001a      	movs	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	4a14      	ldr	r2, [pc, #80]	; (8004bb0 <TIM_TI2_SetConfig+0x7c>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	4a10      	ldr	r2, [pc, #64]	; (8004bb4 <TIM_TI2_SetConfig+0x80>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	031b      	lsls	r3, r3, #12
 8004b7a:	041b      	lsls	r3, r3, #16
 8004b7c:	0c1b      	lsrs	r3, r3, #16
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	22a0      	movs	r2, #160	; 0xa0
 8004b88:	4393      	bics	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	22a0      	movs	r2, #160	; 0xa0
 8004b92:	4013      	ands	r3, r2
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	621a      	str	r2, [r3, #32]
}
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	b006      	add	sp, #24
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	fffffcff 	.word	0xfffffcff
 8004bb4:	ffff0fff 	.word	0xffff0fff

08004bb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	2210      	movs	r2, #16
 8004bca:	4393      	bics	r3, r2
 8004bcc:	001a      	movs	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	4a0d      	ldr	r2, [pc, #52]	; (8004c18 <TIM_TI2_ConfigInputStage+0x60>)
 8004be2:	4013      	ands	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	031b      	lsls	r3, r3, #12
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	22a0      	movs	r2, #160	; 0xa0
 8004bf4:	4393      	bics	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	621a      	str	r2, [r3, #32]
}
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	46bd      	mov	sp, r7
 8004c12:	b006      	add	sp, #24
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	ffff0fff 	.word	0xffff0fff

08004c1c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	4a19      	ldr	r2, [pc, #100]	; (8004c94 <TIM_TI3_SetConfig+0x78>)
 8004c30:	401a      	ands	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2203      	movs	r2, #3
 8004c46:	4393      	bics	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	22f0      	movs	r2, #240	; 0xf0
 8004c56:	4393      	bics	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	22ff      	movs	r2, #255	; 0xff
 8004c60:	4013      	ands	r3, r2
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4a0b      	ldr	r2, [pc, #44]	; (8004c98 <TIM_TI3_SetConfig+0x7c>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	021a      	lsls	r2, r3, #8
 8004c74:	23a0      	movs	r3, #160	; 0xa0
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	4013      	ands	r3, r2
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	621a      	str	r2, [r3, #32]
}
 8004c8c:	46c0      	nop			; (mov r8, r8)
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b006      	add	sp, #24
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	fffffeff 	.word	0xfffffeff
 8004c98:	fffff5ff 	.word	0xfffff5ff

08004c9c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	4a1a      	ldr	r2, [pc, #104]	; (8004d18 <TIM_TI4_SetConfig+0x7c>)
 8004cb0:	401a      	ands	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	4a15      	ldr	r2, [pc, #84]	; (8004d1c <TIM_TI4_SetConfig+0x80>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	021b      	lsls	r3, r3, #8
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	4a12      	ldr	r2, [pc, #72]	; (8004d20 <TIM_TI4_SetConfig+0x84>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	031b      	lsls	r3, r3, #12
 8004ce0:	041b      	lsls	r3, r3, #16
 8004ce2:	0c1b      	lsrs	r3, r3, #16
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	4a0d      	ldr	r2, [pc, #52]	; (8004d24 <TIM_TI4_SetConfig+0x88>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	031a      	lsls	r2, r3, #12
 8004cf6:	23a0      	movs	r3, #160	; 0xa0
 8004cf8:	021b      	lsls	r3, r3, #8
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	621a      	str	r2, [r3, #32]
}
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	46bd      	mov	sp, r7
 8004d12:	b006      	add	sp, #24
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	ffffefff 	.word	0xffffefff
 8004d1c:	fffffcff 	.word	0xfffffcff
 8004d20:	ffff0fff 	.word	0xffff0fff
 8004d24:	ffff5fff 	.word	0xffff5fff

08004d28 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2270      	movs	r2, #112	; 0x70
 8004d3c:	4393      	bics	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	2207      	movs	r2, #7
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	609a      	str	r2, [r3, #8]
}
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b004      	add	sp, #16
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	4a09      	ldr	r2, [pc, #36]	; (8004d98 <TIM_ETR_SetConfig+0x3c>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	021a      	lsls	r2, r3, #8
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	609a      	str	r2, [r3, #8]
}
 8004d90:	46c0      	nop			; (mov r8, r8)
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b006      	add	sp, #24
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	ffff00ff 	.word	0xffff00ff

08004d9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	221f      	movs	r2, #31
 8004dac:	4013      	ands	r3, r2
 8004dae:	2201      	movs	r2, #1
 8004db0:	409a      	lsls	r2, r3
 8004db2:	0013      	movs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	43d2      	mvns	r2, r2
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a1a      	ldr	r2, [r3, #32]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	211f      	movs	r1, #31
 8004dcc:	400b      	ands	r3, r1
 8004dce:	6879      	ldr	r1, [r7, #4]
 8004dd0:	4099      	lsls	r1, r3
 8004dd2:	000b      	movs	r3, r1
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	621a      	str	r2, [r3, #32]
}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b006      	add	sp, #24
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	223c      	movs	r2, #60	; 0x3c
 8004df2:	5c9b      	ldrb	r3, [r3, r2]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e047      	b.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	223c      	movs	r2, #60	; 0x3c
 8004e00:	2101      	movs	r1, #1
 8004e02:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	223d      	movs	r2, #61	; 0x3d
 8004e08:	2102      	movs	r1, #2
 8004e0a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2270      	movs	r2, #112	; 0x70
 8004e20:	4393      	bics	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a16      	ldr	r2, [pc, #88]	; (8004e94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00f      	beq.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	2380      	movs	r3, #128	; 0x80
 8004e46:	05db      	lsls	r3, r3, #23
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d009      	beq.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a11      	ldr	r2, [pc, #68]	; (8004e98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d004      	beq.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a10      	ldr	r2, [pc, #64]	; (8004e9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d10c      	bne.n	8004e7a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2280      	movs	r2, #128	; 0x80
 8004e64:	4393      	bics	r3, r2
 8004e66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	223d      	movs	r2, #61	; 0x3d
 8004e7e:	2101      	movs	r1, #1
 8004e80:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	223c      	movs	r2, #60	; 0x3c
 8004e86:	2100      	movs	r1, #0
 8004e88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	b004      	add	sp, #16
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40012c00 	.word	0x40012c00
 8004e98:	40000400 	.word	0x40000400
 8004e9c:	40014000 	.word	0x40014000

08004ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ea8:	46c0      	nop			; (mov r8, r8)
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	b002      	add	sp, #8
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	b002      	add	sp, #8
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e044      	b.n	8004f5c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d107      	bne.n	8004eea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2274      	movs	r2, #116	; 0x74
 8004ede:	2100      	movs	r1, #0
 8004ee0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f7fd fe25 	bl	8002b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2224      	movs	r2, #36	; 0x24
 8004eee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2101      	movs	r1, #1
 8004efc:	438a      	bics	r2, r1
 8004efe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	0018      	movs	r0, r3
 8004f04:	f000 fba4 	bl	8005650 <UART_SetConfig>
 8004f08:	0003      	movs	r3, r0
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e024      	b.n	8004f5c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f000 fcd7 	bl	80058d0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	490d      	ldr	r1, [pc, #52]	; (8004f64 <HAL_UART_Init+0xa4>)
 8004f2e:	400a      	ands	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	212a      	movs	r1, #42	; 0x2a
 8004f3e:	438a      	bics	r2, r1
 8004f40:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	0018      	movs	r0, r3
 8004f56:	f000 fd6f 	bl	8005a38 <UART_CheckIdleState>
 8004f5a:	0003      	movs	r3, r0
}
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b002      	add	sp, #8
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	ffffb7ff 	.word	0xffffb7ff

08004f68 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	1dbb      	adds	r3, r7, #6
 8004f74:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d000      	beq.n	8004f80 <HAL_UART_Transmit_IT+0x18>
 8004f7e:	e06a      	b.n	8005056 <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_UART_Transmit_IT+0x26>
 8004f86:	1dbb      	adds	r3, r7, #6
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e062      	b.n	8005058 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	2380      	movs	r3, #128	; 0x80
 8004f98:	015b      	lsls	r3, r3, #5
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d109      	bne.n	8004fb2 <HAL_UART_Transmit_IT+0x4a>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d105      	bne.n	8004fb2 <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	4013      	ands	r3, r2
 8004fac:	d001      	beq.n	8004fb2 <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e052      	b.n	8005058 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2274      	movs	r2, #116	; 0x74
 8004fb6:	5c9b      	ldrb	r3, [r3, r2]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_UART_Transmit_IT+0x58>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e04b      	b.n	8005058 <HAL_UART_Transmit_IT+0xf0>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2274      	movs	r2, #116	; 0x74
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	1dba      	adds	r2, r7, #6
 8004fd2:	2150      	movs	r1, #80	; 0x50
 8004fd4:	8812      	ldrh	r2, [r2, #0]
 8004fd6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	1dba      	adds	r2, r7, #6
 8004fdc:	2152      	movs	r1, #82	; 0x52
 8004fde:	8812      	ldrh	r2, [r2, #0]
 8004fe0:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2280      	movs	r2, #128	; 0x80
 8004fec:	2100      	movs	r1, #0
 8004fee:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2221      	movs	r2, #33	; 0x21
 8004ff4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	2380      	movs	r3, #128	; 0x80
 8004ffc:	015b      	lsls	r3, r3, #5
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d107      	bne.n	8005012 <HAL_UART_Transmit_IT+0xaa>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d103      	bne.n	8005012 <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4a14      	ldr	r2, [pc, #80]	; (8005060 <HAL_UART_Transmit_IT+0xf8>)
 800500e:	669a      	str	r2, [r3, #104]	; 0x68
 8005010:	e002      	b.n	8005018 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	4a13      	ldr	r2, [pc, #76]	; (8005064 <HAL_UART_Transmit_IT+0xfc>)
 8005016:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2274      	movs	r2, #116	; 0x74
 800501c:	2100      	movs	r1, #0
 800501e:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005020:	f3ef 8310 	mrs	r3, PRIMASK
 8005024:	613b      	str	r3, [r7, #16]
  return(result);
 8005026:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005028:	61fb      	str	r3, [r7, #28]
 800502a:	2301      	movs	r3, #1
 800502c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f383 8810 	msr	PRIMASK, r3
}
 8005034:	46c0      	nop			; (mov r8, r8)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2180      	movs	r1, #128	; 0x80
 8005042:	430a      	orrs	r2, r1
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	f383 8810 	msr	PRIMASK, r3
}
 8005050:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	e000      	b.n	8005058 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8005056:	2302      	movs	r3, #2
  }
}
 8005058:	0018      	movs	r0, r3
 800505a:	46bd      	mov	sp, r7
 800505c:	b008      	add	sp, #32
 800505e:	bd80      	pop	{r7, pc}
 8005060:	08005df7 	.word	0x08005df7
 8005064:	08005d43 	.word	0x08005d43

08005068 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005068:	b590      	push	{r4, r7, lr}
 800506a:	b0ab      	sub	sp, #172	; 0xac
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	22a4      	movs	r2, #164	; 0xa4
 8005078:	18b9      	adds	r1, r7, r2
 800507a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	20a0      	movs	r0, #160	; 0xa0
 8005084:	1839      	adds	r1, r7, r0
 8005086:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	219c      	movs	r1, #156	; 0x9c
 8005090:	1879      	adds	r1, r7, r1
 8005092:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005094:	0011      	movs	r1, r2
 8005096:	18bb      	adds	r3, r7, r2
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a99      	ldr	r2, [pc, #612]	; (8005300 <HAL_UART_IRQHandler+0x298>)
 800509c:	4013      	ands	r3, r2
 800509e:	2298      	movs	r2, #152	; 0x98
 80050a0:	18bc      	adds	r4, r7, r2
 80050a2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80050a4:	18bb      	adds	r3, r7, r2
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d114      	bne.n	80050d6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80050ac:	187b      	adds	r3, r7, r1
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2220      	movs	r2, #32
 80050b2:	4013      	ands	r3, r2
 80050b4:	d00f      	beq.n	80050d6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050b6:	183b      	adds	r3, r7, r0
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2220      	movs	r2, #32
 80050bc:	4013      	ands	r3, r2
 80050be:	d00a      	beq.n	80050d6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d100      	bne.n	80050ca <HAL_UART_IRQHandler+0x62>
 80050c8:	e296      	b.n	80055f8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	0010      	movs	r0, r2
 80050d2:	4798      	blx	r3
      }
      return;
 80050d4:	e290      	b.n	80055f8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80050d6:	2398      	movs	r3, #152	; 0x98
 80050d8:	18fb      	adds	r3, r7, r3
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d100      	bne.n	80050e2 <HAL_UART_IRQHandler+0x7a>
 80050e0:	e114      	b.n	800530c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80050e2:	239c      	movs	r3, #156	; 0x9c
 80050e4:	18fb      	adds	r3, r7, r3
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2201      	movs	r2, #1
 80050ea:	4013      	ands	r3, r2
 80050ec:	d106      	bne.n	80050fc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80050ee:	23a0      	movs	r3, #160	; 0xa0
 80050f0:	18fb      	adds	r3, r7, r3
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a83      	ldr	r2, [pc, #524]	; (8005304 <HAL_UART_IRQHandler+0x29c>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	d100      	bne.n	80050fc <HAL_UART_IRQHandler+0x94>
 80050fa:	e107      	b.n	800530c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050fc:	23a4      	movs	r3, #164	; 0xa4
 80050fe:	18fb      	adds	r3, r7, r3
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2201      	movs	r2, #1
 8005104:	4013      	ands	r3, r2
 8005106:	d012      	beq.n	800512e <HAL_UART_IRQHandler+0xc6>
 8005108:	23a0      	movs	r3, #160	; 0xa0
 800510a:	18fb      	adds	r3, r7, r3
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	2380      	movs	r3, #128	; 0x80
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	4013      	ands	r3, r2
 8005114:	d00b      	beq.n	800512e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2201      	movs	r2, #1
 800511c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2280      	movs	r2, #128	; 0x80
 8005122:	589b      	ldr	r3, [r3, r2]
 8005124:	2201      	movs	r2, #1
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2180      	movs	r1, #128	; 0x80
 800512c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800512e:	23a4      	movs	r3, #164	; 0xa4
 8005130:	18fb      	adds	r3, r7, r3
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2202      	movs	r2, #2
 8005136:	4013      	ands	r3, r2
 8005138:	d011      	beq.n	800515e <HAL_UART_IRQHandler+0xf6>
 800513a:	239c      	movs	r3, #156	; 0x9c
 800513c:	18fb      	adds	r3, r7, r3
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2201      	movs	r2, #1
 8005142:	4013      	ands	r3, r2
 8005144:	d00b      	beq.n	800515e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2202      	movs	r2, #2
 800514c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2280      	movs	r2, #128	; 0x80
 8005152:	589b      	ldr	r3, [r3, r2]
 8005154:	2204      	movs	r2, #4
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2180      	movs	r1, #128	; 0x80
 800515c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800515e:	23a4      	movs	r3, #164	; 0xa4
 8005160:	18fb      	adds	r3, r7, r3
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2204      	movs	r2, #4
 8005166:	4013      	ands	r3, r2
 8005168:	d011      	beq.n	800518e <HAL_UART_IRQHandler+0x126>
 800516a:	239c      	movs	r3, #156	; 0x9c
 800516c:	18fb      	adds	r3, r7, r3
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2201      	movs	r2, #1
 8005172:	4013      	ands	r3, r2
 8005174:	d00b      	beq.n	800518e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2204      	movs	r2, #4
 800517c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2280      	movs	r2, #128	; 0x80
 8005182:	589b      	ldr	r3, [r3, r2]
 8005184:	2202      	movs	r2, #2
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2180      	movs	r1, #128	; 0x80
 800518c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800518e:	23a4      	movs	r3, #164	; 0xa4
 8005190:	18fb      	adds	r3, r7, r3
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2208      	movs	r2, #8
 8005196:	4013      	ands	r3, r2
 8005198:	d017      	beq.n	80051ca <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800519a:	23a0      	movs	r3, #160	; 0xa0
 800519c:	18fb      	adds	r3, r7, r3
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2220      	movs	r2, #32
 80051a2:	4013      	ands	r3, r2
 80051a4:	d105      	bne.n	80051b2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80051a6:	239c      	movs	r3, #156	; 0x9c
 80051a8:	18fb      	adds	r3, r7, r3
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2201      	movs	r2, #1
 80051ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80051b0:	d00b      	beq.n	80051ca <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2208      	movs	r2, #8
 80051b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2280      	movs	r2, #128	; 0x80
 80051be:	589b      	ldr	r3, [r3, r2]
 80051c0:	2208      	movs	r2, #8
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2180      	movs	r1, #128	; 0x80
 80051c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80051ca:	23a4      	movs	r3, #164	; 0xa4
 80051cc:	18fb      	adds	r3, r7, r3
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	2380      	movs	r3, #128	; 0x80
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	4013      	ands	r3, r2
 80051d6:	d013      	beq.n	8005200 <HAL_UART_IRQHandler+0x198>
 80051d8:	23a0      	movs	r3, #160	; 0xa0
 80051da:	18fb      	adds	r3, r7, r3
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	2380      	movs	r3, #128	; 0x80
 80051e0:	04db      	lsls	r3, r3, #19
 80051e2:	4013      	ands	r3, r2
 80051e4:	d00c      	beq.n	8005200 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2280      	movs	r2, #128	; 0x80
 80051ec:	0112      	lsls	r2, r2, #4
 80051ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2280      	movs	r2, #128	; 0x80
 80051f4:	589b      	ldr	r3, [r3, r2]
 80051f6:	2220      	movs	r2, #32
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2180      	movs	r1, #128	; 0x80
 80051fe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2280      	movs	r2, #128	; 0x80
 8005204:	589b      	ldr	r3, [r3, r2]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d100      	bne.n	800520c <HAL_UART_IRQHandler+0x1a4>
 800520a:	e1f7      	b.n	80055fc <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800520c:	23a4      	movs	r3, #164	; 0xa4
 800520e:	18fb      	adds	r3, r7, r3
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2220      	movs	r2, #32
 8005214:	4013      	ands	r3, r2
 8005216:	d00e      	beq.n	8005236 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005218:	23a0      	movs	r3, #160	; 0xa0
 800521a:	18fb      	adds	r3, r7, r3
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2220      	movs	r2, #32
 8005220:	4013      	ands	r3, r2
 8005222:	d008      	beq.n	8005236 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005228:	2b00      	cmp	r3, #0
 800522a:	d004      	beq.n	8005236 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	0010      	movs	r0, r2
 8005234:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2280      	movs	r2, #128	; 0x80
 800523a:	589b      	ldr	r3, [r3, r2]
 800523c:	2194      	movs	r1, #148	; 0x94
 800523e:	187a      	adds	r2, r7, r1
 8005240:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2240      	movs	r2, #64	; 0x40
 800524a:	4013      	ands	r3, r2
 800524c:	2b40      	cmp	r3, #64	; 0x40
 800524e:	d004      	beq.n	800525a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005250:	187b      	adds	r3, r7, r1
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2228      	movs	r2, #40	; 0x28
 8005256:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005258:	d047      	beq.n	80052ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	0018      	movs	r0, r3
 800525e:	f000 fcf7 	bl	8005c50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	2240      	movs	r2, #64	; 0x40
 800526a:	4013      	ands	r3, r2
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d137      	bne.n	80052e0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005270:	f3ef 8310 	mrs	r3, PRIMASK
 8005274:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005278:	2090      	movs	r0, #144	; 0x90
 800527a:	183a      	adds	r2, r7, r0
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	2301      	movs	r3, #1
 8005280:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005282:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005284:	f383 8810 	msr	PRIMASK, r3
}
 8005288:	46c0      	nop			; (mov r8, r8)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2140      	movs	r1, #64	; 0x40
 8005296:	438a      	bics	r2, r1
 8005298:	609a      	str	r2, [r3, #8]
 800529a:	183b      	adds	r3, r7, r0
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052a2:	f383 8810 	msr	PRIMASK, r3
}
 80052a6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d012      	beq.n	80052d6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b4:	4a14      	ldr	r2, [pc, #80]	; (8005308 <HAL_UART_IRQHandler+0x2a0>)
 80052b6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052bc:	0018      	movs	r0, r3
 80052be:	f7fd ff53 	bl	8003168 <HAL_DMA_Abort_IT>
 80052c2:	1e03      	subs	r3, r0, #0
 80052c4:	d01a      	beq.n	80052fc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d0:	0018      	movs	r0, r3
 80052d2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d4:	e012      	b.n	80052fc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	0018      	movs	r0, r3
 80052da:	f000 f9a5 	bl	8005628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052de:	e00d      	b.n	80052fc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	0018      	movs	r0, r3
 80052e4:	f000 f9a0 	bl	8005628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e8:	e008      	b.n	80052fc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	0018      	movs	r0, r3
 80052ee:	f000 f99b 	bl	8005628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2280      	movs	r2, #128	; 0x80
 80052f6:	2100      	movs	r1, #0
 80052f8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80052fa:	e17f      	b.n	80055fc <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052fc:	46c0      	nop			; (mov r8, r8)
    return;
 80052fe:	e17d      	b.n	80055fc <HAL_UART_IRQHandler+0x594>
 8005300:	0000080f 	.word	0x0000080f
 8005304:	04000120 	.word	0x04000120
 8005308:	08005d15 	.word	0x08005d15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005310:	2b01      	cmp	r3, #1
 8005312:	d000      	beq.n	8005316 <HAL_UART_IRQHandler+0x2ae>
 8005314:	e131      	b.n	800557a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005316:	23a4      	movs	r3, #164	; 0xa4
 8005318:	18fb      	adds	r3, r7, r3
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2210      	movs	r2, #16
 800531e:	4013      	ands	r3, r2
 8005320:	d100      	bne.n	8005324 <HAL_UART_IRQHandler+0x2bc>
 8005322:	e12a      	b.n	800557a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005324:	23a0      	movs	r3, #160	; 0xa0
 8005326:	18fb      	adds	r3, r7, r3
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2210      	movs	r2, #16
 800532c:	4013      	ands	r3, r2
 800532e:	d100      	bne.n	8005332 <HAL_UART_IRQHandler+0x2ca>
 8005330:	e123      	b.n	800557a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2210      	movs	r2, #16
 8005338:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2240      	movs	r2, #64	; 0x40
 8005342:	4013      	ands	r3, r2
 8005344:	2b40      	cmp	r3, #64	; 0x40
 8005346:	d000      	beq.n	800534a <HAL_UART_IRQHandler+0x2e2>
 8005348:	e09b      	b.n	8005482 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	217e      	movs	r1, #126	; 0x7e
 8005354:	187b      	adds	r3, r7, r1
 8005356:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005358:	187b      	adds	r3, r7, r1
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d100      	bne.n	8005362 <HAL_UART_IRQHandler+0x2fa>
 8005360:	e14e      	b.n	8005600 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2258      	movs	r2, #88	; 0x58
 8005366:	5a9b      	ldrh	r3, [r3, r2]
 8005368:	187a      	adds	r2, r7, r1
 800536a:	8812      	ldrh	r2, [r2, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d300      	bcc.n	8005372 <HAL_UART_IRQHandler+0x30a>
 8005370:	e146      	b.n	8005600 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	187a      	adds	r2, r7, r1
 8005376:	215a      	movs	r1, #90	; 0x5a
 8005378:	8812      	ldrh	r2, [r2, #0]
 800537a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	2b20      	cmp	r3, #32
 8005384:	d06e      	beq.n	8005464 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005386:	f3ef 8310 	mrs	r3, PRIMASK
 800538a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800538c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800538e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005390:	2301      	movs	r3, #1
 8005392:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005396:	f383 8810 	msr	PRIMASK, r3
}
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	499a      	ldr	r1, [pc, #616]	; (8005610 <HAL_UART_IRQHandler+0x5a8>)
 80053a8:	400a      	ands	r2, r1
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b2:	f383 8810 	msr	PRIMASK, r3
}
 80053b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053b8:	f3ef 8310 	mrs	r3, PRIMASK
 80053bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80053be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c0:	677b      	str	r3, [r7, #116]	; 0x74
 80053c2:	2301      	movs	r3, #1
 80053c4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053c8:	f383 8810 	msr	PRIMASK, r3
}
 80053cc:	46c0      	nop			; (mov r8, r8)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2101      	movs	r1, #1
 80053da:	438a      	bics	r2, r1
 80053dc:	609a      	str	r2, [r3, #8]
 80053de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053e0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e4:	f383 8810 	msr	PRIMASK, r3
}
 80053e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ea:	f3ef 8310 	mrs	r3, PRIMASK
 80053ee:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80053f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053f2:	673b      	str	r3, [r7, #112]	; 0x70
 80053f4:	2301      	movs	r3, #1
 80053f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053fa:	f383 8810 	msr	PRIMASK, r3
}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2140      	movs	r1, #64	; 0x40
 800540c:	438a      	bics	r2, r1
 800540e:	609a      	str	r2, [r3, #8]
 8005410:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005412:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005416:	f383 8810 	msr	PRIMASK, r3
}
 800541a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2220      	movs	r2, #32
 8005420:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005428:	f3ef 8310 	mrs	r3, PRIMASK
 800542c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800542e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005430:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005432:	2301      	movs	r3, #1
 8005434:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005436:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005438:	f383 8810 	msr	PRIMASK, r3
}
 800543c:	46c0      	nop			; (mov r8, r8)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2110      	movs	r1, #16
 800544a:	438a      	bics	r2, r1
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005450:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005454:	f383 8810 	msr	PRIMASK, r3
}
 8005458:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545e:	0018      	movs	r0, r3
 8005460:	f7fd fe4a 	bl	80030f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2258      	movs	r2, #88	; 0x58
 8005468:	5a9a      	ldrh	r2, [r3, r2]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	215a      	movs	r1, #90	; 0x5a
 800546e:	5a5b      	ldrh	r3, [r3, r1]
 8005470:	b29b      	uxth	r3, r3
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	b29a      	uxth	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	0011      	movs	r1, r2
 800547a:	0018      	movs	r0, r3
 800547c:	f000 f8dc 	bl	8005638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005480:	e0be      	b.n	8005600 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2258      	movs	r2, #88	; 0x58
 8005486:	5a99      	ldrh	r1, [r3, r2]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	225a      	movs	r2, #90	; 0x5a
 800548c:	5a9b      	ldrh	r3, [r3, r2]
 800548e:	b29a      	uxth	r2, r3
 8005490:	208e      	movs	r0, #142	; 0x8e
 8005492:	183b      	adds	r3, r7, r0
 8005494:	1a8a      	subs	r2, r1, r2
 8005496:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	225a      	movs	r2, #90	; 0x5a
 800549c:	5a9b      	ldrh	r3, [r3, r2]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d100      	bne.n	80054a6 <HAL_UART_IRQHandler+0x43e>
 80054a4:	e0ae      	b.n	8005604 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80054a6:	183b      	adds	r3, r7, r0
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d100      	bne.n	80054b0 <HAL_UART_IRQHandler+0x448>
 80054ae:	e0a9      	b.n	8005604 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b0:	f3ef 8310 	mrs	r3, PRIMASK
 80054b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80054b6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b8:	2488      	movs	r4, #136	; 0x88
 80054ba:	193a      	adds	r2, r7, r4
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	2301      	movs	r3, #1
 80054c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f383 8810 	msr	PRIMASK, r3
}
 80054c8:	46c0      	nop			; (mov r8, r8)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	494f      	ldr	r1, [pc, #316]	; (8005614 <HAL_UART_IRQHandler+0x5ac>)
 80054d6:	400a      	ands	r2, r1
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	193b      	adds	r3, r7, r4
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f383 8810 	msr	PRIMASK, r3
}
 80054e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054e8:	f3ef 8310 	mrs	r3, PRIMASK
 80054ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80054ee:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f0:	2484      	movs	r4, #132	; 0x84
 80054f2:	193a      	adds	r2, r7, r4
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	2301      	movs	r3, #1
 80054f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	f383 8810 	msr	PRIMASK, r3
}
 8005500:	46c0      	nop			; (mov r8, r8)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2101      	movs	r1, #1
 800550e:	438a      	bics	r2, r1
 8005510:	609a      	str	r2, [r3, #8]
 8005512:	193b      	adds	r3, r7, r4
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	f383 8810 	msr	PRIMASK, r3
}
 800551e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005532:	f3ef 8310 	mrs	r3, PRIMASK
 8005536:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800553a:	2480      	movs	r4, #128	; 0x80
 800553c:	193a      	adds	r2, r7, r4
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	2301      	movs	r3, #1
 8005542:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	f383 8810 	msr	PRIMASK, r3
}
 800554a:	46c0      	nop			; (mov r8, r8)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2110      	movs	r1, #16
 8005558:	438a      	bics	r2, r1
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	193b      	adds	r3, r7, r4
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005564:	f383 8810 	msr	PRIMASK, r3
}
 8005568:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800556a:	183b      	adds	r3, r7, r0
 800556c:	881a      	ldrh	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	0011      	movs	r1, r2
 8005572:	0018      	movs	r0, r3
 8005574:	f000 f860 	bl	8005638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005578:	e044      	b.n	8005604 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800557a:	23a4      	movs	r3, #164	; 0xa4
 800557c:	18fb      	adds	r3, r7, r3
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	2380      	movs	r3, #128	; 0x80
 8005582:	035b      	lsls	r3, r3, #13
 8005584:	4013      	ands	r3, r2
 8005586:	d010      	beq.n	80055aa <HAL_UART_IRQHandler+0x542>
 8005588:	239c      	movs	r3, #156	; 0x9c
 800558a:	18fb      	adds	r3, r7, r3
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	2380      	movs	r3, #128	; 0x80
 8005590:	03db      	lsls	r3, r3, #15
 8005592:	4013      	ands	r3, r2
 8005594:	d009      	beq.n	80055aa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2280      	movs	r2, #128	; 0x80
 800559c:	0352      	lsls	r2, r2, #13
 800559e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	0018      	movs	r0, r3
 80055a4:	f000 fcb0 	bl	8005f08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055a8:	e02f      	b.n	800560a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80055aa:	23a4      	movs	r3, #164	; 0xa4
 80055ac:	18fb      	adds	r3, r7, r3
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2280      	movs	r2, #128	; 0x80
 80055b2:	4013      	ands	r3, r2
 80055b4:	d00f      	beq.n	80055d6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80055b6:	23a0      	movs	r3, #160	; 0xa0
 80055b8:	18fb      	adds	r3, r7, r3
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2280      	movs	r2, #128	; 0x80
 80055be:	4013      	ands	r3, r2
 80055c0:	d009      	beq.n	80055d6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d01e      	beq.n	8005608 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	0010      	movs	r0, r2
 80055d2:	4798      	blx	r3
    }
    return;
 80055d4:	e018      	b.n	8005608 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055d6:	23a4      	movs	r3, #164	; 0xa4
 80055d8:	18fb      	adds	r3, r7, r3
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2240      	movs	r2, #64	; 0x40
 80055de:	4013      	ands	r3, r2
 80055e0:	d013      	beq.n	800560a <HAL_UART_IRQHandler+0x5a2>
 80055e2:	23a0      	movs	r3, #160	; 0xa0
 80055e4:	18fb      	adds	r3, r7, r3
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2240      	movs	r2, #64	; 0x40
 80055ea:	4013      	ands	r3, r2
 80055ec:	d00d      	beq.n	800560a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	0018      	movs	r0, r3
 80055f2:	f000 fc5e 	bl	8005eb2 <UART_EndTransmit_IT>
    return;
 80055f6:	e008      	b.n	800560a <HAL_UART_IRQHandler+0x5a2>
      return;
 80055f8:	46c0      	nop			; (mov r8, r8)
 80055fa:	e006      	b.n	800560a <HAL_UART_IRQHandler+0x5a2>
    return;
 80055fc:	46c0      	nop			; (mov r8, r8)
 80055fe:	e004      	b.n	800560a <HAL_UART_IRQHandler+0x5a2>
      return;
 8005600:	46c0      	nop			; (mov r8, r8)
 8005602:	e002      	b.n	800560a <HAL_UART_IRQHandler+0x5a2>
      return;
 8005604:	46c0      	nop			; (mov r8, r8)
 8005606:	e000      	b.n	800560a <HAL_UART_IRQHandler+0x5a2>
    return;
 8005608:	46c0      	nop			; (mov r8, r8)
  }

}
 800560a:	46bd      	mov	sp, r7
 800560c:	b02b      	add	sp, #172	; 0xac
 800560e:	bd90      	pop	{r4, r7, pc}
 8005610:	fffffeff 	.word	0xfffffeff
 8005614:	fffffedf 	.word	0xfffffedf

08005618 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005620:	46c0      	nop			; (mov r8, r8)
 8005622:	46bd      	mov	sp, r7
 8005624:	b002      	add	sp, #8
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005630:	46c0      	nop			; (mov r8, r8)
 8005632:	46bd      	mov	sp, r7
 8005634:	b002      	add	sp, #8
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	000a      	movs	r2, r1
 8005642:	1cbb      	adds	r3, r7, #2
 8005644:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	46bd      	mov	sp, r7
 800564a:	b002      	add	sp, #8
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005658:	231e      	movs	r3, #30
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	431a      	orrs	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a8d      	ldr	r2, [pc, #564]	; (80058b4 <UART_SetConfig+0x264>)
 8005680:	4013      	ands	r3, r2
 8005682:	0019      	movs	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	430a      	orrs	r2, r1
 800568c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	4a88      	ldr	r2, [pc, #544]	; (80058b8 <UART_SetConfig+0x268>)
 8005696:	4013      	ands	r3, r2
 8005698:	0019      	movs	r1, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	4a7f      	ldr	r2, [pc, #508]	; (80058bc <UART_SetConfig+0x26c>)
 80056be:	4013      	ands	r3, r2
 80056c0:	0019      	movs	r1, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a7b      	ldr	r2, [pc, #492]	; (80058c0 <UART_SetConfig+0x270>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d127      	bne.n	8005726 <UART_SetConfig+0xd6>
 80056d6:	4b7b      	ldr	r3, [pc, #492]	; (80058c4 <UART_SetConfig+0x274>)
 80056d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056da:	2203      	movs	r2, #3
 80056dc:	4013      	ands	r3, r2
 80056de:	2b03      	cmp	r3, #3
 80056e0:	d00d      	beq.n	80056fe <UART_SetConfig+0xae>
 80056e2:	d81b      	bhi.n	800571c <UART_SetConfig+0xcc>
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d014      	beq.n	8005712 <UART_SetConfig+0xc2>
 80056e8:	d818      	bhi.n	800571c <UART_SetConfig+0xcc>
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <UART_SetConfig+0xa4>
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d00a      	beq.n	8005708 <UART_SetConfig+0xb8>
 80056f2:	e013      	b.n	800571c <UART_SetConfig+0xcc>
 80056f4:	231f      	movs	r3, #31
 80056f6:	18fb      	adds	r3, r7, r3
 80056f8:	2200      	movs	r2, #0
 80056fa:	701a      	strb	r2, [r3, #0]
 80056fc:	e021      	b.n	8005742 <UART_SetConfig+0xf2>
 80056fe:	231f      	movs	r3, #31
 8005700:	18fb      	adds	r3, r7, r3
 8005702:	2202      	movs	r2, #2
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	e01c      	b.n	8005742 <UART_SetConfig+0xf2>
 8005708:	231f      	movs	r3, #31
 800570a:	18fb      	adds	r3, r7, r3
 800570c:	2204      	movs	r2, #4
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	e017      	b.n	8005742 <UART_SetConfig+0xf2>
 8005712:	231f      	movs	r3, #31
 8005714:	18fb      	adds	r3, r7, r3
 8005716:	2208      	movs	r2, #8
 8005718:	701a      	strb	r2, [r3, #0]
 800571a:	e012      	b.n	8005742 <UART_SetConfig+0xf2>
 800571c:	231f      	movs	r3, #31
 800571e:	18fb      	adds	r3, r7, r3
 8005720:	2210      	movs	r2, #16
 8005722:	701a      	strb	r2, [r3, #0]
 8005724:	e00d      	b.n	8005742 <UART_SetConfig+0xf2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a67      	ldr	r2, [pc, #412]	; (80058c8 <UART_SetConfig+0x278>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d104      	bne.n	800573a <UART_SetConfig+0xea>
 8005730:	231f      	movs	r3, #31
 8005732:	18fb      	adds	r3, r7, r3
 8005734:	2200      	movs	r2, #0
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	e003      	b.n	8005742 <UART_SetConfig+0xf2>
 800573a:	231f      	movs	r3, #31
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	2210      	movs	r2, #16
 8005740:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69da      	ldr	r2, [r3, #28]
 8005746:	2380      	movs	r3, #128	; 0x80
 8005748:	021b      	lsls	r3, r3, #8
 800574a:	429a      	cmp	r2, r3
 800574c:	d15d      	bne.n	800580a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800574e:	231f      	movs	r3, #31
 8005750:	18fb      	adds	r3, r7, r3
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b08      	cmp	r3, #8
 8005756:	d015      	beq.n	8005784 <UART_SetConfig+0x134>
 8005758:	dc18      	bgt.n	800578c <UART_SetConfig+0x13c>
 800575a:	2b04      	cmp	r3, #4
 800575c:	d00d      	beq.n	800577a <UART_SetConfig+0x12a>
 800575e:	dc15      	bgt.n	800578c <UART_SetConfig+0x13c>
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <UART_SetConfig+0x11a>
 8005764:	2b02      	cmp	r3, #2
 8005766:	d005      	beq.n	8005774 <UART_SetConfig+0x124>
 8005768:	e010      	b.n	800578c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800576a:	f7fe fb4d 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 800576e:	0003      	movs	r3, r0
 8005770:	61bb      	str	r3, [r7, #24]
        break;
 8005772:	e012      	b.n	800579a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005774:	4b55      	ldr	r3, [pc, #340]	; (80058cc <UART_SetConfig+0x27c>)
 8005776:	61bb      	str	r3, [r7, #24]
        break;
 8005778:	e00f      	b.n	800579a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800577a:	f7fe fad7 	bl	8003d2c <HAL_RCC_GetSysClockFreq>
 800577e:	0003      	movs	r3, r0
 8005780:	61bb      	str	r3, [r7, #24]
        break;
 8005782:	e00a      	b.n	800579a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005784:	2380      	movs	r3, #128	; 0x80
 8005786:	021b      	lsls	r3, r3, #8
 8005788:	61bb      	str	r3, [r7, #24]
        break;
 800578a:	e006      	b.n	800579a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005790:	231e      	movs	r3, #30
 8005792:	18fb      	adds	r3, r7, r3
 8005794:	2201      	movs	r2, #1
 8005796:	701a      	strb	r2, [r3, #0]
        break;
 8005798:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d100      	bne.n	80057a2 <UART_SetConfig+0x152>
 80057a0:	e07b      	b.n	800589a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	005a      	lsls	r2, r3, #1
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	085b      	lsrs	r3, r3, #1
 80057ac:	18d2      	adds	r2, r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	0019      	movs	r1, r3
 80057b4:	0010      	movs	r0, r2
 80057b6:	f7fa fcc3 	bl	8000140 <__udivsi3>
 80057ba:	0003      	movs	r3, r0
 80057bc:	b29b      	uxth	r3, r3
 80057be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	2b0f      	cmp	r3, #15
 80057c4:	d91c      	bls.n	8005800 <UART_SetConfig+0x1b0>
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	2380      	movs	r3, #128	; 0x80
 80057ca:	025b      	lsls	r3, r3, #9
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d217      	bcs.n	8005800 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	200e      	movs	r0, #14
 80057d6:	183b      	adds	r3, r7, r0
 80057d8:	210f      	movs	r1, #15
 80057da:	438a      	bics	r2, r1
 80057dc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	085b      	lsrs	r3, r3, #1
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2207      	movs	r2, #7
 80057e6:	4013      	ands	r3, r2
 80057e8:	b299      	uxth	r1, r3
 80057ea:	183b      	adds	r3, r7, r0
 80057ec:	183a      	adds	r2, r7, r0
 80057ee:	8812      	ldrh	r2, [r2, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	183a      	adds	r2, r7, r0
 80057fa:	8812      	ldrh	r2, [r2, #0]
 80057fc:	60da      	str	r2, [r3, #12]
 80057fe:	e04c      	b.n	800589a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005800:	231e      	movs	r3, #30
 8005802:	18fb      	adds	r3, r7, r3
 8005804:	2201      	movs	r2, #1
 8005806:	701a      	strb	r2, [r3, #0]
 8005808:	e047      	b.n	800589a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800580a:	231f      	movs	r3, #31
 800580c:	18fb      	adds	r3, r7, r3
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b08      	cmp	r3, #8
 8005812:	d015      	beq.n	8005840 <UART_SetConfig+0x1f0>
 8005814:	dc18      	bgt.n	8005848 <UART_SetConfig+0x1f8>
 8005816:	2b04      	cmp	r3, #4
 8005818:	d00d      	beq.n	8005836 <UART_SetConfig+0x1e6>
 800581a:	dc15      	bgt.n	8005848 <UART_SetConfig+0x1f8>
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <UART_SetConfig+0x1d6>
 8005820:	2b02      	cmp	r3, #2
 8005822:	d005      	beq.n	8005830 <UART_SetConfig+0x1e0>
 8005824:	e010      	b.n	8005848 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005826:	f7fe faef 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 800582a:	0003      	movs	r3, r0
 800582c:	61bb      	str	r3, [r7, #24]
        break;
 800582e:	e012      	b.n	8005856 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005830:	4b26      	ldr	r3, [pc, #152]	; (80058cc <UART_SetConfig+0x27c>)
 8005832:	61bb      	str	r3, [r7, #24]
        break;
 8005834:	e00f      	b.n	8005856 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005836:	f7fe fa79 	bl	8003d2c <HAL_RCC_GetSysClockFreq>
 800583a:	0003      	movs	r3, r0
 800583c:	61bb      	str	r3, [r7, #24]
        break;
 800583e:	e00a      	b.n	8005856 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005840:	2380      	movs	r3, #128	; 0x80
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	61bb      	str	r3, [r7, #24]
        break;
 8005846:	e006      	b.n	8005856 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800584c:	231e      	movs	r3, #30
 800584e:	18fb      	adds	r3, r7, r3
 8005850:	2201      	movs	r2, #1
 8005852:	701a      	strb	r2, [r3, #0]
        break;
 8005854:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01e      	beq.n	800589a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	085a      	lsrs	r2, r3, #1
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	18d2      	adds	r2, r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	0019      	movs	r1, r3
 800586c:	0010      	movs	r0, r2
 800586e:	f7fa fc67 	bl	8000140 <__udivsi3>
 8005872:	0003      	movs	r3, r0
 8005874:	b29b      	uxth	r3, r3
 8005876:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	2b0f      	cmp	r3, #15
 800587c:	d909      	bls.n	8005892 <UART_SetConfig+0x242>
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	025b      	lsls	r3, r3, #9
 8005884:	429a      	cmp	r2, r3
 8005886:	d204      	bcs.n	8005892 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	60da      	str	r2, [r3, #12]
 8005890:	e003      	b.n	800589a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005892:	231e      	movs	r3, #30
 8005894:	18fb      	adds	r3, r7, r3
 8005896:	2201      	movs	r2, #1
 8005898:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80058a6:	231e      	movs	r3, #30
 80058a8:	18fb      	adds	r3, r7, r3
 80058aa:	781b      	ldrb	r3, [r3, #0]
}
 80058ac:	0018      	movs	r0, r3
 80058ae:	46bd      	mov	sp, r7
 80058b0:	b008      	add	sp, #32
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	ffff69f3 	.word	0xffff69f3
 80058b8:	ffffcfff 	.word	0xffffcfff
 80058bc:	fffff4ff 	.word	0xfffff4ff
 80058c0:	40013800 	.word	0x40013800
 80058c4:	40021000 	.word	0x40021000
 80058c8:	40004400 	.word	0x40004400
 80058cc:	007a1200 	.word	0x007a1200

080058d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	2201      	movs	r2, #1
 80058de:	4013      	ands	r3, r2
 80058e0:	d00b      	beq.n	80058fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	4a4a      	ldr	r2, [pc, #296]	; (8005a14 <UART_AdvFeatureConfig+0x144>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	0019      	movs	r1, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	2202      	movs	r2, #2
 8005900:	4013      	ands	r3, r2
 8005902:	d00b      	beq.n	800591c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	4a43      	ldr	r2, [pc, #268]	; (8005a18 <UART_AdvFeatureConfig+0x148>)
 800590c:	4013      	ands	r3, r2
 800590e:	0019      	movs	r1, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	2204      	movs	r2, #4
 8005922:	4013      	ands	r3, r2
 8005924:	d00b      	beq.n	800593e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	4a3b      	ldr	r2, [pc, #236]	; (8005a1c <UART_AdvFeatureConfig+0x14c>)
 800592e:	4013      	ands	r3, r2
 8005930:	0019      	movs	r1, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	2208      	movs	r2, #8
 8005944:	4013      	ands	r3, r2
 8005946:	d00b      	beq.n	8005960 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	4a34      	ldr	r2, [pc, #208]	; (8005a20 <UART_AdvFeatureConfig+0x150>)
 8005950:	4013      	ands	r3, r2
 8005952:	0019      	movs	r1, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	2210      	movs	r2, #16
 8005966:	4013      	ands	r3, r2
 8005968:	d00b      	beq.n	8005982 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	4a2c      	ldr	r2, [pc, #176]	; (8005a24 <UART_AdvFeatureConfig+0x154>)
 8005972:	4013      	ands	r3, r2
 8005974:	0019      	movs	r1, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	2220      	movs	r2, #32
 8005988:	4013      	ands	r3, r2
 800598a:	d00b      	beq.n	80059a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	4a25      	ldr	r2, [pc, #148]	; (8005a28 <UART_AdvFeatureConfig+0x158>)
 8005994:	4013      	ands	r3, r2
 8005996:	0019      	movs	r1, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	2240      	movs	r2, #64	; 0x40
 80059aa:	4013      	ands	r3, r2
 80059ac:	d01d      	beq.n	80059ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	4a1d      	ldr	r2, [pc, #116]	; (8005a2c <UART_AdvFeatureConfig+0x15c>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	0019      	movs	r1, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ca:	2380      	movs	r3, #128	; 0x80
 80059cc:	035b      	lsls	r3, r3, #13
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d10b      	bne.n	80059ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	4a15      	ldr	r2, [pc, #84]	; (8005a30 <UART_AdvFeatureConfig+0x160>)
 80059da:	4013      	ands	r3, r2
 80059dc:	0019      	movs	r1, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	2280      	movs	r2, #128	; 0x80
 80059f0:	4013      	ands	r3, r2
 80059f2:	d00b      	beq.n	8005a0c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	4a0e      	ldr	r2, [pc, #56]	; (8005a34 <UART_AdvFeatureConfig+0x164>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	0019      	movs	r1, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	605a      	str	r2, [r3, #4]
  }
}
 8005a0c:	46c0      	nop			; (mov r8, r8)
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	b002      	add	sp, #8
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	fffdffff 	.word	0xfffdffff
 8005a18:	fffeffff 	.word	0xfffeffff
 8005a1c:	fffbffff 	.word	0xfffbffff
 8005a20:	ffff7fff 	.word	0xffff7fff
 8005a24:	ffffefff 	.word	0xffffefff
 8005a28:	ffffdfff 	.word	0xffffdfff
 8005a2c:	ffefffff 	.word	0xffefffff
 8005a30:	ff9fffff 	.word	0xff9fffff
 8005a34:	fff7ffff 	.word	0xfff7ffff

08005a38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af02      	add	r7, sp, #8
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2280      	movs	r2, #128	; 0x80
 8005a44:	2100      	movs	r1, #0
 8005a46:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a48:	f7fd fa4a 	bl	8002ee0 <HAL_GetTick>
 8005a4c:	0003      	movs	r3, r0
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2208      	movs	r2, #8
 8005a58:	4013      	ands	r3, r2
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d10c      	bne.n	8005a78 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2280      	movs	r2, #128	; 0x80
 8005a62:	0391      	lsls	r1, r2, #14
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	4a17      	ldr	r2, [pc, #92]	; (8005ac4 <UART_CheckIdleState+0x8c>)
 8005a68:	9200      	str	r2, [sp, #0]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f000 f82c 	bl	8005ac8 <UART_WaitOnFlagUntilTimeout>
 8005a70:	1e03      	subs	r3, r0, #0
 8005a72:	d001      	beq.n	8005a78 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e021      	b.n	8005abc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2204      	movs	r2, #4
 8005a80:	4013      	ands	r3, r2
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d10c      	bne.n	8005aa0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2280      	movs	r2, #128	; 0x80
 8005a8a:	03d1      	lsls	r1, r2, #15
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	4a0d      	ldr	r2, [pc, #52]	; (8005ac4 <UART_CheckIdleState+0x8c>)
 8005a90:	9200      	str	r2, [sp, #0]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f000 f818 	bl	8005ac8 <UART_WaitOnFlagUntilTimeout>
 8005a98:	1e03      	subs	r3, r0, #0
 8005a9a:	d001      	beq.n	8005aa0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e00d      	b.n	8005abc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2274      	movs	r2, #116	; 0x74
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	0018      	movs	r0, r3
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	b004      	add	sp, #16
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	01ffffff 	.word	0x01ffffff

08005ac8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b094      	sub	sp, #80	; 0x50
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	603b      	str	r3, [r7, #0]
 8005ad4:	1dfb      	adds	r3, r7, #7
 8005ad6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad8:	e0a3      	b.n	8005c22 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ada:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005adc:	3301      	adds	r3, #1
 8005ade:	d100      	bne.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005ae0:	e09f      	b.n	8005c22 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ae2:	f7fd f9fd 	bl	8002ee0 <HAL_GetTick>
 8005ae6:	0002      	movs	r2, r0
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d302      	bcc.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005af2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d13d      	bne.n	8005b74 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af8:	f3ef 8310 	mrs	r3, PRIMASK
 8005afc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b00:	647b      	str	r3, [r7, #68]	; 0x44
 8005b02:	2301      	movs	r3, #1
 8005b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b08:	f383 8810 	msr	PRIMASK, r3
}
 8005b0c:	46c0      	nop			; (mov r8, r8)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	494c      	ldr	r1, [pc, #304]	; (8005c4c <UART_WaitOnFlagUntilTimeout+0x184>)
 8005b1a:	400a      	ands	r2, r1
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b20:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	f383 8810 	msr	PRIMASK, r3
}
 8005b28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b2e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b32:	643b      	str	r3, [r7, #64]	; 0x40
 8005b34:	2301      	movs	r3, #1
 8005b36:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3a:	f383 8810 	msr	PRIMASK, r3
}
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689a      	ldr	r2, [r3, #8]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	438a      	bics	r2, r1
 8005b4e:	609a      	str	r2, [r3, #8]
 8005b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b56:	f383 8810 	msr	PRIMASK, r3
}
 8005b5a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2274      	movs	r2, #116	; 0x74
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e067      	b.n	8005c44 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2204      	movs	r2, #4
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d050      	beq.n	8005c22 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69da      	ldr	r2, [r3, #28]
 8005b86:	2380      	movs	r3, #128	; 0x80
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	401a      	ands	r2, r3
 8005b8c:	2380      	movs	r3, #128	; 0x80
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d146      	bne.n	8005c22 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2280      	movs	r2, #128	; 0x80
 8005b9a:	0112      	lsls	r2, r2, #4
 8005b9c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8005ba2:	613b      	str	r3, [r7, #16]
  return(result);
 8005ba4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ba8:	2301      	movs	r3, #1
 8005baa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f383 8810 	msr	PRIMASK, r3
}
 8005bb2:	46c0      	nop			; (mov r8, r8)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4923      	ldr	r1, [pc, #140]	; (8005c4c <UART_WaitOnFlagUntilTimeout+0x184>)
 8005bc0:	400a      	ands	r2, r1
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	f383 8810 	msr	PRIMASK, r3
}
 8005bce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8005bd4:	61fb      	str	r3, [r7, #28]
  return(result);
 8005bd6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bda:	2301      	movs	r3, #1
 8005bdc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	f383 8810 	msr	PRIMASK, r3
}
 8005be4:	46c0      	nop			; (mov r8, r8)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	438a      	bics	r2, r1
 8005bf4:	609a      	str	r2, [r3, #8]
 8005bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	f383 8810 	msr	PRIMASK, r3
}
 8005c00:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2220      	movs	r2, #32
 8005c06:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2280      	movs	r2, #128	; 0x80
 8005c12:	2120      	movs	r1, #32
 8005c14:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2274      	movs	r2, #116	; 0x74
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e010      	b.n	8005c44 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	425a      	negs	r2, r3
 8005c32:	4153      	adcs	r3, r2
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	001a      	movs	r2, r3
 8005c38:	1dfb      	adds	r3, r7, #7
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d100      	bne.n	8005c42 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005c40:	e74b      	b.n	8005ada <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	0018      	movs	r0, r3
 8005c46:	46bd      	mov	sp, r7
 8005c48:	b014      	add	sp, #80	; 0x50
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	fffffe5f 	.word	0xfffffe5f

08005c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08e      	sub	sp, #56	; 0x38
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c58:	f3ef 8310 	mrs	r3, PRIMASK
 8005c5c:	617b      	str	r3, [r7, #20]
  return(result);
 8005c5e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c60:	637b      	str	r3, [r7, #52]	; 0x34
 8005c62:	2301      	movs	r3, #1
 8005c64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	f383 8810 	msr	PRIMASK, r3
}
 8005c6c:	46c0      	nop			; (mov r8, r8)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4925      	ldr	r1, [pc, #148]	; (8005d10 <UART_EndRxTransfer+0xc0>)
 8005c7a:	400a      	ands	r2, r1
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	f383 8810 	msr	PRIMASK, r3
}
 8005c88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c8e:	623b      	str	r3, [r7, #32]
  return(result);
 8005c90:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c92:	633b      	str	r3, [r7, #48]	; 0x30
 8005c94:	2301      	movs	r3, #1
 8005c96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	f383 8810 	msr	PRIMASK, r3
}
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689a      	ldr	r2, [r3, #8]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2101      	movs	r1, #1
 8005cac:	438a      	bics	r2, r1
 8005cae:	609a      	str	r2, [r3, #8]
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb6:	f383 8810 	msr	PRIMASK, r3
}
 8005cba:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d118      	bne.n	8005cf6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cce:	2301      	movs	r3, #1
 8005cd0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f383 8810 	msr	PRIMASK, r3
}
 8005cd8:	46c0      	nop			; (mov r8, r8)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2110      	movs	r1, #16
 8005ce6:	438a      	bics	r2, r1
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f383 8810 	msr	PRIMASK, r3
}
 8005cf4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005d08:	46c0      	nop			; (mov r8, r8)
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	b00e      	add	sp, #56	; 0x38
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	fffffedf 	.word	0xfffffedf

08005d14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	225a      	movs	r2, #90	; 0x5a
 8005d26:	2100      	movs	r1, #0
 8005d28:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2252      	movs	r2, #82	; 0x52
 8005d2e:	2100      	movs	r1, #0
 8005d30:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	0018      	movs	r0, r3
 8005d36:	f7ff fc77 	bl	8005628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d3a:	46c0      	nop			; (mov r8, r8)
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	b004      	add	sp, #16
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b08a      	sub	sp, #40	; 0x28
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d4e:	2b21      	cmp	r3, #33	; 0x21
 8005d50:	d14d      	bne.n	8005dee <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2252      	movs	r2, #82	; 0x52
 8005d56:	5a9b      	ldrh	r3, [r3, r2]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d132      	bne.n	8005dc4 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d62:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d64:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
 8005d68:	2301      	movs	r3, #1
 8005d6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f383 8810 	msr	PRIMASK, r3
}
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2180      	movs	r1, #128	; 0x80
 8005d80:	438a      	bics	r2, r1
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f383 8810 	msr	PRIMASK, r3
}
 8005d8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d90:	f3ef 8310 	mrs	r3, PRIMASK
 8005d94:	617b      	str	r3, [r7, #20]
  return(result);
 8005d96:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d98:	623b      	str	r3, [r7, #32]
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f383 8810 	msr	PRIMASK, r3
}
 8005da4:	46c0      	nop			; (mov r8, r8)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2140      	movs	r1, #64	; 0x40
 8005db2:	430a      	orrs	r2, r1
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	f383 8810 	msr	PRIMASK, r3
}
 8005dc0:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005dc2:	e014      	b.n	8005dee <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc8:	781a      	ldrb	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	b292      	uxth	r2, r2
 8005dd0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2252      	movs	r2, #82	; 0x52
 8005de0:	5a9b      	ldrh	r3, [r3, r2]
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b299      	uxth	r1, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2252      	movs	r2, #82	; 0x52
 8005dec:	5299      	strh	r1, [r3, r2]
}
 8005dee:	46c0      	nop			; (mov r8, r8)
 8005df0:	46bd      	mov	sp, r7
 8005df2:	b00a      	add	sp, #40	; 0x28
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b08c      	sub	sp, #48	; 0x30
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e02:	2b21      	cmp	r3, #33	; 0x21
 8005e04:	d151      	bne.n	8005eaa <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2252      	movs	r2, #82	; 0x52
 8005e0a:	5a9b      	ldrh	r3, [r3, r2]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d132      	bne.n	8005e78 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e12:	f3ef 8310 	mrs	r3, PRIMASK
 8005e16:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e18:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005e1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f383 8810 	msr	PRIMASK, r3
}
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2180      	movs	r1, #128	; 0x80
 8005e34:	438a      	bics	r2, r1
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f383 8810 	msr	PRIMASK, r3
}
 8005e42:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e44:	f3ef 8310 	mrs	r3, PRIMASK
 8005e48:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e4a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e4e:	2301      	movs	r3, #1
 8005e50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	f383 8810 	msr	PRIMASK, r3
}
 8005e58:	46c0      	nop			; (mov r8, r8)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2140      	movs	r1, #64	; 0x40
 8005e66:	430a      	orrs	r2, r1
 8005e68:	601a      	str	r2, [r3, #0]
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	f383 8810 	msr	PRIMASK, r3
}
 8005e74:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005e76:	e018      	b.n	8005eaa <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e80:	881a      	ldrh	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	05d2      	lsls	r2, r2, #23
 8005e88:	0dd2      	lsrs	r2, r2, #23
 8005e8a:	b292      	uxth	r2, r2
 8005e8c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e92:	1c9a      	adds	r2, r3, #2
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2252      	movs	r2, #82	; 0x52
 8005e9c:	5a9b      	ldrh	r3, [r3, r2]
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b299      	uxth	r1, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2252      	movs	r2, #82	; 0x52
 8005ea8:	5299      	strh	r1, [r3, r2]
}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	46bd      	mov	sp, r7
 8005eae:	b00c      	add	sp, #48	; 0x30
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b086      	sub	sp, #24
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eba:	f3ef 8310 	mrs	r3, PRIMASK
 8005ebe:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f383 8810 	msr	PRIMASK, r3
}
 8005ece:	46c0      	nop			; (mov r8, r8)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2140      	movs	r1, #64	; 0x40
 8005edc:	438a      	bics	r2, r1
 8005ede:	601a      	str	r2, [r3, #0]
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f383 8810 	msr	PRIMASK, r3
}
 8005eea:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	0018      	movs	r0, r3
 8005efc:	f7ff fb8c 	bl	8005618 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f00:	46c0      	nop			; (mov r8, r8)
 8005f02:	46bd      	mov	sp, r7
 8005f04:	b006      	add	sp, #24
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f10:	46c0      	nop			; (mov r8, r8)
 8005f12:	46bd      	mov	sp, r7
 8005f14:	b002      	add	sp, #8
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <__errno>:
 8005f18:	4b01      	ldr	r3, [pc, #4]	; (8005f20 <__errno+0x8>)
 8005f1a:	6818      	ldr	r0, [r3, #0]
 8005f1c:	4770      	bx	lr
 8005f1e:	46c0      	nop			; (mov r8, r8)
 8005f20:	2000000c 	.word	0x2000000c

08005f24 <__libc_init_array>:
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	2600      	movs	r6, #0
 8005f28:	4d0c      	ldr	r5, [pc, #48]	; (8005f5c <__libc_init_array+0x38>)
 8005f2a:	4c0d      	ldr	r4, [pc, #52]	; (8005f60 <__libc_init_array+0x3c>)
 8005f2c:	1b64      	subs	r4, r4, r5
 8005f2e:	10a4      	asrs	r4, r4, #2
 8005f30:	42a6      	cmp	r6, r4
 8005f32:	d109      	bne.n	8005f48 <__libc_init_array+0x24>
 8005f34:	2600      	movs	r6, #0
 8005f36:	f002 ff6d 	bl	8008e14 <_init>
 8005f3a:	4d0a      	ldr	r5, [pc, #40]	; (8005f64 <__libc_init_array+0x40>)
 8005f3c:	4c0a      	ldr	r4, [pc, #40]	; (8005f68 <__libc_init_array+0x44>)
 8005f3e:	1b64      	subs	r4, r4, r5
 8005f40:	10a4      	asrs	r4, r4, #2
 8005f42:	42a6      	cmp	r6, r4
 8005f44:	d105      	bne.n	8005f52 <__libc_init_array+0x2e>
 8005f46:	bd70      	pop	{r4, r5, r6, pc}
 8005f48:	00b3      	lsls	r3, r6, #2
 8005f4a:	58eb      	ldr	r3, [r5, r3]
 8005f4c:	4798      	blx	r3
 8005f4e:	3601      	adds	r6, #1
 8005f50:	e7ee      	b.n	8005f30 <__libc_init_array+0xc>
 8005f52:	00b3      	lsls	r3, r6, #2
 8005f54:	58eb      	ldr	r3, [r5, r3]
 8005f56:	4798      	blx	r3
 8005f58:	3601      	adds	r6, #1
 8005f5a:	e7f2      	b.n	8005f42 <__libc_init_array+0x1e>
 8005f5c:	080092dc 	.word	0x080092dc
 8005f60:	080092dc 	.word	0x080092dc
 8005f64:	080092dc 	.word	0x080092dc
 8005f68:	080092e0 	.word	0x080092e0

08005f6c <memset>:
 8005f6c:	0003      	movs	r3, r0
 8005f6e:	1882      	adds	r2, r0, r2
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d100      	bne.n	8005f76 <memset+0xa>
 8005f74:	4770      	bx	lr
 8005f76:	7019      	strb	r1, [r3, #0]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	e7f9      	b.n	8005f70 <memset+0x4>

08005f7c <__cvt>:
 8005f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f7e:	001e      	movs	r6, r3
 8005f80:	2300      	movs	r3, #0
 8005f82:	0014      	movs	r4, r2
 8005f84:	b08b      	sub	sp, #44	; 0x2c
 8005f86:	429e      	cmp	r6, r3
 8005f88:	da04      	bge.n	8005f94 <__cvt+0x18>
 8005f8a:	2180      	movs	r1, #128	; 0x80
 8005f8c:	0609      	lsls	r1, r1, #24
 8005f8e:	1873      	adds	r3, r6, r1
 8005f90:	001e      	movs	r6, r3
 8005f92:	232d      	movs	r3, #45	; 0x2d
 8005f94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f96:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005f98:	7013      	strb	r3, [r2, #0]
 8005f9a:	2320      	movs	r3, #32
 8005f9c:	2203      	movs	r2, #3
 8005f9e:	439f      	bics	r7, r3
 8005fa0:	2f46      	cmp	r7, #70	; 0x46
 8005fa2:	d007      	beq.n	8005fb4 <__cvt+0x38>
 8005fa4:	003b      	movs	r3, r7
 8005fa6:	3b45      	subs	r3, #69	; 0x45
 8005fa8:	4259      	negs	r1, r3
 8005faa:	414b      	adcs	r3, r1
 8005fac:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005fae:	3a01      	subs	r2, #1
 8005fb0:	18cb      	adds	r3, r1, r3
 8005fb2:	9310      	str	r3, [sp, #64]	; 0x40
 8005fb4:	ab09      	add	r3, sp, #36	; 0x24
 8005fb6:	9304      	str	r3, [sp, #16]
 8005fb8:	ab08      	add	r3, sp, #32
 8005fba:	9303      	str	r3, [sp, #12]
 8005fbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005fbe:	9200      	str	r2, [sp, #0]
 8005fc0:	9302      	str	r3, [sp, #8]
 8005fc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005fc4:	0022      	movs	r2, r4
 8005fc6:	9301      	str	r3, [sp, #4]
 8005fc8:	0033      	movs	r3, r6
 8005fca:	f000 fcfd 	bl	80069c8 <_dtoa_r>
 8005fce:	0005      	movs	r5, r0
 8005fd0:	2f47      	cmp	r7, #71	; 0x47
 8005fd2:	d102      	bne.n	8005fda <__cvt+0x5e>
 8005fd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fd6:	07db      	lsls	r3, r3, #31
 8005fd8:	d528      	bpl.n	800602c <__cvt+0xb0>
 8005fda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005fdc:	18eb      	adds	r3, r5, r3
 8005fde:	9307      	str	r3, [sp, #28]
 8005fe0:	2f46      	cmp	r7, #70	; 0x46
 8005fe2:	d114      	bne.n	800600e <__cvt+0x92>
 8005fe4:	782b      	ldrb	r3, [r5, #0]
 8005fe6:	2b30      	cmp	r3, #48	; 0x30
 8005fe8:	d10c      	bne.n	8006004 <__cvt+0x88>
 8005fea:	2200      	movs	r2, #0
 8005fec:	2300      	movs	r3, #0
 8005fee:	0020      	movs	r0, r4
 8005ff0:	0031      	movs	r1, r6
 8005ff2:	f7fa fa2b 	bl	800044c <__aeabi_dcmpeq>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	d104      	bne.n	8006004 <__cvt+0x88>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ffe:	1a9b      	subs	r3, r3, r2
 8006000:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006002:	6013      	str	r3, [r2, #0]
 8006004:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006006:	9a07      	ldr	r2, [sp, #28]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	18d3      	adds	r3, r2, r3
 800600c:	9307      	str	r3, [sp, #28]
 800600e:	2200      	movs	r2, #0
 8006010:	2300      	movs	r3, #0
 8006012:	0020      	movs	r0, r4
 8006014:	0031      	movs	r1, r6
 8006016:	f7fa fa19 	bl	800044c <__aeabi_dcmpeq>
 800601a:	2800      	cmp	r0, #0
 800601c:	d001      	beq.n	8006022 <__cvt+0xa6>
 800601e:	9b07      	ldr	r3, [sp, #28]
 8006020:	9309      	str	r3, [sp, #36]	; 0x24
 8006022:	2230      	movs	r2, #48	; 0x30
 8006024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006026:	9907      	ldr	r1, [sp, #28]
 8006028:	428b      	cmp	r3, r1
 800602a:	d306      	bcc.n	800603a <__cvt+0xbe>
 800602c:	0028      	movs	r0, r5
 800602e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006030:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006032:	1b5b      	subs	r3, r3, r5
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	b00b      	add	sp, #44	; 0x2c
 8006038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800603a:	1c59      	adds	r1, r3, #1
 800603c:	9109      	str	r1, [sp, #36]	; 0x24
 800603e:	701a      	strb	r2, [r3, #0]
 8006040:	e7f0      	b.n	8006024 <__cvt+0xa8>

08006042 <__exponent>:
 8006042:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006044:	1c83      	adds	r3, r0, #2
 8006046:	b087      	sub	sp, #28
 8006048:	9303      	str	r3, [sp, #12]
 800604a:	0005      	movs	r5, r0
 800604c:	000c      	movs	r4, r1
 800604e:	232b      	movs	r3, #43	; 0x2b
 8006050:	7002      	strb	r2, [r0, #0]
 8006052:	2900      	cmp	r1, #0
 8006054:	da01      	bge.n	800605a <__exponent+0x18>
 8006056:	424c      	negs	r4, r1
 8006058:	3302      	adds	r3, #2
 800605a:	706b      	strb	r3, [r5, #1]
 800605c:	2c09      	cmp	r4, #9
 800605e:	dd31      	ble.n	80060c4 <__exponent+0x82>
 8006060:	270a      	movs	r7, #10
 8006062:	ab04      	add	r3, sp, #16
 8006064:	1dde      	adds	r6, r3, #7
 8006066:	0020      	movs	r0, r4
 8006068:	0039      	movs	r1, r7
 800606a:	9601      	str	r6, [sp, #4]
 800606c:	f7fa f9d8 	bl	8000420 <__aeabi_idivmod>
 8006070:	3e01      	subs	r6, #1
 8006072:	3130      	adds	r1, #48	; 0x30
 8006074:	0020      	movs	r0, r4
 8006076:	7031      	strb	r1, [r6, #0]
 8006078:	0039      	movs	r1, r7
 800607a:	9402      	str	r4, [sp, #8]
 800607c:	f7fa f8ea 	bl	8000254 <__divsi3>
 8006080:	9b02      	ldr	r3, [sp, #8]
 8006082:	0004      	movs	r4, r0
 8006084:	2b63      	cmp	r3, #99	; 0x63
 8006086:	dcee      	bgt.n	8006066 <__exponent+0x24>
 8006088:	9b01      	ldr	r3, [sp, #4]
 800608a:	3430      	adds	r4, #48	; 0x30
 800608c:	1e9a      	subs	r2, r3, #2
 800608e:	0013      	movs	r3, r2
 8006090:	9903      	ldr	r1, [sp, #12]
 8006092:	7014      	strb	r4, [r2, #0]
 8006094:	a804      	add	r0, sp, #16
 8006096:	3007      	adds	r0, #7
 8006098:	4298      	cmp	r0, r3
 800609a:	d80e      	bhi.n	80060ba <__exponent+0x78>
 800609c:	ab04      	add	r3, sp, #16
 800609e:	3307      	adds	r3, #7
 80060a0:	2000      	movs	r0, #0
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d804      	bhi.n	80060b0 <__exponent+0x6e>
 80060a6:	ab04      	add	r3, sp, #16
 80060a8:	3009      	adds	r0, #9
 80060aa:	18c0      	adds	r0, r0, r3
 80060ac:	9b01      	ldr	r3, [sp, #4]
 80060ae:	1ac0      	subs	r0, r0, r3
 80060b0:	9b03      	ldr	r3, [sp, #12]
 80060b2:	1818      	adds	r0, r3, r0
 80060b4:	1b40      	subs	r0, r0, r5
 80060b6:	b007      	add	sp, #28
 80060b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060ba:	7818      	ldrb	r0, [r3, #0]
 80060bc:	3301      	adds	r3, #1
 80060be:	7008      	strb	r0, [r1, #0]
 80060c0:	3101      	adds	r1, #1
 80060c2:	e7e7      	b.n	8006094 <__exponent+0x52>
 80060c4:	2330      	movs	r3, #48	; 0x30
 80060c6:	18e4      	adds	r4, r4, r3
 80060c8:	70ab      	strb	r3, [r5, #2]
 80060ca:	1d28      	adds	r0, r5, #4
 80060cc:	70ec      	strb	r4, [r5, #3]
 80060ce:	e7f1      	b.n	80060b4 <__exponent+0x72>

080060d0 <_printf_float>:
 80060d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060d2:	b095      	sub	sp, #84	; 0x54
 80060d4:	000c      	movs	r4, r1
 80060d6:	9208      	str	r2, [sp, #32]
 80060d8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80060da:	9309      	str	r3, [sp, #36]	; 0x24
 80060dc:	0007      	movs	r7, r0
 80060de:	f001 fa91 	bl	8007604 <_localeconv_r>
 80060e2:	6803      	ldr	r3, [r0, #0]
 80060e4:	0018      	movs	r0, r3
 80060e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80060e8:	f7fa f80e 	bl	8000108 <strlen>
 80060ec:	2300      	movs	r3, #0
 80060ee:	9312      	str	r3, [sp, #72]	; 0x48
 80060f0:	7e23      	ldrb	r3, [r4, #24]
 80060f2:	2207      	movs	r2, #7
 80060f4:	001e      	movs	r6, r3
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	900d      	str	r0, [sp, #52]	; 0x34
 80060fa:	930c      	str	r3, [sp, #48]	; 0x30
 80060fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80060fe:	682b      	ldr	r3, [r5, #0]
 8006100:	05c9      	lsls	r1, r1, #23
 8006102:	d547      	bpl.n	8006194 <_printf_float+0xc4>
 8006104:	189b      	adds	r3, r3, r2
 8006106:	4393      	bics	r3, r2
 8006108:	001a      	movs	r2, r3
 800610a:	3208      	adds	r2, #8
 800610c:	602a      	str	r2, [r5, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	64a2      	str	r2, [r4, #72]	; 0x48
 8006114:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006116:	2201      	movs	r2, #1
 8006118:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800611a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800611c:	930a      	str	r3, [sp, #40]	; 0x28
 800611e:	006b      	lsls	r3, r5, #1
 8006120:	085b      	lsrs	r3, r3, #1
 8006122:	930e      	str	r3, [sp, #56]	; 0x38
 8006124:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006126:	4ba8      	ldr	r3, [pc, #672]	; (80063c8 <_printf_float+0x2f8>)
 8006128:	990e      	ldr	r1, [sp, #56]	; 0x38
 800612a:	4252      	negs	r2, r2
 800612c:	f7fc f822 	bl	8002174 <__aeabi_dcmpun>
 8006130:	2800      	cmp	r0, #0
 8006132:	d131      	bne.n	8006198 <_printf_float+0xc8>
 8006134:	2201      	movs	r2, #1
 8006136:	4ba4      	ldr	r3, [pc, #656]	; (80063c8 <_printf_float+0x2f8>)
 8006138:	980a      	ldr	r0, [sp, #40]	; 0x28
 800613a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800613c:	4252      	negs	r2, r2
 800613e:	f7fa f995 	bl	800046c <__aeabi_dcmple>
 8006142:	2800      	cmp	r0, #0
 8006144:	d128      	bne.n	8006198 <_printf_float+0xc8>
 8006146:	2200      	movs	r2, #0
 8006148:	2300      	movs	r3, #0
 800614a:	0029      	movs	r1, r5
 800614c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800614e:	f7fa f983 	bl	8000458 <__aeabi_dcmplt>
 8006152:	2800      	cmp	r0, #0
 8006154:	d003      	beq.n	800615e <_printf_float+0x8e>
 8006156:	0023      	movs	r3, r4
 8006158:	222d      	movs	r2, #45	; 0x2d
 800615a:	3343      	adds	r3, #67	; 0x43
 800615c:	701a      	strb	r2, [r3, #0]
 800615e:	4d9b      	ldr	r5, [pc, #620]	; (80063cc <_printf_float+0x2fc>)
 8006160:	2e47      	cmp	r6, #71	; 0x47
 8006162:	d900      	bls.n	8006166 <_printf_float+0x96>
 8006164:	4d9a      	ldr	r5, [pc, #616]	; (80063d0 <_printf_float+0x300>)
 8006166:	2303      	movs	r3, #3
 8006168:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800616a:	6123      	str	r3, [r4, #16]
 800616c:	3301      	adds	r3, #1
 800616e:	439a      	bics	r2, r3
 8006170:	2300      	movs	r3, #0
 8006172:	6022      	str	r2, [r4, #0]
 8006174:	930a      	str	r3, [sp, #40]	; 0x28
 8006176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006178:	0021      	movs	r1, r4
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	0038      	movs	r0, r7
 800617e:	9b08      	ldr	r3, [sp, #32]
 8006180:	aa13      	add	r2, sp, #76	; 0x4c
 8006182:	f000 f9f3 	bl	800656c <_printf_common>
 8006186:	1c43      	adds	r3, r0, #1
 8006188:	d000      	beq.n	800618c <_printf_float+0xbc>
 800618a:	e09e      	b.n	80062ca <_printf_float+0x1fa>
 800618c:	2001      	movs	r0, #1
 800618e:	4240      	negs	r0, r0
 8006190:	b015      	add	sp, #84	; 0x54
 8006192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006194:	3307      	adds	r3, #7
 8006196:	e7b6      	b.n	8006106 <_printf_float+0x36>
 8006198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800619a:	002b      	movs	r3, r5
 800619c:	0010      	movs	r0, r2
 800619e:	0029      	movs	r1, r5
 80061a0:	f7fb ffe8 	bl	8002174 <__aeabi_dcmpun>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	d00a      	beq.n	80061be <_printf_float+0xee>
 80061a8:	2d00      	cmp	r5, #0
 80061aa:	da03      	bge.n	80061b4 <_printf_float+0xe4>
 80061ac:	0023      	movs	r3, r4
 80061ae:	222d      	movs	r2, #45	; 0x2d
 80061b0:	3343      	adds	r3, #67	; 0x43
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	4d87      	ldr	r5, [pc, #540]	; (80063d4 <_printf_float+0x304>)
 80061b6:	2e47      	cmp	r6, #71	; 0x47
 80061b8:	d9d5      	bls.n	8006166 <_printf_float+0x96>
 80061ba:	4d87      	ldr	r5, [pc, #540]	; (80063d8 <_printf_float+0x308>)
 80061bc:	e7d3      	b.n	8006166 <_printf_float+0x96>
 80061be:	2220      	movs	r2, #32
 80061c0:	0031      	movs	r1, r6
 80061c2:	6863      	ldr	r3, [r4, #4]
 80061c4:	4391      	bics	r1, r2
 80061c6:	910e      	str	r1, [sp, #56]	; 0x38
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	d147      	bne.n	800625c <_printf_float+0x18c>
 80061cc:	3307      	adds	r3, #7
 80061ce:	6063      	str	r3, [r4, #4]
 80061d0:	2380      	movs	r3, #128	; 0x80
 80061d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061d4:	00db      	lsls	r3, r3, #3
 80061d6:	4313      	orrs	r3, r2
 80061d8:	2200      	movs	r2, #0
 80061da:	9206      	str	r2, [sp, #24]
 80061dc:	aa12      	add	r2, sp, #72	; 0x48
 80061de:	9205      	str	r2, [sp, #20]
 80061e0:	aa11      	add	r2, sp, #68	; 0x44
 80061e2:	9203      	str	r2, [sp, #12]
 80061e4:	2223      	movs	r2, #35	; 0x23
 80061e6:	a908      	add	r1, sp, #32
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	9301      	str	r3, [sp, #4]
 80061ec:	6863      	ldr	r3, [r4, #4]
 80061ee:	1852      	adds	r2, r2, r1
 80061f0:	9202      	str	r2, [sp, #8]
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	0038      	movs	r0, r7
 80061f6:	002b      	movs	r3, r5
 80061f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061fa:	9604      	str	r6, [sp, #16]
 80061fc:	f7ff febe 	bl	8005f7c <__cvt>
 8006200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006202:	0005      	movs	r5, r0
 8006204:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006206:	2b47      	cmp	r3, #71	; 0x47
 8006208:	d108      	bne.n	800621c <_printf_float+0x14c>
 800620a:	1ccb      	adds	r3, r1, #3
 800620c:	db02      	blt.n	8006214 <_printf_float+0x144>
 800620e:	6863      	ldr	r3, [r4, #4]
 8006210:	4299      	cmp	r1, r3
 8006212:	dd46      	ble.n	80062a2 <_printf_float+0x1d2>
 8006214:	0033      	movs	r3, r6
 8006216:	3b02      	subs	r3, #2
 8006218:	b2db      	uxtb	r3, r3
 800621a:	001e      	movs	r6, r3
 800621c:	2e65      	cmp	r6, #101	; 0x65
 800621e:	d824      	bhi.n	800626a <_printf_float+0x19a>
 8006220:	0020      	movs	r0, r4
 8006222:	0032      	movs	r2, r6
 8006224:	3901      	subs	r1, #1
 8006226:	3050      	adds	r0, #80	; 0x50
 8006228:	9111      	str	r1, [sp, #68]	; 0x44
 800622a:	f7ff ff0a 	bl	8006042 <__exponent>
 800622e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006230:	900a      	str	r0, [sp, #40]	; 0x28
 8006232:	1813      	adds	r3, r2, r0
 8006234:	6123      	str	r3, [r4, #16]
 8006236:	2a01      	cmp	r2, #1
 8006238:	dc02      	bgt.n	8006240 <_printf_float+0x170>
 800623a:	6822      	ldr	r2, [r4, #0]
 800623c:	07d2      	lsls	r2, r2, #31
 800623e:	d501      	bpl.n	8006244 <_printf_float+0x174>
 8006240:	3301      	adds	r3, #1
 8006242:	6123      	str	r3, [r4, #16]
 8006244:	2323      	movs	r3, #35	; 0x23
 8006246:	aa08      	add	r2, sp, #32
 8006248:	189b      	adds	r3, r3, r2
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d100      	bne.n	8006252 <_printf_float+0x182>
 8006250:	e791      	b.n	8006176 <_printf_float+0xa6>
 8006252:	0023      	movs	r3, r4
 8006254:	222d      	movs	r2, #45	; 0x2d
 8006256:	3343      	adds	r3, #67	; 0x43
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	e78c      	b.n	8006176 <_printf_float+0xa6>
 800625c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800625e:	2a47      	cmp	r2, #71	; 0x47
 8006260:	d1b6      	bne.n	80061d0 <_printf_float+0x100>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1b4      	bne.n	80061d0 <_printf_float+0x100>
 8006266:	3301      	adds	r3, #1
 8006268:	e7b1      	b.n	80061ce <_printf_float+0xfe>
 800626a:	2e66      	cmp	r6, #102	; 0x66
 800626c:	d11b      	bne.n	80062a6 <_printf_float+0x1d6>
 800626e:	6863      	ldr	r3, [r4, #4]
 8006270:	2900      	cmp	r1, #0
 8006272:	dd0d      	ble.n	8006290 <_printf_float+0x1c0>
 8006274:	6121      	str	r1, [r4, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d102      	bne.n	8006280 <_printf_float+0x1b0>
 800627a:	6822      	ldr	r2, [r4, #0]
 800627c:	07d2      	lsls	r2, r2, #31
 800627e:	d502      	bpl.n	8006286 <_printf_float+0x1b6>
 8006280:	3301      	adds	r3, #1
 8006282:	1859      	adds	r1, r3, r1
 8006284:	6121      	str	r1, [r4, #16]
 8006286:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006288:	65a3      	str	r3, [r4, #88]	; 0x58
 800628a:	2300      	movs	r3, #0
 800628c:	930a      	str	r3, [sp, #40]	; 0x28
 800628e:	e7d9      	b.n	8006244 <_printf_float+0x174>
 8006290:	2b00      	cmp	r3, #0
 8006292:	d103      	bne.n	800629c <_printf_float+0x1cc>
 8006294:	2201      	movs	r2, #1
 8006296:	6821      	ldr	r1, [r4, #0]
 8006298:	4211      	tst	r1, r2
 800629a:	d000      	beq.n	800629e <_printf_float+0x1ce>
 800629c:	1c9a      	adds	r2, r3, #2
 800629e:	6122      	str	r2, [r4, #16]
 80062a0:	e7f1      	b.n	8006286 <_printf_float+0x1b6>
 80062a2:	2367      	movs	r3, #103	; 0x67
 80062a4:	001e      	movs	r6, r3
 80062a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062aa:	4293      	cmp	r3, r2
 80062ac:	db06      	blt.n	80062bc <_printf_float+0x1ec>
 80062ae:	6822      	ldr	r2, [r4, #0]
 80062b0:	6123      	str	r3, [r4, #16]
 80062b2:	07d2      	lsls	r2, r2, #31
 80062b4:	d5e7      	bpl.n	8006286 <_printf_float+0x1b6>
 80062b6:	3301      	adds	r3, #1
 80062b8:	6123      	str	r3, [r4, #16]
 80062ba:	e7e4      	b.n	8006286 <_printf_float+0x1b6>
 80062bc:	2101      	movs	r1, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	dc01      	bgt.n	80062c6 <_printf_float+0x1f6>
 80062c2:	1849      	adds	r1, r1, r1
 80062c4:	1ac9      	subs	r1, r1, r3
 80062c6:	1852      	adds	r2, r2, r1
 80062c8:	e7e9      	b.n	800629e <_printf_float+0x1ce>
 80062ca:	6822      	ldr	r2, [r4, #0]
 80062cc:	0553      	lsls	r3, r2, #21
 80062ce:	d408      	bmi.n	80062e2 <_printf_float+0x212>
 80062d0:	6923      	ldr	r3, [r4, #16]
 80062d2:	002a      	movs	r2, r5
 80062d4:	0038      	movs	r0, r7
 80062d6:	9908      	ldr	r1, [sp, #32]
 80062d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80062da:	47a8      	blx	r5
 80062dc:	1c43      	adds	r3, r0, #1
 80062de:	d129      	bne.n	8006334 <_printf_float+0x264>
 80062e0:	e754      	b.n	800618c <_printf_float+0xbc>
 80062e2:	2e65      	cmp	r6, #101	; 0x65
 80062e4:	d800      	bhi.n	80062e8 <_printf_float+0x218>
 80062e6:	e0ec      	b.n	80064c2 <_printf_float+0x3f2>
 80062e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80062ea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80062ec:	2200      	movs	r2, #0
 80062ee:	2300      	movs	r3, #0
 80062f0:	f7fa f8ac 	bl	800044c <__aeabi_dcmpeq>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d034      	beq.n	8006362 <_printf_float+0x292>
 80062f8:	2301      	movs	r3, #1
 80062fa:	0038      	movs	r0, r7
 80062fc:	4a37      	ldr	r2, [pc, #220]	; (80063dc <_printf_float+0x30c>)
 80062fe:	9908      	ldr	r1, [sp, #32]
 8006300:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006302:	47a8      	blx	r5
 8006304:	1c43      	adds	r3, r0, #1
 8006306:	d100      	bne.n	800630a <_printf_float+0x23a>
 8006308:	e740      	b.n	800618c <_printf_float+0xbc>
 800630a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800630c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800630e:	4293      	cmp	r3, r2
 8006310:	db02      	blt.n	8006318 <_printf_float+0x248>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	07db      	lsls	r3, r3, #31
 8006316:	d50d      	bpl.n	8006334 <_printf_float+0x264>
 8006318:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800631a:	0038      	movs	r0, r7
 800631c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800631e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006320:	9908      	ldr	r1, [sp, #32]
 8006322:	47a8      	blx	r5
 8006324:	2500      	movs	r5, #0
 8006326:	1c43      	adds	r3, r0, #1
 8006328:	d100      	bne.n	800632c <_printf_float+0x25c>
 800632a:	e72f      	b.n	800618c <_printf_float+0xbc>
 800632c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800632e:	3b01      	subs	r3, #1
 8006330:	42ab      	cmp	r3, r5
 8006332:	dc0a      	bgt.n	800634a <_printf_float+0x27a>
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	079b      	lsls	r3, r3, #30
 8006338:	d500      	bpl.n	800633c <_printf_float+0x26c>
 800633a:	e114      	b.n	8006566 <_printf_float+0x496>
 800633c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800633e:	68e0      	ldr	r0, [r4, #12]
 8006340:	4298      	cmp	r0, r3
 8006342:	db00      	blt.n	8006346 <_printf_float+0x276>
 8006344:	e724      	b.n	8006190 <_printf_float+0xc0>
 8006346:	0018      	movs	r0, r3
 8006348:	e722      	b.n	8006190 <_printf_float+0xc0>
 800634a:	0022      	movs	r2, r4
 800634c:	2301      	movs	r3, #1
 800634e:	0038      	movs	r0, r7
 8006350:	9908      	ldr	r1, [sp, #32]
 8006352:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006354:	321a      	adds	r2, #26
 8006356:	47b0      	blx	r6
 8006358:	1c43      	adds	r3, r0, #1
 800635a:	d100      	bne.n	800635e <_printf_float+0x28e>
 800635c:	e716      	b.n	800618c <_printf_float+0xbc>
 800635e:	3501      	adds	r5, #1
 8006360:	e7e4      	b.n	800632c <_printf_float+0x25c>
 8006362:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006364:	2b00      	cmp	r3, #0
 8006366:	dc3b      	bgt.n	80063e0 <_printf_float+0x310>
 8006368:	2301      	movs	r3, #1
 800636a:	0038      	movs	r0, r7
 800636c:	4a1b      	ldr	r2, [pc, #108]	; (80063dc <_printf_float+0x30c>)
 800636e:	9908      	ldr	r1, [sp, #32]
 8006370:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006372:	47b0      	blx	r6
 8006374:	1c43      	adds	r3, r0, #1
 8006376:	d100      	bne.n	800637a <_printf_float+0x2aa>
 8006378:	e708      	b.n	800618c <_printf_float+0xbc>
 800637a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800637c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800637e:	4313      	orrs	r3, r2
 8006380:	d102      	bne.n	8006388 <_printf_float+0x2b8>
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	07db      	lsls	r3, r3, #31
 8006386:	d5d5      	bpl.n	8006334 <_printf_float+0x264>
 8006388:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800638a:	0038      	movs	r0, r7
 800638c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800638e:	9908      	ldr	r1, [sp, #32]
 8006390:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006392:	47b0      	blx	r6
 8006394:	1c43      	adds	r3, r0, #1
 8006396:	d100      	bne.n	800639a <_printf_float+0x2ca>
 8006398:	e6f8      	b.n	800618c <_printf_float+0xbc>
 800639a:	2300      	movs	r3, #0
 800639c:	930a      	str	r3, [sp, #40]	; 0x28
 800639e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063a2:	425b      	negs	r3, r3
 80063a4:	4293      	cmp	r3, r2
 80063a6:	dc01      	bgt.n	80063ac <_printf_float+0x2dc>
 80063a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063aa:	e792      	b.n	80062d2 <_printf_float+0x202>
 80063ac:	0022      	movs	r2, r4
 80063ae:	2301      	movs	r3, #1
 80063b0:	0038      	movs	r0, r7
 80063b2:	9908      	ldr	r1, [sp, #32]
 80063b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80063b6:	321a      	adds	r2, #26
 80063b8:	47b0      	blx	r6
 80063ba:	1c43      	adds	r3, r0, #1
 80063bc:	d100      	bne.n	80063c0 <_printf_float+0x2f0>
 80063be:	e6e5      	b.n	800618c <_printf_float+0xbc>
 80063c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063c2:	3301      	adds	r3, #1
 80063c4:	e7ea      	b.n	800639c <_printf_float+0x2cc>
 80063c6:	46c0      	nop			; (mov r8, r8)
 80063c8:	7fefffff 	.word	0x7fefffff
 80063cc:	08008f00 	.word	0x08008f00
 80063d0:	08008f04 	.word	0x08008f04
 80063d4:	08008f08 	.word	0x08008f08
 80063d8:	08008f0c 	.word	0x08008f0c
 80063dc:	08008f10 	.word	0x08008f10
 80063e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80063e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063e4:	920a      	str	r2, [sp, #40]	; 0x28
 80063e6:	429a      	cmp	r2, r3
 80063e8:	dd00      	ble.n	80063ec <_printf_float+0x31c>
 80063ea:	930a      	str	r3, [sp, #40]	; 0x28
 80063ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	dc3d      	bgt.n	800646e <_printf_float+0x39e>
 80063f2:	2300      	movs	r3, #0
 80063f4:	930e      	str	r3, [sp, #56]	; 0x38
 80063f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063f8:	43db      	mvns	r3, r3
 80063fa:	17db      	asrs	r3, r3, #31
 80063fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80063fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006400:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006402:	930c      	str	r3, [sp, #48]	; 0x30
 8006404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006406:	4013      	ands	r3, r2
 8006408:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800640e:	4293      	cmp	r3, r2
 8006410:	dc36      	bgt.n	8006480 <_printf_float+0x3b0>
 8006412:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006414:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006416:	4293      	cmp	r3, r2
 8006418:	db40      	blt.n	800649c <_printf_float+0x3cc>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	07db      	lsls	r3, r3, #31
 800641e:	d43d      	bmi.n	800649c <_printf_float+0x3cc>
 8006420:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006424:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	1a52      	subs	r2, r2, r1
 800642a:	920a      	str	r2, [sp, #40]	; 0x28
 800642c:	429a      	cmp	r2, r3
 800642e:	dd00      	ble.n	8006432 <_printf_float+0x362>
 8006430:	930a      	str	r3, [sp, #40]	; 0x28
 8006432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006434:	2b00      	cmp	r3, #0
 8006436:	dc3a      	bgt.n	80064ae <_printf_float+0x3de>
 8006438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800643a:	2500      	movs	r5, #0
 800643c:	43db      	mvns	r3, r3
 800643e:	17db      	asrs	r3, r3, #31
 8006440:	930b      	str	r3, [sp, #44]	; 0x2c
 8006442:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006444:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006446:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006448:	1a9b      	subs	r3, r3, r2
 800644a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800644c:	400a      	ands	r2, r1
 800644e:	1a9b      	subs	r3, r3, r2
 8006450:	42ab      	cmp	r3, r5
 8006452:	dc00      	bgt.n	8006456 <_printf_float+0x386>
 8006454:	e76e      	b.n	8006334 <_printf_float+0x264>
 8006456:	0022      	movs	r2, r4
 8006458:	2301      	movs	r3, #1
 800645a:	0038      	movs	r0, r7
 800645c:	9908      	ldr	r1, [sp, #32]
 800645e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006460:	321a      	adds	r2, #26
 8006462:	47b0      	blx	r6
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d100      	bne.n	800646a <_printf_float+0x39a>
 8006468:	e690      	b.n	800618c <_printf_float+0xbc>
 800646a:	3501      	adds	r5, #1
 800646c:	e7e9      	b.n	8006442 <_printf_float+0x372>
 800646e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006470:	002a      	movs	r2, r5
 8006472:	0038      	movs	r0, r7
 8006474:	9908      	ldr	r1, [sp, #32]
 8006476:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006478:	47b0      	blx	r6
 800647a:	1c43      	adds	r3, r0, #1
 800647c:	d1b9      	bne.n	80063f2 <_printf_float+0x322>
 800647e:	e685      	b.n	800618c <_printf_float+0xbc>
 8006480:	0022      	movs	r2, r4
 8006482:	2301      	movs	r3, #1
 8006484:	0038      	movs	r0, r7
 8006486:	9908      	ldr	r1, [sp, #32]
 8006488:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800648a:	321a      	adds	r2, #26
 800648c:	47b0      	blx	r6
 800648e:	1c43      	adds	r3, r0, #1
 8006490:	d100      	bne.n	8006494 <_printf_float+0x3c4>
 8006492:	e67b      	b.n	800618c <_printf_float+0xbc>
 8006494:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006496:	3301      	adds	r3, #1
 8006498:	930e      	str	r3, [sp, #56]	; 0x38
 800649a:	e7b0      	b.n	80063fe <_printf_float+0x32e>
 800649c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800649e:	0038      	movs	r0, r7
 80064a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064a2:	9908      	ldr	r1, [sp, #32]
 80064a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80064a6:	47b0      	blx	r6
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d1b9      	bne.n	8006420 <_printf_float+0x350>
 80064ac:	e66e      	b.n	800618c <_printf_float+0xbc>
 80064ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064b0:	0038      	movs	r0, r7
 80064b2:	18ea      	adds	r2, r5, r3
 80064b4:	9908      	ldr	r1, [sp, #32]
 80064b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80064ba:	47a8      	blx	r5
 80064bc:	1c43      	adds	r3, r0, #1
 80064be:	d1bb      	bne.n	8006438 <_printf_float+0x368>
 80064c0:	e664      	b.n	800618c <_printf_float+0xbc>
 80064c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	dc02      	bgt.n	80064ce <_printf_float+0x3fe>
 80064c8:	2301      	movs	r3, #1
 80064ca:	421a      	tst	r2, r3
 80064cc:	d038      	beq.n	8006540 <_printf_float+0x470>
 80064ce:	2301      	movs	r3, #1
 80064d0:	002a      	movs	r2, r5
 80064d2:	0038      	movs	r0, r7
 80064d4:	9908      	ldr	r1, [sp, #32]
 80064d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80064d8:	47b0      	blx	r6
 80064da:	1c43      	adds	r3, r0, #1
 80064dc:	d100      	bne.n	80064e0 <_printf_float+0x410>
 80064de:	e655      	b.n	800618c <_printf_float+0xbc>
 80064e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064e2:	0038      	movs	r0, r7
 80064e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064e6:	9908      	ldr	r1, [sp, #32]
 80064e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80064ea:	47b0      	blx	r6
 80064ec:	1c43      	adds	r3, r0, #1
 80064ee:	d100      	bne.n	80064f2 <_printf_float+0x422>
 80064f0:	e64c      	b.n	800618c <_printf_float+0xbc>
 80064f2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80064f4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80064f6:	2200      	movs	r2, #0
 80064f8:	2300      	movs	r3, #0
 80064fa:	f7f9 ffa7 	bl	800044c <__aeabi_dcmpeq>
 80064fe:	2800      	cmp	r0, #0
 8006500:	d11c      	bne.n	800653c <_printf_float+0x46c>
 8006502:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006504:	1c6a      	adds	r2, r5, #1
 8006506:	3b01      	subs	r3, #1
 8006508:	0038      	movs	r0, r7
 800650a:	9908      	ldr	r1, [sp, #32]
 800650c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800650e:	47a8      	blx	r5
 8006510:	1c43      	adds	r3, r0, #1
 8006512:	d10f      	bne.n	8006534 <_printf_float+0x464>
 8006514:	e63a      	b.n	800618c <_printf_float+0xbc>
 8006516:	0022      	movs	r2, r4
 8006518:	2301      	movs	r3, #1
 800651a:	0038      	movs	r0, r7
 800651c:	9908      	ldr	r1, [sp, #32]
 800651e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006520:	321a      	adds	r2, #26
 8006522:	47b0      	blx	r6
 8006524:	1c43      	adds	r3, r0, #1
 8006526:	d100      	bne.n	800652a <_printf_float+0x45a>
 8006528:	e630      	b.n	800618c <_printf_float+0xbc>
 800652a:	3501      	adds	r5, #1
 800652c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800652e:	3b01      	subs	r3, #1
 8006530:	42ab      	cmp	r3, r5
 8006532:	dcf0      	bgt.n	8006516 <_printf_float+0x446>
 8006534:	0022      	movs	r2, r4
 8006536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006538:	3250      	adds	r2, #80	; 0x50
 800653a:	e6cb      	b.n	80062d4 <_printf_float+0x204>
 800653c:	2500      	movs	r5, #0
 800653e:	e7f5      	b.n	800652c <_printf_float+0x45c>
 8006540:	002a      	movs	r2, r5
 8006542:	e7e1      	b.n	8006508 <_printf_float+0x438>
 8006544:	0022      	movs	r2, r4
 8006546:	2301      	movs	r3, #1
 8006548:	0038      	movs	r0, r7
 800654a:	9908      	ldr	r1, [sp, #32]
 800654c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800654e:	3219      	adds	r2, #25
 8006550:	47b0      	blx	r6
 8006552:	1c43      	adds	r3, r0, #1
 8006554:	d100      	bne.n	8006558 <_printf_float+0x488>
 8006556:	e619      	b.n	800618c <_printf_float+0xbc>
 8006558:	3501      	adds	r5, #1
 800655a:	68e3      	ldr	r3, [r4, #12]
 800655c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800655e:	1a9b      	subs	r3, r3, r2
 8006560:	42ab      	cmp	r3, r5
 8006562:	dcef      	bgt.n	8006544 <_printf_float+0x474>
 8006564:	e6ea      	b.n	800633c <_printf_float+0x26c>
 8006566:	2500      	movs	r5, #0
 8006568:	e7f7      	b.n	800655a <_printf_float+0x48a>
 800656a:	46c0      	nop			; (mov r8, r8)

0800656c <_printf_common>:
 800656c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800656e:	0015      	movs	r5, r2
 8006570:	9301      	str	r3, [sp, #4]
 8006572:	688a      	ldr	r2, [r1, #8]
 8006574:	690b      	ldr	r3, [r1, #16]
 8006576:	000c      	movs	r4, r1
 8006578:	9000      	str	r0, [sp, #0]
 800657a:	4293      	cmp	r3, r2
 800657c:	da00      	bge.n	8006580 <_printf_common+0x14>
 800657e:	0013      	movs	r3, r2
 8006580:	0022      	movs	r2, r4
 8006582:	602b      	str	r3, [r5, #0]
 8006584:	3243      	adds	r2, #67	; 0x43
 8006586:	7812      	ldrb	r2, [r2, #0]
 8006588:	2a00      	cmp	r2, #0
 800658a:	d001      	beq.n	8006590 <_printf_common+0x24>
 800658c:	3301      	adds	r3, #1
 800658e:	602b      	str	r3, [r5, #0]
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	069b      	lsls	r3, r3, #26
 8006594:	d502      	bpl.n	800659c <_printf_common+0x30>
 8006596:	682b      	ldr	r3, [r5, #0]
 8006598:	3302      	adds	r3, #2
 800659a:	602b      	str	r3, [r5, #0]
 800659c:	6822      	ldr	r2, [r4, #0]
 800659e:	2306      	movs	r3, #6
 80065a0:	0017      	movs	r7, r2
 80065a2:	401f      	ands	r7, r3
 80065a4:	421a      	tst	r2, r3
 80065a6:	d027      	beq.n	80065f8 <_printf_common+0x8c>
 80065a8:	0023      	movs	r3, r4
 80065aa:	3343      	adds	r3, #67	; 0x43
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	1e5a      	subs	r2, r3, #1
 80065b0:	4193      	sbcs	r3, r2
 80065b2:	6822      	ldr	r2, [r4, #0]
 80065b4:	0692      	lsls	r2, r2, #26
 80065b6:	d430      	bmi.n	800661a <_printf_common+0xae>
 80065b8:	0022      	movs	r2, r4
 80065ba:	9901      	ldr	r1, [sp, #4]
 80065bc:	9800      	ldr	r0, [sp, #0]
 80065be:	9e08      	ldr	r6, [sp, #32]
 80065c0:	3243      	adds	r2, #67	; 0x43
 80065c2:	47b0      	blx	r6
 80065c4:	1c43      	adds	r3, r0, #1
 80065c6:	d025      	beq.n	8006614 <_printf_common+0xa8>
 80065c8:	2306      	movs	r3, #6
 80065ca:	6820      	ldr	r0, [r4, #0]
 80065cc:	682a      	ldr	r2, [r5, #0]
 80065ce:	68e1      	ldr	r1, [r4, #12]
 80065d0:	2500      	movs	r5, #0
 80065d2:	4003      	ands	r3, r0
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	d103      	bne.n	80065e0 <_printf_common+0x74>
 80065d8:	1a8d      	subs	r5, r1, r2
 80065da:	43eb      	mvns	r3, r5
 80065dc:	17db      	asrs	r3, r3, #31
 80065de:	401d      	ands	r5, r3
 80065e0:	68a3      	ldr	r3, [r4, #8]
 80065e2:	6922      	ldr	r2, [r4, #16]
 80065e4:	4293      	cmp	r3, r2
 80065e6:	dd01      	ble.n	80065ec <_printf_common+0x80>
 80065e8:	1a9b      	subs	r3, r3, r2
 80065ea:	18ed      	adds	r5, r5, r3
 80065ec:	2700      	movs	r7, #0
 80065ee:	42bd      	cmp	r5, r7
 80065f0:	d120      	bne.n	8006634 <_printf_common+0xc8>
 80065f2:	2000      	movs	r0, #0
 80065f4:	e010      	b.n	8006618 <_printf_common+0xac>
 80065f6:	3701      	adds	r7, #1
 80065f8:	68e3      	ldr	r3, [r4, #12]
 80065fa:	682a      	ldr	r2, [r5, #0]
 80065fc:	1a9b      	subs	r3, r3, r2
 80065fe:	42bb      	cmp	r3, r7
 8006600:	ddd2      	ble.n	80065a8 <_printf_common+0x3c>
 8006602:	0022      	movs	r2, r4
 8006604:	2301      	movs	r3, #1
 8006606:	9901      	ldr	r1, [sp, #4]
 8006608:	9800      	ldr	r0, [sp, #0]
 800660a:	9e08      	ldr	r6, [sp, #32]
 800660c:	3219      	adds	r2, #25
 800660e:	47b0      	blx	r6
 8006610:	1c43      	adds	r3, r0, #1
 8006612:	d1f0      	bne.n	80065f6 <_printf_common+0x8a>
 8006614:	2001      	movs	r0, #1
 8006616:	4240      	negs	r0, r0
 8006618:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800661a:	2030      	movs	r0, #48	; 0x30
 800661c:	18e1      	adds	r1, r4, r3
 800661e:	3143      	adds	r1, #67	; 0x43
 8006620:	7008      	strb	r0, [r1, #0]
 8006622:	0021      	movs	r1, r4
 8006624:	1c5a      	adds	r2, r3, #1
 8006626:	3145      	adds	r1, #69	; 0x45
 8006628:	7809      	ldrb	r1, [r1, #0]
 800662a:	18a2      	adds	r2, r4, r2
 800662c:	3243      	adds	r2, #67	; 0x43
 800662e:	3302      	adds	r3, #2
 8006630:	7011      	strb	r1, [r2, #0]
 8006632:	e7c1      	b.n	80065b8 <_printf_common+0x4c>
 8006634:	0022      	movs	r2, r4
 8006636:	2301      	movs	r3, #1
 8006638:	9901      	ldr	r1, [sp, #4]
 800663a:	9800      	ldr	r0, [sp, #0]
 800663c:	9e08      	ldr	r6, [sp, #32]
 800663e:	321a      	adds	r2, #26
 8006640:	47b0      	blx	r6
 8006642:	1c43      	adds	r3, r0, #1
 8006644:	d0e6      	beq.n	8006614 <_printf_common+0xa8>
 8006646:	3701      	adds	r7, #1
 8006648:	e7d1      	b.n	80065ee <_printf_common+0x82>
	...

0800664c <_printf_i>:
 800664c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800664e:	b08b      	sub	sp, #44	; 0x2c
 8006650:	9206      	str	r2, [sp, #24]
 8006652:	000a      	movs	r2, r1
 8006654:	3243      	adds	r2, #67	; 0x43
 8006656:	9307      	str	r3, [sp, #28]
 8006658:	9005      	str	r0, [sp, #20]
 800665a:	9204      	str	r2, [sp, #16]
 800665c:	7e0a      	ldrb	r2, [r1, #24]
 800665e:	000c      	movs	r4, r1
 8006660:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006662:	2a78      	cmp	r2, #120	; 0x78
 8006664:	d806      	bhi.n	8006674 <_printf_i+0x28>
 8006666:	2a62      	cmp	r2, #98	; 0x62
 8006668:	d808      	bhi.n	800667c <_printf_i+0x30>
 800666a:	2a00      	cmp	r2, #0
 800666c:	d100      	bne.n	8006670 <_printf_i+0x24>
 800666e:	e0c0      	b.n	80067f2 <_printf_i+0x1a6>
 8006670:	2a58      	cmp	r2, #88	; 0x58
 8006672:	d052      	beq.n	800671a <_printf_i+0xce>
 8006674:	0026      	movs	r6, r4
 8006676:	3642      	adds	r6, #66	; 0x42
 8006678:	7032      	strb	r2, [r6, #0]
 800667a:	e022      	b.n	80066c2 <_printf_i+0x76>
 800667c:	0010      	movs	r0, r2
 800667e:	3863      	subs	r0, #99	; 0x63
 8006680:	2815      	cmp	r0, #21
 8006682:	d8f7      	bhi.n	8006674 <_printf_i+0x28>
 8006684:	f7f9 fd52 	bl	800012c <__gnu_thumb1_case_shi>
 8006688:	001f0016 	.word	0x001f0016
 800668c:	fff6fff6 	.word	0xfff6fff6
 8006690:	fff6fff6 	.word	0xfff6fff6
 8006694:	fff6001f 	.word	0xfff6001f
 8006698:	fff6fff6 	.word	0xfff6fff6
 800669c:	00a8fff6 	.word	0x00a8fff6
 80066a0:	009a0036 	.word	0x009a0036
 80066a4:	fff6fff6 	.word	0xfff6fff6
 80066a8:	fff600b9 	.word	0xfff600b9
 80066ac:	fff60036 	.word	0xfff60036
 80066b0:	009efff6 	.word	0x009efff6
 80066b4:	0026      	movs	r6, r4
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	3642      	adds	r6, #66	; 0x42
 80066ba:	1d11      	adds	r1, r2, #4
 80066bc:	6019      	str	r1, [r3, #0]
 80066be:	6813      	ldr	r3, [r2, #0]
 80066c0:	7033      	strb	r3, [r6, #0]
 80066c2:	2301      	movs	r3, #1
 80066c4:	e0a7      	b.n	8006816 <_printf_i+0x1ca>
 80066c6:	6808      	ldr	r0, [r1, #0]
 80066c8:	6819      	ldr	r1, [r3, #0]
 80066ca:	1d0a      	adds	r2, r1, #4
 80066cc:	0605      	lsls	r5, r0, #24
 80066ce:	d50b      	bpl.n	80066e8 <_printf_i+0x9c>
 80066d0:	680d      	ldr	r5, [r1, #0]
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	2d00      	cmp	r5, #0
 80066d6:	da03      	bge.n	80066e0 <_printf_i+0x94>
 80066d8:	232d      	movs	r3, #45	; 0x2d
 80066da:	9a04      	ldr	r2, [sp, #16]
 80066dc:	426d      	negs	r5, r5
 80066de:	7013      	strb	r3, [r2, #0]
 80066e0:	4b61      	ldr	r3, [pc, #388]	; (8006868 <_printf_i+0x21c>)
 80066e2:	270a      	movs	r7, #10
 80066e4:	9303      	str	r3, [sp, #12]
 80066e6:	e032      	b.n	800674e <_printf_i+0x102>
 80066e8:	680d      	ldr	r5, [r1, #0]
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	0641      	lsls	r1, r0, #25
 80066ee:	d5f1      	bpl.n	80066d4 <_printf_i+0x88>
 80066f0:	b22d      	sxth	r5, r5
 80066f2:	e7ef      	b.n	80066d4 <_printf_i+0x88>
 80066f4:	680d      	ldr	r5, [r1, #0]
 80066f6:	6819      	ldr	r1, [r3, #0]
 80066f8:	1d08      	adds	r0, r1, #4
 80066fa:	6018      	str	r0, [r3, #0]
 80066fc:	062e      	lsls	r6, r5, #24
 80066fe:	d501      	bpl.n	8006704 <_printf_i+0xb8>
 8006700:	680d      	ldr	r5, [r1, #0]
 8006702:	e003      	b.n	800670c <_printf_i+0xc0>
 8006704:	066d      	lsls	r5, r5, #25
 8006706:	d5fb      	bpl.n	8006700 <_printf_i+0xb4>
 8006708:	680d      	ldr	r5, [r1, #0]
 800670a:	b2ad      	uxth	r5, r5
 800670c:	4b56      	ldr	r3, [pc, #344]	; (8006868 <_printf_i+0x21c>)
 800670e:	270a      	movs	r7, #10
 8006710:	9303      	str	r3, [sp, #12]
 8006712:	2a6f      	cmp	r2, #111	; 0x6f
 8006714:	d117      	bne.n	8006746 <_printf_i+0xfa>
 8006716:	2708      	movs	r7, #8
 8006718:	e015      	b.n	8006746 <_printf_i+0xfa>
 800671a:	3145      	adds	r1, #69	; 0x45
 800671c:	700a      	strb	r2, [r1, #0]
 800671e:	4a52      	ldr	r2, [pc, #328]	; (8006868 <_printf_i+0x21c>)
 8006720:	9203      	str	r2, [sp, #12]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	6821      	ldr	r1, [r4, #0]
 8006726:	ca20      	ldmia	r2!, {r5}
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	0608      	lsls	r0, r1, #24
 800672c:	d550      	bpl.n	80067d0 <_printf_i+0x184>
 800672e:	07cb      	lsls	r3, r1, #31
 8006730:	d502      	bpl.n	8006738 <_printf_i+0xec>
 8006732:	2320      	movs	r3, #32
 8006734:	4319      	orrs	r1, r3
 8006736:	6021      	str	r1, [r4, #0]
 8006738:	2710      	movs	r7, #16
 800673a:	2d00      	cmp	r5, #0
 800673c:	d103      	bne.n	8006746 <_printf_i+0xfa>
 800673e:	2320      	movs	r3, #32
 8006740:	6822      	ldr	r2, [r4, #0]
 8006742:	439a      	bics	r2, r3
 8006744:	6022      	str	r2, [r4, #0]
 8006746:	0023      	movs	r3, r4
 8006748:	2200      	movs	r2, #0
 800674a:	3343      	adds	r3, #67	; 0x43
 800674c:	701a      	strb	r2, [r3, #0]
 800674e:	6863      	ldr	r3, [r4, #4]
 8006750:	60a3      	str	r3, [r4, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	db03      	blt.n	800675e <_printf_i+0x112>
 8006756:	2204      	movs	r2, #4
 8006758:	6821      	ldr	r1, [r4, #0]
 800675a:	4391      	bics	r1, r2
 800675c:	6021      	str	r1, [r4, #0]
 800675e:	2d00      	cmp	r5, #0
 8006760:	d102      	bne.n	8006768 <_printf_i+0x11c>
 8006762:	9e04      	ldr	r6, [sp, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00c      	beq.n	8006782 <_printf_i+0x136>
 8006768:	9e04      	ldr	r6, [sp, #16]
 800676a:	0028      	movs	r0, r5
 800676c:	0039      	movs	r1, r7
 800676e:	f7f9 fd6d 	bl	800024c <__aeabi_uidivmod>
 8006772:	9b03      	ldr	r3, [sp, #12]
 8006774:	3e01      	subs	r6, #1
 8006776:	5c5b      	ldrb	r3, [r3, r1]
 8006778:	7033      	strb	r3, [r6, #0]
 800677a:	002b      	movs	r3, r5
 800677c:	0005      	movs	r5, r0
 800677e:	429f      	cmp	r7, r3
 8006780:	d9f3      	bls.n	800676a <_printf_i+0x11e>
 8006782:	2f08      	cmp	r7, #8
 8006784:	d109      	bne.n	800679a <_printf_i+0x14e>
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	07db      	lsls	r3, r3, #31
 800678a:	d506      	bpl.n	800679a <_printf_i+0x14e>
 800678c:	6863      	ldr	r3, [r4, #4]
 800678e:	6922      	ldr	r2, [r4, #16]
 8006790:	4293      	cmp	r3, r2
 8006792:	dc02      	bgt.n	800679a <_printf_i+0x14e>
 8006794:	2330      	movs	r3, #48	; 0x30
 8006796:	3e01      	subs	r6, #1
 8006798:	7033      	strb	r3, [r6, #0]
 800679a:	9b04      	ldr	r3, [sp, #16]
 800679c:	1b9b      	subs	r3, r3, r6
 800679e:	6123      	str	r3, [r4, #16]
 80067a0:	9b07      	ldr	r3, [sp, #28]
 80067a2:	0021      	movs	r1, r4
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	9805      	ldr	r0, [sp, #20]
 80067a8:	9b06      	ldr	r3, [sp, #24]
 80067aa:	aa09      	add	r2, sp, #36	; 0x24
 80067ac:	f7ff fede 	bl	800656c <_printf_common>
 80067b0:	1c43      	adds	r3, r0, #1
 80067b2:	d135      	bne.n	8006820 <_printf_i+0x1d4>
 80067b4:	2001      	movs	r0, #1
 80067b6:	4240      	negs	r0, r0
 80067b8:	b00b      	add	sp, #44	; 0x2c
 80067ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067bc:	2220      	movs	r2, #32
 80067be:	6809      	ldr	r1, [r1, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	6022      	str	r2, [r4, #0]
 80067c4:	0022      	movs	r2, r4
 80067c6:	2178      	movs	r1, #120	; 0x78
 80067c8:	3245      	adds	r2, #69	; 0x45
 80067ca:	7011      	strb	r1, [r2, #0]
 80067cc:	4a27      	ldr	r2, [pc, #156]	; (800686c <_printf_i+0x220>)
 80067ce:	e7a7      	b.n	8006720 <_printf_i+0xd4>
 80067d0:	0648      	lsls	r0, r1, #25
 80067d2:	d5ac      	bpl.n	800672e <_printf_i+0xe2>
 80067d4:	b2ad      	uxth	r5, r5
 80067d6:	e7aa      	b.n	800672e <_printf_i+0xe2>
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	680d      	ldr	r5, [r1, #0]
 80067dc:	1d10      	adds	r0, r2, #4
 80067de:	6949      	ldr	r1, [r1, #20]
 80067e0:	6018      	str	r0, [r3, #0]
 80067e2:	6813      	ldr	r3, [r2, #0]
 80067e4:	062e      	lsls	r6, r5, #24
 80067e6:	d501      	bpl.n	80067ec <_printf_i+0x1a0>
 80067e8:	6019      	str	r1, [r3, #0]
 80067ea:	e002      	b.n	80067f2 <_printf_i+0x1a6>
 80067ec:	066d      	lsls	r5, r5, #25
 80067ee:	d5fb      	bpl.n	80067e8 <_printf_i+0x19c>
 80067f0:	8019      	strh	r1, [r3, #0]
 80067f2:	2300      	movs	r3, #0
 80067f4:	9e04      	ldr	r6, [sp, #16]
 80067f6:	6123      	str	r3, [r4, #16]
 80067f8:	e7d2      	b.n	80067a0 <_printf_i+0x154>
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	1d11      	adds	r1, r2, #4
 80067fe:	6019      	str	r1, [r3, #0]
 8006800:	6816      	ldr	r6, [r2, #0]
 8006802:	2100      	movs	r1, #0
 8006804:	0030      	movs	r0, r6
 8006806:	6862      	ldr	r2, [r4, #4]
 8006808:	f000 ff0a 	bl	8007620 <memchr>
 800680c:	2800      	cmp	r0, #0
 800680e:	d001      	beq.n	8006814 <_printf_i+0x1c8>
 8006810:	1b80      	subs	r0, r0, r6
 8006812:	6060      	str	r0, [r4, #4]
 8006814:	6863      	ldr	r3, [r4, #4]
 8006816:	6123      	str	r3, [r4, #16]
 8006818:	2300      	movs	r3, #0
 800681a:	9a04      	ldr	r2, [sp, #16]
 800681c:	7013      	strb	r3, [r2, #0]
 800681e:	e7bf      	b.n	80067a0 <_printf_i+0x154>
 8006820:	6923      	ldr	r3, [r4, #16]
 8006822:	0032      	movs	r2, r6
 8006824:	9906      	ldr	r1, [sp, #24]
 8006826:	9805      	ldr	r0, [sp, #20]
 8006828:	9d07      	ldr	r5, [sp, #28]
 800682a:	47a8      	blx	r5
 800682c:	1c43      	adds	r3, r0, #1
 800682e:	d0c1      	beq.n	80067b4 <_printf_i+0x168>
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	079b      	lsls	r3, r3, #30
 8006834:	d415      	bmi.n	8006862 <_printf_i+0x216>
 8006836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006838:	68e0      	ldr	r0, [r4, #12]
 800683a:	4298      	cmp	r0, r3
 800683c:	dabc      	bge.n	80067b8 <_printf_i+0x16c>
 800683e:	0018      	movs	r0, r3
 8006840:	e7ba      	b.n	80067b8 <_printf_i+0x16c>
 8006842:	0022      	movs	r2, r4
 8006844:	2301      	movs	r3, #1
 8006846:	9906      	ldr	r1, [sp, #24]
 8006848:	9805      	ldr	r0, [sp, #20]
 800684a:	9e07      	ldr	r6, [sp, #28]
 800684c:	3219      	adds	r2, #25
 800684e:	47b0      	blx	r6
 8006850:	1c43      	adds	r3, r0, #1
 8006852:	d0af      	beq.n	80067b4 <_printf_i+0x168>
 8006854:	3501      	adds	r5, #1
 8006856:	68e3      	ldr	r3, [r4, #12]
 8006858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800685a:	1a9b      	subs	r3, r3, r2
 800685c:	42ab      	cmp	r3, r5
 800685e:	dcf0      	bgt.n	8006842 <_printf_i+0x1f6>
 8006860:	e7e9      	b.n	8006836 <_printf_i+0x1ea>
 8006862:	2500      	movs	r5, #0
 8006864:	e7f7      	b.n	8006856 <_printf_i+0x20a>
 8006866:	46c0      	nop			; (mov r8, r8)
 8006868:	08008f12 	.word	0x08008f12
 800686c:	08008f23 	.word	0x08008f23

08006870 <siprintf>:
 8006870:	b40e      	push	{r1, r2, r3}
 8006872:	b500      	push	{lr}
 8006874:	490b      	ldr	r1, [pc, #44]	; (80068a4 <siprintf+0x34>)
 8006876:	b09c      	sub	sp, #112	; 0x70
 8006878:	ab1d      	add	r3, sp, #116	; 0x74
 800687a:	9002      	str	r0, [sp, #8]
 800687c:	9006      	str	r0, [sp, #24]
 800687e:	9107      	str	r1, [sp, #28]
 8006880:	9104      	str	r1, [sp, #16]
 8006882:	4809      	ldr	r0, [pc, #36]	; (80068a8 <siprintf+0x38>)
 8006884:	4909      	ldr	r1, [pc, #36]	; (80068ac <siprintf+0x3c>)
 8006886:	cb04      	ldmia	r3!, {r2}
 8006888:	9105      	str	r1, [sp, #20]
 800688a:	6800      	ldr	r0, [r0, #0]
 800688c:	a902      	add	r1, sp, #8
 800688e:	9301      	str	r3, [sp, #4]
 8006890:	f001 fb90 	bl	8007fb4 <_svfiprintf_r>
 8006894:	2300      	movs	r3, #0
 8006896:	9a02      	ldr	r2, [sp, #8]
 8006898:	7013      	strb	r3, [r2, #0]
 800689a:	b01c      	add	sp, #112	; 0x70
 800689c:	bc08      	pop	{r3}
 800689e:	b003      	add	sp, #12
 80068a0:	4718      	bx	r3
 80068a2:	46c0      	nop			; (mov r8, r8)
 80068a4:	7fffffff 	.word	0x7fffffff
 80068a8:	2000000c 	.word	0x2000000c
 80068ac:	ffff0208 	.word	0xffff0208

080068b0 <quorem>:
 80068b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068b2:	0006      	movs	r6, r0
 80068b4:	690d      	ldr	r5, [r1, #16]
 80068b6:	6933      	ldr	r3, [r6, #16]
 80068b8:	b087      	sub	sp, #28
 80068ba:	2000      	movs	r0, #0
 80068bc:	9102      	str	r1, [sp, #8]
 80068be:	42ab      	cmp	r3, r5
 80068c0:	db6b      	blt.n	800699a <quorem+0xea>
 80068c2:	000b      	movs	r3, r1
 80068c4:	3d01      	subs	r5, #1
 80068c6:	00ac      	lsls	r4, r5, #2
 80068c8:	3314      	adds	r3, #20
 80068ca:	9305      	str	r3, [sp, #20]
 80068cc:	191b      	adds	r3, r3, r4
 80068ce:	9303      	str	r3, [sp, #12]
 80068d0:	0033      	movs	r3, r6
 80068d2:	3314      	adds	r3, #20
 80068d4:	9301      	str	r3, [sp, #4]
 80068d6:	191c      	adds	r4, r3, r4
 80068d8:	9b03      	ldr	r3, [sp, #12]
 80068da:	6827      	ldr	r7, [r4, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	0038      	movs	r0, r7
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	3301      	adds	r3, #1
 80068e4:	0019      	movs	r1, r3
 80068e6:	9304      	str	r3, [sp, #16]
 80068e8:	f7f9 fc2a 	bl	8000140 <__udivsi3>
 80068ec:	9b04      	ldr	r3, [sp, #16]
 80068ee:	9000      	str	r0, [sp, #0]
 80068f0:	429f      	cmp	r7, r3
 80068f2:	d329      	bcc.n	8006948 <quorem+0x98>
 80068f4:	2300      	movs	r3, #0
 80068f6:	469c      	mov	ip, r3
 80068f8:	9801      	ldr	r0, [sp, #4]
 80068fa:	9f05      	ldr	r7, [sp, #20]
 80068fc:	9304      	str	r3, [sp, #16]
 80068fe:	cf08      	ldmia	r7!, {r3}
 8006900:	9a00      	ldr	r2, [sp, #0]
 8006902:	b299      	uxth	r1, r3
 8006904:	4351      	muls	r1, r2
 8006906:	0c1b      	lsrs	r3, r3, #16
 8006908:	4353      	muls	r3, r2
 800690a:	4461      	add	r1, ip
 800690c:	0c0a      	lsrs	r2, r1, #16
 800690e:	189b      	adds	r3, r3, r2
 8006910:	0c1a      	lsrs	r2, r3, #16
 8006912:	9305      	str	r3, [sp, #20]
 8006914:	6803      	ldr	r3, [r0, #0]
 8006916:	4694      	mov	ip, r2
 8006918:	b29a      	uxth	r2, r3
 800691a:	9b04      	ldr	r3, [sp, #16]
 800691c:	b289      	uxth	r1, r1
 800691e:	18d2      	adds	r2, r2, r3
 8006920:	6803      	ldr	r3, [r0, #0]
 8006922:	1a52      	subs	r2, r2, r1
 8006924:	0c19      	lsrs	r1, r3, #16
 8006926:	466b      	mov	r3, sp
 8006928:	8a9b      	ldrh	r3, [r3, #20]
 800692a:	1acb      	subs	r3, r1, r3
 800692c:	1411      	asrs	r1, r2, #16
 800692e:	185b      	adds	r3, r3, r1
 8006930:	1419      	asrs	r1, r3, #16
 8006932:	b292      	uxth	r2, r2
 8006934:	041b      	lsls	r3, r3, #16
 8006936:	431a      	orrs	r2, r3
 8006938:	9b03      	ldr	r3, [sp, #12]
 800693a:	9104      	str	r1, [sp, #16]
 800693c:	c004      	stmia	r0!, {r2}
 800693e:	42bb      	cmp	r3, r7
 8006940:	d2dd      	bcs.n	80068fe <quorem+0x4e>
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d02e      	beq.n	80069a6 <quorem+0xf6>
 8006948:	0030      	movs	r0, r6
 800694a:	9902      	ldr	r1, [sp, #8]
 800694c:	f001 f902 	bl	8007b54 <__mcmp>
 8006950:	2800      	cmp	r0, #0
 8006952:	db21      	blt.n	8006998 <quorem+0xe8>
 8006954:	0030      	movs	r0, r6
 8006956:	2400      	movs	r4, #0
 8006958:	9b00      	ldr	r3, [sp, #0]
 800695a:	9902      	ldr	r1, [sp, #8]
 800695c:	3301      	adds	r3, #1
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	3014      	adds	r0, #20
 8006962:	3114      	adds	r1, #20
 8006964:	6802      	ldr	r2, [r0, #0]
 8006966:	c908      	ldmia	r1!, {r3}
 8006968:	b292      	uxth	r2, r2
 800696a:	1914      	adds	r4, r2, r4
 800696c:	b29a      	uxth	r2, r3
 800696e:	1aa2      	subs	r2, r4, r2
 8006970:	6804      	ldr	r4, [r0, #0]
 8006972:	0c1b      	lsrs	r3, r3, #16
 8006974:	0c24      	lsrs	r4, r4, #16
 8006976:	1ae3      	subs	r3, r4, r3
 8006978:	1414      	asrs	r4, r2, #16
 800697a:	191b      	adds	r3, r3, r4
 800697c:	141c      	asrs	r4, r3, #16
 800697e:	b292      	uxth	r2, r2
 8006980:	041b      	lsls	r3, r3, #16
 8006982:	4313      	orrs	r3, r2
 8006984:	c008      	stmia	r0!, {r3}
 8006986:	9b03      	ldr	r3, [sp, #12]
 8006988:	428b      	cmp	r3, r1
 800698a:	d2eb      	bcs.n	8006964 <quorem+0xb4>
 800698c:	9a01      	ldr	r2, [sp, #4]
 800698e:	00ab      	lsls	r3, r5, #2
 8006990:	18d3      	adds	r3, r2, r3
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	2a00      	cmp	r2, #0
 8006996:	d010      	beq.n	80069ba <quorem+0x10a>
 8006998:	9800      	ldr	r0, [sp, #0]
 800699a:	b007      	add	sp, #28
 800699c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d104      	bne.n	80069ae <quorem+0xfe>
 80069a4:	3d01      	subs	r5, #1
 80069a6:	9b01      	ldr	r3, [sp, #4]
 80069a8:	3c04      	subs	r4, #4
 80069aa:	42a3      	cmp	r3, r4
 80069ac:	d3f7      	bcc.n	800699e <quorem+0xee>
 80069ae:	6135      	str	r5, [r6, #16]
 80069b0:	e7ca      	b.n	8006948 <quorem+0x98>
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	2a00      	cmp	r2, #0
 80069b6:	d104      	bne.n	80069c2 <quorem+0x112>
 80069b8:	3d01      	subs	r5, #1
 80069ba:	9a01      	ldr	r2, [sp, #4]
 80069bc:	3b04      	subs	r3, #4
 80069be:	429a      	cmp	r2, r3
 80069c0:	d3f7      	bcc.n	80069b2 <quorem+0x102>
 80069c2:	6135      	str	r5, [r6, #16]
 80069c4:	e7e8      	b.n	8006998 <quorem+0xe8>
	...

080069c8 <_dtoa_r>:
 80069c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ca:	b09d      	sub	sp, #116	; 0x74
 80069cc:	9202      	str	r2, [sp, #8]
 80069ce:	9303      	str	r3, [sp, #12]
 80069d0:	9b02      	ldr	r3, [sp, #8]
 80069d2:	9c03      	ldr	r4, [sp, #12]
 80069d4:	930a      	str	r3, [sp, #40]	; 0x28
 80069d6:	940b      	str	r4, [sp, #44]	; 0x2c
 80069d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80069da:	0007      	movs	r7, r0
 80069dc:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80069de:	2c00      	cmp	r4, #0
 80069e0:	d10e      	bne.n	8006a00 <_dtoa_r+0x38>
 80069e2:	2010      	movs	r0, #16
 80069e4:	f000 fe12 	bl	800760c <malloc>
 80069e8:	1e02      	subs	r2, r0, #0
 80069ea:	6278      	str	r0, [r7, #36]	; 0x24
 80069ec:	d104      	bne.n	80069f8 <_dtoa_r+0x30>
 80069ee:	21ea      	movs	r1, #234	; 0xea
 80069f0:	4bc0      	ldr	r3, [pc, #768]	; (8006cf4 <_dtoa_r+0x32c>)
 80069f2:	48c1      	ldr	r0, [pc, #772]	; (8006cf8 <_dtoa_r+0x330>)
 80069f4:	f001 fbf0 	bl	80081d8 <__assert_func>
 80069f8:	6044      	str	r4, [r0, #4]
 80069fa:	6084      	str	r4, [r0, #8]
 80069fc:	6004      	str	r4, [r0, #0]
 80069fe:	60c4      	str	r4, [r0, #12]
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	6819      	ldr	r1, [r3, #0]
 8006a04:	2900      	cmp	r1, #0
 8006a06:	d00a      	beq.n	8006a1e <_dtoa_r+0x56>
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	4093      	lsls	r3, r2
 8006a0e:	604a      	str	r2, [r1, #4]
 8006a10:	608b      	str	r3, [r1, #8]
 8006a12:	0038      	movs	r0, r7
 8006a14:	f000 fe5c 	bl	80076d0 <_Bfree>
 8006a18:	2200      	movs	r2, #0
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	9b03      	ldr	r3, [sp, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	da21      	bge.n	8006a68 <_dtoa_r+0xa0>
 8006a24:	2301      	movs	r3, #1
 8006a26:	602b      	str	r3, [r5, #0]
 8006a28:	9b03      	ldr	r3, [sp, #12]
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	085b      	lsrs	r3, r3, #1
 8006a2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a30:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006a32:	4bb2      	ldr	r3, [pc, #712]	; (8006cfc <_dtoa_r+0x334>)
 8006a34:	002a      	movs	r2, r5
 8006a36:	9318      	str	r3, [sp, #96]	; 0x60
 8006a38:	401a      	ands	r2, r3
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d117      	bne.n	8006a6e <_dtoa_r+0xa6>
 8006a3e:	4bb0      	ldr	r3, [pc, #704]	; (8006d00 <_dtoa_r+0x338>)
 8006a40:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a42:	0328      	lsls	r0, r5, #12
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	9b02      	ldr	r3, [sp, #8]
 8006a48:	0b00      	lsrs	r0, r0, #12
 8006a4a:	4318      	orrs	r0, r3
 8006a4c:	d101      	bne.n	8006a52 <_dtoa_r+0x8a>
 8006a4e:	f000 fdc3 	bl	80075d8 <_dtoa_r+0xc10>
 8006a52:	48ac      	ldr	r0, [pc, #688]	; (8006d04 <_dtoa_r+0x33c>)
 8006a54:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a56:	9005      	str	r0, [sp, #20]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <_dtoa_r+0x9a>
 8006a5c:	4baa      	ldr	r3, [pc, #680]	; (8006d08 <_dtoa_r+0x340>)
 8006a5e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	9805      	ldr	r0, [sp, #20]
 8006a64:	b01d      	add	sp, #116	; 0x74
 8006a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a68:	2300      	movs	r3, #0
 8006a6a:	602b      	str	r3, [r5, #0]
 8006a6c:	e7e0      	b.n	8006a30 <_dtoa_r+0x68>
 8006a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a70:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006a72:	9312      	str	r3, [sp, #72]	; 0x48
 8006a74:	9413      	str	r4, [sp, #76]	; 0x4c
 8006a76:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006a78:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f7f9 fce5 	bl	800044c <__aeabi_dcmpeq>
 8006a82:	1e04      	subs	r4, r0, #0
 8006a84:	d00b      	beq.n	8006a9e <_dtoa_r+0xd6>
 8006a86:	2301      	movs	r3, #1
 8006a88:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a8a:	6013      	str	r3, [r2, #0]
 8006a8c:	4b9f      	ldr	r3, [pc, #636]	; (8006d0c <_dtoa_r+0x344>)
 8006a8e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006a90:	9305      	str	r3, [sp, #20]
 8006a92:	2a00      	cmp	r2, #0
 8006a94:	d0e5      	beq.n	8006a62 <_dtoa_r+0x9a>
 8006a96:	4a9e      	ldr	r2, [pc, #632]	; (8006d10 <_dtoa_r+0x348>)
 8006a98:	9926      	ldr	r1, [sp, #152]	; 0x98
 8006a9a:	600a      	str	r2, [r1, #0]
 8006a9c:	e7e1      	b.n	8006a62 <_dtoa_r+0x9a>
 8006a9e:	ab1a      	add	r3, sp, #104	; 0x68
 8006aa0:	9301      	str	r3, [sp, #4]
 8006aa2:	ab1b      	add	r3, sp, #108	; 0x6c
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	0038      	movs	r0, r7
 8006aa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006aaa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006aac:	f001 f906 	bl	8007cbc <__d2b>
 8006ab0:	006e      	lsls	r6, r5, #1
 8006ab2:	9004      	str	r0, [sp, #16]
 8006ab4:	0d76      	lsrs	r6, r6, #21
 8006ab6:	d100      	bne.n	8006aba <_dtoa_r+0xf2>
 8006ab8:	e07c      	b.n	8006bb4 <_dtoa_r+0x1ec>
 8006aba:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006abc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006abe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ac0:	4a94      	ldr	r2, [pc, #592]	; (8006d14 <_dtoa_r+0x34c>)
 8006ac2:	031b      	lsls	r3, r3, #12
 8006ac4:	0b1b      	lsrs	r3, r3, #12
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	0011      	movs	r1, r2
 8006aca:	4b93      	ldr	r3, [pc, #588]	; (8006d18 <_dtoa_r+0x350>)
 8006acc:	9416      	str	r4, [sp, #88]	; 0x58
 8006ace:	18f6      	adds	r6, r6, r3
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	4b92      	ldr	r3, [pc, #584]	; (8006d1c <_dtoa_r+0x354>)
 8006ad4:	f7fa ffbc 	bl	8001a50 <__aeabi_dsub>
 8006ad8:	4a91      	ldr	r2, [pc, #580]	; (8006d20 <_dtoa_r+0x358>)
 8006ada:	4b92      	ldr	r3, [pc, #584]	; (8006d24 <_dtoa_r+0x35c>)
 8006adc:	f7fa fd4c 	bl	8001578 <__aeabi_dmul>
 8006ae0:	4a91      	ldr	r2, [pc, #580]	; (8006d28 <_dtoa_r+0x360>)
 8006ae2:	4b92      	ldr	r3, [pc, #584]	; (8006d2c <_dtoa_r+0x364>)
 8006ae4:	f7f9 fdd8 	bl	8000698 <__aeabi_dadd>
 8006ae8:	0004      	movs	r4, r0
 8006aea:	0030      	movs	r0, r6
 8006aec:	000d      	movs	r5, r1
 8006aee:	f7fb fb95 	bl	800221c <__aeabi_i2d>
 8006af2:	4a8f      	ldr	r2, [pc, #572]	; (8006d30 <_dtoa_r+0x368>)
 8006af4:	4b8f      	ldr	r3, [pc, #572]	; (8006d34 <_dtoa_r+0x36c>)
 8006af6:	f7fa fd3f 	bl	8001578 <__aeabi_dmul>
 8006afa:	0002      	movs	r2, r0
 8006afc:	000b      	movs	r3, r1
 8006afe:	0020      	movs	r0, r4
 8006b00:	0029      	movs	r1, r5
 8006b02:	f7f9 fdc9 	bl	8000698 <__aeabi_dadd>
 8006b06:	0004      	movs	r4, r0
 8006b08:	000d      	movs	r5, r1
 8006b0a:	f7fb fb51 	bl	80021b0 <__aeabi_d2iz>
 8006b0e:	2200      	movs	r2, #0
 8006b10:	9002      	str	r0, [sp, #8]
 8006b12:	2300      	movs	r3, #0
 8006b14:	0020      	movs	r0, r4
 8006b16:	0029      	movs	r1, r5
 8006b18:	f7f9 fc9e 	bl	8000458 <__aeabi_dcmplt>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d00b      	beq.n	8006b38 <_dtoa_r+0x170>
 8006b20:	9802      	ldr	r0, [sp, #8]
 8006b22:	f7fb fb7b 	bl	800221c <__aeabi_i2d>
 8006b26:	002b      	movs	r3, r5
 8006b28:	0022      	movs	r2, r4
 8006b2a:	f7f9 fc8f 	bl	800044c <__aeabi_dcmpeq>
 8006b2e:	4243      	negs	r3, r0
 8006b30:	4158      	adcs	r0, r3
 8006b32:	9b02      	ldr	r3, [sp, #8]
 8006b34:	1a1b      	subs	r3, r3, r0
 8006b36:	9302      	str	r3, [sp, #8]
 8006b38:	2301      	movs	r3, #1
 8006b3a:	9315      	str	r3, [sp, #84]	; 0x54
 8006b3c:	9b02      	ldr	r3, [sp, #8]
 8006b3e:	2b16      	cmp	r3, #22
 8006b40:	d80f      	bhi.n	8006b62 <_dtoa_r+0x19a>
 8006b42:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006b44:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006b46:	00da      	lsls	r2, r3, #3
 8006b48:	4b7b      	ldr	r3, [pc, #492]	; (8006d38 <_dtoa_r+0x370>)
 8006b4a:	189b      	adds	r3, r3, r2
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f7f9 fc82 	bl	8000458 <__aeabi_dcmplt>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d049      	beq.n	8006bec <_dtoa_r+0x224>
 8006b58:	9b02      	ldr	r3, [sp, #8]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	9302      	str	r3, [sp, #8]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	9315      	str	r3, [sp, #84]	; 0x54
 8006b62:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006b64:	1b9e      	subs	r6, r3, r6
 8006b66:	2300      	movs	r3, #0
 8006b68:	9308      	str	r3, [sp, #32]
 8006b6a:	0033      	movs	r3, r6
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	930d      	str	r3, [sp, #52]	; 0x34
 8006b70:	d504      	bpl.n	8006b7c <_dtoa_r+0x1b4>
 8006b72:	2301      	movs	r3, #1
 8006b74:	1b9b      	subs	r3, r3, r6
 8006b76:	9308      	str	r3, [sp, #32]
 8006b78:	2300      	movs	r3, #0
 8006b7a:	930d      	str	r3, [sp, #52]	; 0x34
 8006b7c:	9b02      	ldr	r3, [sp, #8]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	db36      	blt.n	8006bf0 <_dtoa_r+0x228>
 8006b82:	9a02      	ldr	r2, [sp, #8]
 8006b84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b86:	4694      	mov	ip, r2
 8006b88:	4463      	add	r3, ip
 8006b8a:	930d      	str	r3, [sp, #52]	; 0x34
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	9214      	str	r2, [sp, #80]	; 0x50
 8006b90:	930e      	str	r3, [sp, #56]	; 0x38
 8006b92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b94:	2401      	movs	r4, #1
 8006b96:	2b09      	cmp	r3, #9
 8006b98:	d862      	bhi.n	8006c60 <_dtoa_r+0x298>
 8006b9a:	2b05      	cmp	r3, #5
 8006b9c:	dd02      	ble.n	8006ba4 <_dtoa_r+0x1dc>
 8006b9e:	2400      	movs	r4, #0
 8006ba0:	3b04      	subs	r3, #4
 8006ba2:	9322      	str	r3, [sp, #136]	; 0x88
 8006ba4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ba6:	1e98      	subs	r0, r3, #2
 8006ba8:	2803      	cmp	r0, #3
 8006baa:	d862      	bhi.n	8006c72 <_dtoa_r+0x2aa>
 8006bac:	f7f9 fab4 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006bb0:	56343629 	.word	0x56343629
 8006bb4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006bb6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006bb8:	189e      	adds	r6, r3, r2
 8006bba:	4b60      	ldr	r3, [pc, #384]	; (8006d3c <_dtoa_r+0x374>)
 8006bbc:	18f2      	adds	r2, r6, r3
 8006bbe:	2a20      	cmp	r2, #32
 8006bc0:	dd0f      	ble.n	8006be2 <_dtoa_r+0x21a>
 8006bc2:	2340      	movs	r3, #64	; 0x40
 8006bc4:	1a9b      	subs	r3, r3, r2
 8006bc6:	409d      	lsls	r5, r3
 8006bc8:	4b5d      	ldr	r3, [pc, #372]	; (8006d40 <_dtoa_r+0x378>)
 8006bca:	9802      	ldr	r0, [sp, #8]
 8006bcc:	18f3      	adds	r3, r6, r3
 8006bce:	40d8      	lsrs	r0, r3
 8006bd0:	4328      	orrs	r0, r5
 8006bd2:	f7fb fb53 	bl	800227c <__aeabi_ui2d>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	4c5a      	ldr	r4, [pc, #360]	; (8006d44 <_dtoa_r+0x37c>)
 8006bda:	3e01      	subs	r6, #1
 8006bdc:	1909      	adds	r1, r1, r4
 8006bde:	9316      	str	r3, [sp, #88]	; 0x58
 8006be0:	e776      	b.n	8006ad0 <_dtoa_r+0x108>
 8006be2:	2320      	movs	r3, #32
 8006be4:	9802      	ldr	r0, [sp, #8]
 8006be6:	1a9b      	subs	r3, r3, r2
 8006be8:	4098      	lsls	r0, r3
 8006bea:	e7f2      	b.n	8006bd2 <_dtoa_r+0x20a>
 8006bec:	9015      	str	r0, [sp, #84]	; 0x54
 8006bee:	e7b8      	b.n	8006b62 <_dtoa_r+0x19a>
 8006bf0:	9b08      	ldr	r3, [sp, #32]
 8006bf2:	9a02      	ldr	r2, [sp, #8]
 8006bf4:	1a9b      	subs	r3, r3, r2
 8006bf6:	9308      	str	r3, [sp, #32]
 8006bf8:	4253      	negs	r3, r2
 8006bfa:	930e      	str	r3, [sp, #56]	; 0x38
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	9314      	str	r3, [sp, #80]	; 0x50
 8006c00:	e7c7      	b.n	8006b92 <_dtoa_r+0x1ca>
 8006c02:	2300      	movs	r3, #0
 8006c04:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	dc36      	bgt.n	8006c7a <_dtoa_r+0x2b2>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	001a      	movs	r2, r3
 8006c10:	930c      	str	r3, [sp, #48]	; 0x30
 8006c12:	9306      	str	r3, [sp, #24]
 8006c14:	9223      	str	r2, [sp, #140]	; 0x8c
 8006c16:	e00d      	b.n	8006c34 <_dtoa_r+0x26c>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e7f3      	b.n	8006c04 <_dtoa_r+0x23c>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006c20:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c22:	4694      	mov	ip, r2
 8006c24:	9b02      	ldr	r3, [sp, #8]
 8006c26:	4463      	add	r3, ip
 8006c28:	930c      	str	r3, [sp, #48]	; 0x30
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	9306      	str	r3, [sp, #24]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	dc00      	bgt.n	8006c34 <_dtoa_r+0x26c>
 8006c32:	2301      	movs	r3, #1
 8006c34:	2200      	movs	r2, #0
 8006c36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c38:	6042      	str	r2, [r0, #4]
 8006c3a:	3204      	adds	r2, #4
 8006c3c:	0015      	movs	r5, r2
 8006c3e:	3514      	adds	r5, #20
 8006c40:	6841      	ldr	r1, [r0, #4]
 8006c42:	429d      	cmp	r5, r3
 8006c44:	d91d      	bls.n	8006c82 <_dtoa_r+0x2ba>
 8006c46:	0038      	movs	r0, r7
 8006c48:	f000 fcfe 	bl	8007648 <_Balloc>
 8006c4c:	9005      	str	r0, [sp, #20]
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d11b      	bne.n	8006c8a <_dtoa_r+0x2c2>
 8006c52:	21d5      	movs	r1, #213	; 0xd5
 8006c54:	0002      	movs	r2, r0
 8006c56:	4b3c      	ldr	r3, [pc, #240]	; (8006d48 <_dtoa_r+0x380>)
 8006c58:	0049      	lsls	r1, r1, #1
 8006c5a:	e6ca      	b.n	80069f2 <_dtoa_r+0x2a>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e7de      	b.n	8006c1e <_dtoa_r+0x256>
 8006c60:	2300      	movs	r3, #0
 8006c62:	940f      	str	r4, [sp, #60]	; 0x3c
 8006c64:	9322      	str	r3, [sp, #136]	; 0x88
 8006c66:	3b01      	subs	r3, #1
 8006c68:	930c      	str	r3, [sp, #48]	; 0x30
 8006c6a:	9306      	str	r3, [sp, #24]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	3313      	adds	r3, #19
 8006c70:	e7d0      	b.n	8006c14 <_dtoa_r+0x24c>
 8006c72:	2301      	movs	r3, #1
 8006c74:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c76:	3b02      	subs	r3, #2
 8006c78:	e7f6      	b.n	8006c68 <_dtoa_r+0x2a0>
 8006c7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c7c:	930c      	str	r3, [sp, #48]	; 0x30
 8006c7e:	9306      	str	r3, [sp, #24]
 8006c80:	e7d8      	b.n	8006c34 <_dtoa_r+0x26c>
 8006c82:	3101      	adds	r1, #1
 8006c84:	6041      	str	r1, [r0, #4]
 8006c86:	0052      	lsls	r2, r2, #1
 8006c88:	e7d8      	b.n	8006c3c <_dtoa_r+0x274>
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	9a05      	ldr	r2, [sp, #20]
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	9b06      	ldr	r3, [sp, #24]
 8006c92:	2b0e      	cmp	r3, #14
 8006c94:	d900      	bls.n	8006c98 <_dtoa_r+0x2d0>
 8006c96:	e0eb      	b.n	8006e70 <_dtoa_r+0x4a8>
 8006c98:	2c00      	cmp	r4, #0
 8006c9a:	d100      	bne.n	8006c9e <_dtoa_r+0x2d6>
 8006c9c:	e0e8      	b.n	8006e70 <_dtoa_r+0x4a8>
 8006c9e:	9b02      	ldr	r3, [sp, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	dd68      	ble.n	8006d76 <_dtoa_r+0x3ae>
 8006ca4:	001a      	movs	r2, r3
 8006ca6:	210f      	movs	r1, #15
 8006ca8:	4b23      	ldr	r3, [pc, #140]	; (8006d38 <_dtoa_r+0x370>)
 8006caa:	400a      	ands	r2, r1
 8006cac:	00d2      	lsls	r2, r2, #3
 8006cae:	189b      	adds	r3, r3, r2
 8006cb0:	681d      	ldr	r5, [r3, #0]
 8006cb2:	685e      	ldr	r6, [r3, #4]
 8006cb4:	9b02      	ldr	r3, [sp, #8]
 8006cb6:	111c      	asrs	r4, r3, #4
 8006cb8:	2302      	movs	r3, #2
 8006cba:	9310      	str	r3, [sp, #64]	; 0x40
 8006cbc:	9b02      	ldr	r3, [sp, #8]
 8006cbe:	05db      	lsls	r3, r3, #23
 8006cc0:	d50b      	bpl.n	8006cda <_dtoa_r+0x312>
 8006cc2:	4b22      	ldr	r3, [pc, #136]	; (8006d4c <_dtoa_r+0x384>)
 8006cc4:	400c      	ands	r4, r1
 8006cc6:	6a1a      	ldr	r2, [r3, #32]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006ccc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006cce:	f7fa f84d 	bl	8000d6c <__aeabi_ddiv>
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	900a      	str	r0, [sp, #40]	; 0x28
 8006cd6:	910b      	str	r1, [sp, #44]	; 0x2c
 8006cd8:	9310      	str	r3, [sp, #64]	; 0x40
 8006cda:	4b1c      	ldr	r3, [pc, #112]	; (8006d4c <_dtoa_r+0x384>)
 8006cdc:	9307      	str	r3, [sp, #28]
 8006cde:	2c00      	cmp	r4, #0
 8006ce0:	d136      	bne.n	8006d50 <_dtoa_r+0x388>
 8006ce2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006ce4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ce6:	002a      	movs	r2, r5
 8006ce8:	0033      	movs	r3, r6
 8006cea:	f7fa f83f 	bl	8000d6c <__aeabi_ddiv>
 8006cee:	900a      	str	r0, [sp, #40]	; 0x28
 8006cf0:	910b      	str	r1, [sp, #44]	; 0x2c
 8006cf2:	e05c      	b.n	8006dae <_dtoa_r+0x3e6>
 8006cf4:	08008f41 	.word	0x08008f41
 8006cf8:	08008f58 	.word	0x08008f58
 8006cfc:	7ff00000 	.word	0x7ff00000
 8006d00:	0000270f 	.word	0x0000270f
 8006d04:	08008f3d 	.word	0x08008f3d
 8006d08:	08008f40 	.word	0x08008f40
 8006d0c:	08008f10 	.word	0x08008f10
 8006d10:	08008f11 	.word	0x08008f11
 8006d14:	3ff00000 	.word	0x3ff00000
 8006d18:	fffffc01 	.word	0xfffffc01
 8006d1c:	3ff80000 	.word	0x3ff80000
 8006d20:	636f4361 	.word	0x636f4361
 8006d24:	3fd287a7 	.word	0x3fd287a7
 8006d28:	8b60c8b3 	.word	0x8b60c8b3
 8006d2c:	3fc68a28 	.word	0x3fc68a28
 8006d30:	509f79fb 	.word	0x509f79fb
 8006d34:	3fd34413 	.word	0x3fd34413
 8006d38:	08009050 	.word	0x08009050
 8006d3c:	00000432 	.word	0x00000432
 8006d40:	00000412 	.word	0x00000412
 8006d44:	fe100000 	.word	0xfe100000
 8006d48:	08008fb7 	.word	0x08008fb7
 8006d4c:	08009028 	.word	0x08009028
 8006d50:	2301      	movs	r3, #1
 8006d52:	421c      	tst	r4, r3
 8006d54:	d00b      	beq.n	8006d6e <_dtoa_r+0x3a6>
 8006d56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d58:	0028      	movs	r0, r5
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	9310      	str	r3, [sp, #64]	; 0x40
 8006d5e:	9b07      	ldr	r3, [sp, #28]
 8006d60:	0031      	movs	r1, r6
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f7fa fc07 	bl	8001578 <__aeabi_dmul>
 8006d6a:	0005      	movs	r5, r0
 8006d6c:	000e      	movs	r6, r1
 8006d6e:	9b07      	ldr	r3, [sp, #28]
 8006d70:	1064      	asrs	r4, r4, #1
 8006d72:	3308      	adds	r3, #8
 8006d74:	e7b2      	b.n	8006cdc <_dtoa_r+0x314>
 8006d76:	2302      	movs	r3, #2
 8006d78:	9310      	str	r3, [sp, #64]	; 0x40
 8006d7a:	9b02      	ldr	r3, [sp, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d016      	beq.n	8006dae <_dtoa_r+0x3e6>
 8006d80:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006d82:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006d84:	425c      	negs	r4, r3
 8006d86:	230f      	movs	r3, #15
 8006d88:	4ab5      	ldr	r2, [pc, #724]	; (8007060 <_dtoa_r+0x698>)
 8006d8a:	4023      	ands	r3, r4
 8006d8c:	00db      	lsls	r3, r3, #3
 8006d8e:	18d3      	adds	r3, r2, r3
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f7fa fbf0 	bl	8001578 <__aeabi_dmul>
 8006d98:	2601      	movs	r6, #1
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	900a      	str	r0, [sp, #40]	; 0x28
 8006d9e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006da0:	4db0      	ldr	r5, [pc, #704]	; (8007064 <_dtoa_r+0x69c>)
 8006da2:	1124      	asrs	r4, r4, #4
 8006da4:	2c00      	cmp	r4, #0
 8006da6:	d000      	beq.n	8006daa <_dtoa_r+0x3e2>
 8006da8:	e094      	b.n	8006ed4 <_dtoa_r+0x50c>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d19f      	bne.n	8006cee <_dtoa_r+0x326>
 8006dae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d100      	bne.n	8006db6 <_dtoa_r+0x3ee>
 8006db4:	e09b      	b.n	8006eee <_dtoa_r+0x526>
 8006db6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006db8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006dba:	2200      	movs	r2, #0
 8006dbc:	0020      	movs	r0, r4
 8006dbe:	0029      	movs	r1, r5
 8006dc0:	4ba9      	ldr	r3, [pc, #676]	; (8007068 <_dtoa_r+0x6a0>)
 8006dc2:	f7f9 fb49 	bl	8000458 <__aeabi_dcmplt>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d100      	bne.n	8006dcc <_dtoa_r+0x404>
 8006dca:	e090      	b.n	8006eee <_dtoa_r+0x526>
 8006dcc:	9b06      	ldr	r3, [sp, #24]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d100      	bne.n	8006dd4 <_dtoa_r+0x40c>
 8006dd2:	e08c      	b.n	8006eee <_dtoa_r+0x526>
 8006dd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	dd46      	ble.n	8006e68 <_dtoa_r+0x4a0>
 8006dda:	9b02      	ldr	r3, [sp, #8]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	0020      	movs	r0, r4
 8006de0:	0029      	movs	r1, r5
 8006de2:	1e5e      	subs	r6, r3, #1
 8006de4:	4ba1      	ldr	r3, [pc, #644]	; (800706c <_dtoa_r+0x6a4>)
 8006de6:	f7fa fbc7 	bl	8001578 <__aeabi_dmul>
 8006dea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006dec:	900a      	str	r0, [sp, #40]	; 0x28
 8006dee:	910b      	str	r1, [sp, #44]	; 0x2c
 8006df0:	3301      	adds	r3, #1
 8006df2:	9310      	str	r3, [sp, #64]	; 0x40
 8006df4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006df6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006df8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006dfa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006dfc:	9307      	str	r3, [sp, #28]
 8006dfe:	f7fb fa0d 	bl	800221c <__aeabi_i2d>
 8006e02:	0022      	movs	r2, r4
 8006e04:	002b      	movs	r3, r5
 8006e06:	f7fa fbb7 	bl	8001578 <__aeabi_dmul>
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	4b98      	ldr	r3, [pc, #608]	; (8007070 <_dtoa_r+0x6a8>)
 8006e0e:	f7f9 fc43 	bl	8000698 <__aeabi_dadd>
 8006e12:	9010      	str	r0, [sp, #64]	; 0x40
 8006e14:	9111      	str	r1, [sp, #68]	; 0x44
 8006e16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e1a:	920a      	str	r2, [sp, #40]	; 0x28
 8006e1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e1e:	4a95      	ldr	r2, [pc, #596]	; (8007074 <_dtoa_r+0x6ac>)
 8006e20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e22:	4694      	mov	ip, r2
 8006e24:	4463      	add	r3, ip
 8006e26:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e28:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e2a:	9b07      	ldr	r3, [sp, #28]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d161      	bne.n	8006ef4 <_dtoa_r+0x52c>
 8006e30:	2200      	movs	r2, #0
 8006e32:	0020      	movs	r0, r4
 8006e34:	0029      	movs	r1, r5
 8006e36:	4b90      	ldr	r3, [pc, #576]	; (8007078 <_dtoa_r+0x6b0>)
 8006e38:	f7fa fe0a 	bl	8001a50 <__aeabi_dsub>
 8006e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e40:	0004      	movs	r4, r0
 8006e42:	000d      	movs	r5, r1
 8006e44:	f7f9 fb1c 	bl	8000480 <__aeabi_dcmpgt>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d000      	beq.n	8006e4e <_dtoa_r+0x486>
 8006e4c:	e2b5      	b.n	80073ba <_dtoa_r+0x9f2>
 8006e4e:	488b      	ldr	r0, [pc, #556]	; (800707c <_dtoa_r+0x6b4>)
 8006e50:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006e52:	4684      	mov	ip, r0
 8006e54:	4461      	add	r1, ip
 8006e56:	000b      	movs	r3, r1
 8006e58:	0020      	movs	r0, r4
 8006e5a:	0029      	movs	r1, r5
 8006e5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e5e:	f7f9 fafb 	bl	8000458 <__aeabi_dcmplt>
 8006e62:	2800      	cmp	r0, #0
 8006e64:	d000      	beq.n	8006e68 <_dtoa_r+0x4a0>
 8006e66:	e2a5      	b.n	80073b4 <_dtoa_r+0x9ec>
 8006e68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e6a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8006e6e:	940b      	str	r4, [sp, #44]	; 0x2c
 8006e70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	da00      	bge.n	8006e78 <_dtoa_r+0x4b0>
 8006e76:	e171      	b.n	800715c <_dtoa_r+0x794>
 8006e78:	9a02      	ldr	r2, [sp, #8]
 8006e7a:	2a0e      	cmp	r2, #14
 8006e7c:	dd00      	ble.n	8006e80 <_dtoa_r+0x4b8>
 8006e7e:	e16d      	b.n	800715c <_dtoa_r+0x794>
 8006e80:	4b77      	ldr	r3, [pc, #476]	; (8007060 <_dtoa_r+0x698>)
 8006e82:	00d2      	lsls	r2, r2, #3
 8006e84:	189b      	adds	r3, r3, r2
 8006e86:	685c      	ldr	r4, [r3, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	9308      	str	r3, [sp, #32]
 8006e8c:	9409      	str	r4, [sp, #36]	; 0x24
 8006e8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	db00      	blt.n	8006e96 <_dtoa_r+0x4ce>
 8006e94:	e0f6      	b.n	8007084 <_dtoa_r+0x6bc>
 8006e96:	9b06      	ldr	r3, [sp, #24]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	dd00      	ble.n	8006e9e <_dtoa_r+0x4d6>
 8006e9c:	e0f2      	b.n	8007084 <_dtoa_r+0x6bc>
 8006e9e:	d000      	beq.n	8006ea2 <_dtoa_r+0x4da>
 8006ea0:	e288      	b.n	80073b4 <_dtoa_r+0x9ec>
 8006ea2:	9808      	ldr	r0, [sp, #32]
 8006ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	4b73      	ldr	r3, [pc, #460]	; (8007078 <_dtoa_r+0x6b0>)
 8006eaa:	f7fa fb65 	bl	8001578 <__aeabi_dmul>
 8006eae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eb2:	f7f9 faef 	bl	8000494 <__aeabi_dcmpge>
 8006eb6:	9e06      	ldr	r6, [sp, #24]
 8006eb8:	0035      	movs	r5, r6
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d000      	beq.n	8006ec0 <_dtoa_r+0x4f8>
 8006ebe:	e25f      	b.n	8007380 <_dtoa_r+0x9b8>
 8006ec0:	9b05      	ldr	r3, [sp, #20]
 8006ec2:	9a05      	ldr	r2, [sp, #20]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	9307      	str	r3, [sp, #28]
 8006ec8:	2331      	movs	r3, #49	; 0x31
 8006eca:	7013      	strb	r3, [r2, #0]
 8006ecc:	9b02      	ldr	r3, [sp, #8]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	9302      	str	r3, [sp, #8]
 8006ed2:	e25a      	b.n	800738a <_dtoa_r+0x9c2>
 8006ed4:	4234      	tst	r4, r6
 8006ed6:	d007      	beq.n	8006ee8 <_dtoa_r+0x520>
 8006ed8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006eda:	3301      	adds	r3, #1
 8006edc:	9310      	str	r3, [sp, #64]	; 0x40
 8006ede:	682a      	ldr	r2, [r5, #0]
 8006ee0:	686b      	ldr	r3, [r5, #4]
 8006ee2:	f7fa fb49 	bl	8001578 <__aeabi_dmul>
 8006ee6:	0033      	movs	r3, r6
 8006ee8:	1064      	asrs	r4, r4, #1
 8006eea:	3508      	adds	r5, #8
 8006eec:	e75a      	b.n	8006da4 <_dtoa_r+0x3dc>
 8006eee:	9e02      	ldr	r6, [sp, #8]
 8006ef0:	9b06      	ldr	r3, [sp, #24]
 8006ef2:	e780      	b.n	8006df6 <_dtoa_r+0x42e>
 8006ef4:	9b07      	ldr	r3, [sp, #28]
 8006ef6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ef8:	1e5a      	subs	r2, r3, #1
 8006efa:	4b59      	ldr	r3, [pc, #356]	; (8007060 <_dtoa_r+0x698>)
 8006efc:	00d2      	lsls	r2, r2, #3
 8006efe:	189b      	adds	r3, r3, r2
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	2900      	cmp	r1, #0
 8006f06:	d051      	beq.n	8006fac <_dtoa_r+0x5e4>
 8006f08:	2000      	movs	r0, #0
 8006f0a:	495d      	ldr	r1, [pc, #372]	; (8007080 <_dtoa_r+0x6b8>)
 8006f0c:	f7f9 ff2e 	bl	8000d6c <__aeabi_ddiv>
 8006f10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f14:	f7fa fd9c 	bl	8001a50 <__aeabi_dsub>
 8006f18:	9a05      	ldr	r2, [sp, #20]
 8006f1a:	9b05      	ldr	r3, [sp, #20]
 8006f1c:	4694      	mov	ip, r2
 8006f1e:	9310      	str	r3, [sp, #64]	; 0x40
 8006f20:	9b07      	ldr	r3, [sp, #28]
 8006f22:	900a      	str	r0, [sp, #40]	; 0x28
 8006f24:	910b      	str	r1, [sp, #44]	; 0x2c
 8006f26:	4463      	add	r3, ip
 8006f28:	9319      	str	r3, [sp, #100]	; 0x64
 8006f2a:	0029      	movs	r1, r5
 8006f2c:	0020      	movs	r0, r4
 8006f2e:	f7fb f93f 	bl	80021b0 <__aeabi_d2iz>
 8006f32:	9017      	str	r0, [sp, #92]	; 0x5c
 8006f34:	f7fb f972 	bl	800221c <__aeabi_i2d>
 8006f38:	0002      	movs	r2, r0
 8006f3a:	000b      	movs	r3, r1
 8006f3c:	0020      	movs	r0, r4
 8006f3e:	0029      	movs	r1, r5
 8006f40:	f7fa fd86 	bl	8001a50 <__aeabi_dsub>
 8006f44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f48:	3301      	adds	r3, #1
 8006f4a:	9307      	str	r3, [sp, #28]
 8006f4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f4e:	0004      	movs	r4, r0
 8006f50:	3330      	adds	r3, #48	; 0x30
 8006f52:	7013      	strb	r3, [r2, #0]
 8006f54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f58:	000d      	movs	r5, r1
 8006f5a:	f7f9 fa7d 	bl	8000458 <__aeabi_dcmplt>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	d175      	bne.n	800704e <_dtoa_r+0x686>
 8006f62:	0022      	movs	r2, r4
 8006f64:	002b      	movs	r3, r5
 8006f66:	2000      	movs	r0, #0
 8006f68:	493f      	ldr	r1, [pc, #252]	; (8007068 <_dtoa_r+0x6a0>)
 8006f6a:	f7fa fd71 	bl	8001a50 <__aeabi_dsub>
 8006f6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f72:	f7f9 fa71 	bl	8000458 <__aeabi_dcmplt>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d000      	beq.n	8006f7c <_dtoa_r+0x5b4>
 8006f7a:	e0d1      	b.n	8007120 <_dtoa_r+0x758>
 8006f7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f7e:	9a07      	ldr	r2, [sp, #28]
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d100      	bne.n	8006f86 <_dtoa_r+0x5be>
 8006f84:	e770      	b.n	8006e68 <_dtoa_r+0x4a0>
 8006f86:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006f88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	4b37      	ldr	r3, [pc, #220]	; (800706c <_dtoa_r+0x6a4>)
 8006f8e:	f7fa faf3 	bl	8001578 <__aeabi_dmul>
 8006f92:	4b36      	ldr	r3, [pc, #216]	; (800706c <_dtoa_r+0x6a4>)
 8006f94:	900a      	str	r0, [sp, #40]	; 0x28
 8006f96:	910b      	str	r1, [sp, #44]	; 0x2c
 8006f98:	2200      	movs	r2, #0
 8006f9a:	0020      	movs	r0, r4
 8006f9c:	0029      	movs	r1, r5
 8006f9e:	f7fa faeb 	bl	8001578 <__aeabi_dmul>
 8006fa2:	9b07      	ldr	r3, [sp, #28]
 8006fa4:	0004      	movs	r4, r0
 8006fa6:	000d      	movs	r5, r1
 8006fa8:	9310      	str	r3, [sp, #64]	; 0x40
 8006faa:	e7be      	b.n	8006f2a <_dtoa_r+0x562>
 8006fac:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006fae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fb0:	f7fa fae2 	bl	8001578 <__aeabi_dmul>
 8006fb4:	9a05      	ldr	r2, [sp, #20]
 8006fb6:	9b05      	ldr	r3, [sp, #20]
 8006fb8:	4694      	mov	ip, r2
 8006fba:	930a      	str	r3, [sp, #40]	; 0x28
 8006fbc:	9b07      	ldr	r3, [sp, #28]
 8006fbe:	9010      	str	r0, [sp, #64]	; 0x40
 8006fc0:	9111      	str	r1, [sp, #68]	; 0x44
 8006fc2:	4463      	add	r3, ip
 8006fc4:	9319      	str	r3, [sp, #100]	; 0x64
 8006fc6:	0029      	movs	r1, r5
 8006fc8:	0020      	movs	r0, r4
 8006fca:	f7fb f8f1 	bl	80021b0 <__aeabi_d2iz>
 8006fce:	9017      	str	r0, [sp, #92]	; 0x5c
 8006fd0:	f7fb f924 	bl	800221c <__aeabi_i2d>
 8006fd4:	0002      	movs	r2, r0
 8006fd6:	000b      	movs	r3, r1
 8006fd8:	0020      	movs	r0, r4
 8006fda:	0029      	movs	r1, r5
 8006fdc:	f7fa fd38 	bl	8001a50 <__aeabi_dsub>
 8006fe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fe4:	3330      	adds	r3, #48	; 0x30
 8006fe6:	7013      	strb	r3, [r2, #0]
 8006fe8:	0013      	movs	r3, r2
 8006fea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006fec:	3301      	adds	r3, #1
 8006fee:	0004      	movs	r4, r0
 8006ff0:	000d      	movs	r5, r1
 8006ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d12c      	bne.n	8007052 <_dtoa_r+0x68a>
 8006ff8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006ffa:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006ffc:	9a05      	ldr	r2, [sp, #20]
 8006ffe:	9b07      	ldr	r3, [sp, #28]
 8007000:	4694      	mov	ip, r2
 8007002:	4463      	add	r3, ip
 8007004:	2200      	movs	r2, #0
 8007006:	9307      	str	r3, [sp, #28]
 8007008:	4b1d      	ldr	r3, [pc, #116]	; (8007080 <_dtoa_r+0x6b8>)
 800700a:	f7f9 fb45 	bl	8000698 <__aeabi_dadd>
 800700e:	0002      	movs	r2, r0
 8007010:	000b      	movs	r3, r1
 8007012:	0020      	movs	r0, r4
 8007014:	0029      	movs	r1, r5
 8007016:	f7f9 fa33 	bl	8000480 <__aeabi_dcmpgt>
 800701a:	2800      	cmp	r0, #0
 800701c:	d000      	beq.n	8007020 <_dtoa_r+0x658>
 800701e:	e07f      	b.n	8007120 <_dtoa_r+0x758>
 8007020:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007022:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007024:	2000      	movs	r0, #0
 8007026:	4916      	ldr	r1, [pc, #88]	; (8007080 <_dtoa_r+0x6b8>)
 8007028:	f7fa fd12 	bl	8001a50 <__aeabi_dsub>
 800702c:	0002      	movs	r2, r0
 800702e:	000b      	movs	r3, r1
 8007030:	0020      	movs	r0, r4
 8007032:	0029      	movs	r1, r5
 8007034:	f7f9 fa10 	bl	8000458 <__aeabi_dcmplt>
 8007038:	2800      	cmp	r0, #0
 800703a:	d100      	bne.n	800703e <_dtoa_r+0x676>
 800703c:	e714      	b.n	8006e68 <_dtoa_r+0x4a0>
 800703e:	9b07      	ldr	r3, [sp, #28]
 8007040:	001a      	movs	r2, r3
 8007042:	3a01      	subs	r2, #1
 8007044:	9207      	str	r2, [sp, #28]
 8007046:	7812      	ldrb	r2, [r2, #0]
 8007048:	2a30      	cmp	r2, #48	; 0x30
 800704a:	d0f8      	beq.n	800703e <_dtoa_r+0x676>
 800704c:	9307      	str	r3, [sp, #28]
 800704e:	9602      	str	r6, [sp, #8]
 8007050:	e054      	b.n	80070fc <_dtoa_r+0x734>
 8007052:	2200      	movs	r2, #0
 8007054:	4b05      	ldr	r3, [pc, #20]	; (800706c <_dtoa_r+0x6a4>)
 8007056:	f7fa fa8f 	bl	8001578 <__aeabi_dmul>
 800705a:	0004      	movs	r4, r0
 800705c:	000d      	movs	r5, r1
 800705e:	e7b2      	b.n	8006fc6 <_dtoa_r+0x5fe>
 8007060:	08009050 	.word	0x08009050
 8007064:	08009028 	.word	0x08009028
 8007068:	3ff00000 	.word	0x3ff00000
 800706c:	40240000 	.word	0x40240000
 8007070:	401c0000 	.word	0x401c0000
 8007074:	fcc00000 	.word	0xfcc00000
 8007078:	40140000 	.word	0x40140000
 800707c:	7cc00000 	.word	0x7cc00000
 8007080:	3fe00000 	.word	0x3fe00000
 8007084:	9b06      	ldr	r3, [sp, #24]
 8007086:	9e05      	ldr	r6, [sp, #20]
 8007088:	3b01      	subs	r3, #1
 800708a:	199b      	adds	r3, r3, r6
 800708c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800708e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007090:	930a      	str	r3, [sp, #40]	; 0x28
 8007092:	9a08      	ldr	r2, [sp, #32]
 8007094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007096:	0020      	movs	r0, r4
 8007098:	0029      	movs	r1, r5
 800709a:	f7f9 fe67 	bl	8000d6c <__aeabi_ddiv>
 800709e:	f7fb f887 	bl	80021b0 <__aeabi_d2iz>
 80070a2:	9006      	str	r0, [sp, #24]
 80070a4:	f7fb f8ba 	bl	800221c <__aeabi_i2d>
 80070a8:	9a08      	ldr	r2, [sp, #32]
 80070aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ac:	f7fa fa64 	bl	8001578 <__aeabi_dmul>
 80070b0:	0002      	movs	r2, r0
 80070b2:	000b      	movs	r3, r1
 80070b4:	0020      	movs	r0, r4
 80070b6:	0029      	movs	r1, r5
 80070b8:	f7fa fcca 	bl	8001a50 <__aeabi_dsub>
 80070bc:	0033      	movs	r3, r6
 80070be:	9a06      	ldr	r2, [sp, #24]
 80070c0:	3601      	adds	r6, #1
 80070c2:	3230      	adds	r2, #48	; 0x30
 80070c4:	701a      	strb	r2, [r3, #0]
 80070c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070c8:	9607      	str	r6, [sp, #28]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d139      	bne.n	8007142 <_dtoa_r+0x77a>
 80070ce:	0002      	movs	r2, r0
 80070d0:	000b      	movs	r3, r1
 80070d2:	f7f9 fae1 	bl	8000698 <__aeabi_dadd>
 80070d6:	9a08      	ldr	r2, [sp, #32]
 80070d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070da:	0004      	movs	r4, r0
 80070dc:	000d      	movs	r5, r1
 80070de:	f7f9 f9cf 	bl	8000480 <__aeabi_dcmpgt>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d11b      	bne.n	800711e <_dtoa_r+0x756>
 80070e6:	9a08      	ldr	r2, [sp, #32]
 80070e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ea:	0020      	movs	r0, r4
 80070ec:	0029      	movs	r1, r5
 80070ee:	f7f9 f9ad 	bl	800044c <__aeabi_dcmpeq>
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d002      	beq.n	80070fc <_dtoa_r+0x734>
 80070f6:	9b06      	ldr	r3, [sp, #24]
 80070f8:	07db      	lsls	r3, r3, #31
 80070fa:	d410      	bmi.n	800711e <_dtoa_r+0x756>
 80070fc:	0038      	movs	r0, r7
 80070fe:	9904      	ldr	r1, [sp, #16]
 8007100:	f000 fae6 	bl	80076d0 <_Bfree>
 8007104:	2300      	movs	r3, #0
 8007106:	9a07      	ldr	r2, [sp, #28]
 8007108:	9802      	ldr	r0, [sp, #8]
 800710a:	7013      	strb	r3, [r2, #0]
 800710c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800710e:	3001      	adds	r0, #1
 8007110:	6018      	str	r0, [r3, #0]
 8007112:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007114:	2b00      	cmp	r3, #0
 8007116:	d100      	bne.n	800711a <_dtoa_r+0x752>
 8007118:	e4a3      	b.n	8006a62 <_dtoa_r+0x9a>
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	e4a1      	b.n	8006a62 <_dtoa_r+0x9a>
 800711e:	9e02      	ldr	r6, [sp, #8]
 8007120:	9b07      	ldr	r3, [sp, #28]
 8007122:	9307      	str	r3, [sp, #28]
 8007124:	3b01      	subs	r3, #1
 8007126:	781a      	ldrb	r2, [r3, #0]
 8007128:	2a39      	cmp	r2, #57	; 0x39
 800712a:	d106      	bne.n	800713a <_dtoa_r+0x772>
 800712c:	9a05      	ldr	r2, [sp, #20]
 800712e:	429a      	cmp	r2, r3
 8007130:	d1f7      	bne.n	8007122 <_dtoa_r+0x75a>
 8007132:	2230      	movs	r2, #48	; 0x30
 8007134:	9905      	ldr	r1, [sp, #20]
 8007136:	3601      	adds	r6, #1
 8007138:	700a      	strb	r2, [r1, #0]
 800713a:	781a      	ldrb	r2, [r3, #0]
 800713c:	3201      	adds	r2, #1
 800713e:	701a      	strb	r2, [r3, #0]
 8007140:	e785      	b.n	800704e <_dtoa_r+0x686>
 8007142:	2200      	movs	r2, #0
 8007144:	4bad      	ldr	r3, [pc, #692]	; (80073fc <_dtoa_r+0xa34>)
 8007146:	f7fa fa17 	bl	8001578 <__aeabi_dmul>
 800714a:	2200      	movs	r2, #0
 800714c:	2300      	movs	r3, #0
 800714e:	0004      	movs	r4, r0
 8007150:	000d      	movs	r5, r1
 8007152:	f7f9 f97b 	bl	800044c <__aeabi_dcmpeq>
 8007156:	2800      	cmp	r0, #0
 8007158:	d09b      	beq.n	8007092 <_dtoa_r+0x6ca>
 800715a:	e7cf      	b.n	80070fc <_dtoa_r+0x734>
 800715c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800715e:	2a00      	cmp	r2, #0
 8007160:	d100      	bne.n	8007164 <_dtoa_r+0x79c>
 8007162:	e082      	b.n	800726a <_dtoa_r+0x8a2>
 8007164:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007166:	2a01      	cmp	r2, #1
 8007168:	dc66      	bgt.n	8007238 <_dtoa_r+0x870>
 800716a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800716c:	2a00      	cmp	r2, #0
 800716e:	d05f      	beq.n	8007230 <_dtoa_r+0x868>
 8007170:	4aa3      	ldr	r2, [pc, #652]	; (8007400 <_dtoa_r+0xa38>)
 8007172:	189b      	adds	r3, r3, r2
 8007174:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007176:	9c08      	ldr	r4, [sp, #32]
 8007178:	9a08      	ldr	r2, [sp, #32]
 800717a:	2101      	movs	r1, #1
 800717c:	18d2      	adds	r2, r2, r3
 800717e:	9208      	str	r2, [sp, #32]
 8007180:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007182:	0038      	movs	r0, r7
 8007184:	18d3      	adds	r3, r2, r3
 8007186:	930d      	str	r3, [sp, #52]	; 0x34
 8007188:	f000 fb52 	bl	8007830 <__i2b>
 800718c:	0005      	movs	r5, r0
 800718e:	2c00      	cmp	r4, #0
 8007190:	dd0e      	ble.n	80071b0 <_dtoa_r+0x7e8>
 8007192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007194:	2b00      	cmp	r3, #0
 8007196:	dd0b      	ble.n	80071b0 <_dtoa_r+0x7e8>
 8007198:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800719a:	0023      	movs	r3, r4
 800719c:	4294      	cmp	r4, r2
 800719e:	dd00      	ble.n	80071a2 <_dtoa_r+0x7da>
 80071a0:	0013      	movs	r3, r2
 80071a2:	9a08      	ldr	r2, [sp, #32]
 80071a4:	1ae4      	subs	r4, r4, r3
 80071a6:	1ad2      	subs	r2, r2, r3
 80071a8:	9208      	str	r2, [sp, #32]
 80071aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	930d      	str	r3, [sp, #52]	; 0x34
 80071b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d01f      	beq.n	80071f6 <_dtoa_r+0x82e>
 80071b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d05a      	beq.n	8007272 <_dtoa_r+0x8aa>
 80071bc:	2e00      	cmp	r6, #0
 80071be:	dd11      	ble.n	80071e4 <_dtoa_r+0x81c>
 80071c0:	0029      	movs	r1, r5
 80071c2:	0032      	movs	r2, r6
 80071c4:	0038      	movs	r0, r7
 80071c6:	f000 fbf9 	bl	80079bc <__pow5mult>
 80071ca:	9a04      	ldr	r2, [sp, #16]
 80071cc:	0001      	movs	r1, r0
 80071ce:	0005      	movs	r5, r0
 80071d0:	0038      	movs	r0, r7
 80071d2:	f000 fb43 	bl	800785c <__multiply>
 80071d6:	9904      	ldr	r1, [sp, #16]
 80071d8:	9007      	str	r0, [sp, #28]
 80071da:	0038      	movs	r0, r7
 80071dc:	f000 fa78 	bl	80076d0 <_Bfree>
 80071e0:	9b07      	ldr	r3, [sp, #28]
 80071e2:	9304      	str	r3, [sp, #16]
 80071e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071e6:	1b9a      	subs	r2, r3, r6
 80071e8:	42b3      	cmp	r3, r6
 80071ea:	d004      	beq.n	80071f6 <_dtoa_r+0x82e>
 80071ec:	0038      	movs	r0, r7
 80071ee:	9904      	ldr	r1, [sp, #16]
 80071f0:	f000 fbe4 	bl	80079bc <__pow5mult>
 80071f4:	9004      	str	r0, [sp, #16]
 80071f6:	2101      	movs	r1, #1
 80071f8:	0038      	movs	r0, r7
 80071fa:	f000 fb19 	bl	8007830 <__i2b>
 80071fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007200:	0006      	movs	r6, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	dd37      	ble.n	8007276 <_dtoa_r+0x8ae>
 8007206:	001a      	movs	r2, r3
 8007208:	0001      	movs	r1, r0
 800720a:	0038      	movs	r0, r7
 800720c:	f000 fbd6 	bl	80079bc <__pow5mult>
 8007210:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007212:	0006      	movs	r6, r0
 8007214:	2b01      	cmp	r3, #1
 8007216:	dd33      	ble.n	8007280 <_dtoa_r+0x8b8>
 8007218:	2300      	movs	r3, #0
 800721a:	9307      	str	r3, [sp, #28]
 800721c:	6933      	ldr	r3, [r6, #16]
 800721e:	3303      	adds	r3, #3
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	18f3      	adds	r3, r6, r3
 8007224:	6858      	ldr	r0, [r3, #4]
 8007226:	f000 fabb 	bl	80077a0 <__hi0bits>
 800722a:	2320      	movs	r3, #32
 800722c:	1a18      	subs	r0, r3, r0
 800722e:	e03f      	b.n	80072b0 <_dtoa_r+0x8e8>
 8007230:	2336      	movs	r3, #54	; 0x36
 8007232:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007234:	1a9b      	subs	r3, r3, r2
 8007236:	e79d      	b.n	8007174 <_dtoa_r+0x7ac>
 8007238:	9b06      	ldr	r3, [sp, #24]
 800723a:	1e5e      	subs	r6, r3, #1
 800723c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800723e:	42b3      	cmp	r3, r6
 8007240:	db08      	blt.n	8007254 <_dtoa_r+0x88c>
 8007242:	1b9e      	subs	r6, r3, r6
 8007244:	9b06      	ldr	r3, [sp, #24]
 8007246:	2b00      	cmp	r3, #0
 8007248:	da0c      	bge.n	8007264 <_dtoa_r+0x89c>
 800724a:	9b08      	ldr	r3, [sp, #32]
 800724c:	9a06      	ldr	r2, [sp, #24]
 800724e:	1a9c      	subs	r4, r3, r2
 8007250:	2300      	movs	r3, #0
 8007252:	e791      	b.n	8007178 <_dtoa_r+0x7b0>
 8007254:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007256:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007258:	1af3      	subs	r3, r6, r3
 800725a:	18d3      	adds	r3, r2, r3
 800725c:	960e      	str	r6, [sp, #56]	; 0x38
 800725e:	9314      	str	r3, [sp, #80]	; 0x50
 8007260:	2600      	movs	r6, #0
 8007262:	e7ef      	b.n	8007244 <_dtoa_r+0x87c>
 8007264:	9c08      	ldr	r4, [sp, #32]
 8007266:	9b06      	ldr	r3, [sp, #24]
 8007268:	e786      	b.n	8007178 <_dtoa_r+0x7b0>
 800726a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800726c:	9c08      	ldr	r4, [sp, #32]
 800726e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007270:	e78d      	b.n	800718e <_dtoa_r+0x7c6>
 8007272:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007274:	e7ba      	b.n	80071ec <_dtoa_r+0x824>
 8007276:	2300      	movs	r3, #0
 8007278:	9307      	str	r3, [sp, #28]
 800727a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800727c:	2b01      	cmp	r3, #1
 800727e:	dc13      	bgt.n	80072a8 <_dtoa_r+0x8e0>
 8007280:	2300      	movs	r3, #0
 8007282:	9307      	str	r3, [sp, #28]
 8007284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10e      	bne.n	80072a8 <_dtoa_r+0x8e0>
 800728a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800728c:	031b      	lsls	r3, r3, #12
 800728e:	d10b      	bne.n	80072a8 <_dtoa_r+0x8e0>
 8007290:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007292:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007294:	4213      	tst	r3, r2
 8007296:	d007      	beq.n	80072a8 <_dtoa_r+0x8e0>
 8007298:	9b08      	ldr	r3, [sp, #32]
 800729a:	3301      	adds	r3, #1
 800729c:	9308      	str	r3, [sp, #32]
 800729e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072a0:	3301      	adds	r3, #1
 80072a2:	930d      	str	r3, [sp, #52]	; 0x34
 80072a4:	2301      	movs	r3, #1
 80072a6:	9307      	str	r3, [sp, #28]
 80072a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072aa:	2001      	movs	r0, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1b5      	bne.n	800721c <_dtoa_r+0x854>
 80072b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072b2:	221f      	movs	r2, #31
 80072b4:	1818      	adds	r0, r3, r0
 80072b6:	0003      	movs	r3, r0
 80072b8:	4013      	ands	r3, r2
 80072ba:	4210      	tst	r0, r2
 80072bc:	d046      	beq.n	800734c <_dtoa_r+0x984>
 80072be:	3201      	adds	r2, #1
 80072c0:	1ad2      	subs	r2, r2, r3
 80072c2:	2a04      	cmp	r2, #4
 80072c4:	dd3f      	ble.n	8007346 <_dtoa_r+0x97e>
 80072c6:	221c      	movs	r2, #28
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	9a08      	ldr	r2, [sp, #32]
 80072cc:	18e4      	adds	r4, r4, r3
 80072ce:	18d2      	adds	r2, r2, r3
 80072d0:	9208      	str	r2, [sp, #32]
 80072d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072d4:	18d3      	adds	r3, r2, r3
 80072d6:	930d      	str	r3, [sp, #52]	; 0x34
 80072d8:	9b08      	ldr	r3, [sp, #32]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	dd05      	ble.n	80072ea <_dtoa_r+0x922>
 80072de:	001a      	movs	r2, r3
 80072e0:	0038      	movs	r0, r7
 80072e2:	9904      	ldr	r1, [sp, #16]
 80072e4:	f000 fbc6 	bl	8007a74 <__lshift>
 80072e8:	9004      	str	r0, [sp, #16]
 80072ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	dd05      	ble.n	80072fc <_dtoa_r+0x934>
 80072f0:	0031      	movs	r1, r6
 80072f2:	001a      	movs	r2, r3
 80072f4:	0038      	movs	r0, r7
 80072f6:	f000 fbbd 	bl	8007a74 <__lshift>
 80072fa:	0006      	movs	r6, r0
 80072fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d026      	beq.n	8007350 <_dtoa_r+0x988>
 8007302:	0031      	movs	r1, r6
 8007304:	9804      	ldr	r0, [sp, #16]
 8007306:	f000 fc25 	bl	8007b54 <__mcmp>
 800730a:	2800      	cmp	r0, #0
 800730c:	da20      	bge.n	8007350 <_dtoa_r+0x988>
 800730e:	9b02      	ldr	r3, [sp, #8]
 8007310:	220a      	movs	r2, #10
 8007312:	3b01      	subs	r3, #1
 8007314:	9302      	str	r3, [sp, #8]
 8007316:	0038      	movs	r0, r7
 8007318:	2300      	movs	r3, #0
 800731a:	9904      	ldr	r1, [sp, #16]
 800731c:	f000 f9fc 	bl	8007718 <__multadd>
 8007320:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007322:	9004      	str	r0, [sp, #16]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d100      	bne.n	800732a <_dtoa_r+0x962>
 8007328:	e160      	b.n	80075ec <_dtoa_r+0xc24>
 800732a:	2300      	movs	r3, #0
 800732c:	0029      	movs	r1, r5
 800732e:	220a      	movs	r2, #10
 8007330:	0038      	movs	r0, r7
 8007332:	f000 f9f1 	bl	8007718 <__multadd>
 8007336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007338:	0005      	movs	r5, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	dc47      	bgt.n	80073ce <_dtoa_r+0xa06>
 800733e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007340:	2b02      	cmp	r3, #2
 8007342:	dc0d      	bgt.n	8007360 <_dtoa_r+0x998>
 8007344:	e043      	b.n	80073ce <_dtoa_r+0xa06>
 8007346:	2a04      	cmp	r2, #4
 8007348:	d0c6      	beq.n	80072d8 <_dtoa_r+0x910>
 800734a:	0013      	movs	r3, r2
 800734c:	331c      	adds	r3, #28
 800734e:	e7bc      	b.n	80072ca <_dtoa_r+0x902>
 8007350:	9b06      	ldr	r3, [sp, #24]
 8007352:	2b00      	cmp	r3, #0
 8007354:	dc35      	bgt.n	80073c2 <_dtoa_r+0x9fa>
 8007356:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007358:	2b02      	cmp	r3, #2
 800735a:	dd32      	ble.n	80073c2 <_dtoa_r+0x9fa>
 800735c:	9b06      	ldr	r3, [sp, #24]
 800735e:	930c      	str	r3, [sp, #48]	; 0x30
 8007360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10c      	bne.n	8007380 <_dtoa_r+0x9b8>
 8007366:	0031      	movs	r1, r6
 8007368:	2205      	movs	r2, #5
 800736a:	0038      	movs	r0, r7
 800736c:	f000 f9d4 	bl	8007718 <__multadd>
 8007370:	0006      	movs	r6, r0
 8007372:	0001      	movs	r1, r0
 8007374:	9804      	ldr	r0, [sp, #16]
 8007376:	f000 fbed 	bl	8007b54 <__mcmp>
 800737a:	2800      	cmp	r0, #0
 800737c:	dd00      	ble.n	8007380 <_dtoa_r+0x9b8>
 800737e:	e59f      	b.n	8006ec0 <_dtoa_r+0x4f8>
 8007380:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007382:	43db      	mvns	r3, r3
 8007384:	9302      	str	r3, [sp, #8]
 8007386:	9b05      	ldr	r3, [sp, #20]
 8007388:	9307      	str	r3, [sp, #28]
 800738a:	2400      	movs	r4, #0
 800738c:	0031      	movs	r1, r6
 800738e:	0038      	movs	r0, r7
 8007390:	f000 f99e 	bl	80076d0 <_Bfree>
 8007394:	2d00      	cmp	r5, #0
 8007396:	d100      	bne.n	800739a <_dtoa_r+0x9d2>
 8007398:	e6b0      	b.n	80070fc <_dtoa_r+0x734>
 800739a:	2c00      	cmp	r4, #0
 800739c:	d005      	beq.n	80073aa <_dtoa_r+0x9e2>
 800739e:	42ac      	cmp	r4, r5
 80073a0:	d003      	beq.n	80073aa <_dtoa_r+0x9e2>
 80073a2:	0021      	movs	r1, r4
 80073a4:	0038      	movs	r0, r7
 80073a6:	f000 f993 	bl	80076d0 <_Bfree>
 80073aa:	0029      	movs	r1, r5
 80073ac:	0038      	movs	r0, r7
 80073ae:	f000 f98f 	bl	80076d0 <_Bfree>
 80073b2:	e6a3      	b.n	80070fc <_dtoa_r+0x734>
 80073b4:	2600      	movs	r6, #0
 80073b6:	0035      	movs	r5, r6
 80073b8:	e7e2      	b.n	8007380 <_dtoa_r+0x9b8>
 80073ba:	9602      	str	r6, [sp, #8]
 80073bc:	9e07      	ldr	r6, [sp, #28]
 80073be:	0035      	movs	r5, r6
 80073c0:	e57e      	b.n	8006ec0 <_dtoa_r+0x4f8>
 80073c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d100      	bne.n	80073ca <_dtoa_r+0xa02>
 80073c8:	e0c8      	b.n	800755c <_dtoa_r+0xb94>
 80073ca:	9b06      	ldr	r3, [sp, #24]
 80073cc:	930c      	str	r3, [sp, #48]	; 0x30
 80073ce:	2c00      	cmp	r4, #0
 80073d0:	dd05      	ble.n	80073de <_dtoa_r+0xa16>
 80073d2:	0029      	movs	r1, r5
 80073d4:	0022      	movs	r2, r4
 80073d6:	0038      	movs	r0, r7
 80073d8:	f000 fb4c 	bl	8007a74 <__lshift>
 80073dc:	0005      	movs	r5, r0
 80073de:	9b07      	ldr	r3, [sp, #28]
 80073e0:	0028      	movs	r0, r5
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d01f      	beq.n	8007426 <_dtoa_r+0xa5e>
 80073e6:	0038      	movs	r0, r7
 80073e8:	6869      	ldr	r1, [r5, #4]
 80073ea:	f000 f92d 	bl	8007648 <_Balloc>
 80073ee:	1e04      	subs	r4, r0, #0
 80073f0:	d10c      	bne.n	800740c <_dtoa_r+0xa44>
 80073f2:	0002      	movs	r2, r0
 80073f4:	4b03      	ldr	r3, [pc, #12]	; (8007404 <_dtoa_r+0xa3c>)
 80073f6:	4904      	ldr	r1, [pc, #16]	; (8007408 <_dtoa_r+0xa40>)
 80073f8:	f7ff fafb 	bl	80069f2 <_dtoa_r+0x2a>
 80073fc:	40240000 	.word	0x40240000
 8007400:	00000433 	.word	0x00000433
 8007404:	08008fb7 	.word	0x08008fb7
 8007408:	000002ea 	.word	0x000002ea
 800740c:	0029      	movs	r1, r5
 800740e:	692b      	ldr	r3, [r5, #16]
 8007410:	310c      	adds	r1, #12
 8007412:	1c9a      	adds	r2, r3, #2
 8007414:	0092      	lsls	r2, r2, #2
 8007416:	300c      	adds	r0, #12
 8007418:	f000 f90d 	bl	8007636 <memcpy>
 800741c:	2201      	movs	r2, #1
 800741e:	0021      	movs	r1, r4
 8007420:	0038      	movs	r0, r7
 8007422:	f000 fb27 	bl	8007a74 <__lshift>
 8007426:	002c      	movs	r4, r5
 8007428:	0005      	movs	r5, r0
 800742a:	9b05      	ldr	r3, [sp, #20]
 800742c:	9308      	str	r3, [sp, #32]
 800742e:	0031      	movs	r1, r6
 8007430:	9804      	ldr	r0, [sp, #16]
 8007432:	f7ff fa3d 	bl	80068b0 <quorem>
 8007436:	0003      	movs	r3, r0
 8007438:	0021      	movs	r1, r4
 800743a:	3330      	adds	r3, #48	; 0x30
 800743c:	900e      	str	r0, [sp, #56]	; 0x38
 800743e:	9804      	ldr	r0, [sp, #16]
 8007440:	9306      	str	r3, [sp, #24]
 8007442:	f000 fb87 	bl	8007b54 <__mcmp>
 8007446:	002a      	movs	r2, r5
 8007448:	900f      	str	r0, [sp, #60]	; 0x3c
 800744a:	0031      	movs	r1, r6
 800744c:	0038      	movs	r0, r7
 800744e:	f000 fb9d 	bl	8007b8c <__mdiff>
 8007452:	68c3      	ldr	r3, [r0, #12]
 8007454:	9007      	str	r0, [sp, #28]
 8007456:	9310      	str	r3, [sp, #64]	; 0x40
 8007458:	2301      	movs	r3, #1
 800745a:	930d      	str	r3, [sp, #52]	; 0x34
 800745c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800745e:	2b00      	cmp	r3, #0
 8007460:	d104      	bne.n	800746c <_dtoa_r+0xaa4>
 8007462:	0001      	movs	r1, r0
 8007464:	9804      	ldr	r0, [sp, #16]
 8007466:	f000 fb75 	bl	8007b54 <__mcmp>
 800746a:	900d      	str	r0, [sp, #52]	; 0x34
 800746c:	0038      	movs	r0, r7
 800746e:	9907      	ldr	r1, [sp, #28]
 8007470:	f000 f92e 	bl	80076d0 <_Bfree>
 8007474:	2301      	movs	r3, #1
 8007476:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007478:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800747a:	4018      	ands	r0, r3
 800747c:	9b08      	ldr	r3, [sp, #32]
 800747e:	3301      	adds	r3, #1
 8007480:	9307      	str	r3, [sp, #28]
 8007482:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007484:	4313      	orrs	r3, r2
 8007486:	4303      	orrs	r3, r0
 8007488:	d10c      	bne.n	80074a4 <_dtoa_r+0xadc>
 800748a:	9b06      	ldr	r3, [sp, #24]
 800748c:	2b39      	cmp	r3, #57	; 0x39
 800748e:	d025      	beq.n	80074dc <_dtoa_r+0xb14>
 8007490:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007492:	2b00      	cmp	r3, #0
 8007494:	dd02      	ble.n	800749c <_dtoa_r+0xad4>
 8007496:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007498:	3331      	adds	r3, #49	; 0x31
 800749a:	9306      	str	r3, [sp, #24]
 800749c:	9b08      	ldr	r3, [sp, #32]
 800749e:	9a06      	ldr	r2, [sp, #24]
 80074a0:	701a      	strb	r2, [r3, #0]
 80074a2:	e773      	b.n	800738c <_dtoa_r+0x9c4>
 80074a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	db03      	blt.n	80074b2 <_dtoa_r+0xaea>
 80074aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80074ac:	4313      	orrs	r3, r2
 80074ae:	4303      	orrs	r3, r0
 80074b0:	d11f      	bne.n	80074f2 <_dtoa_r+0xb2a>
 80074b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	ddf1      	ble.n	800749c <_dtoa_r+0xad4>
 80074b8:	9904      	ldr	r1, [sp, #16]
 80074ba:	2201      	movs	r2, #1
 80074bc:	0038      	movs	r0, r7
 80074be:	f000 fad9 	bl	8007a74 <__lshift>
 80074c2:	0031      	movs	r1, r6
 80074c4:	9004      	str	r0, [sp, #16]
 80074c6:	f000 fb45 	bl	8007b54 <__mcmp>
 80074ca:	2800      	cmp	r0, #0
 80074cc:	dc03      	bgt.n	80074d6 <_dtoa_r+0xb0e>
 80074ce:	d1e5      	bne.n	800749c <_dtoa_r+0xad4>
 80074d0:	9b06      	ldr	r3, [sp, #24]
 80074d2:	07db      	lsls	r3, r3, #31
 80074d4:	d5e2      	bpl.n	800749c <_dtoa_r+0xad4>
 80074d6:	9b06      	ldr	r3, [sp, #24]
 80074d8:	2b39      	cmp	r3, #57	; 0x39
 80074da:	d1dc      	bne.n	8007496 <_dtoa_r+0xace>
 80074dc:	2339      	movs	r3, #57	; 0x39
 80074de:	9a08      	ldr	r2, [sp, #32]
 80074e0:	7013      	strb	r3, [r2, #0]
 80074e2:	9b07      	ldr	r3, [sp, #28]
 80074e4:	9307      	str	r3, [sp, #28]
 80074e6:	3b01      	subs	r3, #1
 80074e8:	781a      	ldrb	r2, [r3, #0]
 80074ea:	2a39      	cmp	r2, #57	; 0x39
 80074ec:	d06c      	beq.n	80075c8 <_dtoa_r+0xc00>
 80074ee:	3201      	adds	r2, #1
 80074f0:	e7d6      	b.n	80074a0 <_dtoa_r+0xad8>
 80074f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	dd07      	ble.n	8007508 <_dtoa_r+0xb40>
 80074f8:	9b06      	ldr	r3, [sp, #24]
 80074fa:	2b39      	cmp	r3, #57	; 0x39
 80074fc:	d0ee      	beq.n	80074dc <_dtoa_r+0xb14>
 80074fe:	9b06      	ldr	r3, [sp, #24]
 8007500:	9a08      	ldr	r2, [sp, #32]
 8007502:	3301      	adds	r3, #1
 8007504:	7013      	strb	r3, [r2, #0]
 8007506:	e741      	b.n	800738c <_dtoa_r+0x9c4>
 8007508:	9b08      	ldr	r3, [sp, #32]
 800750a:	9a06      	ldr	r2, [sp, #24]
 800750c:	701a      	strb	r2, [r3, #0]
 800750e:	2301      	movs	r3, #1
 8007510:	9a05      	ldr	r2, [sp, #20]
 8007512:	1a9b      	subs	r3, r3, r2
 8007514:	9a08      	ldr	r2, [sp, #32]
 8007516:	189b      	adds	r3, r3, r2
 8007518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800751a:	429a      	cmp	r2, r3
 800751c:	d03e      	beq.n	800759c <_dtoa_r+0xbd4>
 800751e:	2300      	movs	r3, #0
 8007520:	220a      	movs	r2, #10
 8007522:	9904      	ldr	r1, [sp, #16]
 8007524:	0038      	movs	r0, r7
 8007526:	f000 f8f7 	bl	8007718 <__multadd>
 800752a:	2300      	movs	r3, #0
 800752c:	9004      	str	r0, [sp, #16]
 800752e:	220a      	movs	r2, #10
 8007530:	0021      	movs	r1, r4
 8007532:	0038      	movs	r0, r7
 8007534:	42ac      	cmp	r4, r5
 8007536:	d106      	bne.n	8007546 <_dtoa_r+0xb7e>
 8007538:	f000 f8ee 	bl	8007718 <__multadd>
 800753c:	0004      	movs	r4, r0
 800753e:	0005      	movs	r5, r0
 8007540:	9b07      	ldr	r3, [sp, #28]
 8007542:	9308      	str	r3, [sp, #32]
 8007544:	e773      	b.n	800742e <_dtoa_r+0xa66>
 8007546:	f000 f8e7 	bl	8007718 <__multadd>
 800754a:	0029      	movs	r1, r5
 800754c:	0004      	movs	r4, r0
 800754e:	2300      	movs	r3, #0
 8007550:	220a      	movs	r2, #10
 8007552:	0038      	movs	r0, r7
 8007554:	f000 f8e0 	bl	8007718 <__multadd>
 8007558:	0005      	movs	r5, r0
 800755a:	e7f1      	b.n	8007540 <_dtoa_r+0xb78>
 800755c:	9b06      	ldr	r3, [sp, #24]
 800755e:	930c      	str	r3, [sp, #48]	; 0x30
 8007560:	2400      	movs	r4, #0
 8007562:	0031      	movs	r1, r6
 8007564:	9804      	ldr	r0, [sp, #16]
 8007566:	f7ff f9a3 	bl	80068b0 <quorem>
 800756a:	9b05      	ldr	r3, [sp, #20]
 800756c:	3030      	adds	r0, #48	; 0x30
 800756e:	5518      	strb	r0, [r3, r4]
 8007570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007572:	3401      	adds	r4, #1
 8007574:	9006      	str	r0, [sp, #24]
 8007576:	42a3      	cmp	r3, r4
 8007578:	dd07      	ble.n	800758a <_dtoa_r+0xbc2>
 800757a:	2300      	movs	r3, #0
 800757c:	220a      	movs	r2, #10
 800757e:	0038      	movs	r0, r7
 8007580:	9904      	ldr	r1, [sp, #16]
 8007582:	f000 f8c9 	bl	8007718 <__multadd>
 8007586:	9004      	str	r0, [sp, #16]
 8007588:	e7eb      	b.n	8007562 <_dtoa_r+0xb9a>
 800758a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800758c:	2001      	movs	r0, #1
 800758e:	2b00      	cmp	r3, #0
 8007590:	dd00      	ble.n	8007594 <_dtoa_r+0xbcc>
 8007592:	0018      	movs	r0, r3
 8007594:	2400      	movs	r4, #0
 8007596:	9b05      	ldr	r3, [sp, #20]
 8007598:	181b      	adds	r3, r3, r0
 800759a:	9307      	str	r3, [sp, #28]
 800759c:	9904      	ldr	r1, [sp, #16]
 800759e:	2201      	movs	r2, #1
 80075a0:	0038      	movs	r0, r7
 80075a2:	f000 fa67 	bl	8007a74 <__lshift>
 80075a6:	0031      	movs	r1, r6
 80075a8:	9004      	str	r0, [sp, #16]
 80075aa:	f000 fad3 	bl	8007b54 <__mcmp>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	dc97      	bgt.n	80074e2 <_dtoa_r+0xb1a>
 80075b2:	d102      	bne.n	80075ba <_dtoa_r+0xbf2>
 80075b4:	9b06      	ldr	r3, [sp, #24]
 80075b6:	07db      	lsls	r3, r3, #31
 80075b8:	d493      	bmi.n	80074e2 <_dtoa_r+0xb1a>
 80075ba:	9b07      	ldr	r3, [sp, #28]
 80075bc:	9307      	str	r3, [sp, #28]
 80075be:	3b01      	subs	r3, #1
 80075c0:	781a      	ldrb	r2, [r3, #0]
 80075c2:	2a30      	cmp	r2, #48	; 0x30
 80075c4:	d0fa      	beq.n	80075bc <_dtoa_r+0xbf4>
 80075c6:	e6e1      	b.n	800738c <_dtoa_r+0x9c4>
 80075c8:	9a05      	ldr	r2, [sp, #20]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d18a      	bne.n	80074e4 <_dtoa_r+0xb1c>
 80075ce:	9b02      	ldr	r3, [sp, #8]
 80075d0:	3301      	adds	r3, #1
 80075d2:	9302      	str	r3, [sp, #8]
 80075d4:	2331      	movs	r3, #49	; 0x31
 80075d6:	e795      	b.n	8007504 <_dtoa_r+0xb3c>
 80075d8:	4b08      	ldr	r3, [pc, #32]	; (80075fc <_dtoa_r+0xc34>)
 80075da:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80075dc:	9305      	str	r3, [sp, #20]
 80075de:	4b08      	ldr	r3, [pc, #32]	; (8007600 <_dtoa_r+0xc38>)
 80075e0:	2a00      	cmp	r2, #0
 80075e2:	d001      	beq.n	80075e8 <_dtoa_r+0xc20>
 80075e4:	f7ff fa3b 	bl	8006a5e <_dtoa_r+0x96>
 80075e8:	f7ff fa3b 	bl	8006a62 <_dtoa_r+0x9a>
 80075ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	dcb6      	bgt.n	8007560 <_dtoa_r+0xb98>
 80075f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	dd00      	ble.n	80075fa <_dtoa_r+0xc32>
 80075f8:	e6b2      	b.n	8007360 <_dtoa_r+0x998>
 80075fa:	e7b1      	b.n	8007560 <_dtoa_r+0xb98>
 80075fc:	08008f34 	.word	0x08008f34
 8007600:	08008f3c 	.word	0x08008f3c

08007604 <_localeconv_r>:
 8007604:	4800      	ldr	r0, [pc, #0]	; (8007608 <_localeconv_r+0x4>)
 8007606:	4770      	bx	lr
 8007608:	20000160 	.word	0x20000160

0800760c <malloc>:
 800760c:	b510      	push	{r4, lr}
 800760e:	4b03      	ldr	r3, [pc, #12]	; (800761c <malloc+0x10>)
 8007610:	0001      	movs	r1, r0
 8007612:	6818      	ldr	r0, [r3, #0]
 8007614:	f000 fc0e 	bl	8007e34 <_malloc_r>
 8007618:	bd10      	pop	{r4, pc}
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	2000000c 	.word	0x2000000c

08007620 <memchr>:
 8007620:	b2c9      	uxtb	r1, r1
 8007622:	1882      	adds	r2, r0, r2
 8007624:	4290      	cmp	r0, r2
 8007626:	d101      	bne.n	800762c <memchr+0xc>
 8007628:	2000      	movs	r0, #0
 800762a:	4770      	bx	lr
 800762c:	7803      	ldrb	r3, [r0, #0]
 800762e:	428b      	cmp	r3, r1
 8007630:	d0fb      	beq.n	800762a <memchr+0xa>
 8007632:	3001      	adds	r0, #1
 8007634:	e7f6      	b.n	8007624 <memchr+0x4>

08007636 <memcpy>:
 8007636:	2300      	movs	r3, #0
 8007638:	b510      	push	{r4, lr}
 800763a:	429a      	cmp	r2, r3
 800763c:	d100      	bne.n	8007640 <memcpy+0xa>
 800763e:	bd10      	pop	{r4, pc}
 8007640:	5ccc      	ldrb	r4, [r1, r3]
 8007642:	54c4      	strb	r4, [r0, r3]
 8007644:	3301      	adds	r3, #1
 8007646:	e7f8      	b.n	800763a <memcpy+0x4>

08007648 <_Balloc>:
 8007648:	b570      	push	{r4, r5, r6, lr}
 800764a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800764c:	0006      	movs	r6, r0
 800764e:	000c      	movs	r4, r1
 8007650:	2d00      	cmp	r5, #0
 8007652:	d10e      	bne.n	8007672 <_Balloc+0x2a>
 8007654:	2010      	movs	r0, #16
 8007656:	f7ff ffd9 	bl	800760c <malloc>
 800765a:	1e02      	subs	r2, r0, #0
 800765c:	6270      	str	r0, [r6, #36]	; 0x24
 800765e:	d104      	bne.n	800766a <_Balloc+0x22>
 8007660:	2166      	movs	r1, #102	; 0x66
 8007662:	4b19      	ldr	r3, [pc, #100]	; (80076c8 <_Balloc+0x80>)
 8007664:	4819      	ldr	r0, [pc, #100]	; (80076cc <_Balloc+0x84>)
 8007666:	f000 fdb7 	bl	80081d8 <__assert_func>
 800766a:	6045      	str	r5, [r0, #4]
 800766c:	6085      	str	r5, [r0, #8]
 800766e:	6005      	str	r5, [r0, #0]
 8007670:	60c5      	str	r5, [r0, #12]
 8007672:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8007674:	68eb      	ldr	r3, [r5, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d013      	beq.n	80076a2 <_Balloc+0x5a>
 800767a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800767c:	00a2      	lsls	r2, r4, #2
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	189b      	adds	r3, r3, r2
 8007682:	6818      	ldr	r0, [r3, #0]
 8007684:	2800      	cmp	r0, #0
 8007686:	d118      	bne.n	80076ba <_Balloc+0x72>
 8007688:	2101      	movs	r1, #1
 800768a:	000d      	movs	r5, r1
 800768c:	40a5      	lsls	r5, r4
 800768e:	1d6a      	adds	r2, r5, #5
 8007690:	0030      	movs	r0, r6
 8007692:	0092      	lsls	r2, r2, #2
 8007694:	f000 fb76 	bl	8007d84 <_calloc_r>
 8007698:	2800      	cmp	r0, #0
 800769a:	d00c      	beq.n	80076b6 <_Balloc+0x6e>
 800769c:	6044      	str	r4, [r0, #4]
 800769e:	6085      	str	r5, [r0, #8]
 80076a0:	e00d      	b.n	80076be <_Balloc+0x76>
 80076a2:	2221      	movs	r2, #33	; 0x21
 80076a4:	2104      	movs	r1, #4
 80076a6:	0030      	movs	r0, r6
 80076a8:	f000 fb6c 	bl	8007d84 <_calloc_r>
 80076ac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80076ae:	60e8      	str	r0, [r5, #12]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1e1      	bne.n	800767a <_Balloc+0x32>
 80076b6:	2000      	movs	r0, #0
 80076b8:	bd70      	pop	{r4, r5, r6, pc}
 80076ba:	6802      	ldr	r2, [r0, #0]
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	2300      	movs	r3, #0
 80076c0:	6103      	str	r3, [r0, #16]
 80076c2:	60c3      	str	r3, [r0, #12]
 80076c4:	e7f8      	b.n	80076b8 <_Balloc+0x70>
 80076c6:	46c0      	nop			; (mov r8, r8)
 80076c8:	08008f41 	.word	0x08008f41
 80076cc:	08008fc8 	.word	0x08008fc8

080076d0 <_Bfree>:
 80076d0:	b570      	push	{r4, r5, r6, lr}
 80076d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80076d4:	0005      	movs	r5, r0
 80076d6:	000c      	movs	r4, r1
 80076d8:	2e00      	cmp	r6, #0
 80076da:	d10e      	bne.n	80076fa <_Bfree+0x2a>
 80076dc:	2010      	movs	r0, #16
 80076de:	f7ff ff95 	bl	800760c <malloc>
 80076e2:	1e02      	subs	r2, r0, #0
 80076e4:	6268      	str	r0, [r5, #36]	; 0x24
 80076e6:	d104      	bne.n	80076f2 <_Bfree+0x22>
 80076e8:	218a      	movs	r1, #138	; 0x8a
 80076ea:	4b09      	ldr	r3, [pc, #36]	; (8007710 <_Bfree+0x40>)
 80076ec:	4809      	ldr	r0, [pc, #36]	; (8007714 <_Bfree+0x44>)
 80076ee:	f000 fd73 	bl	80081d8 <__assert_func>
 80076f2:	6046      	str	r6, [r0, #4]
 80076f4:	6086      	str	r6, [r0, #8]
 80076f6:	6006      	str	r6, [r0, #0]
 80076f8:	60c6      	str	r6, [r0, #12]
 80076fa:	2c00      	cmp	r4, #0
 80076fc:	d007      	beq.n	800770e <_Bfree+0x3e>
 80076fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007700:	6862      	ldr	r2, [r4, #4]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	0092      	lsls	r2, r2, #2
 8007706:	189b      	adds	r3, r3, r2
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	6022      	str	r2, [r4, #0]
 800770c:	601c      	str	r4, [r3, #0]
 800770e:	bd70      	pop	{r4, r5, r6, pc}
 8007710:	08008f41 	.word	0x08008f41
 8007714:	08008fc8 	.word	0x08008fc8

08007718 <__multadd>:
 8007718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800771a:	000e      	movs	r6, r1
 800771c:	9001      	str	r0, [sp, #4]
 800771e:	000c      	movs	r4, r1
 8007720:	001d      	movs	r5, r3
 8007722:	2000      	movs	r0, #0
 8007724:	690f      	ldr	r7, [r1, #16]
 8007726:	3614      	adds	r6, #20
 8007728:	6833      	ldr	r3, [r6, #0]
 800772a:	3001      	adds	r0, #1
 800772c:	b299      	uxth	r1, r3
 800772e:	4351      	muls	r1, r2
 8007730:	0c1b      	lsrs	r3, r3, #16
 8007732:	4353      	muls	r3, r2
 8007734:	1949      	adds	r1, r1, r5
 8007736:	0c0d      	lsrs	r5, r1, #16
 8007738:	195b      	adds	r3, r3, r5
 800773a:	0c1d      	lsrs	r5, r3, #16
 800773c:	b289      	uxth	r1, r1
 800773e:	041b      	lsls	r3, r3, #16
 8007740:	185b      	adds	r3, r3, r1
 8007742:	c608      	stmia	r6!, {r3}
 8007744:	4287      	cmp	r7, r0
 8007746:	dcef      	bgt.n	8007728 <__multadd+0x10>
 8007748:	2d00      	cmp	r5, #0
 800774a:	d022      	beq.n	8007792 <__multadd+0x7a>
 800774c:	68a3      	ldr	r3, [r4, #8]
 800774e:	42bb      	cmp	r3, r7
 8007750:	dc19      	bgt.n	8007786 <__multadd+0x6e>
 8007752:	6863      	ldr	r3, [r4, #4]
 8007754:	9801      	ldr	r0, [sp, #4]
 8007756:	1c59      	adds	r1, r3, #1
 8007758:	f7ff ff76 	bl	8007648 <_Balloc>
 800775c:	1e06      	subs	r6, r0, #0
 800775e:	d105      	bne.n	800776c <__multadd+0x54>
 8007760:	0002      	movs	r2, r0
 8007762:	21b5      	movs	r1, #181	; 0xb5
 8007764:	4b0c      	ldr	r3, [pc, #48]	; (8007798 <__multadd+0x80>)
 8007766:	480d      	ldr	r0, [pc, #52]	; (800779c <__multadd+0x84>)
 8007768:	f000 fd36 	bl	80081d8 <__assert_func>
 800776c:	0021      	movs	r1, r4
 800776e:	6923      	ldr	r3, [r4, #16]
 8007770:	310c      	adds	r1, #12
 8007772:	1c9a      	adds	r2, r3, #2
 8007774:	0092      	lsls	r2, r2, #2
 8007776:	300c      	adds	r0, #12
 8007778:	f7ff ff5d 	bl	8007636 <memcpy>
 800777c:	0021      	movs	r1, r4
 800777e:	9801      	ldr	r0, [sp, #4]
 8007780:	f7ff ffa6 	bl	80076d0 <_Bfree>
 8007784:	0034      	movs	r4, r6
 8007786:	1d3b      	adds	r3, r7, #4
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	18e3      	adds	r3, r4, r3
 800778c:	605d      	str	r5, [r3, #4]
 800778e:	1c7b      	adds	r3, r7, #1
 8007790:	6123      	str	r3, [r4, #16]
 8007792:	0020      	movs	r0, r4
 8007794:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007796:	46c0      	nop			; (mov r8, r8)
 8007798:	08008fb7 	.word	0x08008fb7
 800779c:	08008fc8 	.word	0x08008fc8

080077a0 <__hi0bits>:
 80077a0:	0003      	movs	r3, r0
 80077a2:	0c02      	lsrs	r2, r0, #16
 80077a4:	2000      	movs	r0, #0
 80077a6:	4282      	cmp	r2, r0
 80077a8:	d101      	bne.n	80077ae <__hi0bits+0xe>
 80077aa:	041b      	lsls	r3, r3, #16
 80077ac:	3010      	adds	r0, #16
 80077ae:	0e1a      	lsrs	r2, r3, #24
 80077b0:	d101      	bne.n	80077b6 <__hi0bits+0x16>
 80077b2:	3008      	adds	r0, #8
 80077b4:	021b      	lsls	r3, r3, #8
 80077b6:	0f1a      	lsrs	r2, r3, #28
 80077b8:	d101      	bne.n	80077be <__hi0bits+0x1e>
 80077ba:	3004      	adds	r0, #4
 80077bc:	011b      	lsls	r3, r3, #4
 80077be:	0f9a      	lsrs	r2, r3, #30
 80077c0:	d101      	bne.n	80077c6 <__hi0bits+0x26>
 80077c2:	3002      	adds	r0, #2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	db03      	blt.n	80077d2 <__hi0bits+0x32>
 80077ca:	3001      	adds	r0, #1
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	d400      	bmi.n	80077d2 <__hi0bits+0x32>
 80077d0:	2020      	movs	r0, #32
 80077d2:	4770      	bx	lr

080077d4 <__lo0bits>:
 80077d4:	6803      	ldr	r3, [r0, #0]
 80077d6:	0002      	movs	r2, r0
 80077d8:	2107      	movs	r1, #7
 80077da:	0018      	movs	r0, r3
 80077dc:	4008      	ands	r0, r1
 80077de:	420b      	tst	r3, r1
 80077e0:	d00d      	beq.n	80077fe <__lo0bits+0x2a>
 80077e2:	3906      	subs	r1, #6
 80077e4:	2000      	movs	r0, #0
 80077e6:	420b      	tst	r3, r1
 80077e8:	d105      	bne.n	80077f6 <__lo0bits+0x22>
 80077ea:	3002      	adds	r0, #2
 80077ec:	4203      	tst	r3, r0
 80077ee:	d003      	beq.n	80077f8 <__lo0bits+0x24>
 80077f0:	40cb      	lsrs	r3, r1
 80077f2:	0008      	movs	r0, r1
 80077f4:	6013      	str	r3, [r2, #0]
 80077f6:	4770      	bx	lr
 80077f8:	089b      	lsrs	r3, r3, #2
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	e7fb      	b.n	80077f6 <__lo0bits+0x22>
 80077fe:	b299      	uxth	r1, r3
 8007800:	2900      	cmp	r1, #0
 8007802:	d101      	bne.n	8007808 <__lo0bits+0x34>
 8007804:	2010      	movs	r0, #16
 8007806:	0c1b      	lsrs	r3, r3, #16
 8007808:	b2d9      	uxtb	r1, r3
 800780a:	2900      	cmp	r1, #0
 800780c:	d101      	bne.n	8007812 <__lo0bits+0x3e>
 800780e:	3008      	adds	r0, #8
 8007810:	0a1b      	lsrs	r3, r3, #8
 8007812:	0719      	lsls	r1, r3, #28
 8007814:	d101      	bne.n	800781a <__lo0bits+0x46>
 8007816:	3004      	adds	r0, #4
 8007818:	091b      	lsrs	r3, r3, #4
 800781a:	0799      	lsls	r1, r3, #30
 800781c:	d101      	bne.n	8007822 <__lo0bits+0x4e>
 800781e:	3002      	adds	r0, #2
 8007820:	089b      	lsrs	r3, r3, #2
 8007822:	07d9      	lsls	r1, r3, #31
 8007824:	d4e9      	bmi.n	80077fa <__lo0bits+0x26>
 8007826:	3001      	adds	r0, #1
 8007828:	085b      	lsrs	r3, r3, #1
 800782a:	d1e6      	bne.n	80077fa <__lo0bits+0x26>
 800782c:	2020      	movs	r0, #32
 800782e:	e7e2      	b.n	80077f6 <__lo0bits+0x22>

08007830 <__i2b>:
 8007830:	b510      	push	{r4, lr}
 8007832:	000c      	movs	r4, r1
 8007834:	2101      	movs	r1, #1
 8007836:	f7ff ff07 	bl	8007648 <_Balloc>
 800783a:	2800      	cmp	r0, #0
 800783c:	d106      	bne.n	800784c <__i2b+0x1c>
 800783e:	21a0      	movs	r1, #160	; 0xa0
 8007840:	0002      	movs	r2, r0
 8007842:	4b04      	ldr	r3, [pc, #16]	; (8007854 <__i2b+0x24>)
 8007844:	4804      	ldr	r0, [pc, #16]	; (8007858 <__i2b+0x28>)
 8007846:	0049      	lsls	r1, r1, #1
 8007848:	f000 fcc6 	bl	80081d8 <__assert_func>
 800784c:	2301      	movs	r3, #1
 800784e:	6144      	str	r4, [r0, #20]
 8007850:	6103      	str	r3, [r0, #16]
 8007852:	bd10      	pop	{r4, pc}
 8007854:	08008fb7 	.word	0x08008fb7
 8007858:	08008fc8 	.word	0x08008fc8

0800785c <__multiply>:
 800785c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800785e:	690b      	ldr	r3, [r1, #16]
 8007860:	0014      	movs	r4, r2
 8007862:	6912      	ldr	r2, [r2, #16]
 8007864:	000d      	movs	r5, r1
 8007866:	b089      	sub	sp, #36	; 0x24
 8007868:	4293      	cmp	r3, r2
 800786a:	da01      	bge.n	8007870 <__multiply+0x14>
 800786c:	0025      	movs	r5, r4
 800786e:	000c      	movs	r4, r1
 8007870:	692f      	ldr	r7, [r5, #16]
 8007872:	6926      	ldr	r6, [r4, #16]
 8007874:	6869      	ldr	r1, [r5, #4]
 8007876:	19bb      	adds	r3, r7, r6
 8007878:	9302      	str	r3, [sp, #8]
 800787a:	68ab      	ldr	r3, [r5, #8]
 800787c:	19ba      	adds	r2, r7, r6
 800787e:	4293      	cmp	r3, r2
 8007880:	da00      	bge.n	8007884 <__multiply+0x28>
 8007882:	3101      	adds	r1, #1
 8007884:	f7ff fee0 	bl	8007648 <_Balloc>
 8007888:	9001      	str	r0, [sp, #4]
 800788a:	2800      	cmp	r0, #0
 800788c:	d106      	bne.n	800789c <__multiply+0x40>
 800788e:	215e      	movs	r1, #94	; 0x5e
 8007890:	0002      	movs	r2, r0
 8007892:	4b48      	ldr	r3, [pc, #288]	; (80079b4 <__multiply+0x158>)
 8007894:	4848      	ldr	r0, [pc, #288]	; (80079b8 <__multiply+0x15c>)
 8007896:	31ff      	adds	r1, #255	; 0xff
 8007898:	f000 fc9e 	bl	80081d8 <__assert_func>
 800789c:	9b01      	ldr	r3, [sp, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	3314      	adds	r3, #20
 80078a2:	469c      	mov	ip, r3
 80078a4:	19bb      	adds	r3, r7, r6
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4463      	add	r3, ip
 80078aa:	9303      	str	r3, [sp, #12]
 80078ac:	4663      	mov	r3, ip
 80078ae:	9903      	ldr	r1, [sp, #12]
 80078b0:	428b      	cmp	r3, r1
 80078b2:	d32c      	bcc.n	800790e <__multiply+0xb2>
 80078b4:	002b      	movs	r3, r5
 80078b6:	0022      	movs	r2, r4
 80078b8:	3314      	adds	r3, #20
 80078ba:	00bf      	lsls	r7, r7, #2
 80078bc:	3214      	adds	r2, #20
 80078be:	9306      	str	r3, [sp, #24]
 80078c0:	00b6      	lsls	r6, r6, #2
 80078c2:	19db      	adds	r3, r3, r7
 80078c4:	9304      	str	r3, [sp, #16]
 80078c6:	1993      	adds	r3, r2, r6
 80078c8:	9307      	str	r3, [sp, #28]
 80078ca:	2304      	movs	r3, #4
 80078cc:	9305      	str	r3, [sp, #20]
 80078ce:	002b      	movs	r3, r5
 80078d0:	9904      	ldr	r1, [sp, #16]
 80078d2:	3315      	adds	r3, #21
 80078d4:	9200      	str	r2, [sp, #0]
 80078d6:	4299      	cmp	r1, r3
 80078d8:	d305      	bcc.n	80078e6 <__multiply+0x8a>
 80078da:	1b4b      	subs	r3, r1, r5
 80078dc:	3b15      	subs	r3, #21
 80078de:	089b      	lsrs	r3, r3, #2
 80078e0:	3301      	adds	r3, #1
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	9305      	str	r3, [sp, #20]
 80078e6:	9b07      	ldr	r3, [sp, #28]
 80078e8:	9a00      	ldr	r2, [sp, #0]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d311      	bcc.n	8007912 <__multiply+0xb6>
 80078ee:	9b02      	ldr	r3, [sp, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	dd06      	ble.n	8007902 <__multiply+0xa6>
 80078f4:	9b03      	ldr	r3, [sp, #12]
 80078f6:	3b04      	subs	r3, #4
 80078f8:	9303      	str	r3, [sp, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d054      	beq.n	80079ac <__multiply+0x150>
 8007902:	9b01      	ldr	r3, [sp, #4]
 8007904:	9a02      	ldr	r2, [sp, #8]
 8007906:	0018      	movs	r0, r3
 8007908:	611a      	str	r2, [r3, #16]
 800790a:	b009      	add	sp, #36	; 0x24
 800790c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800790e:	c304      	stmia	r3!, {r2}
 8007910:	e7cd      	b.n	80078ae <__multiply+0x52>
 8007912:	9b00      	ldr	r3, [sp, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	b298      	uxth	r0, r3
 8007918:	2800      	cmp	r0, #0
 800791a:	d01c      	beq.n	8007956 <__multiply+0xfa>
 800791c:	4667      	mov	r7, ip
 800791e:	2400      	movs	r4, #0
 8007920:	9e06      	ldr	r6, [sp, #24]
 8007922:	ce02      	ldmia	r6!, {r1}
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	b28b      	uxth	r3, r1
 8007928:	4343      	muls	r3, r0
 800792a:	0c09      	lsrs	r1, r1, #16
 800792c:	4341      	muls	r1, r0
 800792e:	b292      	uxth	r2, r2
 8007930:	189b      	adds	r3, r3, r2
 8007932:	191b      	adds	r3, r3, r4
 8007934:	000c      	movs	r4, r1
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	0c11      	lsrs	r1, r2, #16
 800793a:	1861      	adds	r1, r4, r1
 800793c:	0c1c      	lsrs	r4, r3, #16
 800793e:	1909      	adds	r1, r1, r4
 8007940:	0c0c      	lsrs	r4, r1, #16
 8007942:	b29b      	uxth	r3, r3
 8007944:	0409      	lsls	r1, r1, #16
 8007946:	430b      	orrs	r3, r1
 8007948:	c708      	stmia	r7!, {r3}
 800794a:	9b04      	ldr	r3, [sp, #16]
 800794c:	42b3      	cmp	r3, r6
 800794e:	d8e8      	bhi.n	8007922 <__multiply+0xc6>
 8007950:	4663      	mov	r3, ip
 8007952:	9a05      	ldr	r2, [sp, #20]
 8007954:	509c      	str	r4, [r3, r2]
 8007956:	9b00      	ldr	r3, [sp, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	0c1e      	lsrs	r6, r3, #16
 800795c:	d020      	beq.n	80079a0 <__multiply+0x144>
 800795e:	4663      	mov	r3, ip
 8007960:	002c      	movs	r4, r5
 8007962:	4660      	mov	r0, ip
 8007964:	2700      	movs	r7, #0
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	3414      	adds	r4, #20
 800796a:	6822      	ldr	r2, [r4, #0]
 800796c:	b29b      	uxth	r3, r3
 800796e:	b291      	uxth	r1, r2
 8007970:	4371      	muls	r1, r6
 8007972:	6802      	ldr	r2, [r0, #0]
 8007974:	0c12      	lsrs	r2, r2, #16
 8007976:	1889      	adds	r1, r1, r2
 8007978:	19cf      	adds	r7, r1, r7
 800797a:	0439      	lsls	r1, r7, #16
 800797c:	430b      	orrs	r3, r1
 800797e:	6003      	str	r3, [r0, #0]
 8007980:	cc02      	ldmia	r4!, {r1}
 8007982:	6843      	ldr	r3, [r0, #4]
 8007984:	0c09      	lsrs	r1, r1, #16
 8007986:	4371      	muls	r1, r6
 8007988:	b29b      	uxth	r3, r3
 800798a:	0c3f      	lsrs	r7, r7, #16
 800798c:	18cb      	adds	r3, r1, r3
 800798e:	9a04      	ldr	r2, [sp, #16]
 8007990:	19db      	adds	r3, r3, r7
 8007992:	0c1f      	lsrs	r7, r3, #16
 8007994:	3004      	adds	r0, #4
 8007996:	42a2      	cmp	r2, r4
 8007998:	d8e7      	bhi.n	800796a <__multiply+0x10e>
 800799a:	4662      	mov	r2, ip
 800799c:	9905      	ldr	r1, [sp, #20]
 800799e:	5053      	str	r3, [r2, r1]
 80079a0:	9b00      	ldr	r3, [sp, #0]
 80079a2:	3304      	adds	r3, #4
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	2304      	movs	r3, #4
 80079a8:	449c      	add	ip, r3
 80079aa:	e79c      	b.n	80078e6 <__multiply+0x8a>
 80079ac:	9b02      	ldr	r3, [sp, #8]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	9302      	str	r3, [sp, #8]
 80079b2:	e79c      	b.n	80078ee <__multiply+0x92>
 80079b4:	08008fb7 	.word	0x08008fb7
 80079b8:	08008fc8 	.word	0x08008fc8

080079bc <__pow5mult>:
 80079bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079be:	2303      	movs	r3, #3
 80079c0:	0015      	movs	r5, r2
 80079c2:	0007      	movs	r7, r0
 80079c4:	000e      	movs	r6, r1
 80079c6:	401a      	ands	r2, r3
 80079c8:	421d      	tst	r5, r3
 80079ca:	d008      	beq.n	80079de <__pow5mult+0x22>
 80079cc:	4925      	ldr	r1, [pc, #148]	; (8007a64 <__pow5mult+0xa8>)
 80079ce:	3a01      	subs	r2, #1
 80079d0:	0092      	lsls	r2, r2, #2
 80079d2:	5852      	ldr	r2, [r2, r1]
 80079d4:	2300      	movs	r3, #0
 80079d6:	0031      	movs	r1, r6
 80079d8:	f7ff fe9e 	bl	8007718 <__multadd>
 80079dc:	0006      	movs	r6, r0
 80079de:	10ad      	asrs	r5, r5, #2
 80079e0:	d03d      	beq.n	8007a5e <__pow5mult+0xa2>
 80079e2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80079e4:	2c00      	cmp	r4, #0
 80079e6:	d10f      	bne.n	8007a08 <__pow5mult+0x4c>
 80079e8:	2010      	movs	r0, #16
 80079ea:	f7ff fe0f 	bl	800760c <malloc>
 80079ee:	1e02      	subs	r2, r0, #0
 80079f0:	6278      	str	r0, [r7, #36]	; 0x24
 80079f2:	d105      	bne.n	8007a00 <__pow5mult+0x44>
 80079f4:	21d7      	movs	r1, #215	; 0xd7
 80079f6:	4b1c      	ldr	r3, [pc, #112]	; (8007a68 <__pow5mult+0xac>)
 80079f8:	481c      	ldr	r0, [pc, #112]	; (8007a6c <__pow5mult+0xb0>)
 80079fa:	0049      	lsls	r1, r1, #1
 80079fc:	f000 fbec 	bl	80081d8 <__assert_func>
 8007a00:	6044      	str	r4, [r0, #4]
 8007a02:	6084      	str	r4, [r0, #8]
 8007a04:	6004      	str	r4, [r0, #0]
 8007a06:	60c4      	str	r4, [r0, #12]
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0a:	689c      	ldr	r4, [r3, #8]
 8007a0c:	9301      	str	r3, [sp, #4]
 8007a0e:	2c00      	cmp	r4, #0
 8007a10:	d108      	bne.n	8007a24 <__pow5mult+0x68>
 8007a12:	0038      	movs	r0, r7
 8007a14:	4916      	ldr	r1, [pc, #88]	; (8007a70 <__pow5mult+0xb4>)
 8007a16:	f7ff ff0b 	bl	8007830 <__i2b>
 8007a1a:	9b01      	ldr	r3, [sp, #4]
 8007a1c:	0004      	movs	r4, r0
 8007a1e:	6098      	str	r0, [r3, #8]
 8007a20:	2300      	movs	r3, #0
 8007a22:	6003      	str	r3, [r0, #0]
 8007a24:	2301      	movs	r3, #1
 8007a26:	421d      	tst	r5, r3
 8007a28:	d00a      	beq.n	8007a40 <__pow5mult+0x84>
 8007a2a:	0031      	movs	r1, r6
 8007a2c:	0022      	movs	r2, r4
 8007a2e:	0038      	movs	r0, r7
 8007a30:	f7ff ff14 	bl	800785c <__multiply>
 8007a34:	0031      	movs	r1, r6
 8007a36:	9001      	str	r0, [sp, #4]
 8007a38:	0038      	movs	r0, r7
 8007a3a:	f7ff fe49 	bl	80076d0 <_Bfree>
 8007a3e:	9e01      	ldr	r6, [sp, #4]
 8007a40:	106d      	asrs	r5, r5, #1
 8007a42:	d00c      	beq.n	8007a5e <__pow5mult+0xa2>
 8007a44:	6820      	ldr	r0, [r4, #0]
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d107      	bne.n	8007a5a <__pow5mult+0x9e>
 8007a4a:	0022      	movs	r2, r4
 8007a4c:	0021      	movs	r1, r4
 8007a4e:	0038      	movs	r0, r7
 8007a50:	f7ff ff04 	bl	800785c <__multiply>
 8007a54:	2300      	movs	r3, #0
 8007a56:	6020      	str	r0, [r4, #0]
 8007a58:	6003      	str	r3, [r0, #0]
 8007a5a:	0004      	movs	r4, r0
 8007a5c:	e7e2      	b.n	8007a24 <__pow5mult+0x68>
 8007a5e:	0030      	movs	r0, r6
 8007a60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a62:	46c0      	nop			; (mov r8, r8)
 8007a64:	08009118 	.word	0x08009118
 8007a68:	08008f41 	.word	0x08008f41
 8007a6c:	08008fc8 	.word	0x08008fc8
 8007a70:	00000271 	.word	0x00000271

08007a74 <__lshift>:
 8007a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a76:	000c      	movs	r4, r1
 8007a78:	0017      	movs	r7, r2
 8007a7a:	6923      	ldr	r3, [r4, #16]
 8007a7c:	1155      	asrs	r5, r2, #5
 8007a7e:	b087      	sub	sp, #28
 8007a80:	18eb      	adds	r3, r5, r3
 8007a82:	9302      	str	r3, [sp, #8]
 8007a84:	3301      	adds	r3, #1
 8007a86:	9301      	str	r3, [sp, #4]
 8007a88:	6849      	ldr	r1, [r1, #4]
 8007a8a:	68a3      	ldr	r3, [r4, #8]
 8007a8c:	9004      	str	r0, [sp, #16]
 8007a8e:	9a01      	ldr	r2, [sp, #4]
 8007a90:	4293      	cmp	r3, r2
 8007a92:	db11      	blt.n	8007ab8 <__lshift+0x44>
 8007a94:	9804      	ldr	r0, [sp, #16]
 8007a96:	f7ff fdd7 	bl	8007648 <_Balloc>
 8007a9a:	0002      	movs	r2, r0
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	3214      	adds	r2, #20
 8007aa0:	0006      	movs	r6, r0
 8007aa2:	0011      	movs	r1, r2
 8007aa4:	9203      	str	r2, [sp, #12]
 8007aa6:	4298      	cmp	r0, r3
 8007aa8:	d10d      	bne.n	8007ac6 <__lshift+0x52>
 8007aaa:	21da      	movs	r1, #218	; 0xda
 8007aac:	0002      	movs	r2, r0
 8007aae:	4b27      	ldr	r3, [pc, #156]	; (8007b4c <__lshift+0xd8>)
 8007ab0:	4827      	ldr	r0, [pc, #156]	; (8007b50 <__lshift+0xdc>)
 8007ab2:	31ff      	adds	r1, #255	; 0xff
 8007ab4:	f000 fb90 	bl	80081d8 <__assert_func>
 8007ab8:	3101      	adds	r1, #1
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	e7e7      	b.n	8007a8e <__lshift+0x1a>
 8007abe:	2200      	movs	r2, #0
 8007ac0:	0098      	lsls	r0, r3, #2
 8007ac2:	500a      	str	r2, [r1, r0]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	42ab      	cmp	r3, r5
 8007ac8:	dbf9      	blt.n	8007abe <__lshift+0x4a>
 8007aca:	43eb      	mvns	r3, r5
 8007acc:	17db      	asrs	r3, r3, #31
 8007ace:	401d      	ands	r5, r3
 8007ad0:	9b03      	ldr	r3, [sp, #12]
 8007ad2:	00ad      	lsls	r5, r5, #2
 8007ad4:	211f      	movs	r1, #31
 8007ad6:	0038      	movs	r0, r7
 8007ad8:	195d      	adds	r5, r3, r5
 8007ada:	0023      	movs	r3, r4
 8007adc:	6922      	ldr	r2, [r4, #16]
 8007ade:	3314      	adds	r3, #20
 8007ae0:	0092      	lsls	r2, r2, #2
 8007ae2:	4008      	ands	r0, r1
 8007ae4:	4684      	mov	ip, r0
 8007ae6:	189a      	adds	r2, r3, r2
 8007ae8:	420f      	tst	r7, r1
 8007aea:	d02a      	beq.n	8007b42 <__lshift+0xce>
 8007aec:	3101      	adds	r1, #1
 8007aee:	1a09      	subs	r1, r1, r0
 8007af0:	9105      	str	r1, [sp, #20]
 8007af2:	2100      	movs	r1, #0
 8007af4:	9503      	str	r5, [sp, #12]
 8007af6:	4667      	mov	r7, ip
 8007af8:	6818      	ldr	r0, [r3, #0]
 8007afa:	40b8      	lsls	r0, r7
 8007afc:	4301      	orrs	r1, r0
 8007afe:	9803      	ldr	r0, [sp, #12]
 8007b00:	c002      	stmia	r0!, {r1}
 8007b02:	cb02      	ldmia	r3!, {r1}
 8007b04:	9003      	str	r0, [sp, #12]
 8007b06:	9805      	ldr	r0, [sp, #20]
 8007b08:	40c1      	lsrs	r1, r0
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d8f3      	bhi.n	8007af6 <__lshift+0x82>
 8007b0e:	0020      	movs	r0, r4
 8007b10:	3015      	adds	r0, #21
 8007b12:	2304      	movs	r3, #4
 8007b14:	4282      	cmp	r2, r0
 8007b16:	d304      	bcc.n	8007b22 <__lshift+0xae>
 8007b18:	1b13      	subs	r3, r2, r4
 8007b1a:	3b15      	subs	r3, #21
 8007b1c:	089b      	lsrs	r3, r3, #2
 8007b1e:	3301      	adds	r3, #1
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	50e9      	str	r1, [r5, r3]
 8007b24:	2900      	cmp	r1, #0
 8007b26:	d002      	beq.n	8007b2e <__lshift+0xba>
 8007b28:	9b02      	ldr	r3, [sp, #8]
 8007b2a:	3302      	adds	r3, #2
 8007b2c:	9301      	str	r3, [sp, #4]
 8007b2e:	9b01      	ldr	r3, [sp, #4]
 8007b30:	9804      	ldr	r0, [sp, #16]
 8007b32:	3b01      	subs	r3, #1
 8007b34:	0021      	movs	r1, r4
 8007b36:	6133      	str	r3, [r6, #16]
 8007b38:	f7ff fdca 	bl	80076d0 <_Bfree>
 8007b3c:	0030      	movs	r0, r6
 8007b3e:	b007      	add	sp, #28
 8007b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b42:	cb02      	ldmia	r3!, {r1}
 8007b44:	c502      	stmia	r5!, {r1}
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d8fb      	bhi.n	8007b42 <__lshift+0xce>
 8007b4a:	e7f0      	b.n	8007b2e <__lshift+0xba>
 8007b4c:	08008fb7 	.word	0x08008fb7
 8007b50:	08008fc8 	.word	0x08008fc8

08007b54 <__mcmp>:
 8007b54:	6902      	ldr	r2, [r0, #16]
 8007b56:	690b      	ldr	r3, [r1, #16]
 8007b58:	b530      	push	{r4, r5, lr}
 8007b5a:	0004      	movs	r4, r0
 8007b5c:	1ad0      	subs	r0, r2, r3
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d10d      	bne.n	8007b7e <__mcmp+0x2a>
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	3414      	adds	r4, #20
 8007b66:	3114      	adds	r1, #20
 8007b68:	18e2      	adds	r2, r4, r3
 8007b6a:	18c9      	adds	r1, r1, r3
 8007b6c:	3a04      	subs	r2, #4
 8007b6e:	3904      	subs	r1, #4
 8007b70:	6815      	ldr	r5, [r2, #0]
 8007b72:	680b      	ldr	r3, [r1, #0]
 8007b74:	429d      	cmp	r5, r3
 8007b76:	d003      	beq.n	8007b80 <__mcmp+0x2c>
 8007b78:	2001      	movs	r0, #1
 8007b7a:	429d      	cmp	r5, r3
 8007b7c:	d303      	bcc.n	8007b86 <__mcmp+0x32>
 8007b7e:	bd30      	pop	{r4, r5, pc}
 8007b80:	4294      	cmp	r4, r2
 8007b82:	d3f3      	bcc.n	8007b6c <__mcmp+0x18>
 8007b84:	e7fb      	b.n	8007b7e <__mcmp+0x2a>
 8007b86:	4240      	negs	r0, r0
 8007b88:	e7f9      	b.n	8007b7e <__mcmp+0x2a>
	...

08007b8c <__mdiff>:
 8007b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b8e:	000e      	movs	r6, r1
 8007b90:	0007      	movs	r7, r0
 8007b92:	0011      	movs	r1, r2
 8007b94:	0030      	movs	r0, r6
 8007b96:	b087      	sub	sp, #28
 8007b98:	0014      	movs	r4, r2
 8007b9a:	f7ff ffdb 	bl	8007b54 <__mcmp>
 8007b9e:	1e05      	subs	r5, r0, #0
 8007ba0:	d110      	bne.n	8007bc4 <__mdiff+0x38>
 8007ba2:	0001      	movs	r1, r0
 8007ba4:	0038      	movs	r0, r7
 8007ba6:	f7ff fd4f 	bl	8007648 <_Balloc>
 8007baa:	1e02      	subs	r2, r0, #0
 8007bac:	d104      	bne.n	8007bb8 <__mdiff+0x2c>
 8007bae:	4b40      	ldr	r3, [pc, #256]	; (8007cb0 <__mdiff+0x124>)
 8007bb0:	4940      	ldr	r1, [pc, #256]	; (8007cb4 <__mdiff+0x128>)
 8007bb2:	4841      	ldr	r0, [pc, #260]	; (8007cb8 <__mdiff+0x12c>)
 8007bb4:	f000 fb10 	bl	80081d8 <__assert_func>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	6145      	str	r5, [r0, #20]
 8007bbc:	6103      	str	r3, [r0, #16]
 8007bbe:	0010      	movs	r0, r2
 8007bc0:	b007      	add	sp, #28
 8007bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	9301      	str	r3, [sp, #4]
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	db04      	blt.n	8007bd6 <__mdiff+0x4a>
 8007bcc:	0023      	movs	r3, r4
 8007bce:	0034      	movs	r4, r6
 8007bd0:	001e      	movs	r6, r3
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	9301      	str	r3, [sp, #4]
 8007bd6:	0038      	movs	r0, r7
 8007bd8:	6861      	ldr	r1, [r4, #4]
 8007bda:	f7ff fd35 	bl	8007648 <_Balloc>
 8007bde:	1e02      	subs	r2, r0, #0
 8007be0:	d103      	bne.n	8007bea <__mdiff+0x5e>
 8007be2:	2190      	movs	r1, #144	; 0x90
 8007be4:	4b32      	ldr	r3, [pc, #200]	; (8007cb0 <__mdiff+0x124>)
 8007be6:	0089      	lsls	r1, r1, #2
 8007be8:	e7e3      	b.n	8007bb2 <__mdiff+0x26>
 8007bea:	9b01      	ldr	r3, [sp, #4]
 8007bec:	2700      	movs	r7, #0
 8007bee:	60c3      	str	r3, [r0, #12]
 8007bf0:	6920      	ldr	r0, [r4, #16]
 8007bf2:	3414      	adds	r4, #20
 8007bf4:	9401      	str	r4, [sp, #4]
 8007bf6:	9b01      	ldr	r3, [sp, #4]
 8007bf8:	0084      	lsls	r4, r0, #2
 8007bfa:	191b      	adds	r3, r3, r4
 8007bfc:	0034      	movs	r4, r6
 8007bfe:	9302      	str	r3, [sp, #8]
 8007c00:	6933      	ldr	r3, [r6, #16]
 8007c02:	3414      	adds	r4, #20
 8007c04:	0099      	lsls	r1, r3, #2
 8007c06:	1863      	adds	r3, r4, r1
 8007c08:	9303      	str	r3, [sp, #12]
 8007c0a:	0013      	movs	r3, r2
 8007c0c:	3314      	adds	r3, #20
 8007c0e:	469c      	mov	ip, r3
 8007c10:	9305      	str	r3, [sp, #20]
 8007c12:	9b01      	ldr	r3, [sp, #4]
 8007c14:	9304      	str	r3, [sp, #16]
 8007c16:	9b04      	ldr	r3, [sp, #16]
 8007c18:	cc02      	ldmia	r4!, {r1}
 8007c1a:	cb20      	ldmia	r3!, {r5}
 8007c1c:	9304      	str	r3, [sp, #16]
 8007c1e:	b2ab      	uxth	r3, r5
 8007c20:	19df      	adds	r7, r3, r7
 8007c22:	b28b      	uxth	r3, r1
 8007c24:	1afb      	subs	r3, r7, r3
 8007c26:	0c2d      	lsrs	r5, r5, #16
 8007c28:	0c09      	lsrs	r1, r1, #16
 8007c2a:	1a69      	subs	r1, r5, r1
 8007c2c:	141d      	asrs	r5, r3, #16
 8007c2e:	1949      	adds	r1, r1, r5
 8007c30:	140f      	asrs	r7, r1, #16
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	0409      	lsls	r1, r1, #16
 8007c36:	430b      	orrs	r3, r1
 8007c38:	4661      	mov	r1, ip
 8007c3a:	c108      	stmia	r1!, {r3}
 8007c3c:	9b03      	ldr	r3, [sp, #12]
 8007c3e:	468c      	mov	ip, r1
 8007c40:	42a3      	cmp	r3, r4
 8007c42:	d8e8      	bhi.n	8007c16 <__mdiff+0x8a>
 8007c44:	0031      	movs	r1, r6
 8007c46:	9c03      	ldr	r4, [sp, #12]
 8007c48:	3115      	adds	r1, #21
 8007c4a:	2304      	movs	r3, #4
 8007c4c:	428c      	cmp	r4, r1
 8007c4e:	d304      	bcc.n	8007c5a <__mdiff+0xce>
 8007c50:	1ba3      	subs	r3, r4, r6
 8007c52:	3b15      	subs	r3, #21
 8007c54:	089b      	lsrs	r3, r3, #2
 8007c56:	3301      	adds	r3, #1
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	9901      	ldr	r1, [sp, #4]
 8007c5c:	18cc      	adds	r4, r1, r3
 8007c5e:	9905      	ldr	r1, [sp, #20]
 8007c60:	0026      	movs	r6, r4
 8007c62:	18cb      	adds	r3, r1, r3
 8007c64:	469c      	mov	ip, r3
 8007c66:	9902      	ldr	r1, [sp, #8]
 8007c68:	428e      	cmp	r6, r1
 8007c6a:	d310      	bcc.n	8007c8e <__mdiff+0x102>
 8007c6c:	9e02      	ldr	r6, [sp, #8]
 8007c6e:	1ee5      	subs	r5, r4, #3
 8007c70:	2100      	movs	r1, #0
 8007c72:	42ae      	cmp	r6, r5
 8007c74:	d304      	bcc.n	8007c80 <__mdiff+0xf4>
 8007c76:	0031      	movs	r1, r6
 8007c78:	3103      	adds	r1, #3
 8007c7a:	1b09      	subs	r1, r1, r4
 8007c7c:	0889      	lsrs	r1, r1, #2
 8007c7e:	0089      	lsls	r1, r1, #2
 8007c80:	185b      	adds	r3, r3, r1
 8007c82:	3b04      	subs	r3, #4
 8007c84:	6819      	ldr	r1, [r3, #0]
 8007c86:	2900      	cmp	r1, #0
 8007c88:	d00f      	beq.n	8007caa <__mdiff+0x11e>
 8007c8a:	6110      	str	r0, [r2, #16]
 8007c8c:	e797      	b.n	8007bbe <__mdiff+0x32>
 8007c8e:	ce02      	ldmia	r6!, {r1}
 8007c90:	b28d      	uxth	r5, r1
 8007c92:	19ed      	adds	r5, r5, r7
 8007c94:	0c0f      	lsrs	r7, r1, #16
 8007c96:	1429      	asrs	r1, r5, #16
 8007c98:	1879      	adds	r1, r7, r1
 8007c9a:	140f      	asrs	r7, r1, #16
 8007c9c:	b2ad      	uxth	r5, r5
 8007c9e:	0409      	lsls	r1, r1, #16
 8007ca0:	430d      	orrs	r5, r1
 8007ca2:	4661      	mov	r1, ip
 8007ca4:	c120      	stmia	r1!, {r5}
 8007ca6:	468c      	mov	ip, r1
 8007ca8:	e7dd      	b.n	8007c66 <__mdiff+0xda>
 8007caa:	3801      	subs	r0, #1
 8007cac:	e7e9      	b.n	8007c82 <__mdiff+0xf6>
 8007cae:	46c0      	nop			; (mov r8, r8)
 8007cb0:	08008fb7 	.word	0x08008fb7
 8007cb4:	00000232 	.word	0x00000232
 8007cb8:	08008fc8 	.word	0x08008fc8

08007cbc <__d2b>:
 8007cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	0014      	movs	r4, r2
 8007cc2:	001e      	movs	r6, r3
 8007cc4:	9f08      	ldr	r7, [sp, #32]
 8007cc6:	f7ff fcbf 	bl	8007648 <_Balloc>
 8007cca:	1e05      	subs	r5, r0, #0
 8007ccc:	d105      	bne.n	8007cda <__d2b+0x1e>
 8007cce:	0002      	movs	r2, r0
 8007cd0:	4b26      	ldr	r3, [pc, #152]	; (8007d6c <__d2b+0xb0>)
 8007cd2:	4927      	ldr	r1, [pc, #156]	; (8007d70 <__d2b+0xb4>)
 8007cd4:	4827      	ldr	r0, [pc, #156]	; (8007d74 <__d2b+0xb8>)
 8007cd6:	f000 fa7f 	bl	80081d8 <__assert_func>
 8007cda:	0333      	lsls	r3, r6, #12
 8007cdc:	0076      	lsls	r6, r6, #1
 8007cde:	0b1b      	lsrs	r3, r3, #12
 8007ce0:	0d76      	lsrs	r6, r6, #21
 8007ce2:	d124      	bne.n	8007d2e <__d2b+0x72>
 8007ce4:	9301      	str	r3, [sp, #4]
 8007ce6:	2c00      	cmp	r4, #0
 8007ce8:	d027      	beq.n	8007d3a <__d2b+0x7e>
 8007cea:	4668      	mov	r0, sp
 8007cec:	9400      	str	r4, [sp, #0]
 8007cee:	f7ff fd71 	bl	80077d4 <__lo0bits>
 8007cf2:	9c00      	ldr	r4, [sp, #0]
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	d01e      	beq.n	8007d36 <__d2b+0x7a>
 8007cf8:	9b01      	ldr	r3, [sp, #4]
 8007cfa:	2120      	movs	r1, #32
 8007cfc:	001a      	movs	r2, r3
 8007cfe:	1a09      	subs	r1, r1, r0
 8007d00:	408a      	lsls	r2, r1
 8007d02:	40c3      	lsrs	r3, r0
 8007d04:	4322      	orrs	r2, r4
 8007d06:	616a      	str	r2, [r5, #20]
 8007d08:	9301      	str	r3, [sp, #4]
 8007d0a:	9c01      	ldr	r4, [sp, #4]
 8007d0c:	61ac      	str	r4, [r5, #24]
 8007d0e:	1e63      	subs	r3, r4, #1
 8007d10:	419c      	sbcs	r4, r3
 8007d12:	3401      	adds	r4, #1
 8007d14:	612c      	str	r4, [r5, #16]
 8007d16:	2e00      	cmp	r6, #0
 8007d18:	d018      	beq.n	8007d4c <__d2b+0x90>
 8007d1a:	4b17      	ldr	r3, [pc, #92]	; (8007d78 <__d2b+0xbc>)
 8007d1c:	18f6      	adds	r6, r6, r3
 8007d1e:	2335      	movs	r3, #53	; 0x35
 8007d20:	1836      	adds	r6, r6, r0
 8007d22:	1a18      	subs	r0, r3, r0
 8007d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d26:	603e      	str	r6, [r7, #0]
 8007d28:	6018      	str	r0, [r3, #0]
 8007d2a:	0028      	movs	r0, r5
 8007d2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d2e:	2280      	movs	r2, #128	; 0x80
 8007d30:	0352      	lsls	r2, r2, #13
 8007d32:	4313      	orrs	r3, r2
 8007d34:	e7d6      	b.n	8007ce4 <__d2b+0x28>
 8007d36:	616c      	str	r4, [r5, #20]
 8007d38:	e7e7      	b.n	8007d0a <__d2b+0x4e>
 8007d3a:	a801      	add	r0, sp, #4
 8007d3c:	f7ff fd4a 	bl	80077d4 <__lo0bits>
 8007d40:	2401      	movs	r4, #1
 8007d42:	9b01      	ldr	r3, [sp, #4]
 8007d44:	612c      	str	r4, [r5, #16]
 8007d46:	616b      	str	r3, [r5, #20]
 8007d48:	3020      	adds	r0, #32
 8007d4a:	e7e4      	b.n	8007d16 <__d2b+0x5a>
 8007d4c:	4b0b      	ldr	r3, [pc, #44]	; (8007d7c <__d2b+0xc0>)
 8007d4e:	18c0      	adds	r0, r0, r3
 8007d50:	4b0b      	ldr	r3, [pc, #44]	; (8007d80 <__d2b+0xc4>)
 8007d52:	6038      	str	r0, [r7, #0]
 8007d54:	18e3      	adds	r3, r4, r3
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	18eb      	adds	r3, r5, r3
 8007d5a:	6958      	ldr	r0, [r3, #20]
 8007d5c:	f7ff fd20 	bl	80077a0 <__hi0bits>
 8007d60:	0164      	lsls	r4, r4, #5
 8007d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d64:	1a24      	subs	r4, r4, r0
 8007d66:	601c      	str	r4, [r3, #0]
 8007d68:	e7df      	b.n	8007d2a <__d2b+0x6e>
 8007d6a:	46c0      	nop			; (mov r8, r8)
 8007d6c:	08008fb7 	.word	0x08008fb7
 8007d70:	0000030a 	.word	0x0000030a
 8007d74:	08008fc8 	.word	0x08008fc8
 8007d78:	fffffbcd 	.word	0xfffffbcd
 8007d7c:	fffffbce 	.word	0xfffffbce
 8007d80:	3fffffff 	.word	0x3fffffff

08007d84 <_calloc_r>:
 8007d84:	434a      	muls	r2, r1
 8007d86:	b570      	push	{r4, r5, r6, lr}
 8007d88:	0011      	movs	r1, r2
 8007d8a:	0015      	movs	r5, r2
 8007d8c:	f000 f852 	bl	8007e34 <_malloc_r>
 8007d90:	1e04      	subs	r4, r0, #0
 8007d92:	d003      	beq.n	8007d9c <_calloc_r+0x18>
 8007d94:	002a      	movs	r2, r5
 8007d96:	2100      	movs	r1, #0
 8007d98:	f7fe f8e8 	bl	8005f6c <memset>
 8007d9c:	0020      	movs	r0, r4
 8007d9e:	bd70      	pop	{r4, r5, r6, pc}

08007da0 <_free_r>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	0005      	movs	r5, r0
 8007da4:	2900      	cmp	r1, #0
 8007da6:	d010      	beq.n	8007dca <_free_r+0x2a>
 8007da8:	1f0c      	subs	r4, r1, #4
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	da00      	bge.n	8007db2 <_free_r+0x12>
 8007db0:	18e4      	adds	r4, r4, r3
 8007db2:	0028      	movs	r0, r5
 8007db4:	f000 fa64 	bl	8008280 <__malloc_lock>
 8007db8:	4a1d      	ldr	r2, [pc, #116]	; (8007e30 <_free_r+0x90>)
 8007dba:	6813      	ldr	r3, [r2, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d105      	bne.n	8007dcc <_free_r+0x2c>
 8007dc0:	6063      	str	r3, [r4, #4]
 8007dc2:	6014      	str	r4, [r2, #0]
 8007dc4:	0028      	movs	r0, r5
 8007dc6:	f000 fa63 	bl	8008290 <__malloc_unlock>
 8007dca:	bd70      	pop	{r4, r5, r6, pc}
 8007dcc:	42a3      	cmp	r3, r4
 8007dce:	d908      	bls.n	8007de2 <_free_r+0x42>
 8007dd0:	6821      	ldr	r1, [r4, #0]
 8007dd2:	1860      	adds	r0, r4, r1
 8007dd4:	4283      	cmp	r3, r0
 8007dd6:	d1f3      	bne.n	8007dc0 <_free_r+0x20>
 8007dd8:	6818      	ldr	r0, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	1841      	adds	r1, r0, r1
 8007dde:	6021      	str	r1, [r4, #0]
 8007de0:	e7ee      	b.n	8007dc0 <_free_r+0x20>
 8007de2:	001a      	movs	r2, r3
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <_free_r+0x4e>
 8007dea:	42a3      	cmp	r3, r4
 8007dec:	d9f9      	bls.n	8007de2 <_free_r+0x42>
 8007dee:	6811      	ldr	r1, [r2, #0]
 8007df0:	1850      	adds	r0, r2, r1
 8007df2:	42a0      	cmp	r0, r4
 8007df4:	d10b      	bne.n	8007e0e <_free_r+0x6e>
 8007df6:	6820      	ldr	r0, [r4, #0]
 8007df8:	1809      	adds	r1, r1, r0
 8007dfa:	1850      	adds	r0, r2, r1
 8007dfc:	6011      	str	r1, [r2, #0]
 8007dfe:	4283      	cmp	r3, r0
 8007e00:	d1e0      	bne.n	8007dc4 <_free_r+0x24>
 8007e02:	6818      	ldr	r0, [r3, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	1841      	adds	r1, r0, r1
 8007e08:	6011      	str	r1, [r2, #0]
 8007e0a:	6053      	str	r3, [r2, #4]
 8007e0c:	e7da      	b.n	8007dc4 <_free_r+0x24>
 8007e0e:	42a0      	cmp	r0, r4
 8007e10:	d902      	bls.n	8007e18 <_free_r+0x78>
 8007e12:	230c      	movs	r3, #12
 8007e14:	602b      	str	r3, [r5, #0]
 8007e16:	e7d5      	b.n	8007dc4 <_free_r+0x24>
 8007e18:	6821      	ldr	r1, [r4, #0]
 8007e1a:	1860      	adds	r0, r4, r1
 8007e1c:	4283      	cmp	r3, r0
 8007e1e:	d103      	bne.n	8007e28 <_free_r+0x88>
 8007e20:	6818      	ldr	r0, [r3, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	1841      	adds	r1, r0, r1
 8007e26:	6021      	str	r1, [r4, #0]
 8007e28:	6063      	str	r3, [r4, #4]
 8007e2a:	6054      	str	r4, [r2, #4]
 8007e2c:	e7ca      	b.n	8007dc4 <_free_r+0x24>
 8007e2e:	46c0      	nop			; (mov r8, r8)
 8007e30:	2000022c 	.word	0x2000022c

08007e34 <_malloc_r>:
 8007e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e36:	2303      	movs	r3, #3
 8007e38:	1ccd      	adds	r5, r1, #3
 8007e3a:	439d      	bics	r5, r3
 8007e3c:	3508      	adds	r5, #8
 8007e3e:	0006      	movs	r6, r0
 8007e40:	2d0c      	cmp	r5, #12
 8007e42:	d21f      	bcs.n	8007e84 <_malloc_r+0x50>
 8007e44:	250c      	movs	r5, #12
 8007e46:	42a9      	cmp	r1, r5
 8007e48:	d81e      	bhi.n	8007e88 <_malloc_r+0x54>
 8007e4a:	0030      	movs	r0, r6
 8007e4c:	f000 fa18 	bl	8008280 <__malloc_lock>
 8007e50:	4925      	ldr	r1, [pc, #148]	; (8007ee8 <_malloc_r+0xb4>)
 8007e52:	680a      	ldr	r2, [r1, #0]
 8007e54:	0014      	movs	r4, r2
 8007e56:	2c00      	cmp	r4, #0
 8007e58:	d11a      	bne.n	8007e90 <_malloc_r+0x5c>
 8007e5a:	4f24      	ldr	r7, [pc, #144]	; (8007eec <_malloc_r+0xb8>)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d104      	bne.n	8007e6c <_malloc_r+0x38>
 8007e62:	0021      	movs	r1, r4
 8007e64:	0030      	movs	r0, r6
 8007e66:	f000 f9a5 	bl	80081b4 <_sbrk_r>
 8007e6a:	6038      	str	r0, [r7, #0]
 8007e6c:	0029      	movs	r1, r5
 8007e6e:	0030      	movs	r0, r6
 8007e70:	f000 f9a0 	bl	80081b4 <_sbrk_r>
 8007e74:	1c43      	adds	r3, r0, #1
 8007e76:	d12b      	bne.n	8007ed0 <_malloc_r+0x9c>
 8007e78:	230c      	movs	r3, #12
 8007e7a:	0030      	movs	r0, r6
 8007e7c:	6033      	str	r3, [r6, #0]
 8007e7e:	f000 fa07 	bl	8008290 <__malloc_unlock>
 8007e82:	e003      	b.n	8007e8c <_malloc_r+0x58>
 8007e84:	2d00      	cmp	r5, #0
 8007e86:	dade      	bge.n	8007e46 <_malloc_r+0x12>
 8007e88:	230c      	movs	r3, #12
 8007e8a:	6033      	str	r3, [r6, #0]
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e90:	6823      	ldr	r3, [r4, #0]
 8007e92:	1b5b      	subs	r3, r3, r5
 8007e94:	d419      	bmi.n	8007eca <_malloc_r+0x96>
 8007e96:	2b0b      	cmp	r3, #11
 8007e98:	d903      	bls.n	8007ea2 <_malloc_r+0x6e>
 8007e9a:	6023      	str	r3, [r4, #0]
 8007e9c:	18e4      	adds	r4, r4, r3
 8007e9e:	6025      	str	r5, [r4, #0]
 8007ea0:	e003      	b.n	8007eaa <_malloc_r+0x76>
 8007ea2:	6863      	ldr	r3, [r4, #4]
 8007ea4:	42a2      	cmp	r2, r4
 8007ea6:	d10e      	bne.n	8007ec6 <_malloc_r+0x92>
 8007ea8:	600b      	str	r3, [r1, #0]
 8007eaa:	0030      	movs	r0, r6
 8007eac:	f000 f9f0 	bl	8008290 <__malloc_unlock>
 8007eb0:	0020      	movs	r0, r4
 8007eb2:	2207      	movs	r2, #7
 8007eb4:	300b      	adds	r0, #11
 8007eb6:	1d23      	adds	r3, r4, #4
 8007eb8:	4390      	bics	r0, r2
 8007eba:	1ac2      	subs	r2, r0, r3
 8007ebc:	4298      	cmp	r0, r3
 8007ebe:	d0e6      	beq.n	8007e8e <_malloc_r+0x5a>
 8007ec0:	1a1b      	subs	r3, r3, r0
 8007ec2:	50a3      	str	r3, [r4, r2]
 8007ec4:	e7e3      	b.n	8007e8e <_malloc_r+0x5a>
 8007ec6:	6053      	str	r3, [r2, #4]
 8007ec8:	e7ef      	b.n	8007eaa <_malloc_r+0x76>
 8007eca:	0022      	movs	r2, r4
 8007ecc:	6864      	ldr	r4, [r4, #4]
 8007ece:	e7c2      	b.n	8007e56 <_malloc_r+0x22>
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	1cc4      	adds	r4, r0, #3
 8007ed4:	439c      	bics	r4, r3
 8007ed6:	42a0      	cmp	r0, r4
 8007ed8:	d0e1      	beq.n	8007e9e <_malloc_r+0x6a>
 8007eda:	1a21      	subs	r1, r4, r0
 8007edc:	0030      	movs	r0, r6
 8007ede:	f000 f969 	bl	80081b4 <_sbrk_r>
 8007ee2:	1c43      	adds	r3, r0, #1
 8007ee4:	d1db      	bne.n	8007e9e <_malloc_r+0x6a>
 8007ee6:	e7c7      	b.n	8007e78 <_malloc_r+0x44>
 8007ee8:	2000022c 	.word	0x2000022c
 8007eec:	20000230 	.word	0x20000230

08007ef0 <__ssputs_r>:
 8007ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ef2:	688e      	ldr	r6, [r1, #8]
 8007ef4:	b085      	sub	sp, #20
 8007ef6:	0007      	movs	r7, r0
 8007ef8:	000c      	movs	r4, r1
 8007efa:	9203      	str	r2, [sp, #12]
 8007efc:	9301      	str	r3, [sp, #4]
 8007efe:	429e      	cmp	r6, r3
 8007f00:	d83c      	bhi.n	8007f7c <__ssputs_r+0x8c>
 8007f02:	2390      	movs	r3, #144	; 0x90
 8007f04:	898a      	ldrh	r2, [r1, #12]
 8007f06:	00db      	lsls	r3, r3, #3
 8007f08:	421a      	tst	r2, r3
 8007f0a:	d034      	beq.n	8007f76 <__ssputs_r+0x86>
 8007f0c:	2503      	movs	r5, #3
 8007f0e:	6909      	ldr	r1, [r1, #16]
 8007f10:	6823      	ldr	r3, [r4, #0]
 8007f12:	1a5b      	subs	r3, r3, r1
 8007f14:	9302      	str	r3, [sp, #8]
 8007f16:	6963      	ldr	r3, [r4, #20]
 8007f18:	9802      	ldr	r0, [sp, #8]
 8007f1a:	435d      	muls	r5, r3
 8007f1c:	0feb      	lsrs	r3, r5, #31
 8007f1e:	195d      	adds	r5, r3, r5
 8007f20:	9b01      	ldr	r3, [sp, #4]
 8007f22:	106d      	asrs	r5, r5, #1
 8007f24:	3301      	adds	r3, #1
 8007f26:	181b      	adds	r3, r3, r0
 8007f28:	42ab      	cmp	r3, r5
 8007f2a:	d900      	bls.n	8007f2e <__ssputs_r+0x3e>
 8007f2c:	001d      	movs	r5, r3
 8007f2e:	0553      	lsls	r3, r2, #21
 8007f30:	d532      	bpl.n	8007f98 <__ssputs_r+0xa8>
 8007f32:	0029      	movs	r1, r5
 8007f34:	0038      	movs	r0, r7
 8007f36:	f7ff ff7d 	bl	8007e34 <_malloc_r>
 8007f3a:	1e06      	subs	r6, r0, #0
 8007f3c:	d109      	bne.n	8007f52 <__ssputs_r+0x62>
 8007f3e:	230c      	movs	r3, #12
 8007f40:	603b      	str	r3, [r7, #0]
 8007f42:	2340      	movs	r3, #64	; 0x40
 8007f44:	2001      	movs	r0, #1
 8007f46:	89a2      	ldrh	r2, [r4, #12]
 8007f48:	4240      	negs	r0, r0
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	81a3      	strh	r3, [r4, #12]
 8007f4e:	b005      	add	sp, #20
 8007f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f52:	9a02      	ldr	r2, [sp, #8]
 8007f54:	6921      	ldr	r1, [r4, #16]
 8007f56:	f7ff fb6e 	bl	8007636 <memcpy>
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	4a14      	ldr	r2, [pc, #80]	; (8007fb0 <__ssputs_r+0xc0>)
 8007f5e:	401a      	ands	r2, r3
 8007f60:	2380      	movs	r3, #128	; 0x80
 8007f62:	4313      	orrs	r3, r2
 8007f64:	81a3      	strh	r3, [r4, #12]
 8007f66:	9b02      	ldr	r3, [sp, #8]
 8007f68:	6126      	str	r6, [r4, #16]
 8007f6a:	18f6      	adds	r6, r6, r3
 8007f6c:	6026      	str	r6, [r4, #0]
 8007f6e:	6165      	str	r5, [r4, #20]
 8007f70:	9e01      	ldr	r6, [sp, #4]
 8007f72:	1aed      	subs	r5, r5, r3
 8007f74:	60a5      	str	r5, [r4, #8]
 8007f76:	9b01      	ldr	r3, [sp, #4]
 8007f78:	429e      	cmp	r6, r3
 8007f7a:	d900      	bls.n	8007f7e <__ssputs_r+0x8e>
 8007f7c:	9e01      	ldr	r6, [sp, #4]
 8007f7e:	0032      	movs	r2, r6
 8007f80:	9903      	ldr	r1, [sp, #12]
 8007f82:	6820      	ldr	r0, [r4, #0]
 8007f84:	f000 f968 	bl	8008258 <memmove>
 8007f88:	68a3      	ldr	r3, [r4, #8]
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	1b9b      	subs	r3, r3, r6
 8007f8e:	60a3      	str	r3, [r4, #8]
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	199e      	adds	r6, r3, r6
 8007f94:	6026      	str	r6, [r4, #0]
 8007f96:	e7da      	b.n	8007f4e <__ssputs_r+0x5e>
 8007f98:	002a      	movs	r2, r5
 8007f9a:	0038      	movs	r0, r7
 8007f9c:	f000 f980 	bl	80082a0 <_realloc_r>
 8007fa0:	1e06      	subs	r6, r0, #0
 8007fa2:	d1e0      	bne.n	8007f66 <__ssputs_r+0x76>
 8007fa4:	0038      	movs	r0, r7
 8007fa6:	6921      	ldr	r1, [r4, #16]
 8007fa8:	f7ff fefa 	bl	8007da0 <_free_r>
 8007fac:	e7c7      	b.n	8007f3e <__ssputs_r+0x4e>
 8007fae:	46c0      	nop			; (mov r8, r8)
 8007fb0:	fffffb7f 	.word	0xfffffb7f

08007fb4 <_svfiprintf_r>:
 8007fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fb6:	b0a1      	sub	sp, #132	; 0x84
 8007fb8:	9003      	str	r0, [sp, #12]
 8007fba:	001d      	movs	r5, r3
 8007fbc:	898b      	ldrh	r3, [r1, #12]
 8007fbe:	000f      	movs	r7, r1
 8007fc0:	0016      	movs	r6, r2
 8007fc2:	061b      	lsls	r3, r3, #24
 8007fc4:	d511      	bpl.n	8007fea <_svfiprintf_r+0x36>
 8007fc6:	690b      	ldr	r3, [r1, #16]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10e      	bne.n	8007fea <_svfiprintf_r+0x36>
 8007fcc:	2140      	movs	r1, #64	; 0x40
 8007fce:	f7ff ff31 	bl	8007e34 <_malloc_r>
 8007fd2:	6038      	str	r0, [r7, #0]
 8007fd4:	6138      	str	r0, [r7, #16]
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	d105      	bne.n	8007fe6 <_svfiprintf_r+0x32>
 8007fda:	230c      	movs	r3, #12
 8007fdc:	9a03      	ldr	r2, [sp, #12]
 8007fde:	3801      	subs	r0, #1
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	b021      	add	sp, #132	; 0x84
 8007fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fe6:	2340      	movs	r3, #64	; 0x40
 8007fe8:	617b      	str	r3, [r7, #20]
 8007fea:	2300      	movs	r3, #0
 8007fec:	ac08      	add	r4, sp, #32
 8007fee:	6163      	str	r3, [r4, #20]
 8007ff0:	3320      	adds	r3, #32
 8007ff2:	7663      	strb	r3, [r4, #25]
 8007ff4:	3310      	adds	r3, #16
 8007ff6:	76a3      	strb	r3, [r4, #26]
 8007ff8:	9507      	str	r5, [sp, #28]
 8007ffa:	0035      	movs	r5, r6
 8007ffc:	782b      	ldrb	r3, [r5, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d001      	beq.n	8008006 <_svfiprintf_r+0x52>
 8008002:	2b25      	cmp	r3, #37	; 0x25
 8008004:	d147      	bne.n	8008096 <_svfiprintf_r+0xe2>
 8008006:	1bab      	subs	r3, r5, r6
 8008008:	9305      	str	r3, [sp, #20]
 800800a:	42b5      	cmp	r5, r6
 800800c:	d00c      	beq.n	8008028 <_svfiprintf_r+0x74>
 800800e:	0032      	movs	r2, r6
 8008010:	0039      	movs	r1, r7
 8008012:	9803      	ldr	r0, [sp, #12]
 8008014:	f7ff ff6c 	bl	8007ef0 <__ssputs_r>
 8008018:	1c43      	adds	r3, r0, #1
 800801a:	d100      	bne.n	800801e <_svfiprintf_r+0x6a>
 800801c:	e0ae      	b.n	800817c <_svfiprintf_r+0x1c8>
 800801e:	6962      	ldr	r2, [r4, #20]
 8008020:	9b05      	ldr	r3, [sp, #20]
 8008022:	4694      	mov	ip, r2
 8008024:	4463      	add	r3, ip
 8008026:	6163      	str	r3, [r4, #20]
 8008028:	782b      	ldrb	r3, [r5, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d100      	bne.n	8008030 <_svfiprintf_r+0x7c>
 800802e:	e0a5      	b.n	800817c <_svfiprintf_r+0x1c8>
 8008030:	2201      	movs	r2, #1
 8008032:	2300      	movs	r3, #0
 8008034:	4252      	negs	r2, r2
 8008036:	6062      	str	r2, [r4, #4]
 8008038:	a904      	add	r1, sp, #16
 800803a:	3254      	adds	r2, #84	; 0x54
 800803c:	1852      	adds	r2, r2, r1
 800803e:	1c6e      	adds	r6, r5, #1
 8008040:	6023      	str	r3, [r4, #0]
 8008042:	60e3      	str	r3, [r4, #12]
 8008044:	60a3      	str	r3, [r4, #8]
 8008046:	7013      	strb	r3, [r2, #0]
 8008048:	65a3      	str	r3, [r4, #88]	; 0x58
 800804a:	2205      	movs	r2, #5
 800804c:	7831      	ldrb	r1, [r6, #0]
 800804e:	4854      	ldr	r0, [pc, #336]	; (80081a0 <_svfiprintf_r+0x1ec>)
 8008050:	f7ff fae6 	bl	8007620 <memchr>
 8008054:	1c75      	adds	r5, r6, #1
 8008056:	2800      	cmp	r0, #0
 8008058:	d11f      	bne.n	800809a <_svfiprintf_r+0xe6>
 800805a:	6822      	ldr	r2, [r4, #0]
 800805c:	06d3      	lsls	r3, r2, #27
 800805e:	d504      	bpl.n	800806a <_svfiprintf_r+0xb6>
 8008060:	2353      	movs	r3, #83	; 0x53
 8008062:	a904      	add	r1, sp, #16
 8008064:	185b      	adds	r3, r3, r1
 8008066:	2120      	movs	r1, #32
 8008068:	7019      	strb	r1, [r3, #0]
 800806a:	0713      	lsls	r3, r2, #28
 800806c:	d504      	bpl.n	8008078 <_svfiprintf_r+0xc4>
 800806e:	2353      	movs	r3, #83	; 0x53
 8008070:	a904      	add	r1, sp, #16
 8008072:	185b      	adds	r3, r3, r1
 8008074:	212b      	movs	r1, #43	; 0x2b
 8008076:	7019      	strb	r1, [r3, #0]
 8008078:	7833      	ldrb	r3, [r6, #0]
 800807a:	2b2a      	cmp	r3, #42	; 0x2a
 800807c:	d016      	beq.n	80080ac <_svfiprintf_r+0xf8>
 800807e:	0035      	movs	r5, r6
 8008080:	2100      	movs	r1, #0
 8008082:	200a      	movs	r0, #10
 8008084:	68e3      	ldr	r3, [r4, #12]
 8008086:	782a      	ldrb	r2, [r5, #0]
 8008088:	1c6e      	adds	r6, r5, #1
 800808a:	3a30      	subs	r2, #48	; 0x30
 800808c:	2a09      	cmp	r2, #9
 800808e:	d94e      	bls.n	800812e <_svfiprintf_r+0x17a>
 8008090:	2900      	cmp	r1, #0
 8008092:	d111      	bne.n	80080b8 <_svfiprintf_r+0x104>
 8008094:	e017      	b.n	80080c6 <_svfiprintf_r+0x112>
 8008096:	3501      	adds	r5, #1
 8008098:	e7b0      	b.n	8007ffc <_svfiprintf_r+0x48>
 800809a:	4b41      	ldr	r3, [pc, #260]	; (80081a0 <_svfiprintf_r+0x1ec>)
 800809c:	6822      	ldr	r2, [r4, #0]
 800809e:	1ac0      	subs	r0, r0, r3
 80080a0:	2301      	movs	r3, #1
 80080a2:	4083      	lsls	r3, r0
 80080a4:	4313      	orrs	r3, r2
 80080a6:	002e      	movs	r6, r5
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	e7ce      	b.n	800804a <_svfiprintf_r+0x96>
 80080ac:	9b07      	ldr	r3, [sp, #28]
 80080ae:	1d19      	adds	r1, r3, #4
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	9107      	str	r1, [sp, #28]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	db01      	blt.n	80080bc <_svfiprintf_r+0x108>
 80080b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80080ba:	e004      	b.n	80080c6 <_svfiprintf_r+0x112>
 80080bc:	425b      	negs	r3, r3
 80080be:	60e3      	str	r3, [r4, #12]
 80080c0:	2302      	movs	r3, #2
 80080c2:	4313      	orrs	r3, r2
 80080c4:	6023      	str	r3, [r4, #0]
 80080c6:	782b      	ldrb	r3, [r5, #0]
 80080c8:	2b2e      	cmp	r3, #46	; 0x2e
 80080ca:	d10a      	bne.n	80080e2 <_svfiprintf_r+0x12e>
 80080cc:	786b      	ldrb	r3, [r5, #1]
 80080ce:	2b2a      	cmp	r3, #42	; 0x2a
 80080d0:	d135      	bne.n	800813e <_svfiprintf_r+0x18a>
 80080d2:	9b07      	ldr	r3, [sp, #28]
 80080d4:	3502      	adds	r5, #2
 80080d6:	1d1a      	adds	r2, r3, #4
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	9207      	str	r2, [sp, #28]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	db2b      	blt.n	8008138 <_svfiprintf_r+0x184>
 80080e0:	9309      	str	r3, [sp, #36]	; 0x24
 80080e2:	4e30      	ldr	r6, [pc, #192]	; (80081a4 <_svfiprintf_r+0x1f0>)
 80080e4:	2203      	movs	r2, #3
 80080e6:	0030      	movs	r0, r6
 80080e8:	7829      	ldrb	r1, [r5, #0]
 80080ea:	f7ff fa99 	bl	8007620 <memchr>
 80080ee:	2800      	cmp	r0, #0
 80080f0:	d006      	beq.n	8008100 <_svfiprintf_r+0x14c>
 80080f2:	2340      	movs	r3, #64	; 0x40
 80080f4:	1b80      	subs	r0, r0, r6
 80080f6:	4083      	lsls	r3, r0
 80080f8:	6822      	ldr	r2, [r4, #0]
 80080fa:	3501      	adds	r5, #1
 80080fc:	4313      	orrs	r3, r2
 80080fe:	6023      	str	r3, [r4, #0]
 8008100:	7829      	ldrb	r1, [r5, #0]
 8008102:	2206      	movs	r2, #6
 8008104:	4828      	ldr	r0, [pc, #160]	; (80081a8 <_svfiprintf_r+0x1f4>)
 8008106:	1c6e      	adds	r6, r5, #1
 8008108:	7621      	strb	r1, [r4, #24]
 800810a:	f7ff fa89 	bl	8007620 <memchr>
 800810e:	2800      	cmp	r0, #0
 8008110:	d03c      	beq.n	800818c <_svfiprintf_r+0x1d8>
 8008112:	4b26      	ldr	r3, [pc, #152]	; (80081ac <_svfiprintf_r+0x1f8>)
 8008114:	2b00      	cmp	r3, #0
 8008116:	d125      	bne.n	8008164 <_svfiprintf_r+0x1b0>
 8008118:	2207      	movs	r2, #7
 800811a:	9b07      	ldr	r3, [sp, #28]
 800811c:	3307      	adds	r3, #7
 800811e:	4393      	bics	r3, r2
 8008120:	3308      	adds	r3, #8
 8008122:	9307      	str	r3, [sp, #28]
 8008124:	6963      	ldr	r3, [r4, #20]
 8008126:	9a04      	ldr	r2, [sp, #16]
 8008128:	189b      	adds	r3, r3, r2
 800812a:	6163      	str	r3, [r4, #20]
 800812c:	e765      	b.n	8007ffa <_svfiprintf_r+0x46>
 800812e:	4343      	muls	r3, r0
 8008130:	0035      	movs	r5, r6
 8008132:	2101      	movs	r1, #1
 8008134:	189b      	adds	r3, r3, r2
 8008136:	e7a6      	b.n	8008086 <_svfiprintf_r+0xd2>
 8008138:	2301      	movs	r3, #1
 800813a:	425b      	negs	r3, r3
 800813c:	e7d0      	b.n	80080e0 <_svfiprintf_r+0x12c>
 800813e:	2300      	movs	r3, #0
 8008140:	200a      	movs	r0, #10
 8008142:	001a      	movs	r2, r3
 8008144:	3501      	adds	r5, #1
 8008146:	6063      	str	r3, [r4, #4]
 8008148:	7829      	ldrb	r1, [r5, #0]
 800814a:	1c6e      	adds	r6, r5, #1
 800814c:	3930      	subs	r1, #48	; 0x30
 800814e:	2909      	cmp	r1, #9
 8008150:	d903      	bls.n	800815a <_svfiprintf_r+0x1a6>
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0c5      	beq.n	80080e2 <_svfiprintf_r+0x12e>
 8008156:	9209      	str	r2, [sp, #36]	; 0x24
 8008158:	e7c3      	b.n	80080e2 <_svfiprintf_r+0x12e>
 800815a:	4342      	muls	r2, r0
 800815c:	0035      	movs	r5, r6
 800815e:	2301      	movs	r3, #1
 8008160:	1852      	adds	r2, r2, r1
 8008162:	e7f1      	b.n	8008148 <_svfiprintf_r+0x194>
 8008164:	ab07      	add	r3, sp, #28
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	003a      	movs	r2, r7
 800816a:	0021      	movs	r1, r4
 800816c:	4b10      	ldr	r3, [pc, #64]	; (80081b0 <_svfiprintf_r+0x1fc>)
 800816e:	9803      	ldr	r0, [sp, #12]
 8008170:	f7fd ffae 	bl	80060d0 <_printf_float>
 8008174:	9004      	str	r0, [sp, #16]
 8008176:	9b04      	ldr	r3, [sp, #16]
 8008178:	3301      	adds	r3, #1
 800817a:	d1d3      	bne.n	8008124 <_svfiprintf_r+0x170>
 800817c:	89bb      	ldrh	r3, [r7, #12]
 800817e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008180:	065b      	lsls	r3, r3, #25
 8008182:	d400      	bmi.n	8008186 <_svfiprintf_r+0x1d2>
 8008184:	e72d      	b.n	8007fe2 <_svfiprintf_r+0x2e>
 8008186:	2001      	movs	r0, #1
 8008188:	4240      	negs	r0, r0
 800818a:	e72a      	b.n	8007fe2 <_svfiprintf_r+0x2e>
 800818c:	ab07      	add	r3, sp, #28
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	003a      	movs	r2, r7
 8008192:	0021      	movs	r1, r4
 8008194:	4b06      	ldr	r3, [pc, #24]	; (80081b0 <_svfiprintf_r+0x1fc>)
 8008196:	9803      	ldr	r0, [sp, #12]
 8008198:	f7fe fa58 	bl	800664c <_printf_i>
 800819c:	e7ea      	b.n	8008174 <_svfiprintf_r+0x1c0>
 800819e:	46c0      	nop			; (mov r8, r8)
 80081a0:	08009124 	.word	0x08009124
 80081a4:	0800912a 	.word	0x0800912a
 80081a8:	0800912e 	.word	0x0800912e
 80081ac:	080060d1 	.word	0x080060d1
 80081b0:	08007ef1 	.word	0x08007ef1

080081b4 <_sbrk_r>:
 80081b4:	2300      	movs	r3, #0
 80081b6:	b570      	push	{r4, r5, r6, lr}
 80081b8:	4d06      	ldr	r5, [pc, #24]	; (80081d4 <_sbrk_r+0x20>)
 80081ba:	0004      	movs	r4, r0
 80081bc:	0008      	movs	r0, r1
 80081be:	602b      	str	r3, [r5, #0]
 80081c0:	f7fa fdce 	bl	8002d60 <_sbrk>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d103      	bne.n	80081d0 <_sbrk_r+0x1c>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d000      	beq.n	80081d0 <_sbrk_r+0x1c>
 80081ce:	6023      	str	r3, [r4, #0]
 80081d0:	bd70      	pop	{r4, r5, r6, pc}
 80081d2:	46c0      	nop			; (mov r8, r8)
 80081d4:	20000304 	.word	0x20000304

080081d8 <__assert_func>:
 80081d8:	b530      	push	{r4, r5, lr}
 80081da:	0014      	movs	r4, r2
 80081dc:	001a      	movs	r2, r3
 80081de:	4b09      	ldr	r3, [pc, #36]	; (8008204 <__assert_func+0x2c>)
 80081e0:	0005      	movs	r5, r0
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	b085      	sub	sp, #20
 80081e6:	68d8      	ldr	r0, [r3, #12]
 80081e8:	4b07      	ldr	r3, [pc, #28]	; (8008208 <__assert_func+0x30>)
 80081ea:	2c00      	cmp	r4, #0
 80081ec:	d101      	bne.n	80081f2 <__assert_func+0x1a>
 80081ee:	4b07      	ldr	r3, [pc, #28]	; (800820c <__assert_func+0x34>)
 80081f0:	001c      	movs	r4, r3
 80081f2:	9301      	str	r3, [sp, #4]
 80081f4:	9100      	str	r1, [sp, #0]
 80081f6:	002b      	movs	r3, r5
 80081f8:	4905      	ldr	r1, [pc, #20]	; (8008210 <__assert_func+0x38>)
 80081fa:	9402      	str	r4, [sp, #8]
 80081fc:	f000 f80a 	bl	8008214 <fiprintf>
 8008200:	f000 fab2 	bl	8008768 <abort>
 8008204:	2000000c 	.word	0x2000000c
 8008208:	08009135 	.word	0x08009135
 800820c:	08009170 	.word	0x08009170
 8008210:	08009142 	.word	0x08009142

08008214 <fiprintf>:
 8008214:	b40e      	push	{r1, r2, r3}
 8008216:	b503      	push	{r0, r1, lr}
 8008218:	0001      	movs	r1, r0
 800821a:	ab03      	add	r3, sp, #12
 800821c:	4804      	ldr	r0, [pc, #16]	; (8008230 <fiprintf+0x1c>)
 800821e:	cb04      	ldmia	r3!, {r2}
 8008220:	6800      	ldr	r0, [r0, #0]
 8008222:	9301      	str	r3, [sp, #4]
 8008224:	f000 f88a 	bl	800833c <_vfiprintf_r>
 8008228:	b002      	add	sp, #8
 800822a:	bc08      	pop	{r3}
 800822c:	b003      	add	sp, #12
 800822e:	4718      	bx	r3
 8008230:	2000000c 	.word	0x2000000c

08008234 <__ascii_mbtowc>:
 8008234:	b082      	sub	sp, #8
 8008236:	2900      	cmp	r1, #0
 8008238:	d100      	bne.n	800823c <__ascii_mbtowc+0x8>
 800823a:	a901      	add	r1, sp, #4
 800823c:	1e10      	subs	r0, r2, #0
 800823e:	d006      	beq.n	800824e <__ascii_mbtowc+0x1a>
 8008240:	2b00      	cmp	r3, #0
 8008242:	d006      	beq.n	8008252 <__ascii_mbtowc+0x1e>
 8008244:	7813      	ldrb	r3, [r2, #0]
 8008246:	600b      	str	r3, [r1, #0]
 8008248:	7810      	ldrb	r0, [r2, #0]
 800824a:	1e43      	subs	r3, r0, #1
 800824c:	4198      	sbcs	r0, r3
 800824e:	b002      	add	sp, #8
 8008250:	4770      	bx	lr
 8008252:	2002      	movs	r0, #2
 8008254:	4240      	negs	r0, r0
 8008256:	e7fa      	b.n	800824e <__ascii_mbtowc+0x1a>

08008258 <memmove>:
 8008258:	b510      	push	{r4, lr}
 800825a:	4288      	cmp	r0, r1
 800825c:	d902      	bls.n	8008264 <memmove+0xc>
 800825e:	188b      	adds	r3, r1, r2
 8008260:	4298      	cmp	r0, r3
 8008262:	d303      	bcc.n	800826c <memmove+0x14>
 8008264:	2300      	movs	r3, #0
 8008266:	e007      	b.n	8008278 <memmove+0x20>
 8008268:	5c8b      	ldrb	r3, [r1, r2]
 800826a:	5483      	strb	r3, [r0, r2]
 800826c:	3a01      	subs	r2, #1
 800826e:	d2fb      	bcs.n	8008268 <memmove+0x10>
 8008270:	bd10      	pop	{r4, pc}
 8008272:	5ccc      	ldrb	r4, [r1, r3]
 8008274:	54c4      	strb	r4, [r0, r3]
 8008276:	3301      	adds	r3, #1
 8008278:	429a      	cmp	r2, r3
 800827a:	d1fa      	bne.n	8008272 <memmove+0x1a>
 800827c:	e7f8      	b.n	8008270 <memmove+0x18>
	...

08008280 <__malloc_lock>:
 8008280:	b510      	push	{r4, lr}
 8008282:	4802      	ldr	r0, [pc, #8]	; (800828c <__malloc_lock+0xc>)
 8008284:	f000 fc47 	bl	8008b16 <__retarget_lock_acquire_recursive>
 8008288:	bd10      	pop	{r4, pc}
 800828a:	46c0      	nop			; (mov r8, r8)
 800828c:	2000030c 	.word	0x2000030c

08008290 <__malloc_unlock>:
 8008290:	b510      	push	{r4, lr}
 8008292:	4802      	ldr	r0, [pc, #8]	; (800829c <__malloc_unlock+0xc>)
 8008294:	f000 fc40 	bl	8008b18 <__retarget_lock_release_recursive>
 8008298:	bd10      	pop	{r4, pc}
 800829a:	46c0      	nop			; (mov r8, r8)
 800829c:	2000030c 	.word	0x2000030c

080082a0 <_realloc_r>:
 80082a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a2:	0007      	movs	r7, r0
 80082a4:	000d      	movs	r5, r1
 80082a6:	0016      	movs	r6, r2
 80082a8:	2900      	cmp	r1, #0
 80082aa:	d105      	bne.n	80082b8 <_realloc_r+0x18>
 80082ac:	0011      	movs	r1, r2
 80082ae:	f7ff fdc1 	bl	8007e34 <_malloc_r>
 80082b2:	0004      	movs	r4, r0
 80082b4:	0020      	movs	r0, r4
 80082b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b8:	2a00      	cmp	r2, #0
 80082ba:	d103      	bne.n	80082c4 <_realloc_r+0x24>
 80082bc:	f7ff fd70 	bl	8007da0 <_free_r>
 80082c0:	0034      	movs	r4, r6
 80082c2:	e7f7      	b.n	80082b4 <_realloc_r+0x14>
 80082c4:	f000 fc96 	bl	8008bf4 <_malloc_usable_size_r>
 80082c8:	002c      	movs	r4, r5
 80082ca:	42b0      	cmp	r0, r6
 80082cc:	d2f2      	bcs.n	80082b4 <_realloc_r+0x14>
 80082ce:	0031      	movs	r1, r6
 80082d0:	0038      	movs	r0, r7
 80082d2:	f7ff fdaf 	bl	8007e34 <_malloc_r>
 80082d6:	1e04      	subs	r4, r0, #0
 80082d8:	d0ec      	beq.n	80082b4 <_realloc_r+0x14>
 80082da:	0029      	movs	r1, r5
 80082dc:	0032      	movs	r2, r6
 80082de:	f7ff f9aa 	bl	8007636 <memcpy>
 80082e2:	0029      	movs	r1, r5
 80082e4:	0038      	movs	r0, r7
 80082e6:	f7ff fd5b 	bl	8007da0 <_free_r>
 80082ea:	e7e3      	b.n	80082b4 <_realloc_r+0x14>

080082ec <__sfputc_r>:
 80082ec:	6893      	ldr	r3, [r2, #8]
 80082ee:	b510      	push	{r4, lr}
 80082f0:	3b01      	subs	r3, #1
 80082f2:	6093      	str	r3, [r2, #8]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	da04      	bge.n	8008302 <__sfputc_r+0x16>
 80082f8:	6994      	ldr	r4, [r2, #24]
 80082fa:	42a3      	cmp	r3, r4
 80082fc:	db07      	blt.n	800830e <__sfputc_r+0x22>
 80082fe:	290a      	cmp	r1, #10
 8008300:	d005      	beq.n	800830e <__sfputc_r+0x22>
 8008302:	6813      	ldr	r3, [r2, #0]
 8008304:	1c58      	adds	r0, r3, #1
 8008306:	6010      	str	r0, [r2, #0]
 8008308:	7019      	strb	r1, [r3, #0]
 800830a:	0008      	movs	r0, r1
 800830c:	bd10      	pop	{r4, pc}
 800830e:	f000 f94f 	bl	80085b0 <__swbuf_r>
 8008312:	0001      	movs	r1, r0
 8008314:	e7f9      	b.n	800830a <__sfputc_r+0x1e>

08008316 <__sfputs_r>:
 8008316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008318:	0006      	movs	r6, r0
 800831a:	000f      	movs	r7, r1
 800831c:	0014      	movs	r4, r2
 800831e:	18d5      	adds	r5, r2, r3
 8008320:	42ac      	cmp	r4, r5
 8008322:	d101      	bne.n	8008328 <__sfputs_r+0x12>
 8008324:	2000      	movs	r0, #0
 8008326:	e007      	b.n	8008338 <__sfputs_r+0x22>
 8008328:	7821      	ldrb	r1, [r4, #0]
 800832a:	003a      	movs	r2, r7
 800832c:	0030      	movs	r0, r6
 800832e:	f7ff ffdd 	bl	80082ec <__sfputc_r>
 8008332:	3401      	adds	r4, #1
 8008334:	1c43      	adds	r3, r0, #1
 8008336:	d1f3      	bne.n	8008320 <__sfputs_r+0xa>
 8008338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800833c <_vfiprintf_r>:
 800833c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800833e:	b0a1      	sub	sp, #132	; 0x84
 8008340:	0006      	movs	r6, r0
 8008342:	000c      	movs	r4, r1
 8008344:	001f      	movs	r7, r3
 8008346:	9203      	str	r2, [sp, #12]
 8008348:	2800      	cmp	r0, #0
 800834a:	d004      	beq.n	8008356 <_vfiprintf_r+0x1a>
 800834c:	6983      	ldr	r3, [r0, #24]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <_vfiprintf_r+0x1a>
 8008352:	f000 fb3f 	bl	80089d4 <__sinit>
 8008356:	4b8e      	ldr	r3, [pc, #568]	; (8008590 <_vfiprintf_r+0x254>)
 8008358:	429c      	cmp	r4, r3
 800835a:	d11c      	bne.n	8008396 <_vfiprintf_r+0x5a>
 800835c:	6874      	ldr	r4, [r6, #4]
 800835e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008360:	07db      	lsls	r3, r3, #31
 8008362:	d405      	bmi.n	8008370 <_vfiprintf_r+0x34>
 8008364:	89a3      	ldrh	r3, [r4, #12]
 8008366:	059b      	lsls	r3, r3, #22
 8008368:	d402      	bmi.n	8008370 <_vfiprintf_r+0x34>
 800836a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800836c:	f000 fbd3 	bl	8008b16 <__retarget_lock_acquire_recursive>
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	071b      	lsls	r3, r3, #28
 8008374:	d502      	bpl.n	800837c <_vfiprintf_r+0x40>
 8008376:	6923      	ldr	r3, [r4, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d11d      	bne.n	80083b8 <_vfiprintf_r+0x7c>
 800837c:	0021      	movs	r1, r4
 800837e:	0030      	movs	r0, r6
 8008380:	f000 f97a 	bl	8008678 <__swsetup_r>
 8008384:	2800      	cmp	r0, #0
 8008386:	d017      	beq.n	80083b8 <_vfiprintf_r+0x7c>
 8008388:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800838a:	07db      	lsls	r3, r3, #31
 800838c:	d50d      	bpl.n	80083aa <_vfiprintf_r+0x6e>
 800838e:	2001      	movs	r0, #1
 8008390:	4240      	negs	r0, r0
 8008392:	b021      	add	sp, #132	; 0x84
 8008394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008396:	4b7f      	ldr	r3, [pc, #508]	; (8008594 <_vfiprintf_r+0x258>)
 8008398:	429c      	cmp	r4, r3
 800839a:	d101      	bne.n	80083a0 <_vfiprintf_r+0x64>
 800839c:	68b4      	ldr	r4, [r6, #8]
 800839e:	e7de      	b.n	800835e <_vfiprintf_r+0x22>
 80083a0:	4b7d      	ldr	r3, [pc, #500]	; (8008598 <_vfiprintf_r+0x25c>)
 80083a2:	429c      	cmp	r4, r3
 80083a4:	d1db      	bne.n	800835e <_vfiprintf_r+0x22>
 80083a6:	68f4      	ldr	r4, [r6, #12]
 80083a8:	e7d9      	b.n	800835e <_vfiprintf_r+0x22>
 80083aa:	89a3      	ldrh	r3, [r4, #12]
 80083ac:	059b      	lsls	r3, r3, #22
 80083ae:	d4ee      	bmi.n	800838e <_vfiprintf_r+0x52>
 80083b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083b2:	f000 fbb1 	bl	8008b18 <__retarget_lock_release_recursive>
 80083b6:	e7ea      	b.n	800838e <_vfiprintf_r+0x52>
 80083b8:	2300      	movs	r3, #0
 80083ba:	ad08      	add	r5, sp, #32
 80083bc:	616b      	str	r3, [r5, #20]
 80083be:	3320      	adds	r3, #32
 80083c0:	766b      	strb	r3, [r5, #25]
 80083c2:	3310      	adds	r3, #16
 80083c4:	76ab      	strb	r3, [r5, #26]
 80083c6:	9707      	str	r7, [sp, #28]
 80083c8:	9f03      	ldr	r7, [sp, #12]
 80083ca:	783b      	ldrb	r3, [r7, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <_vfiprintf_r+0x98>
 80083d0:	2b25      	cmp	r3, #37	; 0x25
 80083d2:	d14e      	bne.n	8008472 <_vfiprintf_r+0x136>
 80083d4:	9b03      	ldr	r3, [sp, #12]
 80083d6:	1afb      	subs	r3, r7, r3
 80083d8:	9305      	str	r3, [sp, #20]
 80083da:	9b03      	ldr	r3, [sp, #12]
 80083dc:	429f      	cmp	r7, r3
 80083de:	d00d      	beq.n	80083fc <_vfiprintf_r+0xc0>
 80083e0:	9b05      	ldr	r3, [sp, #20]
 80083e2:	0021      	movs	r1, r4
 80083e4:	0030      	movs	r0, r6
 80083e6:	9a03      	ldr	r2, [sp, #12]
 80083e8:	f7ff ff95 	bl	8008316 <__sfputs_r>
 80083ec:	1c43      	adds	r3, r0, #1
 80083ee:	d100      	bne.n	80083f2 <_vfiprintf_r+0xb6>
 80083f0:	e0b5      	b.n	800855e <_vfiprintf_r+0x222>
 80083f2:	696a      	ldr	r2, [r5, #20]
 80083f4:	9b05      	ldr	r3, [sp, #20]
 80083f6:	4694      	mov	ip, r2
 80083f8:	4463      	add	r3, ip
 80083fa:	616b      	str	r3, [r5, #20]
 80083fc:	783b      	ldrb	r3, [r7, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d100      	bne.n	8008404 <_vfiprintf_r+0xc8>
 8008402:	e0ac      	b.n	800855e <_vfiprintf_r+0x222>
 8008404:	2201      	movs	r2, #1
 8008406:	1c7b      	adds	r3, r7, #1
 8008408:	9303      	str	r3, [sp, #12]
 800840a:	2300      	movs	r3, #0
 800840c:	4252      	negs	r2, r2
 800840e:	606a      	str	r2, [r5, #4]
 8008410:	a904      	add	r1, sp, #16
 8008412:	3254      	adds	r2, #84	; 0x54
 8008414:	1852      	adds	r2, r2, r1
 8008416:	602b      	str	r3, [r5, #0]
 8008418:	60eb      	str	r3, [r5, #12]
 800841a:	60ab      	str	r3, [r5, #8]
 800841c:	7013      	strb	r3, [r2, #0]
 800841e:	65ab      	str	r3, [r5, #88]	; 0x58
 8008420:	9b03      	ldr	r3, [sp, #12]
 8008422:	2205      	movs	r2, #5
 8008424:	7819      	ldrb	r1, [r3, #0]
 8008426:	485d      	ldr	r0, [pc, #372]	; (800859c <_vfiprintf_r+0x260>)
 8008428:	f7ff f8fa 	bl	8007620 <memchr>
 800842c:	9b03      	ldr	r3, [sp, #12]
 800842e:	1c5f      	adds	r7, r3, #1
 8008430:	2800      	cmp	r0, #0
 8008432:	d120      	bne.n	8008476 <_vfiprintf_r+0x13a>
 8008434:	682a      	ldr	r2, [r5, #0]
 8008436:	06d3      	lsls	r3, r2, #27
 8008438:	d504      	bpl.n	8008444 <_vfiprintf_r+0x108>
 800843a:	2353      	movs	r3, #83	; 0x53
 800843c:	a904      	add	r1, sp, #16
 800843e:	185b      	adds	r3, r3, r1
 8008440:	2120      	movs	r1, #32
 8008442:	7019      	strb	r1, [r3, #0]
 8008444:	0713      	lsls	r3, r2, #28
 8008446:	d504      	bpl.n	8008452 <_vfiprintf_r+0x116>
 8008448:	2353      	movs	r3, #83	; 0x53
 800844a:	a904      	add	r1, sp, #16
 800844c:	185b      	adds	r3, r3, r1
 800844e:	212b      	movs	r1, #43	; 0x2b
 8008450:	7019      	strb	r1, [r3, #0]
 8008452:	9b03      	ldr	r3, [sp, #12]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	2b2a      	cmp	r3, #42	; 0x2a
 8008458:	d016      	beq.n	8008488 <_vfiprintf_r+0x14c>
 800845a:	2100      	movs	r1, #0
 800845c:	68eb      	ldr	r3, [r5, #12]
 800845e:	9f03      	ldr	r7, [sp, #12]
 8008460:	783a      	ldrb	r2, [r7, #0]
 8008462:	1c78      	adds	r0, r7, #1
 8008464:	3a30      	subs	r2, #48	; 0x30
 8008466:	4684      	mov	ip, r0
 8008468:	2a09      	cmp	r2, #9
 800846a:	d94f      	bls.n	800850c <_vfiprintf_r+0x1d0>
 800846c:	2900      	cmp	r1, #0
 800846e:	d111      	bne.n	8008494 <_vfiprintf_r+0x158>
 8008470:	e017      	b.n	80084a2 <_vfiprintf_r+0x166>
 8008472:	3701      	adds	r7, #1
 8008474:	e7a9      	b.n	80083ca <_vfiprintf_r+0x8e>
 8008476:	4b49      	ldr	r3, [pc, #292]	; (800859c <_vfiprintf_r+0x260>)
 8008478:	682a      	ldr	r2, [r5, #0]
 800847a:	1ac0      	subs	r0, r0, r3
 800847c:	2301      	movs	r3, #1
 800847e:	4083      	lsls	r3, r0
 8008480:	4313      	orrs	r3, r2
 8008482:	602b      	str	r3, [r5, #0]
 8008484:	9703      	str	r7, [sp, #12]
 8008486:	e7cb      	b.n	8008420 <_vfiprintf_r+0xe4>
 8008488:	9b07      	ldr	r3, [sp, #28]
 800848a:	1d19      	adds	r1, r3, #4
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	9107      	str	r1, [sp, #28]
 8008490:	2b00      	cmp	r3, #0
 8008492:	db01      	blt.n	8008498 <_vfiprintf_r+0x15c>
 8008494:	930b      	str	r3, [sp, #44]	; 0x2c
 8008496:	e004      	b.n	80084a2 <_vfiprintf_r+0x166>
 8008498:	425b      	negs	r3, r3
 800849a:	60eb      	str	r3, [r5, #12]
 800849c:	2302      	movs	r3, #2
 800849e:	4313      	orrs	r3, r2
 80084a0:	602b      	str	r3, [r5, #0]
 80084a2:	783b      	ldrb	r3, [r7, #0]
 80084a4:	2b2e      	cmp	r3, #46	; 0x2e
 80084a6:	d10a      	bne.n	80084be <_vfiprintf_r+0x182>
 80084a8:	787b      	ldrb	r3, [r7, #1]
 80084aa:	2b2a      	cmp	r3, #42	; 0x2a
 80084ac:	d137      	bne.n	800851e <_vfiprintf_r+0x1e2>
 80084ae:	9b07      	ldr	r3, [sp, #28]
 80084b0:	3702      	adds	r7, #2
 80084b2:	1d1a      	adds	r2, r3, #4
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	9207      	str	r2, [sp, #28]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	db2d      	blt.n	8008518 <_vfiprintf_r+0x1dc>
 80084bc:	9309      	str	r3, [sp, #36]	; 0x24
 80084be:	2203      	movs	r2, #3
 80084c0:	7839      	ldrb	r1, [r7, #0]
 80084c2:	4837      	ldr	r0, [pc, #220]	; (80085a0 <_vfiprintf_r+0x264>)
 80084c4:	f7ff f8ac 	bl	8007620 <memchr>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	d007      	beq.n	80084dc <_vfiprintf_r+0x1a0>
 80084cc:	4b34      	ldr	r3, [pc, #208]	; (80085a0 <_vfiprintf_r+0x264>)
 80084ce:	682a      	ldr	r2, [r5, #0]
 80084d0:	1ac0      	subs	r0, r0, r3
 80084d2:	2340      	movs	r3, #64	; 0x40
 80084d4:	4083      	lsls	r3, r0
 80084d6:	4313      	orrs	r3, r2
 80084d8:	3701      	adds	r7, #1
 80084da:	602b      	str	r3, [r5, #0]
 80084dc:	7839      	ldrb	r1, [r7, #0]
 80084de:	1c7b      	adds	r3, r7, #1
 80084e0:	2206      	movs	r2, #6
 80084e2:	4830      	ldr	r0, [pc, #192]	; (80085a4 <_vfiprintf_r+0x268>)
 80084e4:	9303      	str	r3, [sp, #12]
 80084e6:	7629      	strb	r1, [r5, #24]
 80084e8:	f7ff f89a 	bl	8007620 <memchr>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	d045      	beq.n	800857c <_vfiprintf_r+0x240>
 80084f0:	4b2d      	ldr	r3, [pc, #180]	; (80085a8 <_vfiprintf_r+0x26c>)
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d127      	bne.n	8008546 <_vfiprintf_r+0x20a>
 80084f6:	2207      	movs	r2, #7
 80084f8:	9b07      	ldr	r3, [sp, #28]
 80084fa:	3307      	adds	r3, #7
 80084fc:	4393      	bics	r3, r2
 80084fe:	3308      	adds	r3, #8
 8008500:	9307      	str	r3, [sp, #28]
 8008502:	696b      	ldr	r3, [r5, #20]
 8008504:	9a04      	ldr	r2, [sp, #16]
 8008506:	189b      	adds	r3, r3, r2
 8008508:	616b      	str	r3, [r5, #20]
 800850a:	e75d      	b.n	80083c8 <_vfiprintf_r+0x8c>
 800850c:	210a      	movs	r1, #10
 800850e:	434b      	muls	r3, r1
 8008510:	4667      	mov	r7, ip
 8008512:	189b      	adds	r3, r3, r2
 8008514:	3909      	subs	r1, #9
 8008516:	e7a3      	b.n	8008460 <_vfiprintf_r+0x124>
 8008518:	2301      	movs	r3, #1
 800851a:	425b      	negs	r3, r3
 800851c:	e7ce      	b.n	80084bc <_vfiprintf_r+0x180>
 800851e:	2300      	movs	r3, #0
 8008520:	001a      	movs	r2, r3
 8008522:	3701      	adds	r7, #1
 8008524:	606b      	str	r3, [r5, #4]
 8008526:	7839      	ldrb	r1, [r7, #0]
 8008528:	1c78      	adds	r0, r7, #1
 800852a:	3930      	subs	r1, #48	; 0x30
 800852c:	4684      	mov	ip, r0
 800852e:	2909      	cmp	r1, #9
 8008530:	d903      	bls.n	800853a <_vfiprintf_r+0x1fe>
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0c3      	beq.n	80084be <_vfiprintf_r+0x182>
 8008536:	9209      	str	r2, [sp, #36]	; 0x24
 8008538:	e7c1      	b.n	80084be <_vfiprintf_r+0x182>
 800853a:	230a      	movs	r3, #10
 800853c:	435a      	muls	r2, r3
 800853e:	4667      	mov	r7, ip
 8008540:	1852      	adds	r2, r2, r1
 8008542:	3b09      	subs	r3, #9
 8008544:	e7ef      	b.n	8008526 <_vfiprintf_r+0x1ea>
 8008546:	ab07      	add	r3, sp, #28
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	0022      	movs	r2, r4
 800854c:	0029      	movs	r1, r5
 800854e:	0030      	movs	r0, r6
 8008550:	4b16      	ldr	r3, [pc, #88]	; (80085ac <_vfiprintf_r+0x270>)
 8008552:	f7fd fdbd 	bl	80060d0 <_printf_float>
 8008556:	9004      	str	r0, [sp, #16]
 8008558:	9b04      	ldr	r3, [sp, #16]
 800855a:	3301      	adds	r3, #1
 800855c:	d1d1      	bne.n	8008502 <_vfiprintf_r+0x1c6>
 800855e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008560:	07db      	lsls	r3, r3, #31
 8008562:	d405      	bmi.n	8008570 <_vfiprintf_r+0x234>
 8008564:	89a3      	ldrh	r3, [r4, #12]
 8008566:	059b      	lsls	r3, r3, #22
 8008568:	d402      	bmi.n	8008570 <_vfiprintf_r+0x234>
 800856a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800856c:	f000 fad4 	bl	8008b18 <__retarget_lock_release_recursive>
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	065b      	lsls	r3, r3, #25
 8008574:	d500      	bpl.n	8008578 <_vfiprintf_r+0x23c>
 8008576:	e70a      	b.n	800838e <_vfiprintf_r+0x52>
 8008578:	980d      	ldr	r0, [sp, #52]	; 0x34
 800857a:	e70a      	b.n	8008392 <_vfiprintf_r+0x56>
 800857c:	ab07      	add	r3, sp, #28
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	0022      	movs	r2, r4
 8008582:	0029      	movs	r1, r5
 8008584:	0030      	movs	r0, r6
 8008586:	4b09      	ldr	r3, [pc, #36]	; (80085ac <_vfiprintf_r+0x270>)
 8008588:	f7fe f860 	bl	800664c <_printf_i>
 800858c:	e7e3      	b.n	8008556 <_vfiprintf_r+0x21a>
 800858e:	46c0      	nop			; (mov r8, r8)
 8008590:	0800929c 	.word	0x0800929c
 8008594:	080092bc 	.word	0x080092bc
 8008598:	0800927c 	.word	0x0800927c
 800859c:	08009124 	.word	0x08009124
 80085a0:	0800912a 	.word	0x0800912a
 80085a4:	0800912e 	.word	0x0800912e
 80085a8:	080060d1 	.word	0x080060d1
 80085ac:	08008317 	.word	0x08008317

080085b0 <__swbuf_r>:
 80085b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b2:	0005      	movs	r5, r0
 80085b4:	000e      	movs	r6, r1
 80085b6:	0014      	movs	r4, r2
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d004      	beq.n	80085c6 <__swbuf_r+0x16>
 80085bc:	6983      	ldr	r3, [r0, #24]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d101      	bne.n	80085c6 <__swbuf_r+0x16>
 80085c2:	f000 fa07 	bl	80089d4 <__sinit>
 80085c6:	4b22      	ldr	r3, [pc, #136]	; (8008650 <__swbuf_r+0xa0>)
 80085c8:	429c      	cmp	r4, r3
 80085ca:	d12e      	bne.n	800862a <__swbuf_r+0x7a>
 80085cc:	686c      	ldr	r4, [r5, #4]
 80085ce:	69a3      	ldr	r3, [r4, #24]
 80085d0:	60a3      	str	r3, [r4, #8]
 80085d2:	89a3      	ldrh	r3, [r4, #12]
 80085d4:	071b      	lsls	r3, r3, #28
 80085d6:	d532      	bpl.n	800863e <__swbuf_r+0x8e>
 80085d8:	6923      	ldr	r3, [r4, #16]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d02f      	beq.n	800863e <__swbuf_r+0x8e>
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	6922      	ldr	r2, [r4, #16]
 80085e2:	b2f7      	uxtb	r7, r6
 80085e4:	1a98      	subs	r0, r3, r2
 80085e6:	6963      	ldr	r3, [r4, #20]
 80085e8:	b2f6      	uxtb	r6, r6
 80085ea:	4283      	cmp	r3, r0
 80085ec:	dc05      	bgt.n	80085fa <__swbuf_r+0x4a>
 80085ee:	0021      	movs	r1, r4
 80085f0:	0028      	movs	r0, r5
 80085f2:	f000 f94d 	bl	8008890 <_fflush_r>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d127      	bne.n	800864a <__swbuf_r+0x9a>
 80085fa:	68a3      	ldr	r3, [r4, #8]
 80085fc:	3001      	adds	r0, #1
 80085fe:	3b01      	subs	r3, #1
 8008600:	60a3      	str	r3, [r4, #8]
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	1c5a      	adds	r2, r3, #1
 8008606:	6022      	str	r2, [r4, #0]
 8008608:	701f      	strb	r7, [r3, #0]
 800860a:	6963      	ldr	r3, [r4, #20]
 800860c:	4283      	cmp	r3, r0
 800860e:	d004      	beq.n	800861a <__swbuf_r+0x6a>
 8008610:	89a3      	ldrh	r3, [r4, #12]
 8008612:	07db      	lsls	r3, r3, #31
 8008614:	d507      	bpl.n	8008626 <__swbuf_r+0x76>
 8008616:	2e0a      	cmp	r6, #10
 8008618:	d105      	bne.n	8008626 <__swbuf_r+0x76>
 800861a:	0021      	movs	r1, r4
 800861c:	0028      	movs	r0, r5
 800861e:	f000 f937 	bl	8008890 <_fflush_r>
 8008622:	2800      	cmp	r0, #0
 8008624:	d111      	bne.n	800864a <__swbuf_r+0x9a>
 8008626:	0030      	movs	r0, r6
 8008628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800862a:	4b0a      	ldr	r3, [pc, #40]	; (8008654 <__swbuf_r+0xa4>)
 800862c:	429c      	cmp	r4, r3
 800862e:	d101      	bne.n	8008634 <__swbuf_r+0x84>
 8008630:	68ac      	ldr	r4, [r5, #8]
 8008632:	e7cc      	b.n	80085ce <__swbuf_r+0x1e>
 8008634:	4b08      	ldr	r3, [pc, #32]	; (8008658 <__swbuf_r+0xa8>)
 8008636:	429c      	cmp	r4, r3
 8008638:	d1c9      	bne.n	80085ce <__swbuf_r+0x1e>
 800863a:	68ec      	ldr	r4, [r5, #12]
 800863c:	e7c7      	b.n	80085ce <__swbuf_r+0x1e>
 800863e:	0021      	movs	r1, r4
 8008640:	0028      	movs	r0, r5
 8008642:	f000 f819 	bl	8008678 <__swsetup_r>
 8008646:	2800      	cmp	r0, #0
 8008648:	d0c9      	beq.n	80085de <__swbuf_r+0x2e>
 800864a:	2601      	movs	r6, #1
 800864c:	4276      	negs	r6, r6
 800864e:	e7ea      	b.n	8008626 <__swbuf_r+0x76>
 8008650:	0800929c 	.word	0x0800929c
 8008654:	080092bc 	.word	0x080092bc
 8008658:	0800927c 	.word	0x0800927c

0800865c <__ascii_wctomb>:
 800865c:	0003      	movs	r3, r0
 800865e:	1e08      	subs	r0, r1, #0
 8008660:	d005      	beq.n	800866e <__ascii_wctomb+0x12>
 8008662:	2aff      	cmp	r2, #255	; 0xff
 8008664:	d904      	bls.n	8008670 <__ascii_wctomb+0x14>
 8008666:	228a      	movs	r2, #138	; 0x8a
 8008668:	2001      	movs	r0, #1
 800866a:	601a      	str	r2, [r3, #0]
 800866c:	4240      	negs	r0, r0
 800866e:	4770      	bx	lr
 8008670:	2001      	movs	r0, #1
 8008672:	700a      	strb	r2, [r1, #0]
 8008674:	e7fb      	b.n	800866e <__ascii_wctomb+0x12>
	...

08008678 <__swsetup_r>:
 8008678:	4b37      	ldr	r3, [pc, #220]	; (8008758 <__swsetup_r+0xe0>)
 800867a:	b570      	push	{r4, r5, r6, lr}
 800867c:	681d      	ldr	r5, [r3, #0]
 800867e:	0006      	movs	r6, r0
 8008680:	000c      	movs	r4, r1
 8008682:	2d00      	cmp	r5, #0
 8008684:	d005      	beq.n	8008692 <__swsetup_r+0x1a>
 8008686:	69ab      	ldr	r3, [r5, #24]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d102      	bne.n	8008692 <__swsetup_r+0x1a>
 800868c:	0028      	movs	r0, r5
 800868e:	f000 f9a1 	bl	80089d4 <__sinit>
 8008692:	4b32      	ldr	r3, [pc, #200]	; (800875c <__swsetup_r+0xe4>)
 8008694:	429c      	cmp	r4, r3
 8008696:	d10f      	bne.n	80086b8 <__swsetup_r+0x40>
 8008698:	686c      	ldr	r4, [r5, #4]
 800869a:	230c      	movs	r3, #12
 800869c:	5ee2      	ldrsh	r2, [r4, r3]
 800869e:	b293      	uxth	r3, r2
 80086a0:	0711      	lsls	r1, r2, #28
 80086a2:	d42d      	bmi.n	8008700 <__swsetup_r+0x88>
 80086a4:	06d9      	lsls	r1, r3, #27
 80086a6:	d411      	bmi.n	80086cc <__swsetup_r+0x54>
 80086a8:	2309      	movs	r3, #9
 80086aa:	2001      	movs	r0, #1
 80086ac:	6033      	str	r3, [r6, #0]
 80086ae:	3337      	adds	r3, #55	; 0x37
 80086b0:	4313      	orrs	r3, r2
 80086b2:	81a3      	strh	r3, [r4, #12]
 80086b4:	4240      	negs	r0, r0
 80086b6:	bd70      	pop	{r4, r5, r6, pc}
 80086b8:	4b29      	ldr	r3, [pc, #164]	; (8008760 <__swsetup_r+0xe8>)
 80086ba:	429c      	cmp	r4, r3
 80086bc:	d101      	bne.n	80086c2 <__swsetup_r+0x4a>
 80086be:	68ac      	ldr	r4, [r5, #8]
 80086c0:	e7eb      	b.n	800869a <__swsetup_r+0x22>
 80086c2:	4b28      	ldr	r3, [pc, #160]	; (8008764 <__swsetup_r+0xec>)
 80086c4:	429c      	cmp	r4, r3
 80086c6:	d1e8      	bne.n	800869a <__swsetup_r+0x22>
 80086c8:	68ec      	ldr	r4, [r5, #12]
 80086ca:	e7e6      	b.n	800869a <__swsetup_r+0x22>
 80086cc:	075b      	lsls	r3, r3, #29
 80086ce:	d513      	bpl.n	80086f8 <__swsetup_r+0x80>
 80086d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086d2:	2900      	cmp	r1, #0
 80086d4:	d008      	beq.n	80086e8 <__swsetup_r+0x70>
 80086d6:	0023      	movs	r3, r4
 80086d8:	3344      	adds	r3, #68	; 0x44
 80086da:	4299      	cmp	r1, r3
 80086dc:	d002      	beq.n	80086e4 <__swsetup_r+0x6c>
 80086de:	0030      	movs	r0, r6
 80086e0:	f7ff fb5e 	bl	8007da0 <_free_r>
 80086e4:	2300      	movs	r3, #0
 80086e6:	6363      	str	r3, [r4, #52]	; 0x34
 80086e8:	2224      	movs	r2, #36	; 0x24
 80086ea:	89a3      	ldrh	r3, [r4, #12]
 80086ec:	4393      	bics	r3, r2
 80086ee:	81a3      	strh	r3, [r4, #12]
 80086f0:	2300      	movs	r3, #0
 80086f2:	6063      	str	r3, [r4, #4]
 80086f4:	6923      	ldr	r3, [r4, #16]
 80086f6:	6023      	str	r3, [r4, #0]
 80086f8:	2308      	movs	r3, #8
 80086fa:	89a2      	ldrh	r2, [r4, #12]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	81a3      	strh	r3, [r4, #12]
 8008700:	6923      	ldr	r3, [r4, #16]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10b      	bne.n	800871e <__swsetup_r+0xa6>
 8008706:	21a0      	movs	r1, #160	; 0xa0
 8008708:	2280      	movs	r2, #128	; 0x80
 800870a:	89a3      	ldrh	r3, [r4, #12]
 800870c:	0089      	lsls	r1, r1, #2
 800870e:	0092      	lsls	r2, r2, #2
 8008710:	400b      	ands	r3, r1
 8008712:	4293      	cmp	r3, r2
 8008714:	d003      	beq.n	800871e <__swsetup_r+0xa6>
 8008716:	0021      	movs	r1, r4
 8008718:	0030      	movs	r0, r6
 800871a:	f000 fa27 	bl	8008b6c <__smakebuf_r>
 800871e:	220c      	movs	r2, #12
 8008720:	5ea3      	ldrsh	r3, [r4, r2]
 8008722:	2001      	movs	r0, #1
 8008724:	001a      	movs	r2, r3
 8008726:	b299      	uxth	r1, r3
 8008728:	4002      	ands	r2, r0
 800872a:	4203      	tst	r3, r0
 800872c:	d00f      	beq.n	800874e <__swsetup_r+0xd6>
 800872e:	2200      	movs	r2, #0
 8008730:	60a2      	str	r2, [r4, #8]
 8008732:	6962      	ldr	r2, [r4, #20]
 8008734:	4252      	negs	r2, r2
 8008736:	61a2      	str	r2, [r4, #24]
 8008738:	2000      	movs	r0, #0
 800873a:	6922      	ldr	r2, [r4, #16]
 800873c:	4282      	cmp	r2, r0
 800873e:	d1ba      	bne.n	80086b6 <__swsetup_r+0x3e>
 8008740:	060a      	lsls	r2, r1, #24
 8008742:	d5b8      	bpl.n	80086b6 <__swsetup_r+0x3e>
 8008744:	2240      	movs	r2, #64	; 0x40
 8008746:	4313      	orrs	r3, r2
 8008748:	81a3      	strh	r3, [r4, #12]
 800874a:	3801      	subs	r0, #1
 800874c:	e7b3      	b.n	80086b6 <__swsetup_r+0x3e>
 800874e:	0788      	lsls	r0, r1, #30
 8008750:	d400      	bmi.n	8008754 <__swsetup_r+0xdc>
 8008752:	6962      	ldr	r2, [r4, #20]
 8008754:	60a2      	str	r2, [r4, #8]
 8008756:	e7ef      	b.n	8008738 <__swsetup_r+0xc0>
 8008758:	2000000c 	.word	0x2000000c
 800875c:	0800929c 	.word	0x0800929c
 8008760:	080092bc 	.word	0x080092bc
 8008764:	0800927c 	.word	0x0800927c

08008768 <abort>:
 8008768:	2006      	movs	r0, #6
 800876a:	b510      	push	{r4, lr}
 800876c:	f000 fa74 	bl	8008c58 <raise>
 8008770:	2001      	movs	r0, #1
 8008772:	f7fa fa83 	bl	8002c7c <_exit>
	...

08008778 <__sflush_r>:
 8008778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800877a:	898b      	ldrh	r3, [r1, #12]
 800877c:	0005      	movs	r5, r0
 800877e:	000c      	movs	r4, r1
 8008780:	071a      	lsls	r2, r3, #28
 8008782:	d45f      	bmi.n	8008844 <__sflush_r+0xcc>
 8008784:	684a      	ldr	r2, [r1, #4]
 8008786:	2a00      	cmp	r2, #0
 8008788:	dc04      	bgt.n	8008794 <__sflush_r+0x1c>
 800878a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800878c:	2a00      	cmp	r2, #0
 800878e:	dc01      	bgt.n	8008794 <__sflush_r+0x1c>
 8008790:	2000      	movs	r0, #0
 8008792:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008794:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008796:	2f00      	cmp	r7, #0
 8008798:	d0fa      	beq.n	8008790 <__sflush_r+0x18>
 800879a:	2200      	movs	r2, #0
 800879c:	2180      	movs	r1, #128	; 0x80
 800879e:	682e      	ldr	r6, [r5, #0]
 80087a0:	602a      	str	r2, [r5, #0]
 80087a2:	001a      	movs	r2, r3
 80087a4:	0149      	lsls	r1, r1, #5
 80087a6:	400a      	ands	r2, r1
 80087a8:	420b      	tst	r3, r1
 80087aa:	d034      	beq.n	8008816 <__sflush_r+0x9e>
 80087ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087ae:	89a3      	ldrh	r3, [r4, #12]
 80087b0:	075b      	lsls	r3, r3, #29
 80087b2:	d506      	bpl.n	80087c2 <__sflush_r+0x4a>
 80087b4:	6863      	ldr	r3, [r4, #4]
 80087b6:	1ac0      	subs	r0, r0, r3
 80087b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <__sflush_r+0x4a>
 80087be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087c0:	1ac0      	subs	r0, r0, r3
 80087c2:	0002      	movs	r2, r0
 80087c4:	6a21      	ldr	r1, [r4, #32]
 80087c6:	2300      	movs	r3, #0
 80087c8:	0028      	movs	r0, r5
 80087ca:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80087cc:	47b8      	blx	r7
 80087ce:	89a1      	ldrh	r1, [r4, #12]
 80087d0:	1c43      	adds	r3, r0, #1
 80087d2:	d106      	bne.n	80087e2 <__sflush_r+0x6a>
 80087d4:	682b      	ldr	r3, [r5, #0]
 80087d6:	2b1d      	cmp	r3, #29
 80087d8:	d831      	bhi.n	800883e <__sflush_r+0xc6>
 80087da:	4a2c      	ldr	r2, [pc, #176]	; (800888c <__sflush_r+0x114>)
 80087dc:	40da      	lsrs	r2, r3
 80087de:	07d3      	lsls	r3, r2, #31
 80087e0:	d52d      	bpl.n	800883e <__sflush_r+0xc6>
 80087e2:	2300      	movs	r3, #0
 80087e4:	6063      	str	r3, [r4, #4]
 80087e6:	6923      	ldr	r3, [r4, #16]
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	04cb      	lsls	r3, r1, #19
 80087ec:	d505      	bpl.n	80087fa <__sflush_r+0x82>
 80087ee:	1c43      	adds	r3, r0, #1
 80087f0:	d102      	bne.n	80087f8 <__sflush_r+0x80>
 80087f2:	682b      	ldr	r3, [r5, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d100      	bne.n	80087fa <__sflush_r+0x82>
 80087f8:	6560      	str	r0, [r4, #84]	; 0x54
 80087fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087fc:	602e      	str	r6, [r5, #0]
 80087fe:	2900      	cmp	r1, #0
 8008800:	d0c6      	beq.n	8008790 <__sflush_r+0x18>
 8008802:	0023      	movs	r3, r4
 8008804:	3344      	adds	r3, #68	; 0x44
 8008806:	4299      	cmp	r1, r3
 8008808:	d002      	beq.n	8008810 <__sflush_r+0x98>
 800880a:	0028      	movs	r0, r5
 800880c:	f7ff fac8 	bl	8007da0 <_free_r>
 8008810:	2000      	movs	r0, #0
 8008812:	6360      	str	r0, [r4, #52]	; 0x34
 8008814:	e7bd      	b.n	8008792 <__sflush_r+0x1a>
 8008816:	2301      	movs	r3, #1
 8008818:	0028      	movs	r0, r5
 800881a:	6a21      	ldr	r1, [r4, #32]
 800881c:	47b8      	blx	r7
 800881e:	1c43      	adds	r3, r0, #1
 8008820:	d1c5      	bne.n	80087ae <__sflush_r+0x36>
 8008822:	682b      	ldr	r3, [r5, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d0c2      	beq.n	80087ae <__sflush_r+0x36>
 8008828:	2b1d      	cmp	r3, #29
 800882a:	d001      	beq.n	8008830 <__sflush_r+0xb8>
 800882c:	2b16      	cmp	r3, #22
 800882e:	d101      	bne.n	8008834 <__sflush_r+0xbc>
 8008830:	602e      	str	r6, [r5, #0]
 8008832:	e7ad      	b.n	8008790 <__sflush_r+0x18>
 8008834:	2340      	movs	r3, #64	; 0x40
 8008836:	89a2      	ldrh	r2, [r4, #12]
 8008838:	4313      	orrs	r3, r2
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	e7a9      	b.n	8008792 <__sflush_r+0x1a>
 800883e:	2340      	movs	r3, #64	; 0x40
 8008840:	430b      	orrs	r3, r1
 8008842:	e7fa      	b.n	800883a <__sflush_r+0xc2>
 8008844:	690f      	ldr	r7, [r1, #16]
 8008846:	2f00      	cmp	r7, #0
 8008848:	d0a2      	beq.n	8008790 <__sflush_r+0x18>
 800884a:	680a      	ldr	r2, [r1, #0]
 800884c:	600f      	str	r7, [r1, #0]
 800884e:	1bd2      	subs	r2, r2, r7
 8008850:	9201      	str	r2, [sp, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	079b      	lsls	r3, r3, #30
 8008856:	d100      	bne.n	800885a <__sflush_r+0xe2>
 8008858:	694a      	ldr	r2, [r1, #20]
 800885a:	60a2      	str	r2, [r4, #8]
 800885c:	9b01      	ldr	r3, [sp, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	dc00      	bgt.n	8008864 <__sflush_r+0xec>
 8008862:	e795      	b.n	8008790 <__sflush_r+0x18>
 8008864:	003a      	movs	r2, r7
 8008866:	0028      	movs	r0, r5
 8008868:	9b01      	ldr	r3, [sp, #4]
 800886a:	6a21      	ldr	r1, [r4, #32]
 800886c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800886e:	47b0      	blx	r6
 8008870:	2800      	cmp	r0, #0
 8008872:	dc06      	bgt.n	8008882 <__sflush_r+0x10a>
 8008874:	2340      	movs	r3, #64	; 0x40
 8008876:	2001      	movs	r0, #1
 8008878:	89a2      	ldrh	r2, [r4, #12]
 800887a:	4240      	negs	r0, r0
 800887c:	4313      	orrs	r3, r2
 800887e:	81a3      	strh	r3, [r4, #12]
 8008880:	e787      	b.n	8008792 <__sflush_r+0x1a>
 8008882:	9b01      	ldr	r3, [sp, #4]
 8008884:	183f      	adds	r7, r7, r0
 8008886:	1a1b      	subs	r3, r3, r0
 8008888:	9301      	str	r3, [sp, #4]
 800888a:	e7e7      	b.n	800885c <__sflush_r+0xe4>
 800888c:	20400001 	.word	0x20400001

08008890 <_fflush_r>:
 8008890:	690b      	ldr	r3, [r1, #16]
 8008892:	b570      	push	{r4, r5, r6, lr}
 8008894:	0005      	movs	r5, r0
 8008896:	000c      	movs	r4, r1
 8008898:	2b00      	cmp	r3, #0
 800889a:	d102      	bne.n	80088a2 <_fflush_r+0x12>
 800889c:	2500      	movs	r5, #0
 800889e:	0028      	movs	r0, r5
 80088a0:	bd70      	pop	{r4, r5, r6, pc}
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d004      	beq.n	80088b0 <_fflush_r+0x20>
 80088a6:	6983      	ldr	r3, [r0, #24]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <_fflush_r+0x20>
 80088ac:	f000 f892 	bl	80089d4 <__sinit>
 80088b0:	4b14      	ldr	r3, [pc, #80]	; (8008904 <_fflush_r+0x74>)
 80088b2:	429c      	cmp	r4, r3
 80088b4:	d11b      	bne.n	80088ee <_fflush_r+0x5e>
 80088b6:	686c      	ldr	r4, [r5, #4]
 80088b8:	220c      	movs	r2, #12
 80088ba:	5ea3      	ldrsh	r3, [r4, r2]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d0ed      	beq.n	800889c <_fflush_r+0xc>
 80088c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088c2:	07d2      	lsls	r2, r2, #31
 80088c4:	d404      	bmi.n	80088d0 <_fflush_r+0x40>
 80088c6:	059b      	lsls	r3, r3, #22
 80088c8:	d402      	bmi.n	80088d0 <_fflush_r+0x40>
 80088ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088cc:	f000 f923 	bl	8008b16 <__retarget_lock_acquire_recursive>
 80088d0:	0028      	movs	r0, r5
 80088d2:	0021      	movs	r1, r4
 80088d4:	f7ff ff50 	bl	8008778 <__sflush_r>
 80088d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088da:	0005      	movs	r5, r0
 80088dc:	07db      	lsls	r3, r3, #31
 80088de:	d4de      	bmi.n	800889e <_fflush_r+0xe>
 80088e0:	89a3      	ldrh	r3, [r4, #12]
 80088e2:	059b      	lsls	r3, r3, #22
 80088e4:	d4db      	bmi.n	800889e <_fflush_r+0xe>
 80088e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088e8:	f000 f916 	bl	8008b18 <__retarget_lock_release_recursive>
 80088ec:	e7d7      	b.n	800889e <_fflush_r+0xe>
 80088ee:	4b06      	ldr	r3, [pc, #24]	; (8008908 <_fflush_r+0x78>)
 80088f0:	429c      	cmp	r4, r3
 80088f2:	d101      	bne.n	80088f8 <_fflush_r+0x68>
 80088f4:	68ac      	ldr	r4, [r5, #8]
 80088f6:	e7df      	b.n	80088b8 <_fflush_r+0x28>
 80088f8:	4b04      	ldr	r3, [pc, #16]	; (800890c <_fflush_r+0x7c>)
 80088fa:	429c      	cmp	r4, r3
 80088fc:	d1dc      	bne.n	80088b8 <_fflush_r+0x28>
 80088fe:	68ec      	ldr	r4, [r5, #12]
 8008900:	e7da      	b.n	80088b8 <_fflush_r+0x28>
 8008902:	46c0      	nop			; (mov r8, r8)
 8008904:	0800929c 	.word	0x0800929c
 8008908:	080092bc 	.word	0x080092bc
 800890c:	0800927c 	.word	0x0800927c

08008910 <std>:
 8008910:	2300      	movs	r3, #0
 8008912:	b510      	push	{r4, lr}
 8008914:	0004      	movs	r4, r0
 8008916:	6003      	str	r3, [r0, #0]
 8008918:	6043      	str	r3, [r0, #4]
 800891a:	6083      	str	r3, [r0, #8]
 800891c:	8181      	strh	r1, [r0, #12]
 800891e:	6643      	str	r3, [r0, #100]	; 0x64
 8008920:	0019      	movs	r1, r3
 8008922:	81c2      	strh	r2, [r0, #14]
 8008924:	6103      	str	r3, [r0, #16]
 8008926:	6143      	str	r3, [r0, #20]
 8008928:	6183      	str	r3, [r0, #24]
 800892a:	2208      	movs	r2, #8
 800892c:	305c      	adds	r0, #92	; 0x5c
 800892e:	f7fd fb1d 	bl	8005f6c <memset>
 8008932:	4b05      	ldr	r3, [pc, #20]	; (8008948 <std+0x38>)
 8008934:	6263      	str	r3, [r4, #36]	; 0x24
 8008936:	4b05      	ldr	r3, [pc, #20]	; (800894c <std+0x3c>)
 8008938:	6224      	str	r4, [r4, #32]
 800893a:	62a3      	str	r3, [r4, #40]	; 0x28
 800893c:	4b04      	ldr	r3, [pc, #16]	; (8008950 <std+0x40>)
 800893e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008940:	4b04      	ldr	r3, [pc, #16]	; (8008954 <std+0x44>)
 8008942:	6323      	str	r3, [r4, #48]	; 0x30
 8008944:	bd10      	pop	{r4, pc}
 8008946:	46c0      	nop			; (mov r8, r8)
 8008948:	08008c99 	.word	0x08008c99
 800894c:	08008cc1 	.word	0x08008cc1
 8008950:	08008cf9 	.word	0x08008cf9
 8008954:	08008d25 	.word	0x08008d25

08008958 <_cleanup_r>:
 8008958:	b510      	push	{r4, lr}
 800895a:	4902      	ldr	r1, [pc, #8]	; (8008964 <_cleanup_r+0xc>)
 800895c:	f000 f8ba 	bl	8008ad4 <_fwalk_reent>
 8008960:	bd10      	pop	{r4, pc}
 8008962:	46c0      	nop			; (mov r8, r8)
 8008964:	08008891 	.word	0x08008891

08008968 <__sfmoreglue>:
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	2568      	movs	r5, #104	; 0x68
 800896c:	1e4a      	subs	r2, r1, #1
 800896e:	4355      	muls	r5, r2
 8008970:	000e      	movs	r6, r1
 8008972:	0029      	movs	r1, r5
 8008974:	3174      	adds	r1, #116	; 0x74
 8008976:	f7ff fa5d 	bl	8007e34 <_malloc_r>
 800897a:	1e04      	subs	r4, r0, #0
 800897c:	d008      	beq.n	8008990 <__sfmoreglue+0x28>
 800897e:	2100      	movs	r1, #0
 8008980:	002a      	movs	r2, r5
 8008982:	6001      	str	r1, [r0, #0]
 8008984:	6046      	str	r6, [r0, #4]
 8008986:	300c      	adds	r0, #12
 8008988:	60a0      	str	r0, [r4, #8]
 800898a:	3268      	adds	r2, #104	; 0x68
 800898c:	f7fd faee 	bl	8005f6c <memset>
 8008990:	0020      	movs	r0, r4
 8008992:	bd70      	pop	{r4, r5, r6, pc}

08008994 <__sfp_lock_acquire>:
 8008994:	b510      	push	{r4, lr}
 8008996:	4802      	ldr	r0, [pc, #8]	; (80089a0 <__sfp_lock_acquire+0xc>)
 8008998:	f000 f8bd 	bl	8008b16 <__retarget_lock_acquire_recursive>
 800899c:	bd10      	pop	{r4, pc}
 800899e:	46c0      	nop			; (mov r8, r8)
 80089a0:	20000310 	.word	0x20000310

080089a4 <__sfp_lock_release>:
 80089a4:	b510      	push	{r4, lr}
 80089a6:	4802      	ldr	r0, [pc, #8]	; (80089b0 <__sfp_lock_release+0xc>)
 80089a8:	f000 f8b6 	bl	8008b18 <__retarget_lock_release_recursive>
 80089ac:	bd10      	pop	{r4, pc}
 80089ae:	46c0      	nop			; (mov r8, r8)
 80089b0:	20000310 	.word	0x20000310

080089b4 <__sinit_lock_acquire>:
 80089b4:	b510      	push	{r4, lr}
 80089b6:	4802      	ldr	r0, [pc, #8]	; (80089c0 <__sinit_lock_acquire+0xc>)
 80089b8:	f000 f8ad 	bl	8008b16 <__retarget_lock_acquire_recursive>
 80089bc:	bd10      	pop	{r4, pc}
 80089be:	46c0      	nop			; (mov r8, r8)
 80089c0:	2000030b 	.word	0x2000030b

080089c4 <__sinit_lock_release>:
 80089c4:	b510      	push	{r4, lr}
 80089c6:	4802      	ldr	r0, [pc, #8]	; (80089d0 <__sinit_lock_release+0xc>)
 80089c8:	f000 f8a6 	bl	8008b18 <__retarget_lock_release_recursive>
 80089cc:	bd10      	pop	{r4, pc}
 80089ce:	46c0      	nop			; (mov r8, r8)
 80089d0:	2000030b 	.word	0x2000030b

080089d4 <__sinit>:
 80089d4:	b513      	push	{r0, r1, r4, lr}
 80089d6:	0004      	movs	r4, r0
 80089d8:	f7ff ffec 	bl	80089b4 <__sinit_lock_acquire>
 80089dc:	69a3      	ldr	r3, [r4, #24]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d002      	beq.n	80089e8 <__sinit+0x14>
 80089e2:	f7ff ffef 	bl	80089c4 <__sinit_lock_release>
 80089e6:	bd13      	pop	{r0, r1, r4, pc}
 80089e8:	64a3      	str	r3, [r4, #72]	; 0x48
 80089ea:	64e3      	str	r3, [r4, #76]	; 0x4c
 80089ec:	6523      	str	r3, [r4, #80]	; 0x50
 80089ee:	4b13      	ldr	r3, [pc, #76]	; (8008a3c <__sinit+0x68>)
 80089f0:	4a13      	ldr	r2, [pc, #76]	; (8008a40 <__sinit+0x6c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80089f6:	9301      	str	r3, [sp, #4]
 80089f8:	42a3      	cmp	r3, r4
 80089fa:	d101      	bne.n	8008a00 <__sinit+0x2c>
 80089fc:	2301      	movs	r3, #1
 80089fe:	61a3      	str	r3, [r4, #24]
 8008a00:	0020      	movs	r0, r4
 8008a02:	f000 f81f 	bl	8008a44 <__sfp>
 8008a06:	6060      	str	r0, [r4, #4]
 8008a08:	0020      	movs	r0, r4
 8008a0a:	f000 f81b 	bl	8008a44 <__sfp>
 8008a0e:	60a0      	str	r0, [r4, #8]
 8008a10:	0020      	movs	r0, r4
 8008a12:	f000 f817 	bl	8008a44 <__sfp>
 8008a16:	2200      	movs	r2, #0
 8008a18:	2104      	movs	r1, #4
 8008a1a:	60e0      	str	r0, [r4, #12]
 8008a1c:	6860      	ldr	r0, [r4, #4]
 8008a1e:	f7ff ff77 	bl	8008910 <std>
 8008a22:	2201      	movs	r2, #1
 8008a24:	2109      	movs	r1, #9
 8008a26:	68a0      	ldr	r0, [r4, #8]
 8008a28:	f7ff ff72 	bl	8008910 <std>
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	2112      	movs	r1, #18
 8008a30:	68e0      	ldr	r0, [r4, #12]
 8008a32:	f7ff ff6d 	bl	8008910 <std>
 8008a36:	2301      	movs	r3, #1
 8008a38:	61a3      	str	r3, [r4, #24]
 8008a3a:	e7d2      	b.n	80089e2 <__sinit+0xe>
 8008a3c:	08008efc 	.word	0x08008efc
 8008a40:	08008959 	.word	0x08008959

08008a44 <__sfp>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	0007      	movs	r7, r0
 8008a48:	f7ff ffa4 	bl	8008994 <__sfp_lock_acquire>
 8008a4c:	4b1f      	ldr	r3, [pc, #124]	; (8008acc <__sfp+0x88>)
 8008a4e:	681e      	ldr	r6, [r3, #0]
 8008a50:	69b3      	ldr	r3, [r6, #24]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d102      	bne.n	8008a5c <__sfp+0x18>
 8008a56:	0030      	movs	r0, r6
 8008a58:	f7ff ffbc 	bl	80089d4 <__sinit>
 8008a5c:	3648      	adds	r6, #72	; 0x48
 8008a5e:	68b4      	ldr	r4, [r6, #8]
 8008a60:	6873      	ldr	r3, [r6, #4]
 8008a62:	3b01      	subs	r3, #1
 8008a64:	d504      	bpl.n	8008a70 <__sfp+0x2c>
 8008a66:	6833      	ldr	r3, [r6, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d022      	beq.n	8008ab2 <__sfp+0x6e>
 8008a6c:	6836      	ldr	r6, [r6, #0]
 8008a6e:	e7f6      	b.n	8008a5e <__sfp+0x1a>
 8008a70:	220c      	movs	r2, #12
 8008a72:	5ea5      	ldrsh	r5, [r4, r2]
 8008a74:	2d00      	cmp	r5, #0
 8008a76:	d11a      	bne.n	8008aae <__sfp+0x6a>
 8008a78:	0020      	movs	r0, r4
 8008a7a:	4b15      	ldr	r3, [pc, #84]	; (8008ad0 <__sfp+0x8c>)
 8008a7c:	3058      	adds	r0, #88	; 0x58
 8008a7e:	60e3      	str	r3, [r4, #12]
 8008a80:	6665      	str	r5, [r4, #100]	; 0x64
 8008a82:	f000 f847 	bl	8008b14 <__retarget_lock_init_recursive>
 8008a86:	f7ff ff8d 	bl	80089a4 <__sfp_lock_release>
 8008a8a:	0020      	movs	r0, r4
 8008a8c:	2208      	movs	r2, #8
 8008a8e:	0029      	movs	r1, r5
 8008a90:	6025      	str	r5, [r4, #0]
 8008a92:	60a5      	str	r5, [r4, #8]
 8008a94:	6065      	str	r5, [r4, #4]
 8008a96:	6125      	str	r5, [r4, #16]
 8008a98:	6165      	str	r5, [r4, #20]
 8008a9a:	61a5      	str	r5, [r4, #24]
 8008a9c:	305c      	adds	r0, #92	; 0x5c
 8008a9e:	f7fd fa65 	bl	8005f6c <memset>
 8008aa2:	6365      	str	r5, [r4, #52]	; 0x34
 8008aa4:	63a5      	str	r5, [r4, #56]	; 0x38
 8008aa6:	64a5      	str	r5, [r4, #72]	; 0x48
 8008aa8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008aaa:	0020      	movs	r0, r4
 8008aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aae:	3468      	adds	r4, #104	; 0x68
 8008ab0:	e7d7      	b.n	8008a62 <__sfp+0x1e>
 8008ab2:	2104      	movs	r1, #4
 8008ab4:	0038      	movs	r0, r7
 8008ab6:	f7ff ff57 	bl	8008968 <__sfmoreglue>
 8008aba:	1e04      	subs	r4, r0, #0
 8008abc:	6030      	str	r0, [r6, #0]
 8008abe:	d1d5      	bne.n	8008a6c <__sfp+0x28>
 8008ac0:	f7ff ff70 	bl	80089a4 <__sfp_lock_release>
 8008ac4:	230c      	movs	r3, #12
 8008ac6:	603b      	str	r3, [r7, #0]
 8008ac8:	e7ef      	b.n	8008aaa <__sfp+0x66>
 8008aca:	46c0      	nop			; (mov r8, r8)
 8008acc:	08008efc 	.word	0x08008efc
 8008ad0:	ffff0001 	.word	0xffff0001

08008ad4 <_fwalk_reent>:
 8008ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ad6:	0004      	movs	r4, r0
 8008ad8:	0006      	movs	r6, r0
 8008ada:	2700      	movs	r7, #0
 8008adc:	9101      	str	r1, [sp, #4]
 8008ade:	3448      	adds	r4, #72	; 0x48
 8008ae0:	6863      	ldr	r3, [r4, #4]
 8008ae2:	68a5      	ldr	r5, [r4, #8]
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	9b00      	ldr	r3, [sp, #0]
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	d504      	bpl.n	8008af8 <_fwalk_reent+0x24>
 8008aee:	6824      	ldr	r4, [r4, #0]
 8008af0:	2c00      	cmp	r4, #0
 8008af2:	d1f5      	bne.n	8008ae0 <_fwalk_reent+0xc>
 8008af4:	0038      	movs	r0, r7
 8008af6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008af8:	89ab      	ldrh	r3, [r5, #12]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d908      	bls.n	8008b10 <_fwalk_reent+0x3c>
 8008afe:	220e      	movs	r2, #14
 8008b00:	5eab      	ldrsh	r3, [r5, r2]
 8008b02:	3301      	adds	r3, #1
 8008b04:	d004      	beq.n	8008b10 <_fwalk_reent+0x3c>
 8008b06:	0029      	movs	r1, r5
 8008b08:	0030      	movs	r0, r6
 8008b0a:	9b01      	ldr	r3, [sp, #4]
 8008b0c:	4798      	blx	r3
 8008b0e:	4307      	orrs	r7, r0
 8008b10:	3568      	adds	r5, #104	; 0x68
 8008b12:	e7e8      	b.n	8008ae6 <_fwalk_reent+0x12>

08008b14 <__retarget_lock_init_recursive>:
 8008b14:	4770      	bx	lr

08008b16 <__retarget_lock_acquire_recursive>:
 8008b16:	4770      	bx	lr

08008b18 <__retarget_lock_release_recursive>:
 8008b18:	4770      	bx	lr
	...

08008b1c <__swhatbuf_r>:
 8008b1c:	b570      	push	{r4, r5, r6, lr}
 8008b1e:	000e      	movs	r6, r1
 8008b20:	001d      	movs	r5, r3
 8008b22:	230e      	movs	r3, #14
 8008b24:	5ec9      	ldrsh	r1, [r1, r3]
 8008b26:	0014      	movs	r4, r2
 8008b28:	b096      	sub	sp, #88	; 0x58
 8008b2a:	2900      	cmp	r1, #0
 8008b2c:	da07      	bge.n	8008b3e <__swhatbuf_r+0x22>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	602b      	str	r3, [r5, #0]
 8008b32:	89b3      	ldrh	r3, [r6, #12]
 8008b34:	061b      	lsls	r3, r3, #24
 8008b36:	d411      	bmi.n	8008b5c <__swhatbuf_r+0x40>
 8008b38:	2380      	movs	r3, #128	; 0x80
 8008b3a:	00db      	lsls	r3, r3, #3
 8008b3c:	e00f      	b.n	8008b5e <__swhatbuf_r+0x42>
 8008b3e:	466a      	mov	r2, sp
 8008b40:	f000 f91c 	bl	8008d7c <_fstat_r>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	dbf2      	blt.n	8008b2e <__swhatbuf_r+0x12>
 8008b48:	23f0      	movs	r3, #240	; 0xf0
 8008b4a:	9901      	ldr	r1, [sp, #4]
 8008b4c:	021b      	lsls	r3, r3, #8
 8008b4e:	4019      	ands	r1, r3
 8008b50:	4b05      	ldr	r3, [pc, #20]	; (8008b68 <__swhatbuf_r+0x4c>)
 8008b52:	18c9      	adds	r1, r1, r3
 8008b54:	424b      	negs	r3, r1
 8008b56:	4159      	adcs	r1, r3
 8008b58:	6029      	str	r1, [r5, #0]
 8008b5a:	e7ed      	b.n	8008b38 <__swhatbuf_r+0x1c>
 8008b5c:	2340      	movs	r3, #64	; 0x40
 8008b5e:	2000      	movs	r0, #0
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	b016      	add	sp, #88	; 0x58
 8008b64:	bd70      	pop	{r4, r5, r6, pc}
 8008b66:	46c0      	nop			; (mov r8, r8)
 8008b68:	ffffe000 	.word	0xffffe000

08008b6c <__smakebuf_r>:
 8008b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b6e:	2602      	movs	r6, #2
 8008b70:	898b      	ldrh	r3, [r1, #12]
 8008b72:	0005      	movs	r5, r0
 8008b74:	000c      	movs	r4, r1
 8008b76:	4233      	tst	r3, r6
 8008b78:	d006      	beq.n	8008b88 <__smakebuf_r+0x1c>
 8008b7a:	0023      	movs	r3, r4
 8008b7c:	3347      	adds	r3, #71	; 0x47
 8008b7e:	6023      	str	r3, [r4, #0]
 8008b80:	6123      	str	r3, [r4, #16]
 8008b82:	2301      	movs	r3, #1
 8008b84:	6163      	str	r3, [r4, #20]
 8008b86:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008b88:	466a      	mov	r2, sp
 8008b8a:	ab01      	add	r3, sp, #4
 8008b8c:	f7ff ffc6 	bl	8008b1c <__swhatbuf_r>
 8008b90:	9900      	ldr	r1, [sp, #0]
 8008b92:	0007      	movs	r7, r0
 8008b94:	0028      	movs	r0, r5
 8008b96:	f7ff f94d 	bl	8007e34 <_malloc_r>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d108      	bne.n	8008bb0 <__smakebuf_r+0x44>
 8008b9e:	220c      	movs	r2, #12
 8008ba0:	5ea3      	ldrsh	r3, [r4, r2]
 8008ba2:	059a      	lsls	r2, r3, #22
 8008ba4:	d4ef      	bmi.n	8008b86 <__smakebuf_r+0x1a>
 8008ba6:	2203      	movs	r2, #3
 8008ba8:	4393      	bics	r3, r2
 8008baa:	431e      	orrs	r6, r3
 8008bac:	81a6      	strh	r6, [r4, #12]
 8008bae:	e7e4      	b.n	8008b7a <__smakebuf_r+0xe>
 8008bb0:	4b0f      	ldr	r3, [pc, #60]	; (8008bf0 <__smakebuf_r+0x84>)
 8008bb2:	62ab      	str	r3, [r5, #40]	; 0x28
 8008bb4:	2380      	movs	r3, #128	; 0x80
 8008bb6:	89a2      	ldrh	r2, [r4, #12]
 8008bb8:	6020      	str	r0, [r4, #0]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	81a3      	strh	r3, [r4, #12]
 8008bbe:	9b00      	ldr	r3, [sp, #0]
 8008bc0:	6120      	str	r0, [r4, #16]
 8008bc2:	6163      	str	r3, [r4, #20]
 8008bc4:	9b01      	ldr	r3, [sp, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00d      	beq.n	8008be6 <__smakebuf_r+0x7a>
 8008bca:	0028      	movs	r0, r5
 8008bcc:	230e      	movs	r3, #14
 8008bce:	5ee1      	ldrsh	r1, [r4, r3]
 8008bd0:	f000 f8e6 	bl	8008da0 <_isatty_r>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d006      	beq.n	8008be6 <__smakebuf_r+0x7a>
 8008bd8:	2203      	movs	r2, #3
 8008bda:	89a3      	ldrh	r3, [r4, #12]
 8008bdc:	4393      	bics	r3, r2
 8008bde:	001a      	movs	r2, r3
 8008be0:	2301      	movs	r3, #1
 8008be2:	4313      	orrs	r3, r2
 8008be4:	81a3      	strh	r3, [r4, #12]
 8008be6:	89a0      	ldrh	r0, [r4, #12]
 8008be8:	4307      	orrs	r7, r0
 8008bea:	81a7      	strh	r7, [r4, #12]
 8008bec:	e7cb      	b.n	8008b86 <__smakebuf_r+0x1a>
 8008bee:	46c0      	nop			; (mov r8, r8)
 8008bf0:	08008959 	.word	0x08008959

08008bf4 <_malloc_usable_size_r>:
 8008bf4:	1f0b      	subs	r3, r1, #4
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	1f18      	subs	r0, r3, #4
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	da01      	bge.n	8008c02 <_malloc_usable_size_r+0xe>
 8008bfe:	580b      	ldr	r3, [r1, r0]
 8008c00:	18c0      	adds	r0, r0, r3
 8008c02:	4770      	bx	lr

08008c04 <_raise_r>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	0004      	movs	r4, r0
 8008c08:	000d      	movs	r5, r1
 8008c0a:	291f      	cmp	r1, #31
 8008c0c:	d904      	bls.n	8008c18 <_raise_r+0x14>
 8008c0e:	2316      	movs	r3, #22
 8008c10:	6003      	str	r3, [r0, #0]
 8008c12:	2001      	movs	r0, #1
 8008c14:	4240      	negs	r0, r0
 8008c16:	bd70      	pop	{r4, r5, r6, pc}
 8008c18:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d004      	beq.n	8008c28 <_raise_r+0x24>
 8008c1e:	008a      	lsls	r2, r1, #2
 8008c20:	189b      	adds	r3, r3, r2
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	2a00      	cmp	r2, #0
 8008c26:	d108      	bne.n	8008c3a <_raise_r+0x36>
 8008c28:	0020      	movs	r0, r4
 8008c2a:	f000 f831 	bl	8008c90 <_getpid_r>
 8008c2e:	002a      	movs	r2, r5
 8008c30:	0001      	movs	r1, r0
 8008c32:	0020      	movs	r0, r4
 8008c34:	f000 f81a 	bl	8008c6c <_kill_r>
 8008c38:	e7ed      	b.n	8008c16 <_raise_r+0x12>
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	2a01      	cmp	r2, #1
 8008c3e:	d0ea      	beq.n	8008c16 <_raise_r+0x12>
 8008c40:	1c51      	adds	r1, r2, #1
 8008c42:	d103      	bne.n	8008c4c <_raise_r+0x48>
 8008c44:	2316      	movs	r3, #22
 8008c46:	3001      	adds	r0, #1
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	e7e4      	b.n	8008c16 <_raise_r+0x12>
 8008c4c:	2400      	movs	r4, #0
 8008c4e:	0028      	movs	r0, r5
 8008c50:	601c      	str	r4, [r3, #0]
 8008c52:	4790      	blx	r2
 8008c54:	0020      	movs	r0, r4
 8008c56:	e7de      	b.n	8008c16 <_raise_r+0x12>

08008c58 <raise>:
 8008c58:	b510      	push	{r4, lr}
 8008c5a:	4b03      	ldr	r3, [pc, #12]	; (8008c68 <raise+0x10>)
 8008c5c:	0001      	movs	r1, r0
 8008c5e:	6818      	ldr	r0, [r3, #0]
 8008c60:	f7ff ffd0 	bl	8008c04 <_raise_r>
 8008c64:	bd10      	pop	{r4, pc}
 8008c66:	46c0      	nop			; (mov r8, r8)
 8008c68:	2000000c 	.word	0x2000000c

08008c6c <_kill_r>:
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	b570      	push	{r4, r5, r6, lr}
 8008c70:	4d06      	ldr	r5, [pc, #24]	; (8008c8c <_kill_r+0x20>)
 8008c72:	0004      	movs	r4, r0
 8008c74:	0008      	movs	r0, r1
 8008c76:	0011      	movs	r1, r2
 8008c78:	602b      	str	r3, [r5, #0]
 8008c7a:	f7f9 ffef 	bl	8002c5c <_kill>
 8008c7e:	1c43      	adds	r3, r0, #1
 8008c80:	d103      	bne.n	8008c8a <_kill_r+0x1e>
 8008c82:	682b      	ldr	r3, [r5, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d000      	beq.n	8008c8a <_kill_r+0x1e>
 8008c88:	6023      	str	r3, [r4, #0]
 8008c8a:	bd70      	pop	{r4, r5, r6, pc}
 8008c8c:	20000304 	.word	0x20000304

08008c90 <_getpid_r>:
 8008c90:	b510      	push	{r4, lr}
 8008c92:	f7f9 ffdd 	bl	8002c50 <_getpid>
 8008c96:	bd10      	pop	{r4, pc}

08008c98 <__sread>:
 8008c98:	b570      	push	{r4, r5, r6, lr}
 8008c9a:	000c      	movs	r4, r1
 8008c9c:	250e      	movs	r5, #14
 8008c9e:	5f49      	ldrsh	r1, [r1, r5]
 8008ca0:	f000 f8a4 	bl	8008dec <_read_r>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	db03      	blt.n	8008cb0 <__sread+0x18>
 8008ca8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008caa:	181b      	adds	r3, r3, r0
 8008cac:	6563      	str	r3, [r4, #84]	; 0x54
 8008cae:	bd70      	pop	{r4, r5, r6, pc}
 8008cb0:	89a3      	ldrh	r3, [r4, #12]
 8008cb2:	4a02      	ldr	r2, [pc, #8]	; (8008cbc <__sread+0x24>)
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	81a3      	strh	r3, [r4, #12]
 8008cb8:	e7f9      	b.n	8008cae <__sread+0x16>
 8008cba:	46c0      	nop			; (mov r8, r8)
 8008cbc:	ffffefff 	.word	0xffffefff

08008cc0 <__swrite>:
 8008cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc2:	001f      	movs	r7, r3
 8008cc4:	898b      	ldrh	r3, [r1, #12]
 8008cc6:	0005      	movs	r5, r0
 8008cc8:	000c      	movs	r4, r1
 8008cca:	0016      	movs	r6, r2
 8008ccc:	05db      	lsls	r3, r3, #23
 8008cce:	d505      	bpl.n	8008cdc <__swrite+0x1c>
 8008cd0:	230e      	movs	r3, #14
 8008cd2:	5ec9      	ldrsh	r1, [r1, r3]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	f000 f874 	bl	8008dc4 <_lseek_r>
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	4a05      	ldr	r2, [pc, #20]	; (8008cf4 <__swrite+0x34>)
 8008ce0:	0028      	movs	r0, r5
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	81a3      	strh	r3, [r4, #12]
 8008ce6:	0032      	movs	r2, r6
 8008ce8:	230e      	movs	r3, #14
 8008cea:	5ee1      	ldrsh	r1, [r4, r3]
 8008cec:	003b      	movs	r3, r7
 8008cee:	f000 f81f 	bl	8008d30 <_write_r>
 8008cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cf4:	ffffefff 	.word	0xffffefff

08008cf8 <__sseek>:
 8008cf8:	b570      	push	{r4, r5, r6, lr}
 8008cfa:	000c      	movs	r4, r1
 8008cfc:	250e      	movs	r5, #14
 8008cfe:	5f49      	ldrsh	r1, [r1, r5]
 8008d00:	f000 f860 	bl	8008dc4 <_lseek_r>
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	1c42      	adds	r2, r0, #1
 8008d08:	d103      	bne.n	8008d12 <__sseek+0x1a>
 8008d0a:	4a05      	ldr	r2, [pc, #20]	; (8008d20 <__sseek+0x28>)
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	81a3      	strh	r3, [r4, #12]
 8008d10:	bd70      	pop	{r4, r5, r6, pc}
 8008d12:	2280      	movs	r2, #128	; 0x80
 8008d14:	0152      	lsls	r2, r2, #5
 8008d16:	4313      	orrs	r3, r2
 8008d18:	81a3      	strh	r3, [r4, #12]
 8008d1a:	6560      	str	r0, [r4, #84]	; 0x54
 8008d1c:	e7f8      	b.n	8008d10 <__sseek+0x18>
 8008d1e:	46c0      	nop			; (mov r8, r8)
 8008d20:	ffffefff 	.word	0xffffefff

08008d24 <__sclose>:
 8008d24:	b510      	push	{r4, lr}
 8008d26:	230e      	movs	r3, #14
 8008d28:	5ec9      	ldrsh	r1, [r1, r3]
 8008d2a:	f000 f815 	bl	8008d58 <_close_r>
 8008d2e:	bd10      	pop	{r4, pc}

08008d30 <_write_r>:
 8008d30:	b570      	push	{r4, r5, r6, lr}
 8008d32:	0004      	movs	r4, r0
 8008d34:	0008      	movs	r0, r1
 8008d36:	0011      	movs	r1, r2
 8008d38:	001a      	movs	r2, r3
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	4d05      	ldr	r5, [pc, #20]	; (8008d54 <_write_r+0x24>)
 8008d3e:	602b      	str	r3, [r5, #0]
 8008d40:	f7f9 ffc5 	bl	8002cce <_write>
 8008d44:	1c43      	adds	r3, r0, #1
 8008d46:	d103      	bne.n	8008d50 <_write_r+0x20>
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d000      	beq.n	8008d50 <_write_r+0x20>
 8008d4e:	6023      	str	r3, [r4, #0]
 8008d50:	bd70      	pop	{r4, r5, r6, pc}
 8008d52:	46c0      	nop			; (mov r8, r8)
 8008d54:	20000304 	.word	0x20000304

08008d58 <_close_r>:
 8008d58:	2300      	movs	r3, #0
 8008d5a:	b570      	push	{r4, r5, r6, lr}
 8008d5c:	4d06      	ldr	r5, [pc, #24]	; (8008d78 <_close_r+0x20>)
 8008d5e:	0004      	movs	r4, r0
 8008d60:	0008      	movs	r0, r1
 8008d62:	602b      	str	r3, [r5, #0]
 8008d64:	f7f9 ffcf 	bl	8002d06 <_close>
 8008d68:	1c43      	adds	r3, r0, #1
 8008d6a:	d103      	bne.n	8008d74 <_close_r+0x1c>
 8008d6c:	682b      	ldr	r3, [r5, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d000      	beq.n	8008d74 <_close_r+0x1c>
 8008d72:	6023      	str	r3, [r4, #0]
 8008d74:	bd70      	pop	{r4, r5, r6, pc}
 8008d76:	46c0      	nop			; (mov r8, r8)
 8008d78:	20000304 	.word	0x20000304

08008d7c <_fstat_r>:
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	b570      	push	{r4, r5, r6, lr}
 8008d80:	4d06      	ldr	r5, [pc, #24]	; (8008d9c <_fstat_r+0x20>)
 8008d82:	0004      	movs	r4, r0
 8008d84:	0008      	movs	r0, r1
 8008d86:	0011      	movs	r1, r2
 8008d88:	602b      	str	r3, [r5, #0]
 8008d8a:	f7f9 ffc6 	bl	8002d1a <_fstat>
 8008d8e:	1c43      	adds	r3, r0, #1
 8008d90:	d103      	bne.n	8008d9a <_fstat_r+0x1e>
 8008d92:	682b      	ldr	r3, [r5, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d000      	beq.n	8008d9a <_fstat_r+0x1e>
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	bd70      	pop	{r4, r5, r6, pc}
 8008d9c:	20000304 	.word	0x20000304

08008da0 <_isatty_r>:
 8008da0:	2300      	movs	r3, #0
 8008da2:	b570      	push	{r4, r5, r6, lr}
 8008da4:	4d06      	ldr	r5, [pc, #24]	; (8008dc0 <_isatty_r+0x20>)
 8008da6:	0004      	movs	r4, r0
 8008da8:	0008      	movs	r0, r1
 8008daa:	602b      	str	r3, [r5, #0]
 8008dac:	f7f9 ffc3 	bl	8002d36 <_isatty>
 8008db0:	1c43      	adds	r3, r0, #1
 8008db2:	d103      	bne.n	8008dbc <_isatty_r+0x1c>
 8008db4:	682b      	ldr	r3, [r5, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d000      	beq.n	8008dbc <_isatty_r+0x1c>
 8008dba:	6023      	str	r3, [r4, #0]
 8008dbc:	bd70      	pop	{r4, r5, r6, pc}
 8008dbe:	46c0      	nop			; (mov r8, r8)
 8008dc0:	20000304 	.word	0x20000304

08008dc4 <_lseek_r>:
 8008dc4:	b570      	push	{r4, r5, r6, lr}
 8008dc6:	0004      	movs	r4, r0
 8008dc8:	0008      	movs	r0, r1
 8008dca:	0011      	movs	r1, r2
 8008dcc:	001a      	movs	r2, r3
 8008dce:	2300      	movs	r3, #0
 8008dd0:	4d05      	ldr	r5, [pc, #20]	; (8008de8 <_lseek_r+0x24>)
 8008dd2:	602b      	str	r3, [r5, #0]
 8008dd4:	f7f9 ffb8 	bl	8002d48 <_lseek>
 8008dd8:	1c43      	adds	r3, r0, #1
 8008dda:	d103      	bne.n	8008de4 <_lseek_r+0x20>
 8008ddc:	682b      	ldr	r3, [r5, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d000      	beq.n	8008de4 <_lseek_r+0x20>
 8008de2:	6023      	str	r3, [r4, #0]
 8008de4:	bd70      	pop	{r4, r5, r6, pc}
 8008de6:	46c0      	nop			; (mov r8, r8)
 8008de8:	20000304 	.word	0x20000304

08008dec <_read_r>:
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	0004      	movs	r4, r0
 8008df0:	0008      	movs	r0, r1
 8008df2:	0011      	movs	r1, r2
 8008df4:	001a      	movs	r2, r3
 8008df6:	2300      	movs	r3, #0
 8008df8:	4d05      	ldr	r5, [pc, #20]	; (8008e10 <_read_r+0x24>)
 8008dfa:	602b      	str	r3, [r5, #0]
 8008dfc:	f7f9 ff4a 	bl	8002c94 <_read>
 8008e00:	1c43      	adds	r3, r0, #1
 8008e02:	d103      	bne.n	8008e0c <_read_r+0x20>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d000      	beq.n	8008e0c <_read_r+0x20>
 8008e0a:	6023      	str	r3, [r4, #0]
 8008e0c:	bd70      	pop	{r4, r5, r6, pc}
 8008e0e:	46c0      	nop			; (mov r8, r8)
 8008e10:	20000304 	.word	0x20000304

08008e14 <_init>:
 8008e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e16:	46c0      	nop			; (mov r8, r8)
 8008e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1a:	bc08      	pop	{r3}
 8008e1c:	469e      	mov	lr, r3
 8008e1e:	4770      	bx	lr

08008e20 <_fini>:
 8008e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e22:	46c0      	nop			; (mov r8, r8)
 8008e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e26:	bc08      	pop	{r3}
 8008e28:	469e      	mov	lr, r3
 8008e2a:	4770      	bx	lr


ultrasonic_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  080084b0  080084b0  000184b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800895c  0800895c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800895c  0800895c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800895c  0800895c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800895c  0800895c  0001895c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008960  08008960  00018960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  200001dc  08008b40  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08008b40  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e42e  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e01  00000000  00000000  0002e632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  00030438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  00031050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012f4f  00000000  00000000  00031bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd9d  00000000  00000000  00044aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00072760  00000000  00000000  0005289c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c4ffc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da4  00000000  00000000  000c5050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008494 	.word	0x08008494

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08008494 	.word	0x08008494

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f82b 	bl	8001498 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff75 	bl	800133c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f81d 	bl	8001498 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f813 	bl	8001498 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff97 	bl	80013b4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff8d 	bl	80013b4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	1c08      	adds	r0, r1, #0
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 f8a7 	bl	8000604 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 f82b 	bl	800051c <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f899 	bl	8000604 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f88f 	bl	8000604 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f839 	bl	800056c <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 f82f 	bl	800056c <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__eqsf2>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	0042      	lsls	r2, r0, #1
 8000520:	024e      	lsls	r6, r1, #9
 8000522:	004c      	lsls	r4, r1, #1
 8000524:	0245      	lsls	r5, r0, #9
 8000526:	0a6d      	lsrs	r5, r5, #9
 8000528:	0e12      	lsrs	r2, r2, #24
 800052a:	0fc3      	lsrs	r3, r0, #31
 800052c:	0a76      	lsrs	r6, r6, #9
 800052e:	0e24      	lsrs	r4, r4, #24
 8000530:	0fc9      	lsrs	r1, r1, #31
 8000532:	2aff      	cmp	r2, #255	; 0xff
 8000534:	d00f      	beq.n	8000556 <__eqsf2+0x3a>
 8000536:	2cff      	cmp	r4, #255	; 0xff
 8000538:	d011      	beq.n	800055e <__eqsf2+0x42>
 800053a:	2001      	movs	r0, #1
 800053c:	42a2      	cmp	r2, r4
 800053e:	d000      	beq.n	8000542 <__eqsf2+0x26>
 8000540:	bd70      	pop	{r4, r5, r6, pc}
 8000542:	42b5      	cmp	r5, r6
 8000544:	d1fc      	bne.n	8000540 <__eqsf2+0x24>
 8000546:	428b      	cmp	r3, r1
 8000548:	d00d      	beq.n	8000566 <__eqsf2+0x4a>
 800054a:	2a00      	cmp	r2, #0
 800054c:	d1f8      	bne.n	8000540 <__eqsf2+0x24>
 800054e:	0028      	movs	r0, r5
 8000550:	1e45      	subs	r5, r0, #1
 8000552:	41a8      	sbcs	r0, r5
 8000554:	e7f4      	b.n	8000540 <__eqsf2+0x24>
 8000556:	2001      	movs	r0, #1
 8000558:	2d00      	cmp	r5, #0
 800055a:	d1f1      	bne.n	8000540 <__eqsf2+0x24>
 800055c:	e7eb      	b.n	8000536 <__eqsf2+0x1a>
 800055e:	2001      	movs	r0, #1
 8000560:	2e00      	cmp	r6, #0
 8000562:	d1ed      	bne.n	8000540 <__eqsf2+0x24>
 8000564:	e7e9      	b.n	800053a <__eqsf2+0x1e>
 8000566:	2000      	movs	r0, #0
 8000568:	e7ea      	b.n	8000540 <__eqsf2+0x24>
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__gesf2>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	0042      	lsls	r2, r0, #1
 8000570:	0246      	lsls	r6, r0, #9
 8000572:	024d      	lsls	r5, r1, #9
 8000574:	004c      	lsls	r4, r1, #1
 8000576:	0fc3      	lsrs	r3, r0, #31
 8000578:	0a76      	lsrs	r6, r6, #9
 800057a:	0e12      	lsrs	r2, r2, #24
 800057c:	0a6d      	lsrs	r5, r5, #9
 800057e:	0e24      	lsrs	r4, r4, #24
 8000580:	0fc8      	lsrs	r0, r1, #31
 8000582:	2aff      	cmp	r2, #255	; 0xff
 8000584:	d01f      	beq.n	80005c6 <__gesf2+0x5a>
 8000586:	2cff      	cmp	r4, #255	; 0xff
 8000588:	d010      	beq.n	80005ac <__gesf2+0x40>
 800058a:	2a00      	cmp	r2, #0
 800058c:	d11f      	bne.n	80005ce <__gesf2+0x62>
 800058e:	4271      	negs	r1, r6
 8000590:	4171      	adcs	r1, r6
 8000592:	2c00      	cmp	r4, #0
 8000594:	d101      	bne.n	800059a <__gesf2+0x2e>
 8000596:	2d00      	cmp	r5, #0
 8000598:	d01e      	beq.n	80005d8 <__gesf2+0x6c>
 800059a:	2900      	cmp	r1, #0
 800059c:	d10e      	bne.n	80005bc <__gesf2+0x50>
 800059e:	4283      	cmp	r3, r0
 80005a0:	d01e      	beq.n	80005e0 <__gesf2+0x74>
 80005a2:	2102      	movs	r1, #2
 80005a4:	1e58      	subs	r0, r3, #1
 80005a6:	4008      	ands	r0, r1
 80005a8:	3801      	subs	r0, #1
 80005aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ac:	2d00      	cmp	r5, #0
 80005ae:	d126      	bne.n	80005fe <__gesf2+0x92>
 80005b0:	2a00      	cmp	r2, #0
 80005b2:	d1f4      	bne.n	800059e <__gesf2+0x32>
 80005b4:	4271      	negs	r1, r6
 80005b6:	4171      	adcs	r1, r6
 80005b8:	2900      	cmp	r1, #0
 80005ba:	d0f0      	beq.n	800059e <__gesf2+0x32>
 80005bc:	2800      	cmp	r0, #0
 80005be:	d1f4      	bne.n	80005aa <__gesf2+0x3e>
 80005c0:	2001      	movs	r0, #1
 80005c2:	4240      	negs	r0, r0
 80005c4:	e7f1      	b.n	80005aa <__gesf2+0x3e>
 80005c6:	2e00      	cmp	r6, #0
 80005c8:	d119      	bne.n	80005fe <__gesf2+0x92>
 80005ca:	2cff      	cmp	r4, #255	; 0xff
 80005cc:	d0ee      	beq.n	80005ac <__gesf2+0x40>
 80005ce:	2c00      	cmp	r4, #0
 80005d0:	d1e5      	bne.n	800059e <__gesf2+0x32>
 80005d2:	2d00      	cmp	r5, #0
 80005d4:	d1e3      	bne.n	800059e <__gesf2+0x32>
 80005d6:	e7e4      	b.n	80005a2 <__gesf2+0x36>
 80005d8:	2000      	movs	r0, #0
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d0e5      	beq.n	80005aa <__gesf2+0x3e>
 80005de:	e7e0      	b.n	80005a2 <__gesf2+0x36>
 80005e0:	42a2      	cmp	r2, r4
 80005e2:	dc05      	bgt.n	80005f0 <__gesf2+0x84>
 80005e4:	dbea      	blt.n	80005bc <__gesf2+0x50>
 80005e6:	42ae      	cmp	r6, r5
 80005e8:	d802      	bhi.n	80005f0 <__gesf2+0x84>
 80005ea:	d3e7      	bcc.n	80005bc <__gesf2+0x50>
 80005ec:	2000      	movs	r0, #0
 80005ee:	e7dc      	b.n	80005aa <__gesf2+0x3e>
 80005f0:	4241      	negs	r1, r0
 80005f2:	4141      	adcs	r1, r0
 80005f4:	4248      	negs	r0, r1
 80005f6:	2102      	movs	r1, #2
 80005f8:	4008      	ands	r0, r1
 80005fa:	3801      	subs	r0, #1
 80005fc:	e7d5      	b.n	80005aa <__gesf2+0x3e>
 80005fe:	2002      	movs	r0, #2
 8000600:	4240      	negs	r0, r0
 8000602:	e7d2      	b.n	80005aa <__gesf2+0x3e>

08000604 <__lesf2>:
 8000604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000606:	0042      	lsls	r2, r0, #1
 8000608:	0246      	lsls	r6, r0, #9
 800060a:	024d      	lsls	r5, r1, #9
 800060c:	004c      	lsls	r4, r1, #1
 800060e:	0fc3      	lsrs	r3, r0, #31
 8000610:	0a76      	lsrs	r6, r6, #9
 8000612:	0e12      	lsrs	r2, r2, #24
 8000614:	0a6d      	lsrs	r5, r5, #9
 8000616:	0e24      	lsrs	r4, r4, #24
 8000618:	0fc8      	lsrs	r0, r1, #31
 800061a:	2aff      	cmp	r2, #255	; 0xff
 800061c:	d00d      	beq.n	800063a <__lesf2+0x36>
 800061e:	2cff      	cmp	r4, #255	; 0xff
 8000620:	d00f      	beq.n	8000642 <__lesf2+0x3e>
 8000622:	2a00      	cmp	r2, #0
 8000624:	d123      	bne.n	800066e <__lesf2+0x6a>
 8000626:	4271      	negs	r1, r6
 8000628:	4171      	adcs	r1, r6
 800062a:	2c00      	cmp	r4, #0
 800062c:	d10f      	bne.n	800064e <__lesf2+0x4a>
 800062e:	2d00      	cmp	r5, #0
 8000630:	d10d      	bne.n	800064e <__lesf2+0x4a>
 8000632:	2000      	movs	r0, #0
 8000634:	2e00      	cmp	r6, #0
 8000636:	d014      	beq.n	8000662 <__lesf2+0x5e>
 8000638:	e00d      	b.n	8000656 <__lesf2+0x52>
 800063a:	2e00      	cmp	r6, #0
 800063c:	d110      	bne.n	8000660 <__lesf2+0x5c>
 800063e:	2cff      	cmp	r4, #255	; 0xff
 8000640:	d115      	bne.n	800066e <__lesf2+0x6a>
 8000642:	2d00      	cmp	r5, #0
 8000644:	d10c      	bne.n	8000660 <__lesf2+0x5c>
 8000646:	2a00      	cmp	r2, #0
 8000648:	d103      	bne.n	8000652 <__lesf2+0x4e>
 800064a:	4271      	negs	r1, r6
 800064c:	4171      	adcs	r1, r6
 800064e:	2900      	cmp	r1, #0
 8000650:	d108      	bne.n	8000664 <__lesf2+0x60>
 8000652:	4283      	cmp	r3, r0
 8000654:	d010      	beq.n	8000678 <__lesf2+0x74>
 8000656:	2102      	movs	r1, #2
 8000658:	1e58      	subs	r0, r3, #1
 800065a:	4008      	ands	r0, r1
 800065c:	3801      	subs	r0, #1
 800065e:	e000      	b.n	8000662 <__lesf2+0x5e>
 8000660:	2002      	movs	r0, #2
 8000662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000664:	2800      	cmp	r0, #0
 8000666:	d1fc      	bne.n	8000662 <__lesf2+0x5e>
 8000668:	2001      	movs	r0, #1
 800066a:	4240      	negs	r0, r0
 800066c:	e7f9      	b.n	8000662 <__lesf2+0x5e>
 800066e:	2c00      	cmp	r4, #0
 8000670:	d1ef      	bne.n	8000652 <__lesf2+0x4e>
 8000672:	2d00      	cmp	r5, #0
 8000674:	d1ed      	bne.n	8000652 <__lesf2+0x4e>
 8000676:	e7ee      	b.n	8000656 <__lesf2+0x52>
 8000678:	42a2      	cmp	r2, r4
 800067a:	dc05      	bgt.n	8000688 <__lesf2+0x84>
 800067c:	dbf2      	blt.n	8000664 <__lesf2+0x60>
 800067e:	42ae      	cmp	r6, r5
 8000680:	d802      	bhi.n	8000688 <__lesf2+0x84>
 8000682:	d3ef      	bcc.n	8000664 <__lesf2+0x60>
 8000684:	2000      	movs	r0, #0
 8000686:	e7ec      	b.n	8000662 <__lesf2+0x5e>
 8000688:	4241      	negs	r1, r0
 800068a:	4141      	adcs	r1, r0
 800068c:	4248      	negs	r0, r1
 800068e:	2102      	movs	r1, #2
 8000690:	4008      	ands	r0, r1
 8000692:	3801      	subs	r0, #1
 8000694:	e7e5      	b.n	8000662 <__lesf2+0x5e>
 8000696:	46c0      	nop			; (mov r8, r8)

08000698 <__aeabi_dadd>:
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	464f      	mov	r7, r9
 800069c:	46d6      	mov	lr, sl
 800069e:	4646      	mov	r6, r8
 80006a0:	000d      	movs	r5, r1
 80006a2:	0001      	movs	r1, r0
 80006a4:	0018      	movs	r0, r3
 80006a6:	b5c0      	push	{r6, r7, lr}
 80006a8:	0017      	movs	r7, r2
 80006aa:	032b      	lsls	r3, r5, #12
 80006ac:	0a5a      	lsrs	r2, r3, #9
 80006ae:	0f4b      	lsrs	r3, r1, #29
 80006b0:	4313      	orrs	r3, r2
 80006b2:	00ca      	lsls	r2, r1, #3
 80006b4:	4691      	mov	r9, r2
 80006b6:	0302      	lsls	r2, r0, #12
 80006b8:	006e      	lsls	r6, r5, #1
 80006ba:	0041      	lsls	r1, r0, #1
 80006bc:	0a52      	lsrs	r2, r2, #9
 80006be:	0fec      	lsrs	r4, r5, #31
 80006c0:	0f7d      	lsrs	r5, r7, #29
 80006c2:	4315      	orrs	r5, r2
 80006c4:	0d76      	lsrs	r6, r6, #21
 80006c6:	0d49      	lsrs	r1, r1, #21
 80006c8:	0fc0      	lsrs	r0, r0, #31
 80006ca:	4682      	mov	sl, r0
 80006cc:	46ac      	mov	ip, r5
 80006ce:	00ff      	lsls	r7, r7, #3
 80006d0:	1a72      	subs	r2, r6, r1
 80006d2:	4284      	cmp	r4, r0
 80006d4:	d100      	bne.n	80006d8 <__aeabi_dadd+0x40>
 80006d6:	e098      	b.n	800080a <__aeabi_dadd+0x172>
 80006d8:	2a00      	cmp	r2, #0
 80006da:	dc00      	bgt.n	80006de <__aeabi_dadd+0x46>
 80006dc:	e081      	b.n	80007e2 <__aeabi_dadd+0x14a>
 80006de:	2900      	cmp	r1, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_dadd+0x4c>
 80006e2:	e0b6      	b.n	8000852 <__aeabi_dadd+0x1ba>
 80006e4:	49c9      	ldr	r1, [pc, #804]	; (8000a0c <__aeabi_dadd+0x374>)
 80006e6:	428e      	cmp	r6, r1
 80006e8:	d100      	bne.n	80006ec <__aeabi_dadd+0x54>
 80006ea:	e172      	b.n	80009d2 <__aeabi_dadd+0x33a>
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	0028      	movs	r0, r5
 80006f0:	0409      	lsls	r1, r1, #16
 80006f2:	4308      	orrs	r0, r1
 80006f4:	4684      	mov	ip, r0
 80006f6:	2a38      	cmp	r2, #56	; 0x38
 80006f8:	dd00      	ble.n	80006fc <__aeabi_dadd+0x64>
 80006fa:	e15e      	b.n	80009ba <__aeabi_dadd+0x322>
 80006fc:	2a1f      	cmp	r2, #31
 80006fe:	dd00      	ble.n	8000702 <__aeabi_dadd+0x6a>
 8000700:	e1ee      	b.n	8000ae0 <__aeabi_dadd+0x448>
 8000702:	2020      	movs	r0, #32
 8000704:	0039      	movs	r1, r7
 8000706:	4665      	mov	r5, ip
 8000708:	1a80      	subs	r0, r0, r2
 800070a:	4087      	lsls	r7, r0
 800070c:	40d1      	lsrs	r1, r2
 800070e:	4085      	lsls	r5, r0
 8000710:	430d      	orrs	r5, r1
 8000712:	0039      	movs	r1, r7
 8000714:	1e4f      	subs	r7, r1, #1
 8000716:	41b9      	sbcs	r1, r7
 8000718:	4667      	mov	r7, ip
 800071a:	40d7      	lsrs	r7, r2
 800071c:	4329      	orrs	r1, r5
 800071e:	1bdb      	subs	r3, r3, r7
 8000720:	464a      	mov	r2, r9
 8000722:	1a55      	subs	r5, r2, r1
 8000724:	45a9      	cmp	r9, r5
 8000726:	4189      	sbcs	r1, r1
 8000728:	4249      	negs	r1, r1
 800072a:	1a5b      	subs	r3, r3, r1
 800072c:	4698      	mov	r8, r3
 800072e:	4643      	mov	r3, r8
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	d400      	bmi.n	8000736 <__aeabi_dadd+0x9e>
 8000734:	e0cc      	b.n	80008d0 <__aeabi_dadd+0x238>
 8000736:	4643      	mov	r3, r8
 8000738:	025b      	lsls	r3, r3, #9
 800073a:	0a5b      	lsrs	r3, r3, #9
 800073c:	4698      	mov	r8, r3
 800073e:	4643      	mov	r3, r8
 8000740:	2b00      	cmp	r3, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_dadd+0xae>
 8000744:	e12c      	b.n	80009a0 <__aeabi_dadd+0x308>
 8000746:	4640      	mov	r0, r8
 8000748:	f001 fe8e 	bl	8002468 <__clzsi2>
 800074c:	0001      	movs	r1, r0
 800074e:	3908      	subs	r1, #8
 8000750:	2220      	movs	r2, #32
 8000752:	0028      	movs	r0, r5
 8000754:	4643      	mov	r3, r8
 8000756:	1a52      	subs	r2, r2, r1
 8000758:	408b      	lsls	r3, r1
 800075a:	40d0      	lsrs	r0, r2
 800075c:	408d      	lsls	r5, r1
 800075e:	4303      	orrs	r3, r0
 8000760:	428e      	cmp	r6, r1
 8000762:	dd00      	ble.n	8000766 <__aeabi_dadd+0xce>
 8000764:	e117      	b.n	8000996 <__aeabi_dadd+0x2fe>
 8000766:	1b8e      	subs	r6, r1, r6
 8000768:	1c72      	adds	r2, r6, #1
 800076a:	2a1f      	cmp	r2, #31
 800076c:	dd00      	ble.n	8000770 <__aeabi_dadd+0xd8>
 800076e:	e1a7      	b.n	8000ac0 <__aeabi_dadd+0x428>
 8000770:	2120      	movs	r1, #32
 8000772:	0018      	movs	r0, r3
 8000774:	002e      	movs	r6, r5
 8000776:	1a89      	subs	r1, r1, r2
 8000778:	408d      	lsls	r5, r1
 800077a:	4088      	lsls	r0, r1
 800077c:	40d6      	lsrs	r6, r2
 800077e:	40d3      	lsrs	r3, r2
 8000780:	1e69      	subs	r1, r5, #1
 8000782:	418d      	sbcs	r5, r1
 8000784:	4330      	orrs	r0, r6
 8000786:	4698      	mov	r8, r3
 8000788:	2600      	movs	r6, #0
 800078a:	4305      	orrs	r5, r0
 800078c:	076b      	lsls	r3, r5, #29
 800078e:	d009      	beq.n	80007a4 <__aeabi_dadd+0x10c>
 8000790:	230f      	movs	r3, #15
 8000792:	402b      	ands	r3, r5
 8000794:	2b04      	cmp	r3, #4
 8000796:	d005      	beq.n	80007a4 <__aeabi_dadd+0x10c>
 8000798:	1d2b      	adds	r3, r5, #4
 800079a:	42ab      	cmp	r3, r5
 800079c:	41ad      	sbcs	r5, r5
 800079e:	426d      	negs	r5, r5
 80007a0:	44a8      	add	r8, r5
 80007a2:	001d      	movs	r5, r3
 80007a4:	4643      	mov	r3, r8
 80007a6:	021b      	lsls	r3, r3, #8
 80007a8:	d400      	bmi.n	80007ac <__aeabi_dadd+0x114>
 80007aa:	e094      	b.n	80008d6 <__aeabi_dadd+0x23e>
 80007ac:	4b97      	ldr	r3, [pc, #604]	; (8000a0c <__aeabi_dadd+0x374>)
 80007ae:	1c72      	adds	r2, r6, #1
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d100      	bne.n	80007b6 <__aeabi_dadd+0x11e>
 80007b4:	e09d      	b.n	80008f2 <__aeabi_dadd+0x25a>
 80007b6:	4641      	mov	r1, r8
 80007b8:	4b95      	ldr	r3, [pc, #596]	; (8000a10 <__aeabi_dadd+0x378>)
 80007ba:	08ed      	lsrs	r5, r5, #3
 80007bc:	4019      	ands	r1, r3
 80007be:	000b      	movs	r3, r1
 80007c0:	0552      	lsls	r2, r2, #21
 80007c2:	0749      	lsls	r1, r1, #29
 80007c4:	025b      	lsls	r3, r3, #9
 80007c6:	4329      	orrs	r1, r5
 80007c8:	0b1b      	lsrs	r3, r3, #12
 80007ca:	0d52      	lsrs	r2, r2, #21
 80007cc:	0512      	lsls	r2, r2, #20
 80007ce:	4313      	orrs	r3, r2
 80007d0:	07e4      	lsls	r4, r4, #31
 80007d2:	4323      	orrs	r3, r4
 80007d4:	0008      	movs	r0, r1
 80007d6:	0019      	movs	r1, r3
 80007d8:	bce0      	pop	{r5, r6, r7}
 80007da:	46ba      	mov	sl, r7
 80007dc:	46b1      	mov	r9, r6
 80007de:	46a8      	mov	r8, r5
 80007e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e2:	2a00      	cmp	r2, #0
 80007e4:	d043      	beq.n	800086e <__aeabi_dadd+0x1d6>
 80007e6:	1b8a      	subs	r2, r1, r6
 80007e8:	2e00      	cmp	r6, #0
 80007ea:	d000      	beq.n	80007ee <__aeabi_dadd+0x156>
 80007ec:	e12a      	b.n	8000a44 <__aeabi_dadd+0x3ac>
 80007ee:	464c      	mov	r4, r9
 80007f0:	431c      	orrs	r4, r3
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x15e>
 80007f4:	e1d1      	b.n	8000b9a <__aeabi_dadd+0x502>
 80007f6:	1e54      	subs	r4, r2, #1
 80007f8:	2a01      	cmp	r2, #1
 80007fa:	d100      	bne.n	80007fe <__aeabi_dadd+0x166>
 80007fc:	e21f      	b.n	8000c3e <__aeabi_dadd+0x5a6>
 80007fe:	4d83      	ldr	r5, [pc, #524]	; (8000a0c <__aeabi_dadd+0x374>)
 8000800:	42aa      	cmp	r2, r5
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x16e>
 8000804:	e272      	b.n	8000cec <__aeabi_dadd+0x654>
 8000806:	0022      	movs	r2, r4
 8000808:	e123      	b.n	8000a52 <__aeabi_dadd+0x3ba>
 800080a:	2a00      	cmp	r2, #0
 800080c:	dc00      	bgt.n	8000810 <__aeabi_dadd+0x178>
 800080e:	e098      	b.n	8000942 <__aeabi_dadd+0x2aa>
 8000810:	2900      	cmp	r1, #0
 8000812:	d042      	beq.n	800089a <__aeabi_dadd+0x202>
 8000814:	497d      	ldr	r1, [pc, #500]	; (8000a0c <__aeabi_dadd+0x374>)
 8000816:	428e      	cmp	r6, r1
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x184>
 800081a:	e0da      	b.n	80009d2 <__aeabi_dadd+0x33a>
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	0028      	movs	r0, r5
 8000820:	0409      	lsls	r1, r1, #16
 8000822:	4308      	orrs	r0, r1
 8000824:	4684      	mov	ip, r0
 8000826:	2a38      	cmp	r2, #56	; 0x38
 8000828:	dd00      	ble.n	800082c <__aeabi_dadd+0x194>
 800082a:	e129      	b.n	8000a80 <__aeabi_dadd+0x3e8>
 800082c:	2a1f      	cmp	r2, #31
 800082e:	dc00      	bgt.n	8000832 <__aeabi_dadd+0x19a>
 8000830:	e187      	b.n	8000b42 <__aeabi_dadd+0x4aa>
 8000832:	0011      	movs	r1, r2
 8000834:	4665      	mov	r5, ip
 8000836:	3920      	subs	r1, #32
 8000838:	40cd      	lsrs	r5, r1
 800083a:	2a20      	cmp	r2, #32
 800083c:	d004      	beq.n	8000848 <__aeabi_dadd+0x1b0>
 800083e:	2040      	movs	r0, #64	; 0x40
 8000840:	4661      	mov	r1, ip
 8000842:	1a82      	subs	r2, r0, r2
 8000844:	4091      	lsls	r1, r2
 8000846:	430f      	orrs	r7, r1
 8000848:	0039      	movs	r1, r7
 800084a:	1e4f      	subs	r7, r1, #1
 800084c:	41b9      	sbcs	r1, r7
 800084e:	430d      	orrs	r5, r1
 8000850:	e11b      	b.n	8000a8a <__aeabi_dadd+0x3f2>
 8000852:	0029      	movs	r1, r5
 8000854:	4339      	orrs	r1, r7
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x1c2>
 8000858:	e0b5      	b.n	80009c6 <__aeabi_dadd+0x32e>
 800085a:	1e51      	subs	r1, r2, #1
 800085c:	2a01      	cmp	r2, #1
 800085e:	d100      	bne.n	8000862 <__aeabi_dadd+0x1ca>
 8000860:	e1ab      	b.n	8000bba <__aeabi_dadd+0x522>
 8000862:	486a      	ldr	r0, [pc, #424]	; (8000a0c <__aeabi_dadd+0x374>)
 8000864:	4282      	cmp	r2, r0
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x1d2>
 8000868:	e1b2      	b.n	8000bd0 <__aeabi_dadd+0x538>
 800086a:	000a      	movs	r2, r1
 800086c:	e743      	b.n	80006f6 <__aeabi_dadd+0x5e>
 800086e:	4969      	ldr	r1, [pc, #420]	; (8000a14 <__aeabi_dadd+0x37c>)
 8000870:	1c75      	adds	r5, r6, #1
 8000872:	420d      	tst	r5, r1
 8000874:	d000      	beq.n	8000878 <__aeabi_dadd+0x1e0>
 8000876:	e0cf      	b.n	8000a18 <__aeabi_dadd+0x380>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d000      	beq.n	800087e <__aeabi_dadd+0x1e6>
 800087c:	e193      	b.n	8000ba6 <__aeabi_dadd+0x50e>
 800087e:	4649      	mov	r1, r9
 8000880:	4319      	orrs	r1, r3
 8000882:	d100      	bne.n	8000886 <__aeabi_dadd+0x1ee>
 8000884:	e1d1      	b.n	8000c2a <__aeabi_dadd+0x592>
 8000886:	4661      	mov	r1, ip
 8000888:	4339      	orrs	r1, r7
 800088a:	d000      	beq.n	800088e <__aeabi_dadd+0x1f6>
 800088c:	e1e3      	b.n	8000c56 <__aeabi_dadd+0x5be>
 800088e:	4649      	mov	r1, r9
 8000890:	0758      	lsls	r0, r3, #29
 8000892:	08c9      	lsrs	r1, r1, #3
 8000894:	4301      	orrs	r1, r0
 8000896:	08db      	lsrs	r3, r3, #3
 8000898:	e026      	b.n	80008e8 <__aeabi_dadd+0x250>
 800089a:	0029      	movs	r1, r5
 800089c:	4339      	orrs	r1, r7
 800089e:	d100      	bne.n	80008a2 <__aeabi_dadd+0x20a>
 80008a0:	e091      	b.n	80009c6 <__aeabi_dadd+0x32e>
 80008a2:	1e51      	subs	r1, r2, #1
 80008a4:	2a01      	cmp	r2, #1
 80008a6:	d005      	beq.n	80008b4 <__aeabi_dadd+0x21c>
 80008a8:	4858      	ldr	r0, [pc, #352]	; (8000a0c <__aeabi_dadd+0x374>)
 80008aa:	4282      	cmp	r2, r0
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dadd+0x218>
 80008ae:	e18f      	b.n	8000bd0 <__aeabi_dadd+0x538>
 80008b0:	000a      	movs	r2, r1
 80008b2:	e7b8      	b.n	8000826 <__aeabi_dadd+0x18e>
 80008b4:	003d      	movs	r5, r7
 80008b6:	444d      	add	r5, r9
 80008b8:	454d      	cmp	r5, r9
 80008ba:	4189      	sbcs	r1, r1
 80008bc:	4463      	add	r3, ip
 80008be:	4698      	mov	r8, r3
 80008c0:	4249      	negs	r1, r1
 80008c2:	4488      	add	r8, r1
 80008c4:	4643      	mov	r3, r8
 80008c6:	2602      	movs	r6, #2
 80008c8:	021b      	lsls	r3, r3, #8
 80008ca:	d500      	bpl.n	80008ce <__aeabi_dadd+0x236>
 80008cc:	e0eb      	b.n	8000aa6 <__aeabi_dadd+0x40e>
 80008ce:	3e01      	subs	r6, #1
 80008d0:	076b      	lsls	r3, r5, #29
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dadd+0x23e>
 80008d4:	e75c      	b.n	8000790 <__aeabi_dadd+0xf8>
 80008d6:	4643      	mov	r3, r8
 80008d8:	08e9      	lsrs	r1, r5, #3
 80008da:	075a      	lsls	r2, r3, #29
 80008dc:	4311      	orrs	r1, r2
 80008de:	0032      	movs	r2, r6
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	484a      	ldr	r0, [pc, #296]	; (8000a0c <__aeabi_dadd+0x374>)
 80008e4:	4282      	cmp	r2, r0
 80008e6:	d021      	beq.n	800092c <__aeabi_dadd+0x294>
 80008e8:	031b      	lsls	r3, r3, #12
 80008ea:	0552      	lsls	r2, r2, #21
 80008ec:	0b1b      	lsrs	r3, r3, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	e76c      	b.n	80007cc <__aeabi_dadd+0x134>
 80008f2:	2300      	movs	r3, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	e769      	b.n	80007cc <__aeabi_dadd+0x134>
 80008f8:	002a      	movs	r2, r5
 80008fa:	433a      	orrs	r2, r7
 80008fc:	d069      	beq.n	80009d2 <__aeabi_dadd+0x33a>
 80008fe:	464a      	mov	r2, r9
 8000900:	0758      	lsls	r0, r3, #29
 8000902:	08d1      	lsrs	r1, r2, #3
 8000904:	08da      	lsrs	r2, r3, #3
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	031b      	lsls	r3, r3, #12
 800090a:	4308      	orrs	r0, r1
 800090c:	421a      	tst	r2, r3
 800090e:	d007      	beq.n	8000920 <__aeabi_dadd+0x288>
 8000910:	0029      	movs	r1, r5
 8000912:	08ed      	lsrs	r5, r5, #3
 8000914:	421d      	tst	r5, r3
 8000916:	d103      	bne.n	8000920 <__aeabi_dadd+0x288>
 8000918:	002a      	movs	r2, r5
 800091a:	08ff      	lsrs	r7, r7, #3
 800091c:	0748      	lsls	r0, r1, #29
 800091e:	4338      	orrs	r0, r7
 8000920:	0f43      	lsrs	r3, r0, #29
 8000922:	00c1      	lsls	r1, r0, #3
 8000924:	075b      	lsls	r3, r3, #29
 8000926:	08c9      	lsrs	r1, r1, #3
 8000928:	4319      	orrs	r1, r3
 800092a:	0013      	movs	r3, r2
 800092c:	000a      	movs	r2, r1
 800092e:	431a      	orrs	r2, r3
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x29c>
 8000932:	e213      	b.n	8000d5c <__aeabi_dadd+0x6c4>
 8000934:	2280      	movs	r2, #128	; 0x80
 8000936:	0312      	lsls	r2, r2, #12
 8000938:	4313      	orrs	r3, r2
 800093a:	031b      	lsls	r3, r3, #12
 800093c:	4a33      	ldr	r2, [pc, #204]	; (8000a0c <__aeabi_dadd+0x374>)
 800093e:	0b1b      	lsrs	r3, r3, #12
 8000940:	e744      	b.n	80007cc <__aeabi_dadd+0x134>
 8000942:	2a00      	cmp	r2, #0
 8000944:	d04b      	beq.n	80009de <__aeabi_dadd+0x346>
 8000946:	1b8a      	subs	r2, r1, r6
 8000948:	2e00      	cmp	r6, #0
 800094a:	d100      	bne.n	800094e <__aeabi_dadd+0x2b6>
 800094c:	e0e7      	b.n	8000b1e <__aeabi_dadd+0x486>
 800094e:	482f      	ldr	r0, [pc, #188]	; (8000a0c <__aeabi_dadd+0x374>)
 8000950:	4281      	cmp	r1, r0
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x2be>
 8000954:	e195      	b.n	8000c82 <__aeabi_dadd+0x5ea>
 8000956:	2080      	movs	r0, #128	; 0x80
 8000958:	0400      	lsls	r0, r0, #16
 800095a:	4303      	orrs	r3, r0
 800095c:	2a38      	cmp	r2, #56	; 0x38
 800095e:	dd00      	ble.n	8000962 <__aeabi_dadd+0x2ca>
 8000960:	e143      	b.n	8000bea <__aeabi_dadd+0x552>
 8000962:	2a1f      	cmp	r2, #31
 8000964:	dd00      	ble.n	8000968 <__aeabi_dadd+0x2d0>
 8000966:	e1db      	b.n	8000d20 <__aeabi_dadd+0x688>
 8000968:	2020      	movs	r0, #32
 800096a:	001d      	movs	r5, r3
 800096c:	464e      	mov	r6, r9
 800096e:	1a80      	subs	r0, r0, r2
 8000970:	4085      	lsls	r5, r0
 8000972:	40d6      	lsrs	r6, r2
 8000974:	4335      	orrs	r5, r6
 8000976:	464e      	mov	r6, r9
 8000978:	4086      	lsls	r6, r0
 800097a:	0030      	movs	r0, r6
 800097c:	40d3      	lsrs	r3, r2
 800097e:	1e46      	subs	r6, r0, #1
 8000980:	41b0      	sbcs	r0, r6
 8000982:	449c      	add	ip, r3
 8000984:	4305      	orrs	r5, r0
 8000986:	19ed      	adds	r5, r5, r7
 8000988:	42bd      	cmp	r5, r7
 800098a:	419b      	sbcs	r3, r3
 800098c:	425b      	negs	r3, r3
 800098e:	4463      	add	r3, ip
 8000990:	4698      	mov	r8, r3
 8000992:	000e      	movs	r6, r1
 8000994:	e07f      	b.n	8000a96 <__aeabi_dadd+0x3fe>
 8000996:	4a1e      	ldr	r2, [pc, #120]	; (8000a10 <__aeabi_dadd+0x378>)
 8000998:	1a76      	subs	r6, r6, r1
 800099a:	4013      	ands	r3, r2
 800099c:	4698      	mov	r8, r3
 800099e:	e6f5      	b.n	800078c <__aeabi_dadd+0xf4>
 80009a0:	0028      	movs	r0, r5
 80009a2:	f001 fd61 	bl	8002468 <__clzsi2>
 80009a6:	0001      	movs	r1, r0
 80009a8:	3118      	adds	r1, #24
 80009aa:	291f      	cmp	r1, #31
 80009ac:	dc00      	bgt.n	80009b0 <__aeabi_dadd+0x318>
 80009ae:	e6cf      	b.n	8000750 <__aeabi_dadd+0xb8>
 80009b0:	002b      	movs	r3, r5
 80009b2:	3808      	subs	r0, #8
 80009b4:	4083      	lsls	r3, r0
 80009b6:	2500      	movs	r5, #0
 80009b8:	e6d2      	b.n	8000760 <__aeabi_dadd+0xc8>
 80009ba:	4662      	mov	r2, ip
 80009bc:	433a      	orrs	r2, r7
 80009be:	0011      	movs	r1, r2
 80009c0:	1e4f      	subs	r7, r1, #1
 80009c2:	41b9      	sbcs	r1, r7
 80009c4:	e6ac      	b.n	8000720 <__aeabi_dadd+0x88>
 80009c6:	4649      	mov	r1, r9
 80009c8:	0758      	lsls	r0, r3, #29
 80009ca:	08c9      	lsrs	r1, r1, #3
 80009cc:	4301      	orrs	r1, r0
 80009ce:	08db      	lsrs	r3, r3, #3
 80009d0:	e787      	b.n	80008e2 <__aeabi_dadd+0x24a>
 80009d2:	4649      	mov	r1, r9
 80009d4:	075a      	lsls	r2, r3, #29
 80009d6:	08c9      	lsrs	r1, r1, #3
 80009d8:	4311      	orrs	r1, r2
 80009da:	08db      	lsrs	r3, r3, #3
 80009dc:	e7a6      	b.n	800092c <__aeabi_dadd+0x294>
 80009de:	490d      	ldr	r1, [pc, #52]	; (8000a14 <__aeabi_dadd+0x37c>)
 80009e0:	1c70      	adds	r0, r6, #1
 80009e2:	4208      	tst	r0, r1
 80009e4:	d000      	beq.n	80009e8 <__aeabi_dadd+0x350>
 80009e6:	e0bb      	b.n	8000b60 <__aeabi_dadd+0x4c8>
 80009e8:	2e00      	cmp	r6, #0
 80009ea:	d000      	beq.n	80009ee <__aeabi_dadd+0x356>
 80009ec:	e114      	b.n	8000c18 <__aeabi_dadd+0x580>
 80009ee:	4649      	mov	r1, r9
 80009f0:	4319      	orrs	r1, r3
 80009f2:	d100      	bne.n	80009f6 <__aeabi_dadd+0x35e>
 80009f4:	e175      	b.n	8000ce2 <__aeabi_dadd+0x64a>
 80009f6:	0029      	movs	r1, r5
 80009f8:	4339      	orrs	r1, r7
 80009fa:	d000      	beq.n	80009fe <__aeabi_dadd+0x366>
 80009fc:	e17e      	b.n	8000cfc <__aeabi_dadd+0x664>
 80009fe:	4649      	mov	r1, r9
 8000a00:	0758      	lsls	r0, r3, #29
 8000a02:	08c9      	lsrs	r1, r1, #3
 8000a04:	4301      	orrs	r1, r0
 8000a06:	08db      	lsrs	r3, r3, #3
 8000a08:	e76e      	b.n	80008e8 <__aeabi_dadd+0x250>
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	000007ff 	.word	0x000007ff
 8000a10:	ff7fffff 	.word	0xff7fffff
 8000a14:	000007fe 	.word	0x000007fe
 8000a18:	4649      	mov	r1, r9
 8000a1a:	1bcd      	subs	r5, r1, r7
 8000a1c:	4661      	mov	r1, ip
 8000a1e:	1a58      	subs	r0, r3, r1
 8000a20:	45a9      	cmp	r9, r5
 8000a22:	4189      	sbcs	r1, r1
 8000a24:	4249      	negs	r1, r1
 8000a26:	4688      	mov	r8, r1
 8000a28:	0001      	movs	r1, r0
 8000a2a:	4640      	mov	r0, r8
 8000a2c:	1a09      	subs	r1, r1, r0
 8000a2e:	4688      	mov	r8, r1
 8000a30:	0209      	lsls	r1, r1, #8
 8000a32:	d500      	bpl.n	8000a36 <__aeabi_dadd+0x39e>
 8000a34:	e0a6      	b.n	8000b84 <__aeabi_dadd+0x4ec>
 8000a36:	4641      	mov	r1, r8
 8000a38:	4329      	orrs	r1, r5
 8000a3a:	d000      	beq.n	8000a3e <__aeabi_dadd+0x3a6>
 8000a3c:	e67f      	b.n	800073e <__aeabi_dadd+0xa6>
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2400      	movs	r4, #0
 8000a42:	e751      	b.n	80008e8 <__aeabi_dadd+0x250>
 8000a44:	4cc7      	ldr	r4, [pc, #796]	; (8000d64 <__aeabi_dadd+0x6cc>)
 8000a46:	42a1      	cmp	r1, r4
 8000a48:	d100      	bne.n	8000a4c <__aeabi_dadd+0x3b4>
 8000a4a:	e0c7      	b.n	8000bdc <__aeabi_dadd+0x544>
 8000a4c:	2480      	movs	r4, #128	; 0x80
 8000a4e:	0424      	lsls	r4, r4, #16
 8000a50:	4323      	orrs	r3, r4
 8000a52:	2a38      	cmp	r2, #56	; 0x38
 8000a54:	dc54      	bgt.n	8000b00 <__aeabi_dadd+0x468>
 8000a56:	2a1f      	cmp	r2, #31
 8000a58:	dd00      	ble.n	8000a5c <__aeabi_dadd+0x3c4>
 8000a5a:	e0cc      	b.n	8000bf6 <__aeabi_dadd+0x55e>
 8000a5c:	2420      	movs	r4, #32
 8000a5e:	4648      	mov	r0, r9
 8000a60:	1aa4      	subs	r4, r4, r2
 8000a62:	001d      	movs	r5, r3
 8000a64:	464e      	mov	r6, r9
 8000a66:	40a0      	lsls	r0, r4
 8000a68:	40d6      	lsrs	r6, r2
 8000a6a:	40a5      	lsls	r5, r4
 8000a6c:	0004      	movs	r4, r0
 8000a6e:	40d3      	lsrs	r3, r2
 8000a70:	4662      	mov	r2, ip
 8000a72:	4335      	orrs	r5, r6
 8000a74:	1e66      	subs	r6, r4, #1
 8000a76:	41b4      	sbcs	r4, r6
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	469c      	mov	ip, r3
 8000a7c:	4325      	orrs	r5, r4
 8000a7e:	e044      	b.n	8000b0a <__aeabi_dadd+0x472>
 8000a80:	4662      	mov	r2, ip
 8000a82:	433a      	orrs	r2, r7
 8000a84:	0015      	movs	r5, r2
 8000a86:	1e6f      	subs	r7, r5, #1
 8000a88:	41bd      	sbcs	r5, r7
 8000a8a:	444d      	add	r5, r9
 8000a8c:	454d      	cmp	r5, r9
 8000a8e:	4189      	sbcs	r1, r1
 8000a90:	4249      	negs	r1, r1
 8000a92:	4688      	mov	r8, r1
 8000a94:	4498      	add	r8, r3
 8000a96:	4643      	mov	r3, r8
 8000a98:	021b      	lsls	r3, r3, #8
 8000a9a:	d400      	bmi.n	8000a9e <__aeabi_dadd+0x406>
 8000a9c:	e718      	b.n	80008d0 <__aeabi_dadd+0x238>
 8000a9e:	4bb1      	ldr	r3, [pc, #708]	; (8000d64 <__aeabi_dadd+0x6cc>)
 8000aa0:	3601      	adds	r6, #1
 8000aa2:	429e      	cmp	r6, r3
 8000aa4:	d049      	beq.n	8000b3a <__aeabi_dadd+0x4a2>
 8000aa6:	4642      	mov	r2, r8
 8000aa8:	4baf      	ldr	r3, [pc, #700]	; (8000d68 <__aeabi_dadd+0x6d0>)
 8000aaa:	2101      	movs	r1, #1
 8000aac:	401a      	ands	r2, r3
 8000aae:	0013      	movs	r3, r2
 8000ab0:	086a      	lsrs	r2, r5, #1
 8000ab2:	400d      	ands	r5, r1
 8000ab4:	4315      	orrs	r5, r2
 8000ab6:	07d9      	lsls	r1, r3, #31
 8000ab8:	085b      	lsrs	r3, r3, #1
 8000aba:	4698      	mov	r8, r3
 8000abc:	430d      	orrs	r5, r1
 8000abe:	e665      	b.n	800078c <__aeabi_dadd+0xf4>
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	3e1f      	subs	r6, #31
 8000ac4:	40f0      	lsrs	r0, r6
 8000ac6:	2a20      	cmp	r2, #32
 8000ac8:	d003      	beq.n	8000ad2 <__aeabi_dadd+0x43a>
 8000aca:	2140      	movs	r1, #64	; 0x40
 8000acc:	1a8a      	subs	r2, r1, r2
 8000ace:	4093      	lsls	r3, r2
 8000ad0:	431d      	orrs	r5, r3
 8000ad2:	1e69      	subs	r1, r5, #1
 8000ad4:	418d      	sbcs	r5, r1
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	2600      	movs	r6, #0
 8000ada:	4698      	mov	r8, r3
 8000adc:	4305      	orrs	r5, r0
 8000ade:	e6f7      	b.n	80008d0 <__aeabi_dadd+0x238>
 8000ae0:	0011      	movs	r1, r2
 8000ae2:	4665      	mov	r5, ip
 8000ae4:	3920      	subs	r1, #32
 8000ae6:	40cd      	lsrs	r5, r1
 8000ae8:	2a20      	cmp	r2, #32
 8000aea:	d004      	beq.n	8000af6 <__aeabi_dadd+0x45e>
 8000aec:	2040      	movs	r0, #64	; 0x40
 8000aee:	4661      	mov	r1, ip
 8000af0:	1a82      	subs	r2, r0, r2
 8000af2:	4091      	lsls	r1, r2
 8000af4:	430f      	orrs	r7, r1
 8000af6:	0039      	movs	r1, r7
 8000af8:	1e4f      	subs	r7, r1, #1
 8000afa:	41b9      	sbcs	r1, r7
 8000afc:	4329      	orrs	r1, r5
 8000afe:	e60f      	b.n	8000720 <__aeabi_dadd+0x88>
 8000b00:	464a      	mov	r2, r9
 8000b02:	4313      	orrs	r3, r2
 8000b04:	001d      	movs	r5, r3
 8000b06:	1e6b      	subs	r3, r5, #1
 8000b08:	419d      	sbcs	r5, r3
 8000b0a:	1b7d      	subs	r5, r7, r5
 8000b0c:	42af      	cmp	r7, r5
 8000b0e:	419b      	sbcs	r3, r3
 8000b10:	4662      	mov	r2, ip
 8000b12:	425b      	negs	r3, r3
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	4698      	mov	r8, r3
 8000b18:	4654      	mov	r4, sl
 8000b1a:	000e      	movs	r6, r1
 8000b1c:	e607      	b.n	800072e <__aeabi_dadd+0x96>
 8000b1e:	4648      	mov	r0, r9
 8000b20:	4318      	orrs	r0, r3
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x48e>
 8000b24:	e0b3      	b.n	8000c8e <__aeabi_dadd+0x5f6>
 8000b26:	1e50      	subs	r0, r2, #1
 8000b28:	2a01      	cmp	r2, #1
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_dadd+0x496>
 8000b2c:	e10d      	b.n	8000d4a <__aeabi_dadd+0x6b2>
 8000b2e:	4d8d      	ldr	r5, [pc, #564]	; (8000d64 <__aeabi_dadd+0x6cc>)
 8000b30:	42aa      	cmp	r2, r5
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dadd+0x49e>
 8000b34:	e0a5      	b.n	8000c82 <__aeabi_dadd+0x5ea>
 8000b36:	0002      	movs	r2, r0
 8000b38:	e710      	b.n	800095c <__aeabi_dadd+0x2c4>
 8000b3a:	0032      	movs	r2, r6
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	e644      	b.n	80007cc <__aeabi_dadd+0x134>
 8000b42:	2120      	movs	r1, #32
 8000b44:	0038      	movs	r0, r7
 8000b46:	1a89      	subs	r1, r1, r2
 8000b48:	4665      	mov	r5, ip
 8000b4a:	408f      	lsls	r7, r1
 8000b4c:	408d      	lsls	r5, r1
 8000b4e:	40d0      	lsrs	r0, r2
 8000b50:	1e79      	subs	r1, r7, #1
 8000b52:	418f      	sbcs	r7, r1
 8000b54:	4305      	orrs	r5, r0
 8000b56:	433d      	orrs	r5, r7
 8000b58:	4667      	mov	r7, ip
 8000b5a:	40d7      	lsrs	r7, r2
 8000b5c:	19db      	adds	r3, r3, r7
 8000b5e:	e794      	b.n	8000a8a <__aeabi_dadd+0x3f2>
 8000b60:	4a80      	ldr	r2, [pc, #512]	; (8000d64 <__aeabi_dadd+0x6cc>)
 8000b62:	4290      	cmp	r0, r2
 8000b64:	d100      	bne.n	8000b68 <__aeabi_dadd+0x4d0>
 8000b66:	e0ec      	b.n	8000d42 <__aeabi_dadd+0x6aa>
 8000b68:	0039      	movs	r1, r7
 8000b6a:	4449      	add	r1, r9
 8000b6c:	4549      	cmp	r1, r9
 8000b6e:	4192      	sbcs	r2, r2
 8000b70:	4463      	add	r3, ip
 8000b72:	4252      	negs	r2, r2
 8000b74:	189b      	adds	r3, r3, r2
 8000b76:	07dd      	lsls	r5, r3, #31
 8000b78:	0849      	lsrs	r1, r1, #1
 8000b7a:	085b      	lsrs	r3, r3, #1
 8000b7c:	4698      	mov	r8, r3
 8000b7e:	0006      	movs	r6, r0
 8000b80:	430d      	orrs	r5, r1
 8000b82:	e6a5      	b.n	80008d0 <__aeabi_dadd+0x238>
 8000b84:	464a      	mov	r2, r9
 8000b86:	1abd      	subs	r5, r7, r2
 8000b88:	42af      	cmp	r7, r5
 8000b8a:	4189      	sbcs	r1, r1
 8000b8c:	4662      	mov	r2, ip
 8000b8e:	4249      	negs	r1, r1
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	1a5b      	subs	r3, r3, r1
 8000b94:	4698      	mov	r8, r3
 8000b96:	4654      	mov	r4, sl
 8000b98:	e5d1      	b.n	800073e <__aeabi_dadd+0xa6>
 8000b9a:	076c      	lsls	r4, r5, #29
 8000b9c:	08f9      	lsrs	r1, r7, #3
 8000b9e:	4321      	orrs	r1, r4
 8000ba0:	08eb      	lsrs	r3, r5, #3
 8000ba2:	0004      	movs	r4, r0
 8000ba4:	e69d      	b.n	80008e2 <__aeabi_dadd+0x24a>
 8000ba6:	464a      	mov	r2, r9
 8000ba8:	431a      	orrs	r2, r3
 8000baa:	d175      	bne.n	8000c98 <__aeabi_dadd+0x600>
 8000bac:	4661      	mov	r1, ip
 8000bae:	4339      	orrs	r1, r7
 8000bb0:	d114      	bne.n	8000bdc <__aeabi_dadd+0x544>
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	2400      	movs	r4, #0
 8000bb6:	031b      	lsls	r3, r3, #12
 8000bb8:	e6bc      	b.n	8000934 <__aeabi_dadd+0x29c>
 8000bba:	464a      	mov	r2, r9
 8000bbc:	1bd5      	subs	r5, r2, r7
 8000bbe:	45a9      	cmp	r9, r5
 8000bc0:	4189      	sbcs	r1, r1
 8000bc2:	4662      	mov	r2, ip
 8000bc4:	4249      	negs	r1, r1
 8000bc6:	1a9b      	subs	r3, r3, r2
 8000bc8:	1a5b      	subs	r3, r3, r1
 8000bca:	4698      	mov	r8, r3
 8000bcc:	2601      	movs	r6, #1
 8000bce:	e5ae      	b.n	800072e <__aeabi_dadd+0x96>
 8000bd0:	464a      	mov	r2, r9
 8000bd2:	08d1      	lsrs	r1, r2, #3
 8000bd4:	075a      	lsls	r2, r3, #29
 8000bd6:	4311      	orrs	r1, r2
 8000bd8:	08db      	lsrs	r3, r3, #3
 8000bda:	e6a7      	b.n	800092c <__aeabi_dadd+0x294>
 8000bdc:	4663      	mov	r3, ip
 8000bde:	08f9      	lsrs	r1, r7, #3
 8000be0:	075a      	lsls	r2, r3, #29
 8000be2:	4654      	mov	r4, sl
 8000be4:	4311      	orrs	r1, r2
 8000be6:	08db      	lsrs	r3, r3, #3
 8000be8:	e6a0      	b.n	800092c <__aeabi_dadd+0x294>
 8000bea:	464a      	mov	r2, r9
 8000bec:	4313      	orrs	r3, r2
 8000bee:	001d      	movs	r5, r3
 8000bf0:	1e6b      	subs	r3, r5, #1
 8000bf2:	419d      	sbcs	r5, r3
 8000bf4:	e6c7      	b.n	8000986 <__aeabi_dadd+0x2ee>
 8000bf6:	0014      	movs	r4, r2
 8000bf8:	001e      	movs	r6, r3
 8000bfa:	3c20      	subs	r4, #32
 8000bfc:	40e6      	lsrs	r6, r4
 8000bfe:	2a20      	cmp	r2, #32
 8000c00:	d005      	beq.n	8000c0e <__aeabi_dadd+0x576>
 8000c02:	2440      	movs	r4, #64	; 0x40
 8000c04:	1aa2      	subs	r2, r4, r2
 8000c06:	4093      	lsls	r3, r2
 8000c08:	464a      	mov	r2, r9
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	4691      	mov	r9, r2
 8000c0e:	464d      	mov	r5, r9
 8000c10:	1e6b      	subs	r3, r5, #1
 8000c12:	419d      	sbcs	r5, r3
 8000c14:	4335      	orrs	r5, r6
 8000c16:	e778      	b.n	8000b0a <__aeabi_dadd+0x472>
 8000c18:	464a      	mov	r2, r9
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	d000      	beq.n	8000c20 <__aeabi_dadd+0x588>
 8000c1e:	e66b      	b.n	80008f8 <__aeabi_dadd+0x260>
 8000c20:	076b      	lsls	r3, r5, #29
 8000c22:	08f9      	lsrs	r1, r7, #3
 8000c24:	4319      	orrs	r1, r3
 8000c26:	08eb      	lsrs	r3, r5, #3
 8000c28:	e680      	b.n	800092c <__aeabi_dadd+0x294>
 8000c2a:	4661      	mov	r1, ip
 8000c2c:	4339      	orrs	r1, r7
 8000c2e:	d054      	beq.n	8000cda <__aeabi_dadd+0x642>
 8000c30:	4663      	mov	r3, ip
 8000c32:	08f9      	lsrs	r1, r7, #3
 8000c34:	075c      	lsls	r4, r3, #29
 8000c36:	4321      	orrs	r1, r4
 8000c38:	08db      	lsrs	r3, r3, #3
 8000c3a:	0004      	movs	r4, r0
 8000c3c:	e654      	b.n	80008e8 <__aeabi_dadd+0x250>
 8000c3e:	464a      	mov	r2, r9
 8000c40:	1abd      	subs	r5, r7, r2
 8000c42:	42af      	cmp	r7, r5
 8000c44:	4189      	sbcs	r1, r1
 8000c46:	4662      	mov	r2, ip
 8000c48:	4249      	negs	r1, r1
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	4698      	mov	r8, r3
 8000c50:	0004      	movs	r4, r0
 8000c52:	2601      	movs	r6, #1
 8000c54:	e56b      	b.n	800072e <__aeabi_dadd+0x96>
 8000c56:	464a      	mov	r2, r9
 8000c58:	1bd5      	subs	r5, r2, r7
 8000c5a:	45a9      	cmp	r9, r5
 8000c5c:	4189      	sbcs	r1, r1
 8000c5e:	4662      	mov	r2, ip
 8000c60:	4249      	negs	r1, r1
 8000c62:	1a9a      	subs	r2, r3, r2
 8000c64:	1a52      	subs	r2, r2, r1
 8000c66:	4690      	mov	r8, r2
 8000c68:	0212      	lsls	r2, r2, #8
 8000c6a:	d532      	bpl.n	8000cd2 <__aeabi_dadd+0x63a>
 8000c6c:	464a      	mov	r2, r9
 8000c6e:	1abd      	subs	r5, r7, r2
 8000c70:	42af      	cmp	r7, r5
 8000c72:	4189      	sbcs	r1, r1
 8000c74:	4662      	mov	r2, ip
 8000c76:	4249      	negs	r1, r1
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	1a5b      	subs	r3, r3, r1
 8000c7c:	4698      	mov	r8, r3
 8000c7e:	0004      	movs	r4, r0
 8000c80:	e584      	b.n	800078c <__aeabi_dadd+0xf4>
 8000c82:	4663      	mov	r3, ip
 8000c84:	08f9      	lsrs	r1, r7, #3
 8000c86:	075a      	lsls	r2, r3, #29
 8000c88:	4311      	orrs	r1, r2
 8000c8a:	08db      	lsrs	r3, r3, #3
 8000c8c:	e64e      	b.n	800092c <__aeabi_dadd+0x294>
 8000c8e:	08f9      	lsrs	r1, r7, #3
 8000c90:	0768      	lsls	r0, r5, #29
 8000c92:	4301      	orrs	r1, r0
 8000c94:	08eb      	lsrs	r3, r5, #3
 8000c96:	e624      	b.n	80008e2 <__aeabi_dadd+0x24a>
 8000c98:	4662      	mov	r2, ip
 8000c9a:	433a      	orrs	r2, r7
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_dadd+0x608>
 8000c9e:	e698      	b.n	80009d2 <__aeabi_dadd+0x33a>
 8000ca0:	464a      	mov	r2, r9
 8000ca2:	08d1      	lsrs	r1, r2, #3
 8000ca4:	075a      	lsls	r2, r3, #29
 8000ca6:	4311      	orrs	r1, r2
 8000ca8:	08da      	lsrs	r2, r3, #3
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	031b      	lsls	r3, r3, #12
 8000cae:	421a      	tst	r2, r3
 8000cb0:	d008      	beq.n	8000cc4 <__aeabi_dadd+0x62c>
 8000cb2:	4660      	mov	r0, ip
 8000cb4:	08c5      	lsrs	r5, r0, #3
 8000cb6:	421d      	tst	r5, r3
 8000cb8:	d104      	bne.n	8000cc4 <__aeabi_dadd+0x62c>
 8000cba:	4654      	mov	r4, sl
 8000cbc:	002a      	movs	r2, r5
 8000cbe:	08f9      	lsrs	r1, r7, #3
 8000cc0:	0743      	lsls	r3, r0, #29
 8000cc2:	4319      	orrs	r1, r3
 8000cc4:	0f4b      	lsrs	r3, r1, #29
 8000cc6:	00c9      	lsls	r1, r1, #3
 8000cc8:	075b      	lsls	r3, r3, #29
 8000cca:	08c9      	lsrs	r1, r1, #3
 8000ccc:	4319      	orrs	r1, r3
 8000cce:	0013      	movs	r3, r2
 8000cd0:	e62c      	b.n	800092c <__aeabi_dadd+0x294>
 8000cd2:	4641      	mov	r1, r8
 8000cd4:	4329      	orrs	r1, r5
 8000cd6:	d000      	beq.n	8000cda <__aeabi_dadd+0x642>
 8000cd8:	e5fa      	b.n	80008d0 <__aeabi_dadd+0x238>
 8000cda:	2300      	movs	r3, #0
 8000cdc:	000a      	movs	r2, r1
 8000cde:	2400      	movs	r4, #0
 8000ce0:	e602      	b.n	80008e8 <__aeabi_dadd+0x250>
 8000ce2:	076b      	lsls	r3, r5, #29
 8000ce4:	08f9      	lsrs	r1, r7, #3
 8000ce6:	4319      	orrs	r1, r3
 8000ce8:	08eb      	lsrs	r3, r5, #3
 8000cea:	e5fd      	b.n	80008e8 <__aeabi_dadd+0x250>
 8000cec:	4663      	mov	r3, ip
 8000cee:	08f9      	lsrs	r1, r7, #3
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4319      	orrs	r1, r3
 8000cf4:	4663      	mov	r3, ip
 8000cf6:	0004      	movs	r4, r0
 8000cf8:	08db      	lsrs	r3, r3, #3
 8000cfa:	e617      	b.n	800092c <__aeabi_dadd+0x294>
 8000cfc:	003d      	movs	r5, r7
 8000cfe:	444d      	add	r5, r9
 8000d00:	4463      	add	r3, ip
 8000d02:	454d      	cmp	r5, r9
 8000d04:	4189      	sbcs	r1, r1
 8000d06:	4698      	mov	r8, r3
 8000d08:	4249      	negs	r1, r1
 8000d0a:	4488      	add	r8, r1
 8000d0c:	4643      	mov	r3, r8
 8000d0e:	021b      	lsls	r3, r3, #8
 8000d10:	d400      	bmi.n	8000d14 <__aeabi_dadd+0x67c>
 8000d12:	e5dd      	b.n	80008d0 <__aeabi_dadd+0x238>
 8000d14:	4642      	mov	r2, r8
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <__aeabi_dadd+0x6d0>)
 8000d18:	2601      	movs	r6, #1
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	4690      	mov	r8, r2
 8000d1e:	e5d7      	b.n	80008d0 <__aeabi_dadd+0x238>
 8000d20:	0010      	movs	r0, r2
 8000d22:	001e      	movs	r6, r3
 8000d24:	3820      	subs	r0, #32
 8000d26:	40c6      	lsrs	r6, r0
 8000d28:	2a20      	cmp	r2, #32
 8000d2a:	d005      	beq.n	8000d38 <__aeabi_dadd+0x6a0>
 8000d2c:	2040      	movs	r0, #64	; 0x40
 8000d2e:	1a82      	subs	r2, r0, r2
 8000d30:	4093      	lsls	r3, r2
 8000d32:	464a      	mov	r2, r9
 8000d34:	431a      	orrs	r2, r3
 8000d36:	4691      	mov	r9, r2
 8000d38:	464d      	mov	r5, r9
 8000d3a:	1e6b      	subs	r3, r5, #1
 8000d3c:	419d      	sbcs	r5, r3
 8000d3e:	4335      	orrs	r5, r6
 8000d40:	e621      	b.n	8000986 <__aeabi_dadd+0x2ee>
 8000d42:	0002      	movs	r2, r0
 8000d44:	2300      	movs	r3, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	e540      	b.n	80007cc <__aeabi_dadd+0x134>
 8000d4a:	464a      	mov	r2, r9
 8000d4c:	19d5      	adds	r5, r2, r7
 8000d4e:	42bd      	cmp	r5, r7
 8000d50:	4189      	sbcs	r1, r1
 8000d52:	4463      	add	r3, ip
 8000d54:	4698      	mov	r8, r3
 8000d56:	4249      	negs	r1, r1
 8000d58:	4488      	add	r8, r1
 8000d5a:	e5b3      	b.n	80008c4 <__aeabi_dadd+0x22c>
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4a01      	ldr	r2, [pc, #4]	; (8000d64 <__aeabi_dadd+0x6cc>)
 8000d60:	000b      	movs	r3, r1
 8000d62:	e533      	b.n	80007cc <__aeabi_dadd+0x134>
 8000d64:	000007ff 	.word	0x000007ff
 8000d68:	ff7fffff 	.word	0xff7fffff

08000d6c <__aeabi_ddiv>:
 8000d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6e:	4657      	mov	r7, sl
 8000d70:	464e      	mov	r6, r9
 8000d72:	4645      	mov	r5, r8
 8000d74:	46de      	mov	lr, fp
 8000d76:	b5e0      	push	{r5, r6, r7, lr}
 8000d78:	4681      	mov	r9, r0
 8000d7a:	0005      	movs	r5, r0
 8000d7c:	030c      	lsls	r4, r1, #12
 8000d7e:	0048      	lsls	r0, r1, #1
 8000d80:	4692      	mov	sl, r2
 8000d82:	001f      	movs	r7, r3
 8000d84:	b085      	sub	sp, #20
 8000d86:	0b24      	lsrs	r4, r4, #12
 8000d88:	0d40      	lsrs	r0, r0, #21
 8000d8a:	0fce      	lsrs	r6, r1, #31
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d059      	beq.n	8000e44 <__aeabi_ddiv+0xd8>
 8000d90:	4b87      	ldr	r3, [pc, #540]	; (8000fb0 <__aeabi_ddiv+0x244>)
 8000d92:	4298      	cmp	r0, r3
 8000d94:	d100      	bne.n	8000d98 <__aeabi_ddiv+0x2c>
 8000d96:	e098      	b.n	8000eca <__aeabi_ddiv+0x15e>
 8000d98:	0f6b      	lsrs	r3, r5, #29
 8000d9a:	00e4      	lsls	r4, r4, #3
 8000d9c:	431c      	orrs	r4, r3
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	041b      	lsls	r3, r3, #16
 8000da2:	4323      	orrs	r3, r4
 8000da4:	4698      	mov	r8, r3
 8000da6:	4b83      	ldr	r3, [pc, #524]	; (8000fb4 <__aeabi_ddiv+0x248>)
 8000da8:	00ed      	lsls	r5, r5, #3
 8000daa:	469b      	mov	fp, r3
 8000dac:	2300      	movs	r3, #0
 8000dae:	4699      	mov	r9, r3
 8000db0:	4483      	add	fp, r0
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	033c      	lsls	r4, r7, #12
 8000db6:	007b      	lsls	r3, r7, #1
 8000db8:	4650      	mov	r0, sl
 8000dba:	0b24      	lsrs	r4, r4, #12
 8000dbc:	0d5b      	lsrs	r3, r3, #21
 8000dbe:	0fff      	lsrs	r7, r7, #31
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d067      	beq.n	8000e94 <__aeabi_ddiv+0x128>
 8000dc4:	4a7a      	ldr	r2, [pc, #488]	; (8000fb0 <__aeabi_ddiv+0x244>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d018      	beq.n	8000dfc <__aeabi_ddiv+0x90>
 8000dca:	497a      	ldr	r1, [pc, #488]	; (8000fb4 <__aeabi_ddiv+0x248>)
 8000dcc:	0f42      	lsrs	r2, r0, #29
 8000dce:	468c      	mov	ip, r1
 8000dd0:	00e4      	lsls	r4, r4, #3
 8000dd2:	4659      	mov	r1, fp
 8000dd4:	4314      	orrs	r4, r2
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	4463      	add	r3, ip
 8000dda:	0412      	lsls	r2, r2, #16
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	4314      	orrs	r4, r2
 8000de0:	469b      	mov	fp, r3
 8000de2:	00c2      	lsls	r2, r0, #3
 8000de4:	2000      	movs	r0, #0
 8000de6:	0033      	movs	r3, r6
 8000de8:	407b      	eors	r3, r7
 8000dea:	469a      	mov	sl, r3
 8000dec:	464b      	mov	r3, r9
 8000dee:	2b0f      	cmp	r3, #15
 8000df0:	d900      	bls.n	8000df4 <__aeabi_ddiv+0x88>
 8000df2:	e0ef      	b.n	8000fd4 <__aeabi_ddiv+0x268>
 8000df4:	4970      	ldr	r1, [pc, #448]	; (8000fb8 <__aeabi_ddiv+0x24c>)
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	58cb      	ldr	r3, [r1, r3]
 8000dfa:	469f      	mov	pc, r3
 8000dfc:	4b6f      	ldr	r3, [pc, #444]	; (8000fbc <__aeabi_ddiv+0x250>)
 8000dfe:	4652      	mov	r2, sl
 8000e00:	469c      	mov	ip, r3
 8000e02:	4322      	orrs	r2, r4
 8000e04:	44e3      	add	fp, ip
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	d000      	beq.n	8000e0c <__aeabi_ddiv+0xa0>
 8000e0a:	e095      	b.n	8000f38 <__aeabi_ddiv+0x1cc>
 8000e0c:	4649      	mov	r1, r9
 8000e0e:	2302      	movs	r3, #2
 8000e10:	4319      	orrs	r1, r3
 8000e12:	4689      	mov	r9, r1
 8000e14:	2400      	movs	r4, #0
 8000e16:	2002      	movs	r0, #2
 8000e18:	e7e5      	b.n	8000de6 <__aeabi_ddiv+0x7a>
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	2400      	movs	r4, #0
 8000e1e:	2500      	movs	r5, #0
 8000e20:	4652      	mov	r2, sl
 8000e22:	051b      	lsls	r3, r3, #20
 8000e24:	4323      	orrs	r3, r4
 8000e26:	07d2      	lsls	r2, r2, #31
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	0028      	movs	r0, r5
 8000e2c:	0019      	movs	r1, r3
 8000e2e:	b005      	add	sp, #20
 8000e30:	bcf0      	pop	{r4, r5, r6, r7}
 8000e32:	46bb      	mov	fp, r7
 8000e34:	46b2      	mov	sl, r6
 8000e36:	46a9      	mov	r9, r5
 8000e38:	46a0      	mov	r8, r4
 8000e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e3c:	2400      	movs	r4, #0
 8000e3e:	2500      	movs	r5, #0
 8000e40:	4b5b      	ldr	r3, [pc, #364]	; (8000fb0 <__aeabi_ddiv+0x244>)
 8000e42:	e7ed      	b.n	8000e20 <__aeabi_ddiv+0xb4>
 8000e44:	464b      	mov	r3, r9
 8000e46:	4323      	orrs	r3, r4
 8000e48:	4698      	mov	r8, r3
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_ddiv+0xe2>
 8000e4c:	e089      	b.n	8000f62 <__aeabi_ddiv+0x1f6>
 8000e4e:	2c00      	cmp	r4, #0
 8000e50:	d100      	bne.n	8000e54 <__aeabi_ddiv+0xe8>
 8000e52:	e1e0      	b.n	8001216 <__aeabi_ddiv+0x4aa>
 8000e54:	0020      	movs	r0, r4
 8000e56:	f001 fb07 	bl	8002468 <__clzsi2>
 8000e5a:	0001      	movs	r1, r0
 8000e5c:	0002      	movs	r2, r0
 8000e5e:	390b      	subs	r1, #11
 8000e60:	231d      	movs	r3, #29
 8000e62:	1a5b      	subs	r3, r3, r1
 8000e64:	4649      	mov	r1, r9
 8000e66:	0010      	movs	r0, r2
 8000e68:	40d9      	lsrs	r1, r3
 8000e6a:	3808      	subs	r0, #8
 8000e6c:	4084      	lsls	r4, r0
 8000e6e:	000b      	movs	r3, r1
 8000e70:	464d      	mov	r5, r9
 8000e72:	4323      	orrs	r3, r4
 8000e74:	4698      	mov	r8, r3
 8000e76:	4085      	lsls	r5, r0
 8000e78:	4851      	ldr	r0, [pc, #324]	; (8000fc0 <__aeabi_ddiv+0x254>)
 8000e7a:	033c      	lsls	r4, r7, #12
 8000e7c:	1a83      	subs	r3, r0, r2
 8000e7e:	469b      	mov	fp, r3
 8000e80:	2300      	movs	r3, #0
 8000e82:	4699      	mov	r9, r3
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	007b      	lsls	r3, r7, #1
 8000e88:	4650      	mov	r0, sl
 8000e8a:	0b24      	lsrs	r4, r4, #12
 8000e8c:	0d5b      	lsrs	r3, r3, #21
 8000e8e:	0fff      	lsrs	r7, r7, #31
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d197      	bne.n	8000dc4 <__aeabi_ddiv+0x58>
 8000e94:	4652      	mov	r2, sl
 8000e96:	4322      	orrs	r2, r4
 8000e98:	d055      	beq.n	8000f46 <__aeabi_ddiv+0x1da>
 8000e9a:	2c00      	cmp	r4, #0
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_ddiv+0x134>
 8000e9e:	e1ca      	b.n	8001236 <__aeabi_ddiv+0x4ca>
 8000ea0:	0020      	movs	r0, r4
 8000ea2:	f001 fae1 	bl	8002468 <__clzsi2>
 8000ea6:	0002      	movs	r2, r0
 8000ea8:	3a0b      	subs	r2, #11
 8000eaa:	231d      	movs	r3, #29
 8000eac:	0001      	movs	r1, r0
 8000eae:	1a9b      	subs	r3, r3, r2
 8000eb0:	4652      	mov	r2, sl
 8000eb2:	3908      	subs	r1, #8
 8000eb4:	40da      	lsrs	r2, r3
 8000eb6:	408c      	lsls	r4, r1
 8000eb8:	4314      	orrs	r4, r2
 8000eba:	4652      	mov	r2, sl
 8000ebc:	408a      	lsls	r2, r1
 8000ebe:	4b41      	ldr	r3, [pc, #260]	; (8000fc4 <__aeabi_ddiv+0x258>)
 8000ec0:	4458      	add	r0, fp
 8000ec2:	469b      	mov	fp, r3
 8000ec4:	4483      	add	fp, r0
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	e78d      	b.n	8000de6 <__aeabi_ddiv+0x7a>
 8000eca:	464b      	mov	r3, r9
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	4698      	mov	r8, r3
 8000ed0:	d140      	bne.n	8000f54 <__aeabi_ddiv+0x1e8>
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	4699      	mov	r9, r3
 8000ed6:	3b06      	subs	r3, #6
 8000ed8:	2500      	movs	r5, #0
 8000eda:	4683      	mov	fp, r0
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	e769      	b.n	8000db4 <__aeabi_ddiv+0x48>
 8000ee0:	46b2      	mov	sl, r6
 8000ee2:	9b00      	ldr	r3, [sp, #0]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d0a9      	beq.n	8000e3c <__aeabi_ddiv+0xd0>
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d100      	bne.n	8000eee <__aeabi_ddiv+0x182>
 8000eec:	e211      	b.n	8001312 <__aeabi_ddiv+0x5a6>
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d093      	beq.n	8000e1a <__aeabi_ddiv+0xae>
 8000ef2:	4a35      	ldr	r2, [pc, #212]	; (8000fc8 <__aeabi_ddiv+0x25c>)
 8000ef4:	445a      	add	r2, fp
 8000ef6:	2a00      	cmp	r2, #0
 8000ef8:	dc00      	bgt.n	8000efc <__aeabi_ddiv+0x190>
 8000efa:	e13c      	b.n	8001176 <__aeabi_ddiv+0x40a>
 8000efc:	076b      	lsls	r3, r5, #29
 8000efe:	d000      	beq.n	8000f02 <__aeabi_ddiv+0x196>
 8000f00:	e1a7      	b.n	8001252 <__aeabi_ddiv+0x4e6>
 8000f02:	08ed      	lsrs	r5, r5, #3
 8000f04:	4643      	mov	r3, r8
 8000f06:	01db      	lsls	r3, r3, #7
 8000f08:	d506      	bpl.n	8000f18 <__aeabi_ddiv+0x1ac>
 8000f0a:	4642      	mov	r2, r8
 8000f0c:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <__aeabi_ddiv+0x260>)
 8000f0e:	401a      	ands	r2, r3
 8000f10:	4690      	mov	r8, r2
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	00d2      	lsls	r2, r2, #3
 8000f16:	445a      	add	r2, fp
 8000f18:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <__aeabi_ddiv+0x264>)
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	dc8e      	bgt.n	8000e3c <__aeabi_ddiv+0xd0>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	0552      	lsls	r2, r2, #21
 8000f22:	0758      	lsls	r0, r3, #29
 8000f24:	025c      	lsls	r4, r3, #9
 8000f26:	4305      	orrs	r5, r0
 8000f28:	0b24      	lsrs	r4, r4, #12
 8000f2a:	0d53      	lsrs	r3, r2, #21
 8000f2c:	e778      	b.n	8000e20 <__aeabi_ddiv+0xb4>
 8000f2e:	46ba      	mov	sl, r7
 8000f30:	46a0      	mov	r8, r4
 8000f32:	0015      	movs	r5, r2
 8000f34:	9000      	str	r0, [sp, #0]
 8000f36:	e7d4      	b.n	8000ee2 <__aeabi_ddiv+0x176>
 8000f38:	464a      	mov	r2, r9
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	4691      	mov	r9, r2
 8000f40:	2003      	movs	r0, #3
 8000f42:	4652      	mov	r2, sl
 8000f44:	e74f      	b.n	8000de6 <__aeabi_ddiv+0x7a>
 8000f46:	4649      	mov	r1, r9
 8000f48:	2301      	movs	r3, #1
 8000f4a:	4319      	orrs	r1, r3
 8000f4c:	4689      	mov	r9, r1
 8000f4e:	2400      	movs	r4, #0
 8000f50:	2001      	movs	r0, #1
 8000f52:	e748      	b.n	8000de6 <__aeabi_ddiv+0x7a>
 8000f54:	230c      	movs	r3, #12
 8000f56:	4699      	mov	r9, r3
 8000f58:	3b09      	subs	r3, #9
 8000f5a:	46a0      	mov	r8, r4
 8000f5c:	4683      	mov	fp, r0
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	e728      	b.n	8000db4 <__aeabi_ddiv+0x48>
 8000f62:	2304      	movs	r3, #4
 8000f64:	4699      	mov	r9, r3
 8000f66:	2300      	movs	r3, #0
 8000f68:	469b      	mov	fp, r3
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	2500      	movs	r5, #0
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	e720      	b.n	8000db4 <__aeabi_ddiv+0x48>
 8000f72:	2300      	movs	r3, #0
 8000f74:	2480      	movs	r4, #128	; 0x80
 8000f76:	469a      	mov	sl, r3
 8000f78:	2500      	movs	r5, #0
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <__aeabi_ddiv+0x244>)
 8000f7c:	0324      	lsls	r4, r4, #12
 8000f7e:	e74f      	b.n	8000e20 <__aeabi_ddiv+0xb4>
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	4641      	mov	r1, r8
 8000f84:	031b      	lsls	r3, r3, #12
 8000f86:	4219      	tst	r1, r3
 8000f88:	d008      	beq.n	8000f9c <__aeabi_ddiv+0x230>
 8000f8a:	421c      	tst	r4, r3
 8000f8c:	d106      	bne.n	8000f9c <__aeabi_ddiv+0x230>
 8000f8e:	431c      	orrs	r4, r3
 8000f90:	0324      	lsls	r4, r4, #12
 8000f92:	46ba      	mov	sl, r7
 8000f94:	0015      	movs	r5, r2
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <__aeabi_ddiv+0x244>)
 8000f98:	0b24      	lsrs	r4, r4, #12
 8000f9a:	e741      	b.n	8000e20 <__aeabi_ddiv+0xb4>
 8000f9c:	2480      	movs	r4, #128	; 0x80
 8000f9e:	4643      	mov	r3, r8
 8000fa0:	0324      	lsls	r4, r4, #12
 8000fa2:	431c      	orrs	r4, r3
 8000fa4:	0324      	lsls	r4, r4, #12
 8000fa6:	46b2      	mov	sl, r6
 8000fa8:	4b01      	ldr	r3, [pc, #4]	; (8000fb0 <__aeabi_ddiv+0x244>)
 8000faa:	0b24      	lsrs	r4, r4, #12
 8000fac:	e738      	b.n	8000e20 <__aeabi_ddiv+0xb4>
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	000007ff 	.word	0x000007ff
 8000fb4:	fffffc01 	.word	0xfffffc01
 8000fb8:	080084e4 	.word	0x080084e4
 8000fbc:	fffff801 	.word	0xfffff801
 8000fc0:	fffffc0d 	.word	0xfffffc0d
 8000fc4:	000003f3 	.word	0x000003f3
 8000fc8:	000003ff 	.word	0x000003ff
 8000fcc:	feffffff 	.word	0xfeffffff
 8000fd0:	000007fe 	.word	0x000007fe
 8000fd4:	4544      	cmp	r4, r8
 8000fd6:	d200      	bcs.n	8000fda <__aeabi_ddiv+0x26e>
 8000fd8:	e116      	b.n	8001208 <__aeabi_ddiv+0x49c>
 8000fda:	d100      	bne.n	8000fde <__aeabi_ddiv+0x272>
 8000fdc:	e111      	b.n	8001202 <__aeabi_ddiv+0x496>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	425b      	negs	r3, r3
 8000fe2:	469c      	mov	ip, r3
 8000fe4:	002e      	movs	r6, r5
 8000fe6:	4640      	mov	r0, r8
 8000fe8:	2500      	movs	r5, #0
 8000fea:	44e3      	add	fp, ip
 8000fec:	0223      	lsls	r3, r4, #8
 8000fee:	0e14      	lsrs	r4, r2, #24
 8000ff0:	431c      	orrs	r4, r3
 8000ff2:	0c1b      	lsrs	r3, r3, #16
 8000ff4:	4699      	mov	r9, r3
 8000ff6:	0423      	lsls	r3, r4, #16
 8000ff8:	0c1f      	lsrs	r7, r3, #16
 8000ffa:	0212      	lsls	r2, r2, #8
 8000ffc:	4649      	mov	r1, r9
 8000ffe:	9200      	str	r2, [sp, #0]
 8001000:	9701      	str	r7, [sp, #4]
 8001002:	f7ff f923 	bl	800024c <__aeabi_uidivmod>
 8001006:	0002      	movs	r2, r0
 8001008:	437a      	muls	r2, r7
 800100a:	040b      	lsls	r3, r1, #16
 800100c:	0c31      	lsrs	r1, r6, #16
 800100e:	4680      	mov	r8, r0
 8001010:	4319      	orrs	r1, r3
 8001012:	428a      	cmp	r2, r1
 8001014:	d90b      	bls.n	800102e <__aeabi_ddiv+0x2c2>
 8001016:	2301      	movs	r3, #1
 8001018:	425b      	negs	r3, r3
 800101a:	469c      	mov	ip, r3
 800101c:	1909      	adds	r1, r1, r4
 800101e:	44e0      	add	r8, ip
 8001020:	428c      	cmp	r4, r1
 8001022:	d804      	bhi.n	800102e <__aeabi_ddiv+0x2c2>
 8001024:	428a      	cmp	r2, r1
 8001026:	d902      	bls.n	800102e <__aeabi_ddiv+0x2c2>
 8001028:	1e83      	subs	r3, r0, #2
 800102a:	4698      	mov	r8, r3
 800102c:	1909      	adds	r1, r1, r4
 800102e:	1a88      	subs	r0, r1, r2
 8001030:	4649      	mov	r1, r9
 8001032:	f7ff f90b 	bl	800024c <__aeabi_uidivmod>
 8001036:	0409      	lsls	r1, r1, #16
 8001038:	468c      	mov	ip, r1
 800103a:	0431      	lsls	r1, r6, #16
 800103c:	4666      	mov	r6, ip
 800103e:	9a01      	ldr	r2, [sp, #4]
 8001040:	0c09      	lsrs	r1, r1, #16
 8001042:	4342      	muls	r2, r0
 8001044:	0003      	movs	r3, r0
 8001046:	4331      	orrs	r1, r6
 8001048:	428a      	cmp	r2, r1
 800104a:	d904      	bls.n	8001056 <__aeabi_ddiv+0x2ea>
 800104c:	1909      	adds	r1, r1, r4
 800104e:	3b01      	subs	r3, #1
 8001050:	428c      	cmp	r4, r1
 8001052:	d800      	bhi.n	8001056 <__aeabi_ddiv+0x2ea>
 8001054:	e111      	b.n	800127a <__aeabi_ddiv+0x50e>
 8001056:	1a89      	subs	r1, r1, r2
 8001058:	4642      	mov	r2, r8
 800105a:	9e00      	ldr	r6, [sp, #0]
 800105c:	0412      	lsls	r2, r2, #16
 800105e:	431a      	orrs	r2, r3
 8001060:	0c33      	lsrs	r3, r6, #16
 8001062:	001f      	movs	r7, r3
 8001064:	0c10      	lsrs	r0, r2, #16
 8001066:	4690      	mov	r8, r2
 8001068:	9302      	str	r3, [sp, #8]
 800106a:	0413      	lsls	r3, r2, #16
 800106c:	0432      	lsls	r2, r6, #16
 800106e:	0c16      	lsrs	r6, r2, #16
 8001070:	0032      	movs	r2, r6
 8001072:	0c1b      	lsrs	r3, r3, #16
 8001074:	435a      	muls	r2, r3
 8001076:	9603      	str	r6, [sp, #12]
 8001078:	437b      	muls	r3, r7
 800107a:	4346      	muls	r6, r0
 800107c:	4378      	muls	r0, r7
 800107e:	0c17      	lsrs	r7, r2, #16
 8001080:	46bc      	mov	ip, r7
 8001082:	199b      	adds	r3, r3, r6
 8001084:	4463      	add	r3, ip
 8001086:	429e      	cmp	r6, r3
 8001088:	d903      	bls.n	8001092 <__aeabi_ddiv+0x326>
 800108a:	2680      	movs	r6, #128	; 0x80
 800108c:	0276      	lsls	r6, r6, #9
 800108e:	46b4      	mov	ip, r6
 8001090:	4460      	add	r0, ip
 8001092:	0c1e      	lsrs	r6, r3, #16
 8001094:	1830      	adds	r0, r6, r0
 8001096:	0416      	lsls	r6, r2, #16
 8001098:	041b      	lsls	r3, r3, #16
 800109a:	0c36      	lsrs	r6, r6, #16
 800109c:	199e      	adds	r6, r3, r6
 800109e:	4281      	cmp	r1, r0
 80010a0:	d200      	bcs.n	80010a4 <__aeabi_ddiv+0x338>
 80010a2:	e09c      	b.n	80011de <__aeabi_ddiv+0x472>
 80010a4:	d100      	bne.n	80010a8 <__aeabi_ddiv+0x33c>
 80010a6:	e097      	b.n	80011d8 <__aeabi_ddiv+0x46c>
 80010a8:	1bae      	subs	r6, r5, r6
 80010aa:	1a09      	subs	r1, r1, r0
 80010ac:	42b5      	cmp	r5, r6
 80010ae:	4180      	sbcs	r0, r0
 80010b0:	4240      	negs	r0, r0
 80010b2:	1a08      	subs	r0, r1, r0
 80010b4:	4284      	cmp	r4, r0
 80010b6:	d100      	bne.n	80010ba <__aeabi_ddiv+0x34e>
 80010b8:	e111      	b.n	80012de <__aeabi_ddiv+0x572>
 80010ba:	4649      	mov	r1, r9
 80010bc:	f7ff f8c6 	bl	800024c <__aeabi_uidivmod>
 80010c0:	9a01      	ldr	r2, [sp, #4]
 80010c2:	040b      	lsls	r3, r1, #16
 80010c4:	4342      	muls	r2, r0
 80010c6:	0c31      	lsrs	r1, r6, #16
 80010c8:	0005      	movs	r5, r0
 80010ca:	4319      	orrs	r1, r3
 80010cc:	428a      	cmp	r2, r1
 80010ce:	d907      	bls.n	80010e0 <__aeabi_ddiv+0x374>
 80010d0:	1909      	adds	r1, r1, r4
 80010d2:	3d01      	subs	r5, #1
 80010d4:	428c      	cmp	r4, r1
 80010d6:	d803      	bhi.n	80010e0 <__aeabi_ddiv+0x374>
 80010d8:	428a      	cmp	r2, r1
 80010da:	d901      	bls.n	80010e0 <__aeabi_ddiv+0x374>
 80010dc:	1e85      	subs	r5, r0, #2
 80010de:	1909      	adds	r1, r1, r4
 80010e0:	1a88      	subs	r0, r1, r2
 80010e2:	4649      	mov	r1, r9
 80010e4:	f7ff f8b2 	bl	800024c <__aeabi_uidivmod>
 80010e8:	0409      	lsls	r1, r1, #16
 80010ea:	468c      	mov	ip, r1
 80010ec:	0431      	lsls	r1, r6, #16
 80010ee:	4666      	mov	r6, ip
 80010f0:	9a01      	ldr	r2, [sp, #4]
 80010f2:	0c09      	lsrs	r1, r1, #16
 80010f4:	4342      	muls	r2, r0
 80010f6:	0003      	movs	r3, r0
 80010f8:	4331      	orrs	r1, r6
 80010fa:	428a      	cmp	r2, r1
 80010fc:	d907      	bls.n	800110e <__aeabi_ddiv+0x3a2>
 80010fe:	1909      	adds	r1, r1, r4
 8001100:	3b01      	subs	r3, #1
 8001102:	428c      	cmp	r4, r1
 8001104:	d803      	bhi.n	800110e <__aeabi_ddiv+0x3a2>
 8001106:	428a      	cmp	r2, r1
 8001108:	d901      	bls.n	800110e <__aeabi_ddiv+0x3a2>
 800110a:	1e83      	subs	r3, r0, #2
 800110c:	1909      	adds	r1, r1, r4
 800110e:	9e03      	ldr	r6, [sp, #12]
 8001110:	1a89      	subs	r1, r1, r2
 8001112:	0032      	movs	r2, r6
 8001114:	042d      	lsls	r5, r5, #16
 8001116:	431d      	orrs	r5, r3
 8001118:	9f02      	ldr	r7, [sp, #8]
 800111a:	042b      	lsls	r3, r5, #16
 800111c:	0c1b      	lsrs	r3, r3, #16
 800111e:	435a      	muls	r2, r3
 8001120:	437b      	muls	r3, r7
 8001122:	469c      	mov	ip, r3
 8001124:	0c28      	lsrs	r0, r5, #16
 8001126:	4346      	muls	r6, r0
 8001128:	0c13      	lsrs	r3, r2, #16
 800112a:	44b4      	add	ip, r6
 800112c:	4463      	add	r3, ip
 800112e:	4378      	muls	r0, r7
 8001130:	429e      	cmp	r6, r3
 8001132:	d903      	bls.n	800113c <__aeabi_ddiv+0x3d0>
 8001134:	2680      	movs	r6, #128	; 0x80
 8001136:	0276      	lsls	r6, r6, #9
 8001138:	46b4      	mov	ip, r6
 800113a:	4460      	add	r0, ip
 800113c:	0c1e      	lsrs	r6, r3, #16
 800113e:	0412      	lsls	r2, r2, #16
 8001140:	041b      	lsls	r3, r3, #16
 8001142:	0c12      	lsrs	r2, r2, #16
 8001144:	1830      	adds	r0, r6, r0
 8001146:	189b      	adds	r3, r3, r2
 8001148:	4281      	cmp	r1, r0
 800114a:	d306      	bcc.n	800115a <__aeabi_ddiv+0x3ee>
 800114c:	d002      	beq.n	8001154 <__aeabi_ddiv+0x3e8>
 800114e:	2301      	movs	r3, #1
 8001150:	431d      	orrs	r5, r3
 8001152:	e6ce      	b.n	8000ef2 <__aeabi_ddiv+0x186>
 8001154:	2b00      	cmp	r3, #0
 8001156:	d100      	bne.n	800115a <__aeabi_ddiv+0x3ee>
 8001158:	e6cb      	b.n	8000ef2 <__aeabi_ddiv+0x186>
 800115a:	1861      	adds	r1, r4, r1
 800115c:	1e6e      	subs	r6, r5, #1
 800115e:	42a1      	cmp	r1, r4
 8001160:	d200      	bcs.n	8001164 <__aeabi_ddiv+0x3f8>
 8001162:	e0a4      	b.n	80012ae <__aeabi_ddiv+0x542>
 8001164:	4281      	cmp	r1, r0
 8001166:	d200      	bcs.n	800116a <__aeabi_ddiv+0x3fe>
 8001168:	e0c9      	b.n	80012fe <__aeabi_ddiv+0x592>
 800116a:	d100      	bne.n	800116e <__aeabi_ddiv+0x402>
 800116c:	e0d9      	b.n	8001322 <__aeabi_ddiv+0x5b6>
 800116e:	0035      	movs	r5, r6
 8001170:	e7ed      	b.n	800114e <__aeabi_ddiv+0x3e2>
 8001172:	2501      	movs	r5, #1
 8001174:	426d      	negs	r5, r5
 8001176:	2101      	movs	r1, #1
 8001178:	1a89      	subs	r1, r1, r2
 800117a:	2938      	cmp	r1, #56	; 0x38
 800117c:	dd00      	ble.n	8001180 <__aeabi_ddiv+0x414>
 800117e:	e64c      	b.n	8000e1a <__aeabi_ddiv+0xae>
 8001180:	291f      	cmp	r1, #31
 8001182:	dc00      	bgt.n	8001186 <__aeabi_ddiv+0x41a>
 8001184:	e07f      	b.n	8001286 <__aeabi_ddiv+0x51a>
 8001186:	231f      	movs	r3, #31
 8001188:	425b      	negs	r3, r3
 800118a:	1a9a      	subs	r2, r3, r2
 800118c:	4643      	mov	r3, r8
 800118e:	40d3      	lsrs	r3, r2
 8001190:	2920      	cmp	r1, #32
 8001192:	d004      	beq.n	800119e <__aeabi_ddiv+0x432>
 8001194:	4644      	mov	r4, r8
 8001196:	4a65      	ldr	r2, [pc, #404]	; (800132c <__aeabi_ddiv+0x5c0>)
 8001198:	445a      	add	r2, fp
 800119a:	4094      	lsls	r4, r2
 800119c:	4325      	orrs	r5, r4
 800119e:	1e6a      	subs	r2, r5, #1
 80011a0:	4195      	sbcs	r5, r2
 80011a2:	2207      	movs	r2, #7
 80011a4:	432b      	orrs	r3, r5
 80011a6:	0015      	movs	r5, r2
 80011a8:	2400      	movs	r4, #0
 80011aa:	401d      	ands	r5, r3
 80011ac:	421a      	tst	r2, r3
 80011ae:	d100      	bne.n	80011b2 <__aeabi_ddiv+0x446>
 80011b0:	e0a1      	b.n	80012f6 <__aeabi_ddiv+0x58a>
 80011b2:	220f      	movs	r2, #15
 80011b4:	2400      	movs	r4, #0
 80011b6:	401a      	ands	r2, r3
 80011b8:	2a04      	cmp	r2, #4
 80011ba:	d100      	bne.n	80011be <__aeabi_ddiv+0x452>
 80011bc:	e098      	b.n	80012f0 <__aeabi_ddiv+0x584>
 80011be:	1d1a      	adds	r2, r3, #4
 80011c0:	429a      	cmp	r2, r3
 80011c2:	419b      	sbcs	r3, r3
 80011c4:	425b      	negs	r3, r3
 80011c6:	18e4      	adds	r4, r4, r3
 80011c8:	0013      	movs	r3, r2
 80011ca:	0222      	lsls	r2, r4, #8
 80011cc:	d400      	bmi.n	80011d0 <__aeabi_ddiv+0x464>
 80011ce:	e08f      	b.n	80012f0 <__aeabi_ddiv+0x584>
 80011d0:	2301      	movs	r3, #1
 80011d2:	2400      	movs	r4, #0
 80011d4:	2500      	movs	r5, #0
 80011d6:	e623      	b.n	8000e20 <__aeabi_ddiv+0xb4>
 80011d8:	42b5      	cmp	r5, r6
 80011da:	d300      	bcc.n	80011de <__aeabi_ddiv+0x472>
 80011dc:	e764      	b.n	80010a8 <__aeabi_ddiv+0x33c>
 80011de:	4643      	mov	r3, r8
 80011e0:	1e5a      	subs	r2, r3, #1
 80011e2:	9b00      	ldr	r3, [sp, #0]
 80011e4:	469c      	mov	ip, r3
 80011e6:	4465      	add	r5, ip
 80011e8:	001f      	movs	r7, r3
 80011ea:	429d      	cmp	r5, r3
 80011ec:	419b      	sbcs	r3, r3
 80011ee:	425b      	negs	r3, r3
 80011f0:	191b      	adds	r3, r3, r4
 80011f2:	18c9      	adds	r1, r1, r3
 80011f4:	428c      	cmp	r4, r1
 80011f6:	d23a      	bcs.n	800126e <__aeabi_ddiv+0x502>
 80011f8:	4288      	cmp	r0, r1
 80011fa:	d863      	bhi.n	80012c4 <__aeabi_ddiv+0x558>
 80011fc:	d060      	beq.n	80012c0 <__aeabi_ddiv+0x554>
 80011fe:	4690      	mov	r8, r2
 8001200:	e752      	b.n	80010a8 <__aeabi_ddiv+0x33c>
 8001202:	42aa      	cmp	r2, r5
 8001204:	d900      	bls.n	8001208 <__aeabi_ddiv+0x49c>
 8001206:	e6ea      	b.n	8000fde <__aeabi_ddiv+0x272>
 8001208:	4643      	mov	r3, r8
 800120a:	07de      	lsls	r6, r3, #31
 800120c:	0858      	lsrs	r0, r3, #1
 800120e:	086b      	lsrs	r3, r5, #1
 8001210:	431e      	orrs	r6, r3
 8001212:	07ed      	lsls	r5, r5, #31
 8001214:	e6ea      	b.n	8000fec <__aeabi_ddiv+0x280>
 8001216:	4648      	mov	r0, r9
 8001218:	f001 f926 	bl	8002468 <__clzsi2>
 800121c:	0001      	movs	r1, r0
 800121e:	0002      	movs	r2, r0
 8001220:	3115      	adds	r1, #21
 8001222:	3220      	adds	r2, #32
 8001224:	291c      	cmp	r1, #28
 8001226:	dc00      	bgt.n	800122a <__aeabi_ddiv+0x4be>
 8001228:	e61a      	b.n	8000e60 <__aeabi_ddiv+0xf4>
 800122a:	464b      	mov	r3, r9
 800122c:	3808      	subs	r0, #8
 800122e:	4083      	lsls	r3, r0
 8001230:	2500      	movs	r5, #0
 8001232:	4698      	mov	r8, r3
 8001234:	e620      	b.n	8000e78 <__aeabi_ddiv+0x10c>
 8001236:	f001 f917 	bl	8002468 <__clzsi2>
 800123a:	0003      	movs	r3, r0
 800123c:	001a      	movs	r2, r3
 800123e:	3215      	adds	r2, #21
 8001240:	3020      	adds	r0, #32
 8001242:	2a1c      	cmp	r2, #28
 8001244:	dc00      	bgt.n	8001248 <__aeabi_ddiv+0x4dc>
 8001246:	e630      	b.n	8000eaa <__aeabi_ddiv+0x13e>
 8001248:	4654      	mov	r4, sl
 800124a:	3b08      	subs	r3, #8
 800124c:	2200      	movs	r2, #0
 800124e:	409c      	lsls	r4, r3
 8001250:	e635      	b.n	8000ebe <__aeabi_ddiv+0x152>
 8001252:	230f      	movs	r3, #15
 8001254:	402b      	ands	r3, r5
 8001256:	2b04      	cmp	r3, #4
 8001258:	d100      	bne.n	800125c <__aeabi_ddiv+0x4f0>
 800125a:	e652      	b.n	8000f02 <__aeabi_ddiv+0x196>
 800125c:	2305      	movs	r3, #5
 800125e:	425b      	negs	r3, r3
 8001260:	42ab      	cmp	r3, r5
 8001262:	419b      	sbcs	r3, r3
 8001264:	3504      	adds	r5, #4
 8001266:	425b      	negs	r3, r3
 8001268:	08ed      	lsrs	r5, r5, #3
 800126a:	4498      	add	r8, r3
 800126c:	e64a      	b.n	8000f04 <__aeabi_ddiv+0x198>
 800126e:	428c      	cmp	r4, r1
 8001270:	d1c5      	bne.n	80011fe <__aeabi_ddiv+0x492>
 8001272:	42af      	cmp	r7, r5
 8001274:	d9c0      	bls.n	80011f8 <__aeabi_ddiv+0x48c>
 8001276:	4690      	mov	r8, r2
 8001278:	e716      	b.n	80010a8 <__aeabi_ddiv+0x33c>
 800127a:	428a      	cmp	r2, r1
 800127c:	d800      	bhi.n	8001280 <__aeabi_ddiv+0x514>
 800127e:	e6ea      	b.n	8001056 <__aeabi_ddiv+0x2ea>
 8001280:	1e83      	subs	r3, r0, #2
 8001282:	1909      	adds	r1, r1, r4
 8001284:	e6e7      	b.n	8001056 <__aeabi_ddiv+0x2ea>
 8001286:	4a2a      	ldr	r2, [pc, #168]	; (8001330 <__aeabi_ddiv+0x5c4>)
 8001288:	0028      	movs	r0, r5
 800128a:	445a      	add	r2, fp
 800128c:	4643      	mov	r3, r8
 800128e:	4095      	lsls	r5, r2
 8001290:	4093      	lsls	r3, r2
 8001292:	40c8      	lsrs	r0, r1
 8001294:	1e6a      	subs	r2, r5, #1
 8001296:	4195      	sbcs	r5, r2
 8001298:	4644      	mov	r4, r8
 800129a:	4303      	orrs	r3, r0
 800129c:	432b      	orrs	r3, r5
 800129e:	40cc      	lsrs	r4, r1
 80012a0:	075a      	lsls	r2, r3, #29
 80012a2:	d092      	beq.n	80011ca <__aeabi_ddiv+0x45e>
 80012a4:	220f      	movs	r2, #15
 80012a6:	401a      	ands	r2, r3
 80012a8:	2a04      	cmp	r2, #4
 80012aa:	d188      	bne.n	80011be <__aeabi_ddiv+0x452>
 80012ac:	e78d      	b.n	80011ca <__aeabi_ddiv+0x45e>
 80012ae:	0035      	movs	r5, r6
 80012b0:	4281      	cmp	r1, r0
 80012b2:	d000      	beq.n	80012b6 <__aeabi_ddiv+0x54a>
 80012b4:	e74b      	b.n	800114e <__aeabi_ddiv+0x3e2>
 80012b6:	9a00      	ldr	r2, [sp, #0]
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d000      	beq.n	80012be <__aeabi_ddiv+0x552>
 80012bc:	e747      	b.n	800114e <__aeabi_ddiv+0x3e2>
 80012be:	e618      	b.n	8000ef2 <__aeabi_ddiv+0x186>
 80012c0:	42ae      	cmp	r6, r5
 80012c2:	d99c      	bls.n	80011fe <__aeabi_ddiv+0x492>
 80012c4:	2302      	movs	r3, #2
 80012c6:	425b      	negs	r3, r3
 80012c8:	469c      	mov	ip, r3
 80012ca:	9b00      	ldr	r3, [sp, #0]
 80012cc:	44e0      	add	r8, ip
 80012ce:	469c      	mov	ip, r3
 80012d0:	4465      	add	r5, ip
 80012d2:	429d      	cmp	r5, r3
 80012d4:	419b      	sbcs	r3, r3
 80012d6:	425b      	negs	r3, r3
 80012d8:	191b      	adds	r3, r3, r4
 80012da:	18c9      	adds	r1, r1, r3
 80012dc:	e6e4      	b.n	80010a8 <__aeabi_ddiv+0x33c>
 80012de:	4a15      	ldr	r2, [pc, #84]	; (8001334 <__aeabi_ddiv+0x5c8>)
 80012e0:	445a      	add	r2, fp
 80012e2:	2a00      	cmp	r2, #0
 80012e4:	dc00      	bgt.n	80012e8 <__aeabi_ddiv+0x57c>
 80012e6:	e744      	b.n	8001172 <__aeabi_ddiv+0x406>
 80012e8:	2301      	movs	r3, #1
 80012ea:	2500      	movs	r5, #0
 80012ec:	4498      	add	r8, r3
 80012ee:	e609      	b.n	8000f04 <__aeabi_ddiv+0x198>
 80012f0:	0765      	lsls	r5, r4, #29
 80012f2:	0264      	lsls	r4, r4, #9
 80012f4:	0b24      	lsrs	r4, r4, #12
 80012f6:	08db      	lsrs	r3, r3, #3
 80012f8:	431d      	orrs	r5, r3
 80012fa:	2300      	movs	r3, #0
 80012fc:	e590      	b.n	8000e20 <__aeabi_ddiv+0xb4>
 80012fe:	9e00      	ldr	r6, [sp, #0]
 8001300:	3d02      	subs	r5, #2
 8001302:	0072      	lsls	r2, r6, #1
 8001304:	42b2      	cmp	r2, r6
 8001306:	41bf      	sbcs	r7, r7
 8001308:	427f      	negs	r7, r7
 800130a:	193c      	adds	r4, r7, r4
 800130c:	1909      	adds	r1, r1, r4
 800130e:	9200      	str	r2, [sp, #0]
 8001310:	e7ce      	b.n	80012b0 <__aeabi_ddiv+0x544>
 8001312:	2480      	movs	r4, #128	; 0x80
 8001314:	4643      	mov	r3, r8
 8001316:	0324      	lsls	r4, r4, #12
 8001318:	431c      	orrs	r4, r3
 800131a:	0324      	lsls	r4, r4, #12
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <__aeabi_ddiv+0x5cc>)
 800131e:	0b24      	lsrs	r4, r4, #12
 8001320:	e57e      	b.n	8000e20 <__aeabi_ddiv+0xb4>
 8001322:	9a00      	ldr	r2, [sp, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	d3ea      	bcc.n	80012fe <__aeabi_ddiv+0x592>
 8001328:	0035      	movs	r5, r6
 800132a:	e7c4      	b.n	80012b6 <__aeabi_ddiv+0x54a>
 800132c:	0000043e 	.word	0x0000043e
 8001330:	0000041e 	.word	0x0000041e
 8001334:	000003ff 	.word	0x000003ff
 8001338:	000007ff 	.word	0x000007ff

0800133c <__eqdf2>:
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133e:	464f      	mov	r7, r9
 8001340:	4646      	mov	r6, r8
 8001342:	46d6      	mov	lr, sl
 8001344:	4694      	mov	ip, r2
 8001346:	4691      	mov	r9, r2
 8001348:	031a      	lsls	r2, r3, #12
 800134a:	0b12      	lsrs	r2, r2, #12
 800134c:	4d18      	ldr	r5, [pc, #96]	; (80013b0 <__eqdf2+0x74>)
 800134e:	b5c0      	push	{r6, r7, lr}
 8001350:	004c      	lsls	r4, r1, #1
 8001352:	030f      	lsls	r7, r1, #12
 8001354:	4692      	mov	sl, r2
 8001356:	005a      	lsls	r2, r3, #1
 8001358:	0006      	movs	r6, r0
 800135a:	4680      	mov	r8, r0
 800135c:	0b3f      	lsrs	r7, r7, #12
 800135e:	2001      	movs	r0, #1
 8001360:	0d64      	lsrs	r4, r4, #21
 8001362:	0fc9      	lsrs	r1, r1, #31
 8001364:	0d52      	lsrs	r2, r2, #21
 8001366:	0fdb      	lsrs	r3, r3, #31
 8001368:	42ac      	cmp	r4, r5
 800136a:	d00a      	beq.n	8001382 <__eqdf2+0x46>
 800136c:	42aa      	cmp	r2, r5
 800136e:	d003      	beq.n	8001378 <__eqdf2+0x3c>
 8001370:	4294      	cmp	r4, r2
 8001372:	d101      	bne.n	8001378 <__eqdf2+0x3c>
 8001374:	4557      	cmp	r7, sl
 8001376:	d00d      	beq.n	8001394 <__eqdf2+0x58>
 8001378:	bce0      	pop	{r5, r6, r7}
 800137a:	46ba      	mov	sl, r7
 800137c:	46b1      	mov	r9, r6
 800137e:	46a8      	mov	r8, r5
 8001380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001382:	003d      	movs	r5, r7
 8001384:	4335      	orrs	r5, r6
 8001386:	d1f7      	bne.n	8001378 <__eqdf2+0x3c>
 8001388:	42a2      	cmp	r2, r4
 800138a:	d1f5      	bne.n	8001378 <__eqdf2+0x3c>
 800138c:	4652      	mov	r2, sl
 800138e:	4665      	mov	r5, ip
 8001390:	432a      	orrs	r2, r5
 8001392:	d1f1      	bne.n	8001378 <__eqdf2+0x3c>
 8001394:	2001      	movs	r0, #1
 8001396:	45c8      	cmp	r8, r9
 8001398:	d1ee      	bne.n	8001378 <__eqdf2+0x3c>
 800139a:	4299      	cmp	r1, r3
 800139c:	d006      	beq.n	80013ac <__eqdf2+0x70>
 800139e:	2c00      	cmp	r4, #0
 80013a0:	d1ea      	bne.n	8001378 <__eqdf2+0x3c>
 80013a2:	433e      	orrs	r6, r7
 80013a4:	0030      	movs	r0, r6
 80013a6:	1e46      	subs	r6, r0, #1
 80013a8:	41b0      	sbcs	r0, r6
 80013aa:	e7e5      	b.n	8001378 <__eqdf2+0x3c>
 80013ac:	2000      	movs	r0, #0
 80013ae:	e7e3      	b.n	8001378 <__eqdf2+0x3c>
 80013b0:	000007ff 	.word	0x000007ff

080013b4 <__gedf2>:
 80013b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b6:	464e      	mov	r6, r9
 80013b8:	4645      	mov	r5, r8
 80013ba:	4657      	mov	r7, sl
 80013bc:	46de      	mov	lr, fp
 80013be:	0004      	movs	r4, r0
 80013c0:	0018      	movs	r0, r3
 80013c2:	b5e0      	push	{r5, r6, r7, lr}
 80013c4:	0016      	movs	r6, r2
 80013c6:	031b      	lsls	r3, r3, #12
 80013c8:	0b1b      	lsrs	r3, r3, #12
 80013ca:	4d32      	ldr	r5, [pc, #200]	; (8001494 <__gedf2+0xe0>)
 80013cc:	030f      	lsls	r7, r1, #12
 80013ce:	004a      	lsls	r2, r1, #1
 80013d0:	4699      	mov	r9, r3
 80013d2:	0043      	lsls	r3, r0, #1
 80013d4:	46a4      	mov	ip, r4
 80013d6:	46b0      	mov	r8, r6
 80013d8:	0b3f      	lsrs	r7, r7, #12
 80013da:	0d52      	lsrs	r2, r2, #21
 80013dc:	0fc9      	lsrs	r1, r1, #31
 80013de:	0d5b      	lsrs	r3, r3, #21
 80013e0:	0fc0      	lsrs	r0, r0, #31
 80013e2:	42aa      	cmp	r2, r5
 80013e4:	d029      	beq.n	800143a <__gedf2+0x86>
 80013e6:	42ab      	cmp	r3, r5
 80013e8:	d018      	beq.n	800141c <__gedf2+0x68>
 80013ea:	2a00      	cmp	r2, #0
 80013ec:	d12a      	bne.n	8001444 <__gedf2+0x90>
 80013ee:	433c      	orrs	r4, r7
 80013f0:	46a3      	mov	fp, r4
 80013f2:	4265      	negs	r5, r4
 80013f4:	4165      	adcs	r5, r4
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d102      	bne.n	8001400 <__gedf2+0x4c>
 80013fa:	464c      	mov	r4, r9
 80013fc:	4326      	orrs	r6, r4
 80013fe:	d027      	beq.n	8001450 <__gedf2+0x9c>
 8001400:	2d00      	cmp	r5, #0
 8001402:	d115      	bne.n	8001430 <__gedf2+0x7c>
 8001404:	4281      	cmp	r1, r0
 8001406:	d028      	beq.n	800145a <__gedf2+0xa6>
 8001408:	2002      	movs	r0, #2
 800140a:	3901      	subs	r1, #1
 800140c:	4008      	ands	r0, r1
 800140e:	3801      	subs	r0, #1
 8001410:	bcf0      	pop	{r4, r5, r6, r7}
 8001412:	46bb      	mov	fp, r7
 8001414:	46b2      	mov	sl, r6
 8001416:	46a9      	mov	r9, r5
 8001418:	46a0      	mov	r8, r4
 800141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141c:	464d      	mov	r5, r9
 800141e:	432e      	orrs	r6, r5
 8001420:	d12f      	bne.n	8001482 <__gedf2+0xce>
 8001422:	2a00      	cmp	r2, #0
 8001424:	d1ee      	bne.n	8001404 <__gedf2+0x50>
 8001426:	433c      	orrs	r4, r7
 8001428:	4265      	negs	r5, r4
 800142a:	4165      	adcs	r5, r4
 800142c:	2d00      	cmp	r5, #0
 800142e:	d0e9      	beq.n	8001404 <__gedf2+0x50>
 8001430:	2800      	cmp	r0, #0
 8001432:	d1ed      	bne.n	8001410 <__gedf2+0x5c>
 8001434:	2001      	movs	r0, #1
 8001436:	4240      	negs	r0, r0
 8001438:	e7ea      	b.n	8001410 <__gedf2+0x5c>
 800143a:	003d      	movs	r5, r7
 800143c:	4325      	orrs	r5, r4
 800143e:	d120      	bne.n	8001482 <__gedf2+0xce>
 8001440:	4293      	cmp	r3, r2
 8001442:	d0eb      	beq.n	800141c <__gedf2+0x68>
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1dd      	bne.n	8001404 <__gedf2+0x50>
 8001448:	464c      	mov	r4, r9
 800144a:	4326      	orrs	r6, r4
 800144c:	d1da      	bne.n	8001404 <__gedf2+0x50>
 800144e:	e7db      	b.n	8001408 <__gedf2+0x54>
 8001450:	465b      	mov	r3, fp
 8001452:	2000      	movs	r0, #0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0db      	beq.n	8001410 <__gedf2+0x5c>
 8001458:	e7d6      	b.n	8001408 <__gedf2+0x54>
 800145a:	429a      	cmp	r2, r3
 800145c:	dc0a      	bgt.n	8001474 <__gedf2+0xc0>
 800145e:	dbe7      	blt.n	8001430 <__gedf2+0x7c>
 8001460:	454f      	cmp	r7, r9
 8001462:	d8d1      	bhi.n	8001408 <__gedf2+0x54>
 8001464:	d010      	beq.n	8001488 <__gedf2+0xd4>
 8001466:	2000      	movs	r0, #0
 8001468:	454f      	cmp	r7, r9
 800146a:	d2d1      	bcs.n	8001410 <__gedf2+0x5c>
 800146c:	2900      	cmp	r1, #0
 800146e:	d0e1      	beq.n	8001434 <__gedf2+0x80>
 8001470:	0008      	movs	r0, r1
 8001472:	e7cd      	b.n	8001410 <__gedf2+0x5c>
 8001474:	4243      	negs	r3, r0
 8001476:	4158      	adcs	r0, r3
 8001478:	2302      	movs	r3, #2
 800147a:	4240      	negs	r0, r0
 800147c:	4018      	ands	r0, r3
 800147e:	3801      	subs	r0, #1
 8001480:	e7c6      	b.n	8001410 <__gedf2+0x5c>
 8001482:	2002      	movs	r0, #2
 8001484:	4240      	negs	r0, r0
 8001486:	e7c3      	b.n	8001410 <__gedf2+0x5c>
 8001488:	45c4      	cmp	ip, r8
 800148a:	d8bd      	bhi.n	8001408 <__gedf2+0x54>
 800148c:	2000      	movs	r0, #0
 800148e:	45c4      	cmp	ip, r8
 8001490:	d2be      	bcs.n	8001410 <__gedf2+0x5c>
 8001492:	e7eb      	b.n	800146c <__gedf2+0xb8>
 8001494:	000007ff 	.word	0x000007ff

08001498 <__ledf2>:
 8001498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149a:	464e      	mov	r6, r9
 800149c:	4645      	mov	r5, r8
 800149e:	4657      	mov	r7, sl
 80014a0:	46de      	mov	lr, fp
 80014a2:	0004      	movs	r4, r0
 80014a4:	0018      	movs	r0, r3
 80014a6:	b5e0      	push	{r5, r6, r7, lr}
 80014a8:	0016      	movs	r6, r2
 80014aa:	031b      	lsls	r3, r3, #12
 80014ac:	0b1b      	lsrs	r3, r3, #12
 80014ae:	4d31      	ldr	r5, [pc, #196]	; (8001574 <__ledf2+0xdc>)
 80014b0:	030f      	lsls	r7, r1, #12
 80014b2:	004a      	lsls	r2, r1, #1
 80014b4:	4699      	mov	r9, r3
 80014b6:	0043      	lsls	r3, r0, #1
 80014b8:	46a4      	mov	ip, r4
 80014ba:	46b0      	mov	r8, r6
 80014bc:	0b3f      	lsrs	r7, r7, #12
 80014be:	0d52      	lsrs	r2, r2, #21
 80014c0:	0fc9      	lsrs	r1, r1, #31
 80014c2:	0d5b      	lsrs	r3, r3, #21
 80014c4:	0fc0      	lsrs	r0, r0, #31
 80014c6:	42aa      	cmp	r2, r5
 80014c8:	d011      	beq.n	80014ee <__ledf2+0x56>
 80014ca:	42ab      	cmp	r3, r5
 80014cc:	d014      	beq.n	80014f8 <__ledf2+0x60>
 80014ce:	2a00      	cmp	r2, #0
 80014d0:	d12f      	bne.n	8001532 <__ledf2+0x9a>
 80014d2:	433c      	orrs	r4, r7
 80014d4:	46a3      	mov	fp, r4
 80014d6:	4265      	negs	r5, r4
 80014d8:	4165      	adcs	r5, r4
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d114      	bne.n	8001508 <__ledf2+0x70>
 80014de:	464c      	mov	r4, r9
 80014e0:	4326      	orrs	r6, r4
 80014e2:	d111      	bne.n	8001508 <__ledf2+0x70>
 80014e4:	465b      	mov	r3, fp
 80014e6:	2000      	movs	r0, #0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d017      	beq.n	800151c <__ledf2+0x84>
 80014ec:	e010      	b.n	8001510 <__ledf2+0x78>
 80014ee:	003d      	movs	r5, r7
 80014f0:	4325      	orrs	r5, r4
 80014f2:	d112      	bne.n	800151a <__ledf2+0x82>
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d11c      	bne.n	8001532 <__ledf2+0x9a>
 80014f8:	464d      	mov	r5, r9
 80014fa:	432e      	orrs	r6, r5
 80014fc:	d10d      	bne.n	800151a <__ledf2+0x82>
 80014fe:	2a00      	cmp	r2, #0
 8001500:	d104      	bne.n	800150c <__ledf2+0x74>
 8001502:	433c      	orrs	r4, r7
 8001504:	4265      	negs	r5, r4
 8001506:	4165      	adcs	r5, r4
 8001508:	2d00      	cmp	r5, #0
 800150a:	d10d      	bne.n	8001528 <__ledf2+0x90>
 800150c:	4281      	cmp	r1, r0
 800150e:	d016      	beq.n	800153e <__ledf2+0xa6>
 8001510:	2002      	movs	r0, #2
 8001512:	3901      	subs	r1, #1
 8001514:	4008      	ands	r0, r1
 8001516:	3801      	subs	r0, #1
 8001518:	e000      	b.n	800151c <__ledf2+0x84>
 800151a:	2002      	movs	r0, #2
 800151c:	bcf0      	pop	{r4, r5, r6, r7}
 800151e:	46bb      	mov	fp, r7
 8001520:	46b2      	mov	sl, r6
 8001522:	46a9      	mov	r9, r5
 8001524:	46a0      	mov	r8, r4
 8001526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001528:	2800      	cmp	r0, #0
 800152a:	d1f7      	bne.n	800151c <__ledf2+0x84>
 800152c:	2001      	movs	r0, #1
 800152e:	4240      	negs	r0, r0
 8001530:	e7f4      	b.n	800151c <__ledf2+0x84>
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1ea      	bne.n	800150c <__ledf2+0x74>
 8001536:	464c      	mov	r4, r9
 8001538:	4326      	orrs	r6, r4
 800153a:	d1e7      	bne.n	800150c <__ledf2+0x74>
 800153c:	e7e8      	b.n	8001510 <__ledf2+0x78>
 800153e:	429a      	cmp	r2, r3
 8001540:	dd06      	ble.n	8001550 <__ledf2+0xb8>
 8001542:	4243      	negs	r3, r0
 8001544:	4158      	adcs	r0, r3
 8001546:	2302      	movs	r3, #2
 8001548:	4240      	negs	r0, r0
 800154a:	4018      	ands	r0, r3
 800154c:	3801      	subs	r0, #1
 800154e:	e7e5      	b.n	800151c <__ledf2+0x84>
 8001550:	429a      	cmp	r2, r3
 8001552:	dbe9      	blt.n	8001528 <__ledf2+0x90>
 8001554:	454f      	cmp	r7, r9
 8001556:	d8db      	bhi.n	8001510 <__ledf2+0x78>
 8001558:	d006      	beq.n	8001568 <__ledf2+0xd0>
 800155a:	2000      	movs	r0, #0
 800155c:	454f      	cmp	r7, r9
 800155e:	d2dd      	bcs.n	800151c <__ledf2+0x84>
 8001560:	2900      	cmp	r1, #0
 8001562:	d0e3      	beq.n	800152c <__ledf2+0x94>
 8001564:	0008      	movs	r0, r1
 8001566:	e7d9      	b.n	800151c <__ledf2+0x84>
 8001568:	45c4      	cmp	ip, r8
 800156a:	d8d1      	bhi.n	8001510 <__ledf2+0x78>
 800156c:	2000      	movs	r0, #0
 800156e:	45c4      	cmp	ip, r8
 8001570:	d2d4      	bcs.n	800151c <__ledf2+0x84>
 8001572:	e7f5      	b.n	8001560 <__ledf2+0xc8>
 8001574:	000007ff 	.word	0x000007ff

08001578 <__aeabi_dmul>:
 8001578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157a:	4657      	mov	r7, sl
 800157c:	464e      	mov	r6, r9
 800157e:	4645      	mov	r5, r8
 8001580:	46de      	mov	lr, fp
 8001582:	b5e0      	push	{r5, r6, r7, lr}
 8001584:	4698      	mov	r8, r3
 8001586:	030c      	lsls	r4, r1, #12
 8001588:	004b      	lsls	r3, r1, #1
 800158a:	0006      	movs	r6, r0
 800158c:	4692      	mov	sl, r2
 800158e:	b087      	sub	sp, #28
 8001590:	0b24      	lsrs	r4, r4, #12
 8001592:	0d5b      	lsrs	r3, r3, #21
 8001594:	0fcf      	lsrs	r7, r1, #31
 8001596:	2b00      	cmp	r3, #0
 8001598:	d06c      	beq.n	8001674 <__aeabi_dmul+0xfc>
 800159a:	4add      	ldr	r2, [pc, #884]	; (8001910 <__aeabi_dmul+0x398>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d100      	bne.n	80015a2 <__aeabi_dmul+0x2a>
 80015a0:	e086      	b.n	80016b0 <__aeabi_dmul+0x138>
 80015a2:	0f42      	lsrs	r2, r0, #29
 80015a4:	00e4      	lsls	r4, r4, #3
 80015a6:	4314      	orrs	r4, r2
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	0412      	lsls	r2, r2, #16
 80015ac:	4314      	orrs	r4, r2
 80015ae:	4ad9      	ldr	r2, [pc, #868]	; (8001914 <__aeabi_dmul+0x39c>)
 80015b0:	00c5      	lsls	r5, r0, #3
 80015b2:	4694      	mov	ip, r2
 80015b4:	4463      	add	r3, ip
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2300      	movs	r3, #0
 80015ba:	4699      	mov	r9, r3
 80015bc:	469b      	mov	fp, r3
 80015be:	4643      	mov	r3, r8
 80015c0:	4642      	mov	r2, r8
 80015c2:	031e      	lsls	r6, r3, #12
 80015c4:	0fd2      	lsrs	r2, r2, #31
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4650      	mov	r0, sl
 80015ca:	4690      	mov	r8, r2
 80015cc:	0b36      	lsrs	r6, r6, #12
 80015ce:	0d5b      	lsrs	r3, r3, #21
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dmul+0x5c>
 80015d2:	e078      	b.n	80016c6 <__aeabi_dmul+0x14e>
 80015d4:	4ace      	ldr	r2, [pc, #824]	; (8001910 <__aeabi_dmul+0x398>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d01d      	beq.n	8001616 <__aeabi_dmul+0x9e>
 80015da:	49ce      	ldr	r1, [pc, #824]	; (8001914 <__aeabi_dmul+0x39c>)
 80015dc:	0f42      	lsrs	r2, r0, #29
 80015de:	468c      	mov	ip, r1
 80015e0:	9900      	ldr	r1, [sp, #0]
 80015e2:	4463      	add	r3, ip
 80015e4:	00f6      	lsls	r6, r6, #3
 80015e6:	468c      	mov	ip, r1
 80015e8:	4316      	orrs	r6, r2
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	449c      	add	ip, r3
 80015ee:	0412      	lsls	r2, r2, #16
 80015f0:	4663      	mov	r3, ip
 80015f2:	4316      	orrs	r6, r2
 80015f4:	00c2      	lsls	r2, r0, #3
 80015f6:	2000      	movs	r0, #0
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	9900      	ldr	r1, [sp, #0]
 80015fc:	4643      	mov	r3, r8
 80015fe:	3101      	adds	r1, #1
 8001600:	468c      	mov	ip, r1
 8001602:	4649      	mov	r1, r9
 8001604:	407b      	eors	r3, r7
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	290f      	cmp	r1, #15
 800160a:	d900      	bls.n	800160e <__aeabi_dmul+0x96>
 800160c:	e07e      	b.n	800170c <__aeabi_dmul+0x194>
 800160e:	4bc2      	ldr	r3, [pc, #776]	; (8001918 <__aeabi_dmul+0x3a0>)
 8001610:	0089      	lsls	r1, r1, #2
 8001612:	5859      	ldr	r1, [r3, r1]
 8001614:	468f      	mov	pc, r1
 8001616:	4652      	mov	r2, sl
 8001618:	9b00      	ldr	r3, [sp, #0]
 800161a:	4332      	orrs	r2, r6
 800161c:	d000      	beq.n	8001620 <__aeabi_dmul+0xa8>
 800161e:	e156      	b.n	80018ce <__aeabi_dmul+0x356>
 8001620:	49bb      	ldr	r1, [pc, #748]	; (8001910 <__aeabi_dmul+0x398>)
 8001622:	2600      	movs	r6, #0
 8001624:	468c      	mov	ip, r1
 8001626:	4463      	add	r3, ip
 8001628:	4649      	mov	r1, r9
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2302      	movs	r3, #2
 800162e:	4319      	orrs	r1, r3
 8001630:	4689      	mov	r9, r1
 8001632:	2002      	movs	r0, #2
 8001634:	e7e1      	b.n	80015fa <__aeabi_dmul+0x82>
 8001636:	4643      	mov	r3, r8
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	0034      	movs	r4, r6
 800163c:	0015      	movs	r5, r2
 800163e:	4683      	mov	fp, r0
 8001640:	465b      	mov	r3, fp
 8001642:	2b02      	cmp	r3, #2
 8001644:	d05e      	beq.n	8001704 <__aeabi_dmul+0x18c>
 8001646:	2b03      	cmp	r3, #3
 8001648:	d100      	bne.n	800164c <__aeabi_dmul+0xd4>
 800164a:	e1f3      	b.n	8001a34 <__aeabi_dmul+0x4bc>
 800164c:	2b01      	cmp	r3, #1
 800164e:	d000      	beq.n	8001652 <__aeabi_dmul+0xda>
 8001650:	e118      	b.n	8001884 <__aeabi_dmul+0x30c>
 8001652:	2200      	movs	r2, #0
 8001654:	2400      	movs	r4, #0
 8001656:	2500      	movs	r5, #0
 8001658:	9b01      	ldr	r3, [sp, #4]
 800165a:	0512      	lsls	r2, r2, #20
 800165c:	4322      	orrs	r2, r4
 800165e:	07db      	lsls	r3, r3, #31
 8001660:	431a      	orrs	r2, r3
 8001662:	0028      	movs	r0, r5
 8001664:	0011      	movs	r1, r2
 8001666:	b007      	add	sp, #28
 8001668:	bcf0      	pop	{r4, r5, r6, r7}
 800166a:	46bb      	mov	fp, r7
 800166c:	46b2      	mov	sl, r6
 800166e:	46a9      	mov	r9, r5
 8001670:	46a0      	mov	r8, r4
 8001672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001674:	0025      	movs	r5, r4
 8001676:	4305      	orrs	r5, r0
 8001678:	d100      	bne.n	800167c <__aeabi_dmul+0x104>
 800167a:	e141      	b.n	8001900 <__aeabi_dmul+0x388>
 800167c:	2c00      	cmp	r4, #0
 800167e:	d100      	bne.n	8001682 <__aeabi_dmul+0x10a>
 8001680:	e1ad      	b.n	80019de <__aeabi_dmul+0x466>
 8001682:	0020      	movs	r0, r4
 8001684:	f000 fef0 	bl	8002468 <__clzsi2>
 8001688:	0001      	movs	r1, r0
 800168a:	0002      	movs	r2, r0
 800168c:	390b      	subs	r1, #11
 800168e:	231d      	movs	r3, #29
 8001690:	0010      	movs	r0, r2
 8001692:	1a5b      	subs	r3, r3, r1
 8001694:	0031      	movs	r1, r6
 8001696:	0035      	movs	r5, r6
 8001698:	3808      	subs	r0, #8
 800169a:	4084      	lsls	r4, r0
 800169c:	40d9      	lsrs	r1, r3
 800169e:	4085      	lsls	r5, r0
 80016a0:	430c      	orrs	r4, r1
 80016a2:	489e      	ldr	r0, [pc, #632]	; (800191c <__aeabi_dmul+0x3a4>)
 80016a4:	1a83      	subs	r3, r0, r2
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2300      	movs	r3, #0
 80016aa:	4699      	mov	r9, r3
 80016ac:	469b      	mov	fp, r3
 80016ae:	e786      	b.n	80015be <__aeabi_dmul+0x46>
 80016b0:	0005      	movs	r5, r0
 80016b2:	4325      	orrs	r5, r4
 80016b4:	d000      	beq.n	80016b8 <__aeabi_dmul+0x140>
 80016b6:	e11c      	b.n	80018f2 <__aeabi_dmul+0x37a>
 80016b8:	2208      	movs	r2, #8
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2302      	movs	r3, #2
 80016be:	2400      	movs	r4, #0
 80016c0:	4691      	mov	r9, r2
 80016c2:	469b      	mov	fp, r3
 80016c4:	e77b      	b.n	80015be <__aeabi_dmul+0x46>
 80016c6:	4652      	mov	r2, sl
 80016c8:	4332      	orrs	r2, r6
 80016ca:	d100      	bne.n	80016ce <__aeabi_dmul+0x156>
 80016cc:	e10a      	b.n	80018e4 <__aeabi_dmul+0x36c>
 80016ce:	2e00      	cmp	r6, #0
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dmul+0x15c>
 80016d2:	e176      	b.n	80019c2 <__aeabi_dmul+0x44a>
 80016d4:	0030      	movs	r0, r6
 80016d6:	f000 fec7 	bl	8002468 <__clzsi2>
 80016da:	0002      	movs	r2, r0
 80016dc:	3a0b      	subs	r2, #11
 80016de:	231d      	movs	r3, #29
 80016e0:	0001      	movs	r1, r0
 80016e2:	1a9b      	subs	r3, r3, r2
 80016e4:	4652      	mov	r2, sl
 80016e6:	3908      	subs	r1, #8
 80016e8:	40da      	lsrs	r2, r3
 80016ea:	408e      	lsls	r6, r1
 80016ec:	4316      	orrs	r6, r2
 80016ee:	4652      	mov	r2, sl
 80016f0:	408a      	lsls	r2, r1
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	4989      	ldr	r1, [pc, #548]	; (800191c <__aeabi_dmul+0x3a4>)
 80016f6:	1a18      	subs	r0, r3, r0
 80016f8:	0003      	movs	r3, r0
 80016fa:	468c      	mov	ip, r1
 80016fc:	4463      	add	r3, ip
 80016fe:	2000      	movs	r0, #0
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	e77a      	b.n	80015fa <__aeabi_dmul+0x82>
 8001704:	2400      	movs	r4, #0
 8001706:	2500      	movs	r5, #0
 8001708:	4a81      	ldr	r2, [pc, #516]	; (8001910 <__aeabi_dmul+0x398>)
 800170a:	e7a5      	b.n	8001658 <__aeabi_dmul+0xe0>
 800170c:	0c2f      	lsrs	r7, r5, #16
 800170e:	042d      	lsls	r5, r5, #16
 8001710:	0c2d      	lsrs	r5, r5, #16
 8001712:	002b      	movs	r3, r5
 8001714:	0c11      	lsrs	r1, r2, #16
 8001716:	0412      	lsls	r2, r2, #16
 8001718:	0c12      	lsrs	r2, r2, #16
 800171a:	4353      	muls	r3, r2
 800171c:	4698      	mov	r8, r3
 800171e:	0013      	movs	r3, r2
 8001720:	0028      	movs	r0, r5
 8001722:	437b      	muls	r3, r7
 8001724:	4699      	mov	r9, r3
 8001726:	4348      	muls	r0, r1
 8001728:	4448      	add	r0, r9
 800172a:	4683      	mov	fp, r0
 800172c:	4640      	mov	r0, r8
 800172e:	000b      	movs	r3, r1
 8001730:	0c00      	lsrs	r0, r0, #16
 8001732:	4682      	mov	sl, r0
 8001734:	4658      	mov	r0, fp
 8001736:	437b      	muls	r3, r7
 8001738:	4450      	add	r0, sl
 800173a:	9302      	str	r3, [sp, #8]
 800173c:	4581      	cmp	r9, r0
 800173e:	d906      	bls.n	800174e <__aeabi_dmul+0x1d6>
 8001740:	469a      	mov	sl, r3
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	025b      	lsls	r3, r3, #9
 8001746:	4699      	mov	r9, r3
 8001748:	44ca      	add	sl, r9
 800174a:	4653      	mov	r3, sl
 800174c:	9302      	str	r3, [sp, #8]
 800174e:	0c03      	lsrs	r3, r0, #16
 8001750:	469b      	mov	fp, r3
 8001752:	4643      	mov	r3, r8
 8001754:	041b      	lsls	r3, r3, #16
 8001756:	0400      	lsls	r0, r0, #16
 8001758:	0c1b      	lsrs	r3, r3, #16
 800175a:	4698      	mov	r8, r3
 800175c:	0003      	movs	r3, r0
 800175e:	4443      	add	r3, r8
 8001760:	9304      	str	r3, [sp, #16]
 8001762:	0c33      	lsrs	r3, r6, #16
 8001764:	4699      	mov	r9, r3
 8001766:	002b      	movs	r3, r5
 8001768:	0436      	lsls	r6, r6, #16
 800176a:	0c36      	lsrs	r6, r6, #16
 800176c:	4373      	muls	r3, r6
 800176e:	4698      	mov	r8, r3
 8001770:	0033      	movs	r3, r6
 8001772:	437b      	muls	r3, r7
 8001774:	469a      	mov	sl, r3
 8001776:	464b      	mov	r3, r9
 8001778:	435d      	muls	r5, r3
 800177a:	435f      	muls	r7, r3
 800177c:	4643      	mov	r3, r8
 800177e:	4455      	add	r5, sl
 8001780:	0c18      	lsrs	r0, r3, #16
 8001782:	1940      	adds	r0, r0, r5
 8001784:	4582      	cmp	sl, r0
 8001786:	d903      	bls.n	8001790 <__aeabi_dmul+0x218>
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	025b      	lsls	r3, r3, #9
 800178c:	469a      	mov	sl, r3
 800178e:	4457      	add	r7, sl
 8001790:	0c05      	lsrs	r5, r0, #16
 8001792:	19eb      	adds	r3, r5, r7
 8001794:	9305      	str	r3, [sp, #20]
 8001796:	4643      	mov	r3, r8
 8001798:	041d      	lsls	r5, r3, #16
 800179a:	0c2d      	lsrs	r5, r5, #16
 800179c:	0400      	lsls	r0, r0, #16
 800179e:	1940      	adds	r0, r0, r5
 80017a0:	0c25      	lsrs	r5, r4, #16
 80017a2:	0424      	lsls	r4, r4, #16
 80017a4:	0c24      	lsrs	r4, r4, #16
 80017a6:	0027      	movs	r7, r4
 80017a8:	4357      	muls	r7, r2
 80017aa:	436a      	muls	r2, r5
 80017ac:	4690      	mov	r8, r2
 80017ae:	002a      	movs	r2, r5
 80017b0:	0c3b      	lsrs	r3, r7, #16
 80017b2:	469a      	mov	sl, r3
 80017b4:	434a      	muls	r2, r1
 80017b6:	4361      	muls	r1, r4
 80017b8:	4441      	add	r1, r8
 80017ba:	4451      	add	r1, sl
 80017bc:	4483      	add	fp, r0
 80017be:	4588      	cmp	r8, r1
 80017c0:	d903      	bls.n	80017ca <__aeabi_dmul+0x252>
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	025b      	lsls	r3, r3, #9
 80017c6:	4698      	mov	r8, r3
 80017c8:	4442      	add	r2, r8
 80017ca:	043f      	lsls	r7, r7, #16
 80017cc:	0c0b      	lsrs	r3, r1, #16
 80017ce:	0c3f      	lsrs	r7, r7, #16
 80017d0:	0409      	lsls	r1, r1, #16
 80017d2:	19c9      	adds	r1, r1, r7
 80017d4:	0027      	movs	r7, r4
 80017d6:	4698      	mov	r8, r3
 80017d8:	464b      	mov	r3, r9
 80017da:	4377      	muls	r7, r6
 80017dc:	435c      	muls	r4, r3
 80017de:	436e      	muls	r6, r5
 80017e0:	435d      	muls	r5, r3
 80017e2:	0c3b      	lsrs	r3, r7, #16
 80017e4:	4699      	mov	r9, r3
 80017e6:	19a4      	adds	r4, r4, r6
 80017e8:	444c      	add	r4, r9
 80017ea:	4442      	add	r2, r8
 80017ec:	9503      	str	r5, [sp, #12]
 80017ee:	42a6      	cmp	r6, r4
 80017f0:	d904      	bls.n	80017fc <__aeabi_dmul+0x284>
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	025b      	lsls	r3, r3, #9
 80017f6:	4698      	mov	r8, r3
 80017f8:	4445      	add	r5, r8
 80017fa:	9503      	str	r5, [sp, #12]
 80017fc:	9b02      	ldr	r3, [sp, #8]
 80017fe:	043f      	lsls	r7, r7, #16
 8001800:	445b      	add	r3, fp
 8001802:	001e      	movs	r6, r3
 8001804:	4283      	cmp	r3, r0
 8001806:	4180      	sbcs	r0, r0
 8001808:	0423      	lsls	r3, r4, #16
 800180a:	4698      	mov	r8, r3
 800180c:	9b05      	ldr	r3, [sp, #20]
 800180e:	0c3f      	lsrs	r7, r7, #16
 8001810:	4447      	add	r7, r8
 8001812:	4698      	mov	r8, r3
 8001814:	1876      	adds	r6, r6, r1
 8001816:	428e      	cmp	r6, r1
 8001818:	4189      	sbcs	r1, r1
 800181a:	4447      	add	r7, r8
 800181c:	4240      	negs	r0, r0
 800181e:	183d      	adds	r5, r7, r0
 8001820:	46a8      	mov	r8, r5
 8001822:	4693      	mov	fp, r2
 8001824:	4249      	negs	r1, r1
 8001826:	468a      	mov	sl, r1
 8001828:	44c3      	add	fp, r8
 800182a:	429f      	cmp	r7, r3
 800182c:	41bf      	sbcs	r7, r7
 800182e:	4580      	cmp	r8, r0
 8001830:	4180      	sbcs	r0, r0
 8001832:	9b03      	ldr	r3, [sp, #12]
 8001834:	44da      	add	sl, fp
 8001836:	4698      	mov	r8, r3
 8001838:	4653      	mov	r3, sl
 800183a:	4240      	negs	r0, r0
 800183c:	427f      	negs	r7, r7
 800183e:	4307      	orrs	r7, r0
 8001840:	0c24      	lsrs	r4, r4, #16
 8001842:	4593      	cmp	fp, r2
 8001844:	4192      	sbcs	r2, r2
 8001846:	458a      	cmp	sl, r1
 8001848:	4189      	sbcs	r1, r1
 800184a:	193f      	adds	r7, r7, r4
 800184c:	0ddc      	lsrs	r4, r3, #23
 800184e:	9b04      	ldr	r3, [sp, #16]
 8001850:	0275      	lsls	r5, r6, #9
 8001852:	431d      	orrs	r5, r3
 8001854:	1e68      	subs	r0, r5, #1
 8001856:	4185      	sbcs	r5, r0
 8001858:	4653      	mov	r3, sl
 800185a:	4252      	negs	r2, r2
 800185c:	4249      	negs	r1, r1
 800185e:	430a      	orrs	r2, r1
 8001860:	18bf      	adds	r7, r7, r2
 8001862:	4447      	add	r7, r8
 8001864:	0df6      	lsrs	r6, r6, #23
 8001866:	027f      	lsls	r7, r7, #9
 8001868:	4335      	orrs	r5, r6
 800186a:	025a      	lsls	r2, r3, #9
 800186c:	433c      	orrs	r4, r7
 800186e:	4315      	orrs	r5, r2
 8001870:	01fb      	lsls	r3, r7, #7
 8001872:	d400      	bmi.n	8001876 <__aeabi_dmul+0x2fe>
 8001874:	e0c1      	b.n	80019fa <__aeabi_dmul+0x482>
 8001876:	2101      	movs	r1, #1
 8001878:	086a      	lsrs	r2, r5, #1
 800187a:	400d      	ands	r5, r1
 800187c:	4315      	orrs	r5, r2
 800187e:	07e2      	lsls	r2, r4, #31
 8001880:	4315      	orrs	r5, r2
 8001882:	0864      	lsrs	r4, r4, #1
 8001884:	4926      	ldr	r1, [pc, #152]	; (8001920 <__aeabi_dmul+0x3a8>)
 8001886:	4461      	add	r1, ip
 8001888:	2900      	cmp	r1, #0
 800188a:	dd56      	ble.n	800193a <__aeabi_dmul+0x3c2>
 800188c:	076b      	lsls	r3, r5, #29
 800188e:	d009      	beq.n	80018a4 <__aeabi_dmul+0x32c>
 8001890:	220f      	movs	r2, #15
 8001892:	402a      	ands	r2, r5
 8001894:	2a04      	cmp	r2, #4
 8001896:	d005      	beq.n	80018a4 <__aeabi_dmul+0x32c>
 8001898:	1d2a      	adds	r2, r5, #4
 800189a:	42aa      	cmp	r2, r5
 800189c:	41ad      	sbcs	r5, r5
 800189e:	426d      	negs	r5, r5
 80018a0:	1964      	adds	r4, r4, r5
 80018a2:	0015      	movs	r5, r2
 80018a4:	01e3      	lsls	r3, r4, #7
 80018a6:	d504      	bpl.n	80018b2 <__aeabi_dmul+0x33a>
 80018a8:	2180      	movs	r1, #128	; 0x80
 80018aa:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <__aeabi_dmul+0x3ac>)
 80018ac:	00c9      	lsls	r1, r1, #3
 80018ae:	4014      	ands	r4, r2
 80018b0:	4461      	add	r1, ip
 80018b2:	4a1d      	ldr	r2, [pc, #116]	; (8001928 <__aeabi_dmul+0x3b0>)
 80018b4:	4291      	cmp	r1, r2
 80018b6:	dd00      	ble.n	80018ba <__aeabi_dmul+0x342>
 80018b8:	e724      	b.n	8001704 <__aeabi_dmul+0x18c>
 80018ba:	0762      	lsls	r2, r4, #29
 80018bc:	08ed      	lsrs	r5, r5, #3
 80018be:	0264      	lsls	r4, r4, #9
 80018c0:	0549      	lsls	r1, r1, #21
 80018c2:	4315      	orrs	r5, r2
 80018c4:	0b24      	lsrs	r4, r4, #12
 80018c6:	0d4a      	lsrs	r2, r1, #21
 80018c8:	e6c6      	b.n	8001658 <__aeabi_dmul+0xe0>
 80018ca:	9701      	str	r7, [sp, #4]
 80018cc:	e6b8      	b.n	8001640 <__aeabi_dmul+0xc8>
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <__aeabi_dmul+0x398>)
 80018d0:	2003      	movs	r0, #3
 80018d2:	4694      	mov	ip, r2
 80018d4:	4463      	add	r3, ip
 80018d6:	464a      	mov	r2, r9
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2303      	movs	r3, #3
 80018dc:	431a      	orrs	r2, r3
 80018de:	4691      	mov	r9, r2
 80018e0:	4652      	mov	r2, sl
 80018e2:	e68a      	b.n	80015fa <__aeabi_dmul+0x82>
 80018e4:	4649      	mov	r1, r9
 80018e6:	2301      	movs	r3, #1
 80018e8:	4319      	orrs	r1, r3
 80018ea:	4689      	mov	r9, r1
 80018ec:	2600      	movs	r6, #0
 80018ee:	2001      	movs	r0, #1
 80018f0:	e683      	b.n	80015fa <__aeabi_dmul+0x82>
 80018f2:	220c      	movs	r2, #12
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2303      	movs	r3, #3
 80018f8:	0005      	movs	r5, r0
 80018fa:	4691      	mov	r9, r2
 80018fc:	469b      	mov	fp, r3
 80018fe:	e65e      	b.n	80015be <__aeabi_dmul+0x46>
 8001900:	2304      	movs	r3, #4
 8001902:	4699      	mov	r9, r3
 8001904:	2300      	movs	r3, #0
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	3301      	adds	r3, #1
 800190a:	2400      	movs	r4, #0
 800190c:	469b      	mov	fp, r3
 800190e:	e656      	b.n	80015be <__aeabi_dmul+0x46>
 8001910:	000007ff 	.word	0x000007ff
 8001914:	fffffc01 	.word	0xfffffc01
 8001918:	08008524 	.word	0x08008524
 800191c:	fffffc0d 	.word	0xfffffc0d
 8001920:	000003ff 	.word	0x000003ff
 8001924:	feffffff 	.word	0xfeffffff
 8001928:	000007fe 	.word	0x000007fe
 800192c:	2300      	movs	r3, #0
 800192e:	2480      	movs	r4, #128	; 0x80
 8001930:	2500      	movs	r5, #0
 8001932:	4a44      	ldr	r2, [pc, #272]	; (8001a44 <__aeabi_dmul+0x4cc>)
 8001934:	9301      	str	r3, [sp, #4]
 8001936:	0324      	lsls	r4, r4, #12
 8001938:	e68e      	b.n	8001658 <__aeabi_dmul+0xe0>
 800193a:	2001      	movs	r0, #1
 800193c:	1a40      	subs	r0, r0, r1
 800193e:	2838      	cmp	r0, #56	; 0x38
 8001940:	dd00      	ble.n	8001944 <__aeabi_dmul+0x3cc>
 8001942:	e686      	b.n	8001652 <__aeabi_dmul+0xda>
 8001944:	281f      	cmp	r0, #31
 8001946:	dd5b      	ble.n	8001a00 <__aeabi_dmul+0x488>
 8001948:	221f      	movs	r2, #31
 800194a:	0023      	movs	r3, r4
 800194c:	4252      	negs	r2, r2
 800194e:	1a51      	subs	r1, r2, r1
 8001950:	40cb      	lsrs	r3, r1
 8001952:	0019      	movs	r1, r3
 8001954:	2820      	cmp	r0, #32
 8001956:	d003      	beq.n	8001960 <__aeabi_dmul+0x3e8>
 8001958:	4a3b      	ldr	r2, [pc, #236]	; (8001a48 <__aeabi_dmul+0x4d0>)
 800195a:	4462      	add	r2, ip
 800195c:	4094      	lsls	r4, r2
 800195e:	4325      	orrs	r5, r4
 8001960:	1e6a      	subs	r2, r5, #1
 8001962:	4195      	sbcs	r5, r2
 8001964:	002a      	movs	r2, r5
 8001966:	430a      	orrs	r2, r1
 8001968:	2107      	movs	r1, #7
 800196a:	000d      	movs	r5, r1
 800196c:	2400      	movs	r4, #0
 800196e:	4015      	ands	r5, r2
 8001970:	4211      	tst	r1, r2
 8001972:	d05b      	beq.n	8001a2c <__aeabi_dmul+0x4b4>
 8001974:	210f      	movs	r1, #15
 8001976:	2400      	movs	r4, #0
 8001978:	4011      	ands	r1, r2
 800197a:	2904      	cmp	r1, #4
 800197c:	d053      	beq.n	8001a26 <__aeabi_dmul+0x4ae>
 800197e:	1d11      	adds	r1, r2, #4
 8001980:	4291      	cmp	r1, r2
 8001982:	4192      	sbcs	r2, r2
 8001984:	4252      	negs	r2, r2
 8001986:	18a4      	adds	r4, r4, r2
 8001988:	000a      	movs	r2, r1
 800198a:	0223      	lsls	r3, r4, #8
 800198c:	d54b      	bpl.n	8001a26 <__aeabi_dmul+0x4ae>
 800198e:	2201      	movs	r2, #1
 8001990:	2400      	movs	r4, #0
 8001992:	2500      	movs	r5, #0
 8001994:	e660      	b.n	8001658 <__aeabi_dmul+0xe0>
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	031b      	lsls	r3, r3, #12
 800199a:	421c      	tst	r4, r3
 800199c:	d009      	beq.n	80019b2 <__aeabi_dmul+0x43a>
 800199e:	421e      	tst	r6, r3
 80019a0:	d107      	bne.n	80019b2 <__aeabi_dmul+0x43a>
 80019a2:	4333      	orrs	r3, r6
 80019a4:	031c      	lsls	r4, r3, #12
 80019a6:	4643      	mov	r3, r8
 80019a8:	0015      	movs	r5, r2
 80019aa:	0b24      	lsrs	r4, r4, #12
 80019ac:	4a25      	ldr	r2, [pc, #148]	; (8001a44 <__aeabi_dmul+0x4cc>)
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	e652      	b.n	8001658 <__aeabi_dmul+0xe0>
 80019b2:	2280      	movs	r2, #128	; 0x80
 80019b4:	0312      	lsls	r2, r2, #12
 80019b6:	4314      	orrs	r4, r2
 80019b8:	0324      	lsls	r4, r4, #12
 80019ba:	4a22      	ldr	r2, [pc, #136]	; (8001a44 <__aeabi_dmul+0x4cc>)
 80019bc:	0b24      	lsrs	r4, r4, #12
 80019be:	9701      	str	r7, [sp, #4]
 80019c0:	e64a      	b.n	8001658 <__aeabi_dmul+0xe0>
 80019c2:	f000 fd51 	bl	8002468 <__clzsi2>
 80019c6:	0003      	movs	r3, r0
 80019c8:	001a      	movs	r2, r3
 80019ca:	3215      	adds	r2, #21
 80019cc:	3020      	adds	r0, #32
 80019ce:	2a1c      	cmp	r2, #28
 80019d0:	dc00      	bgt.n	80019d4 <__aeabi_dmul+0x45c>
 80019d2:	e684      	b.n	80016de <__aeabi_dmul+0x166>
 80019d4:	4656      	mov	r6, sl
 80019d6:	3b08      	subs	r3, #8
 80019d8:	2200      	movs	r2, #0
 80019da:	409e      	lsls	r6, r3
 80019dc:	e689      	b.n	80016f2 <__aeabi_dmul+0x17a>
 80019de:	f000 fd43 	bl	8002468 <__clzsi2>
 80019e2:	0001      	movs	r1, r0
 80019e4:	0002      	movs	r2, r0
 80019e6:	3115      	adds	r1, #21
 80019e8:	3220      	adds	r2, #32
 80019ea:	291c      	cmp	r1, #28
 80019ec:	dc00      	bgt.n	80019f0 <__aeabi_dmul+0x478>
 80019ee:	e64e      	b.n	800168e <__aeabi_dmul+0x116>
 80019f0:	0034      	movs	r4, r6
 80019f2:	3808      	subs	r0, #8
 80019f4:	2500      	movs	r5, #0
 80019f6:	4084      	lsls	r4, r0
 80019f8:	e653      	b.n	80016a2 <__aeabi_dmul+0x12a>
 80019fa:	9b00      	ldr	r3, [sp, #0]
 80019fc:	469c      	mov	ip, r3
 80019fe:	e741      	b.n	8001884 <__aeabi_dmul+0x30c>
 8001a00:	4912      	ldr	r1, [pc, #72]	; (8001a4c <__aeabi_dmul+0x4d4>)
 8001a02:	0022      	movs	r2, r4
 8001a04:	4461      	add	r1, ip
 8001a06:	002e      	movs	r6, r5
 8001a08:	408d      	lsls	r5, r1
 8001a0a:	408a      	lsls	r2, r1
 8001a0c:	40c6      	lsrs	r6, r0
 8001a0e:	1e69      	subs	r1, r5, #1
 8001a10:	418d      	sbcs	r5, r1
 8001a12:	4332      	orrs	r2, r6
 8001a14:	432a      	orrs	r2, r5
 8001a16:	40c4      	lsrs	r4, r0
 8001a18:	0753      	lsls	r3, r2, #29
 8001a1a:	d0b6      	beq.n	800198a <__aeabi_dmul+0x412>
 8001a1c:	210f      	movs	r1, #15
 8001a1e:	4011      	ands	r1, r2
 8001a20:	2904      	cmp	r1, #4
 8001a22:	d1ac      	bne.n	800197e <__aeabi_dmul+0x406>
 8001a24:	e7b1      	b.n	800198a <__aeabi_dmul+0x412>
 8001a26:	0765      	lsls	r5, r4, #29
 8001a28:	0264      	lsls	r4, r4, #9
 8001a2a:	0b24      	lsrs	r4, r4, #12
 8001a2c:	08d2      	lsrs	r2, r2, #3
 8001a2e:	4315      	orrs	r5, r2
 8001a30:	2200      	movs	r2, #0
 8001a32:	e611      	b.n	8001658 <__aeabi_dmul+0xe0>
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	0312      	lsls	r2, r2, #12
 8001a38:	4314      	orrs	r4, r2
 8001a3a:	0324      	lsls	r4, r4, #12
 8001a3c:	4a01      	ldr	r2, [pc, #4]	; (8001a44 <__aeabi_dmul+0x4cc>)
 8001a3e:	0b24      	lsrs	r4, r4, #12
 8001a40:	e60a      	b.n	8001658 <__aeabi_dmul+0xe0>
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	000007ff 	.word	0x000007ff
 8001a48:	0000043e 	.word	0x0000043e
 8001a4c:	0000041e 	.word	0x0000041e

08001a50 <__aeabi_dsub>:
 8001a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a52:	4657      	mov	r7, sl
 8001a54:	464e      	mov	r6, r9
 8001a56:	4645      	mov	r5, r8
 8001a58:	46de      	mov	lr, fp
 8001a5a:	0004      	movs	r4, r0
 8001a5c:	b5e0      	push	{r5, r6, r7, lr}
 8001a5e:	001f      	movs	r7, r3
 8001a60:	0010      	movs	r0, r2
 8001a62:	030b      	lsls	r3, r1, #12
 8001a64:	0f62      	lsrs	r2, r4, #29
 8001a66:	004e      	lsls	r6, r1, #1
 8001a68:	0fcd      	lsrs	r5, r1, #31
 8001a6a:	0a5b      	lsrs	r3, r3, #9
 8001a6c:	0339      	lsls	r1, r7, #12
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	0a49      	lsrs	r1, r1, #9
 8001a72:	00e2      	lsls	r2, r4, #3
 8001a74:	0f44      	lsrs	r4, r0, #29
 8001a76:	4321      	orrs	r1, r4
 8001a78:	4cc2      	ldr	r4, [pc, #776]	; (8001d84 <__aeabi_dsub+0x334>)
 8001a7a:	4691      	mov	r9, r2
 8001a7c:	4692      	mov	sl, r2
 8001a7e:	00c0      	lsls	r0, r0, #3
 8001a80:	007a      	lsls	r2, r7, #1
 8001a82:	4680      	mov	r8, r0
 8001a84:	0d76      	lsrs	r6, r6, #21
 8001a86:	0d52      	lsrs	r2, r2, #21
 8001a88:	0fff      	lsrs	r7, r7, #31
 8001a8a:	42a2      	cmp	r2, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dsub+0x40>
 8001a8e:	e0b4      	b.n	8001bfa <__aeabi_dsub+0x1aa>
 8001a90:	2401      	movs	r4, #1
 8001a92:	4067      	eors	r7, r4
 8001a94:	46bb      	mov	fp, r7
 8001a96:	42bd      	cmp	r5, r7
 8001a98:	d100      	bne.n	8001a9c <__aeabi_dsub+0x4c>
 8001a9a:	e088      	b.n	8001bae <__aeabi_dsub+0x15e>
 8001a9c:	1ab4      	subs	r4, r6, r2
 8001a9e:	46a4      	mov	ip, r4
 8001aa0:	2c00      	cmp	r4, #0
 8001aa2:	dc00      	bgt.n	8001aa6 <__aeabi_dsub+0x56>
 8001aa4:	e0b2      	b.n	8001c0c <__aeabi_dsub+0x1bc>
 8001aa6:	2a00      	cmp	r2, #0
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dsub+0x5c>
 8001aaa:	e0c5      	b.n	8001c38 <__aeabi_dsub+0x1e8>
 8001aac:	4ab5      	ldr	r2, [pc, #724]	; (8001d84 <__aeabi_dsub+0x334>)
 8001aae:	4296      	cmp	r6, r2
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_dsub+0x64>
 8001ab2:	e28b      	b.n	8001fcc <__aeabi_dsub+0x57c>
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	0412      	lsls	r2, r2, #16
 8001ab8:	4311      	orrs	r1, r2
 8001aba:	4662      	mov	r2, ip
 8001abc:	2a38      	cmp	r2, #56	; 0x38
 8001abe:	dd00      	ble.n	8001ac2 <__aeabi_dsub+0x72>
 8001ac0:	e1a1      	b.n	8001e06 <__aeabi_dsub+0x3b6>
 8001ac2:	2a1f      	cmp	r2, #31
 8001ac4:	dd00      	ble.n	8001ac8 <__aeabi_dsub+0x78>
 8001ac6:	e216      	b.n	8001ef6 <__aeabi_dsub+0x4a6>
 8001ac8:	2720      	movs	r7, #32
 8001aca:	000c      	movs	r4, r1
 8001acc:	1abf      	subs	r7, r7, r2
 8001ace:	40bc      	lsls	r4, r7
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	46a0      	mov	r8, r4
 8001ad4:	4664      	mov	r4, ip
 8001ad6:	40b8      	lsls	r0, r7
 8001ad8:	40e2      	lsrs	r2, r4
 8001ada:	4644      	mov	r4, r8
 8001adc:	4314      	orrs	r4, r2
 8001ade:	0002      	movs	r2, r0
 8001ae0:	1e50      	subs	r0, r2, #1
 8001ae2:	4182      	sbcs	r2, r0
 8001ae4:	4660      	mov	r0, ip
 8001ae6:	40c1      	lsrs	r1, r0
 8001ae8:	4322      	orrs	r2, r4
 8001aea:	1a5b      	subs	r3, r3, r1
 8001aec:	4649      	mov	r1, r9
 8001aee:	1a8c      	subs	r4, r1, r2
 8001af0:	45a1      	cmp	r9, r4
 8001af2:	4192      	sbcs	r2, r2
 8001af4:	4252      	negs	r2, r2
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	4698      	mov	r8, r3
 8001afa:	4643      	mov	r3, r8
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	d400      	bmi.n	8001b02 <__aeabi_dsub+0xb2>
 8001b00:	e117      	b.n	8001d32 <__aeabi_dsub+0x2e2>
 8001b02:	4643      	mov	r3, r8
 8001b04:	025b      	lsls	r3, r3, #9
 8001b06:	0a5b      	lsrs	r3, r3, #9
 8001b08:	4698      	mov	r8, r3
 8001b0a:	4643      	mov	r3, r8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dsub+0xc2>
 8001b10:	e16c      	b.n	8001dec <__aeabi_dsub+0x39c>
 8001b12:	4640      	mov	r0, r8
 8001b14:	f000 fca8 	bl	8002468 <__clzsi2>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	3a08      	subs	r2, #8
 8001b1c:	2120      	movs	r1, #32
 8001b1e:	0020      	movs	r0, r4
 8001b20:	4643      	mov	r3, r8
 8001b22:	1a89      	subs	r1, r1, r2
 8001b24:	4093      	lsls	r3, r2
 8001b26:	40c8      	lsrs	r0, r1
 8001b28:	4094      	lsls	r4, r2
 8001b2a:	4303      	orrs	r3, r0
 8001b2c:	4296      	cmp	r6, r2
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dsub+0xe2>
 8001b30:	e157      	b.n	8001de2 <__aeabi_dsub+0x392>
 8001b32:	1b96      	subs	r6, r2, r6
 8001b34:	1c71      	adds	r1, r6, #1
 8001b36:	291f      	cmp	r1, #31
 8001b38:	dd00      	ble.n	8001b3c <__aeabi_dsub+0xec>
 8001b3a:	e1cb      	b.n	8001ed4 <__aeabi_dsub+0x484>
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	0018      	movs	r0, r3
 8001b40:	0026      	movs	r6, r4
 8001b42:	1a52      	subs	r2, r2, r1
 8001b44:	4094      	lsls	r4, r2
 8001b46:	4090      	lsls	r0, r2
 8001b48:	40ce      	lsrs	r6, r1
 8001b4a:	40cb      	lsrs	r3, r1
 8001b4c:	1e62      	subs	r2, r4, #1
 8001b4e:	4194      	sbcs	r4, r2
 8001b50:	4330      	orrs	r0, r6
 8001b52:	4698      	mov	r8, r3
 8001b54:	2600      	movs	r6, #0
 8001b56:	4304      	orrs	r4, r0
 8001b58:	0763      	lsls	r3, r4, #29
 8001b5a:	d009      	beq.n	8001b70 <__aeabi_dsub+0x120>
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	4023      	ands	r3, r4
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d005      	beq.n	8001b70 <__aeabi_dsub+0x120>
 8001b64:	1d23      	adds	r3, r4, #4
 8001b66:	42a3      	cmp	r3, r4
 8001b68:	41a4      	sbcs	r4, r4
 8001b6a:	4264      	negs	r4, r4
 8001b6c:	44a0      	add	r8, r4
 8001b6e:	001c      	movs	r4, r3
 8001b70:	4643      	mov	r3, r8
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	d400      	bmi.n	8001b78 <__aeabi_dsub+0x128>
 8001b76:	e0df      	b.n	8001d38 <__aeabi_dsub+0x2e8>
 8001b78:	4b82      	ldr	r3, [pc, #520]	; (8001d84 <__aeabi_dsub+0x334>)
 8001b7a:	3601      	adds	r6, #1
 8001b7c:	429e      	cmp	r6, r3
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_dsub+0x132>
 8001b80:	e0fb      	b.n	8001d7a <__aeabi_dsub+0x32a>
 8001b82:	4642      	mov	r2, r8
 8001b84:	4b80      	ldr	r3, [pc, #512]	; (8001d88 <__aeabi_dsub+0x338>)
 8001b86:	08e4      	lsrs	r4, r4, #3
 8001b88:	401a      	ands	r2, r3
 8001b8a:	0013      	movs	r3, r2
 8001b8c:	0571      	lsls	r1, r6, #21
 8001b8e:	0752      	lsls	r2, r2, #29
 8001b90:	025b      	lsls	r3, r3, #9
 8001b92:	4322      	orrs	r2, r4
 8001b94:	0b1b      	lsrs	r3, r3, #12
 8001b96:	0d49      	lsrs	r1, r1, #21
 8001b98:	0509      	lsls	r1, r1, #20
 8001b9a:	07ed      	lsls	r5, r5, #31
 8001b9c:	4319      	orrs	r1, r3
 8001b9e:	4329      	orrs	r1, r5
 8001ba0:	0010      	movs	r0, r2
 8001ba2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba4:	46bb      	mov	fp, r7
 8001ba6:	46b2      	mov	sl, r6
 8001ba8:	46a9      	mov	r9, r5
 8001baa:	46a0      	mov	r8, r4
 8001bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bae:	1ab4      	subs	r4, r6, r2
 8001bb0:	46a4      	mov	ip, r4
 8001bb2:	2c00      	cmp	r4, #0
 8001bb4:	dd58      	ble.n	8001c68 <__aeabi_dsub+0x218>
 8001bb6:	2a00      	cmp	r2, #0
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_dsub+0x16c>
 8001bba:	e09e      	b.n	8001cfa <__aeabi_dsub+0x2aa>
 8001bbc:	4a71      	ldr	r2, [pc, #452]	; (8001d84 <__aeabi_dsub+0x334>)
 8001bbe:	4296      	cmp	r6, r2
 8001bc0:	d100      	bne.n	8001bc4 <__aeabi_dsub+0x174>
 8001bc2:	e13b      	b.n	8001e3c <__aeabi_dsub+0x3ec>
 8001bc4:	2280      	movs	r2, #128	; 0x80
 8001bc6:	0412      	lsls	r2, r2, #16
 8001bc8:	4311      	orrs	r1, r2
 8001bca:	4662      	mov	r2, ip
 8001bcc:	2a38      	cmp	r2, #56	; 0x38
 8001bce:	dd00      	ble.n	8001bd2 <__aeabi_dsub+0x182>
 8001bd0:	e0c1      	b.n	8001d56 <__aeabi_dsub+0x306>
 8001bd2:	2a1f      	cmp	r2, #31
 8001bd4:	dc00      	bgt.n	8001bd8 <__aeabi_dsub+0x188>
 8001bd6:	e1bb      	b.n	8001f50 <__aeabi_dsub+0x500>
 8001bd8:	000c      	movs	r4, r1
 8001bda:	3a20      	subs	r2, #32
 8001bdc:	40d4      	lsrs	r4, r2
 8001bde:	0022      	movs	r2, r4
 8001be0:	4664      	mov	r4, ip
 8001be2:	2c20      	cmp	r4, #32
 8001be4:	d004      	beq.n	8001bf0 <__aeabi_dsub+0x1a0>
 8001be6:	2740      	movs	r7, #64	; 0x40
 8001be8:	1b3f      	subs	r7, r7, r4
 8001bea:	40b9      	lsls	r1, r7
 8001bec:	4308      	orrs	r0, r1
 8001bee:	4680      	mov	r8, r0
 8001bf0:	4644      	mov	r4, r8
 8001bf2:	1e61      	subs	r1, r4, #1
 8001bf4:	418c      	sbcs	r4, r1
 8001bf6:	4314      	orrs	r4, r2
 8001bf8:	e0b1      	b.n	8001d5e <__aeabi_dsub+0x30e>
 8001bfa:	000c      	movs	r4, r1
 8001bfc:	4304      	orrs	r4, r0
 8001bfe:	d02a      	beq.n	8001c56 <__aeabi_dsub+0x206>
 8001c00:	46bb      	mov	fp, r7
 8001c02:	42bd      	cmp	r5, r7
 8001c04:	d02d      	beq.n	8001c62 <__aeabi_dsub+0x212>
 8001c06:	4c61      	ldr	r4, [pc, #388]	; (8001d8c <__aeabi_dsub+0x33c>)
 8001c08:	46a4      	mov	ip, r4
 8001c0a:	44b4      	add	ip, r6
 8001c0c:	4664      	mov	r4, ip
 8001c0e:	2c00      	cmp	r4, #0
 8001c10:	d05c      	beq.n	8001ccc <__aeabi_dsub+0x27c>
 8001c12:	1b94      	subs	r4, r2, r6
 8001c14:	46a4      	mov	ip, r4
 8001c16:	2e00      	cmp	r6, #0
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dsub+0x1cc>
 8001c1a:	e115      	b.n	8001e48 <__aeabi_dsub+0x3f8>
 8001c1c:	464d      	mov	r5, r9
 8001c1e:	431d      	orrs	r5, r3
 8001c20:	d100      	bne.n	8001c24 <__aeabi_dsub+0x1d4>
 8001c22:	e1c3      	b.n	8001fac <__aeabi_dsub+0x55c>
 8001c24:	1e65      	subs	r5, r4, #1
 8001c26:	2c01      	cmp	r4, #1
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dsub+0x1dc>
 8001c2a:	e20c      	b.n	8002046 <__aeabi_dsub+0x5f6>
 8001c2c:	4e55      	ldr	r6, [pc, #340]	; (8001d84 <__aeabi_dsub+0x334>)
 8001c2e:	42b4      	cmp	r4, r6
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dsub+0x1e4>
 8001c32:	e1f8      	b.n	8002026 <__aeabi_dsub+0x5d6>
 8001c34:	46ac      	mov	ip, r5
 8001c36:	e10e      	b.n	8001e56 <__aeabi_dsub+0x406>
 8001c38:	000a      	movs	r2, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_dsub+0x1f0>
 8001c3e:	e136      	b.n	8001eae <__aeabi_dsub+0x45e>
 8001c40:	0022      	movs	r2, r4
 8001c42:	3a01      	subs	r2, #1
 8001c44:	2c01      	cmp	r4, #1
 8001c46:	d100      	bne.n	8001c4a <__aeabi_dsub+0x1fa>
 8001c48:	e1c6      	b.n	8001fd8 <__aeabi_dsub+0x588>
 8001c4a:	4c4e      	ldr	r4, [pc, #312]	; (8001d84 <__aeabi_dsub+0x334>)
 8001c4c:	45a4      	cmp	ip, r4
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x202>
 8001c50:	e0f4      	b.n	8001e3c <__aeabi_dsub+0x3ec>
 8001c52:	4694      	mov	ip, r2
 8001c54:	e731      	b.n	8001aba <__aeabi_dsub+0x6a>
 8001c56:	2401      	movs	r4, #1
 8001c58:	4067      	eors	r7, r4
 8001c5a:	46bb      	mov	fp, r7
 8001c5c:	42bd      	cmp	r5, r7
 8001c5e:	d000      	beq.n	8001c62 <__aeabi_dsub+0x212>
 8001c60:	e71c      	b.n	8001a9c <__aeabi_dsub+0x4c>
 8001c62:	4c4a      	ldr	r4, [pc, #296]	; (8001d8c <__aeabi_dsub+0x33c>)
 8001c64:	46a4      	mov	ip, r4
 8001c66:	44b4      	add	ip, r6
 8001c68:	4664      	mov	r4, ip
 8001c6a:	2c00      	cmp	r4, #0
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x220>
 8001c6e:	e0cf      	b.n	8001e10 <__aeabi_dsub+0x3c0>
 8001c70:	1b94      	subs	r4, r2, r6
 8001c72:	46a4      	mov	ip, r4
 8001c74:	2e00      	cmp	r6, #0
 8001c76:	d100      	bne.n	8001c7a <__aeabi_dsub+0x22a>
 8001c78:	e15c      	b.n	8001f34 <__aeabi_dsub+0x4e4>
 8001c7a:	4e42      	ldr	r6, [pc, #264]	; (8001d84 <__aeabi_dsub+0x334>)
 8001c7c:	42b2      	cmp	r2, r6
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dsub+0x232>
 8001c80:	e1ec      	b.n	800205c <__aeabi_dsub+0x60c>
 8001c82:	2680      	movs	r6, #128	; 0x80
 8001c84:	0436      	lsls	r6, r6, #16
 8001c86:	4333      	orrs	r3, r6
 8001c88:	4664      	mov	r4, ip
 8001c8a:	2c38      	cmp	r4, #56	; 0x38
 8001c8c:	dd00      	ble.n	8001c90 <__aeabi_dsub+0x240>
 8001c8e:	e1b3      	b.n	8001ff8 <__aeabi_dsub+0x5a8>
 8001c90:	2c1f      	cmp	r4, #31
 8001c92:	dd00      	ble.n	8001c96 <__aeabi_dsub+0x246>
 8001c94:	e238      	b.n	8002108 <__aeabi_dsub+0x6b8>
 8001c96:	2620      	movs	r6, #32
 8001c98:	1b36      	subs	r6, r6, r4
 8001c9a:	001c      	movs	r4, r3
 8001c9c:	40b4      	lsls	r4, r6
 8001c9e:	464f      	mov	r7, r9
 8001ca0:	46a0      	mov	r8, r4
 8001ca2:	4664      	mov	r4, ip
 8001ca4:	40e7      	lsrs	r7, r4
 8001ca6:	4644      	mov	r4, r8
 8001ca8:	433c      	orrs	r4, r7
 8001caa:	464f      	mov	r7, r9
 8001cac:	40b7      	lsls	r7, r6
 8001cae:	003e      	movs	r6, r7
 8001cb0:	1e77      	subs	r7, r6, #1
 8001cb2:	41be      	sbcs	r6, r7
 8001cb4:	4334      	orrs	r4, r6
 8001cb6:	4666      	mov	r6, ip
 8001cb8:	40f3      	lsrs	r3, r6
 8001cba:	18c9      	adds	r1, r1, r3
 8001cbc:	1824      	adds	r4, r4, r0
 8001cbe:	4284      	cmp	r4, r0
 8001cc0:	419b      	sbcs	r3, r3
 8001cc2:	425b      	negs	r3, r3
 8001cc4:	4698      	mov	r8, r3
 8001cc6:	0016      	movs	r6, r2
 8001cc8:	4488      	add	r8, r1
 8001cca:	e04e      	b.n	8001d6a <__aeabi_dsub+0x31a>
 8001ccc:	4a30      	ldr	r2, [pc, #192]	; (8001d90 <__aeabi_dsub+0x340>)
 8001cce:	1c74      	adds	r4, r6, #1
 8001cd0:	4214      	tst	r4, r2
 8001cd2:	d000      	beq.n	8001cd6 <__aeabi_dsub+0x286>
 8001cd4:	e0d6      	b.n	8001e84 <__aeabi_dsub+0x434>
 8001cd6:	464a      	mov	r2, r9
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	2e00      	cmp	r6, #0
 8001cdc:	d000      	beq.n	8001ce0 <__aeabi_dsub+0x290>
 8001cde:	e15b      	b.n	8001f98 <__aeabi_dsub+0x548>
 8001ce0:	2a00      	cmp	r2, #0
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dsub+0x296>
 8001ce4:	e1a5      	b.n	8002032 <__aeabi_dsub+0x5e2>
 8001ce6:	000a      	movs	r2, r1
 8001ce8:	4302      	orrs	r2, r0
 8001cea:	d000      	beq.n	8001cee <__aeabi_dsub+0x29e>
 8001cec:	e1bb      	b.n	8002066 <__aeabi_dsub+0x616>
 8001cee:	464a      	mov	r2, r9
 8001cf0:	0759      	lsls	r1, r3, #29
 8001cf2:	08d2      	lsrs	r2, r2, #3
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	08db      	lsrs	r3, r3, #3
 8001cf8:	e027      	b.n	8001d4a <__aeabi_dsub+0x2fa>
 8001cfa:	000a      	movs	r2, r1
 8001cfc:	4302      	orrs	r2, r0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dsub+0x2b2>
 8001d00:	e174      	b.n	8001fec <__aeabi_dsub+0x59c>
 8001d02:	0022      	movs	r2, r4
 8001d04:	3a01      	subs	r2, #1
 8001d06:	2c01      	cmp	r4, #1
 8001d08:	d005      	beq.n	8001d16 <__aeabi_dsub+0x2c6>
 8001d0a:	4c1e      	ldr	r4, [pc, #120]	; (8001d84 <__aeabi_dsub+0x334>)
 8001d0c:	45a4      	cmp	ip, r4
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x2c2>
 8001d10:	e094      	b.n	8001e3c <__aeabi_dsub+0x3ec>
 8001d12:	4694      	mov	ip, r2
 8001d14:	e759      	b.n	8001bca <__aeabi_dsub+0x17a>
 8001d16:	4448      	add	r0, r9
 8001d18:	4548      	cmp	r0, r9
 8001d1a:	4192      	sbcs	r2, r2
 8001d1c:	185b      	adds	r3, r3, r1
 8001d1e:	4698      	mov	r8, r3
 8001d20:	0004      	movs	r4, r0
 8001d22:	4252      	negs	r2, r2
 8001d24:	4490      	add	r8, r2
 8001d26:	4643      	mov	r3, r8
 8001d28:	2602      	movs	r6, #2
 8001d2a:	021b      	lsls	r3, r3, #8
 8001d2c:	d500      	bpl.n	8001d30 <__aeabi_dsub+0x2e0>
 8001d2e:	e0c4      	b.n	8001eba <__aeabi_dsub+0x46a>
 8001d30:	3e01      	subs	r6, #1
 8001d32:	0763      	lsls	r3, r4, #29
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dsub+0x2e8>
 8001d36:	e711      	b.n	8001b5c <__aeabi_dsub+0x10c>
 8001d38:	4643      	mov	r3, r8
 8001d3a:	46b4      	mov	ip, r6
 8001d3c:	0759      	lsls	r1, r3, #29
 8001d3e:	08e2      	lsrs	r2, r4, #3
 8001d40:	430a      	orrs	r2, r1
 8001d42:	08db      	lsrs	r3, r3, #3
 8001d44:	490f      	ldr	r1, [pc, #60]	; (8001d84 <__aeabi_dsub+0x334>)
 8001d46:	458c      	cmp	ip, r1
 8001d48:	d040      	beq.n	8001dcc <__aeabi_dsub+0x37c>
 8001d4a:	4661      	mov	r1, ip
 8001d4c:	031b      	lsls	r3, r3, #12
 8001d4e:	0549      	lsls	r1, r1, #21
 8001d50:	0b1b      	lsrs	r3, r3, #12
 8001d52:	0d49      	lsrs	r1, r1, #21
 8001d54:	e720      	b.n	8001b98 <__aeabi_dsub+0x148>
 8001d56:	4301      	orrs	r1, r0
 8001d58:	000c      	movs	r4, r1
 8001d5a:	1e61      	subs	r1, r4, #1
 8001d5c:	418c      	sbcs	r4, r1
 8001d5e:	444c      	add	r4, r9
 8001d60:	454c      	cmp	r4, r9
 8001d62:	4192      	sbcs	r2, r2
 8001d64:	4252      	negs	r2, r2
 8001d66:	4690      	mov	r8, r2
 8001d68:	4498      	add	r8, r3
 8001d6a:	4643      	mov	r3, r8
 8001d6c:	021b      	lsls	r3, r3, #8
 8001d6e:	d5e0      	bpl.n	8001d32 <__aeabi_dsub+0x2e2>
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <__aeabi_dsub+0x334>)
 8001d72:	3601      	adds	r6, #1
 8001d74:	429e      	cmp	r6, r3
 8001d76:	d000      	beq.n	8001d7a <__aeabi_dsub+0x32a>
 8001d78:	e09f      	b.n	8001eba <__aeabi_dsub+0x46a>
 8001d7a:	0031      	movs	r1, r6
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2200      	movs	r2, #0
 8001d80:	e70a      	b.n	8001b98 <__aeabi_dsub+0x148>
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	000007ff 	.word	0x000007ff
 8001d88:	ff7fffff 	.word	0xff7fffff
 8001d8c:	fffff801 	.word	0xfffff801
 8001d90:	000007fe 	.word	0x000007fe
 8001d94:	2a00      	cmp	r2, #0
 8001d96:	d100      	bne.n	8001d9a <__aeabi_dsub+0x34a>
 8001d98:	e160      	b.n	800205c <__aeabi_dsub+0x60c>
 8001d9a:	000a      	movs	r2, r1
 8001d9c:	4302      	orrs	r2, r0
 8001d9e:	d04d      	beq.n	8001e3c <__aeabi_dsub+0x3ec>
 8001da0:	464a      	mov	r2, r9
 8001da2:	075c      	lsls	r4, r3, #29
 8001da4:	08d2      	lsrs	r2, r2, #3
 8001da6:	4322      	orrs	r2, r4
 8001da8:	2480      	movs	r4, #128	; 0x80
 8001daa:	08db      	lsrs	r3, r3, #3
 8001dac:	0324      	lsls	r4, r4, #12
 8001dae:	4223      	tst	r3, r4
 8001db0:	d007      	beq.n	8001dc2 <__aeabi_dsub+0x372>
 8001db2:	08ce      	lsrs	r6, r1, #3
 8001db4:	4226      	tst	r6, r4
 8001db6:	d104      	bne.n	8001dc2 <__aeabi_dsub+0x372>
 8001db8:	465d      	mov	r5, fp
 8001dba:	0033      	movs	r3, r6
 8001dbc:	08c2      	lsrs	r2, r0, #3
 8001dbe:	0749      	lsls	r1, r1, #29
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	0f51      	lsrs	r1, r2, #29
 8001dc4:	00d2      	lsls	r2, r2, #3
 8001dc6:	08d2      	lsrs	r2, r2, #3
 8001dc8:	0749      	lsls	r1, r1, #29
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	0011      	movs	r1, r2
 8001dce:	4319      	orrs	r1, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x384>
 8001dd2:	e1c8      	b.n	8002166 <__aeabi_dsub+0x716>
 8001dd4:	2180      	movs	r1, #128	; 0x80
 8001dd6:	0309      	lsls	r1, r1, #12
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	031b      	lsls	r3, r3, #12
 8001ddc:	49d5      	ldr	r1, [pc, #852]	; (8002134 <__aeabi_dsub+0x6e4>)
 8001dde:	0b1b      	lsrs	r3, r3, #12
 8001de0:	e6da      	b.n	8001b98 <__aeabi_dsub+0x148>
 8001de2:	49d5      	ldr	r1, [pc, #852]	; (8002138 <__aeabi_dsub+0x6e8>)
 8001de4:	1ab6      	subs	r6, r6, r2
 8001de6:	400b      	ands	r3, r1
 8001de8:	4698      	mov	r8, r3
 8001dea:	e6b5      	b.n	8001b58 <__aeabi_dsub+0x108>
 8001dec:	0020      	movs	r0, r4
 8001dee:	f000 fb3b 	bl	8002468 <__clzsi2>
 8001df2:	0002      	movs	r2, r0
 8001df4:	3218      	adds	r2, #24
 8001df6:	2a1f      	cmp	r2, #31
 8001df8:	dc00      	bgt.n	8001dfc <__aeabi_dsub+0x3ac>
 8001dfa:	e68f      	b.n	8001b1c <__aeabi_dsub+0xcc>
 8001dfc:	0023      	movs	r3, r4
 8001dfe:	3808      	subs	r0, #8
 8001e00:	4083      	lsls	r3, r0
 8001e02:	2400      	movs	r4, #0
 8001e04:	e692      	b.n	8001b2c <__aeabi_dsub+0xdc>
 8001e06:	4308      	orrs	r0, r1
 8001e08:	0002      	movs	r2, r0
 8001e0a:	1e50      	subs	r0, r2, #1
 8001e0c:	4182      	sbcs	r2, r0
 8001e0e:	e66d      	b.n	8001aec <__aeabi_dsub+0x9c>
 8001e10:	4cca      	ldr	r4, [pc, #808]	; (800213c <__aeabi_dsub+0x6ec>)
 8001e12:	1c72      	adds	r2, r6, #1
 8001e14:	4222      	tst	r2, r4
 8001e16:	d000      	beq.n	8001e1a <__aeabi_dsub+0x3ca>
 8001e18:	e0ad      	b.n	8001f76 <__aeabi_dsub+0x526>
 8001e1a:	464a      	mov	r2, r9
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	2e00      	cmp	r6, #0
 8001e20:	d1b8      	bne.n	8001d94 <__aeabi_dsub+0x344>
 8001e22:	2a00      	cmp	r2, #0
 8001e24:	d100      	bne.n	8001e28 <__aeabi_dsub+0x3d8>
 8001e26:	e158      	b.n	80020da <__aeabi_dsub+0x68a>
 8001e28:	000a      	movs	r2, r1
 8001e2a:	4302      	orrs	r2, r0
 8001e2c:	d000      	beq.n	8001e30 <__aeabi_dsub+0x3e0>
 8001e2e:	e159      	b.n	80020e4 <__aeabi_dsub+0x694>
 8001e30:	464a      	mov	r2, r9
 8001e32:	0759      	lsls	r1, r3, #29
 8001e34:	08d2      	lsrs	r2, r2, #3
 8001e36:	430a      	orrs	r2, r1
 8001e38:	08db      	lsrs	r3, r3, #3
 8001e3a:	e786      	b.n	8001d4a <__aeabi_dsub+0x2fa>
 8001e3c:	464a      	mov	r2, r9
 8001e3e:	0759      	lsls	r1, r3, #29
 8001e40:	08d2      	lsrs	r2, r2, #3
 8001e42:	430a      	orrs	r2, r1
 8001e44:	08db      	lsrs	r3, r3, #3
 8001e46:	e7c1      	b.n	8001dcc <__aeabi_dsub+0x37c>
 8001e48:	4dba      	ldr	r5, [pc, #744]	; (8002134 <__aeabi_dsub+0x6e4>)
 8001e4a:	42aa      	cmp	r2, r5
 8001e4c:	d100      	bne.n	8001e50 <__aeabi_dsub+0x400>
 8001e4e:	e11e      	b.n	800208e <__aeabi_dsub+0x63e>
 8001e50:	2580      	movs	r5, #128	; 0x80
 8001e52:	042d      	lsls	r5, r5, #16
 8001e54:	432b      	orrs	r3, r5
 8001e56:	4664      	mov	r4, ip
 8001e58:	2c38      	cmp	r4, #56	; 0x38
 8001e5a:	dc5d      	bgt.n	8001f18 <__aeabi_dsub+0x4c8>
 8001e5c:	2c1f      	cmp	r4, #31
 8001e5e:	dd00      	ble.n	8001e62 <__aeabi_dsub+0x412>
 8001e60:	e0d0      	b.n	8002004 <__aeabi_dsub+0x5b4>
 8001e62:	2520      	movs	r5, #32
 8001e64:	4667      	mov	r7, ip
 8001e66:	1b2d      	subs	r5, r5, r4
 8001e68:	464e      	mov	r6, r9
 8001e6a:	001c      	movs	r4, r3
 8001e6c:	40fe      	lsrs	r6, r7
 8001e6e:	40ac      	lsls	r4, r5
 8001e70:	4334      	orrs	r4, r6
 8001e72:	464e      	mov	r6, r9
 8001e74:	40ae      	lsls	r6, r5
 8001e76:	0035      	movs	r5, r6
 8001e78:	40fb      	lsrs	r3, r7
 8001e7a:	1e6e      	subs	r6, r5, #1
 8001e7c:	41b5      	sbcs	r5, r6
 8001e7e:	1ac9      	subs	r1, r1, r3
 8001e80:	432c      	orrs	r4, r5
 8001e82:	e04e      	b.n	8001f22 <__aeabi_dsub+0x4d2>
 8001e84:	464a      	mov	r2, r9
 8001e86:	1a14      	subs	r4, r2, r0
 8001e88:	45a1      	cmp	r9, r4
 8001e8a:	4192      	sbcs	r2, r2
 8001e8c:	4252      	negs	r2, r2
 8001e8e:	4690      	mov	r8, r2
 8001e90:	1a5f      	subs	r7, r3, r1
 8001e92:	003a      	movs	r2, r7
 8001e94:	4647      	mov	r7, r8
 8001e96:	1bd2      	subs	r2, r2, r7
 8001e98:	4690      	mov	r8, r2
 8001e9a:	0212      	lsls	r2, r2, #8
 8001e9c:	d500      	bpl.n	8001ea0 <__aeabi_dsub+0x450>
 8001e9e:	e08b      	b.n	8001fb8 <__aeabi_dsub+0x568>
 8001ea0:	4642      	mov	r2, r8
 8001ea2:	4322      	orrs	r2, r4
 8001ea4:	d000      	beq.n	8001ea8 <__aeabi_dsub+0x458>
 8001ea6:	e630      	b.n	8001b0a <__aeabi_dsub+0xba>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	2500      	movs	r5, #0
 8001eac:	e74d      	b.n	8001d4a <__aeabi_dsub+0x2fa>
 8001eae:	464a      	mov	r2, r9
 8001eb0:	0759      	lsls	r1, r3, #29
 8001eb2:	08d2      	lsrs	r2, r2, #3
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	08db      	lsrs	r3, r3, #3
 8001eb8:	e744      	b.n	8001d44 <__aeabi_dsub+0x2f4>
 8001eba:	4642      	mov	r2, r8
 8001ebc:	4b9e      	ldr	r3, [pc, #632]	; (8002138 <__aeabi_dsub+0x6e8>)
 8001ebe:	0861      	lsrs	r1, r4, #1
 8001ec0:	401a      	ands	r2, r3
 8001ec2:	0013      	movs	r3, r2
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	4014      	ands	r4, r2
 8001ec8:	430c      	orrs	r4, r1
 8001eca:	07da      	lsls	r2, r3, #31
 8001ecc:	085b      	lsrs	r3, r3, #1
 8001ece:	4698      	mov	r8, r3
 8001ed0:	4314      	orrs	r4, r2
 8001ed2:	e641      	b.n	8001b58 <__aeabi_dsub+0x108>
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	3e1f      	subs	r6, #31
 8001ed8:	40f2      	lsrs	r2, r6
 8001eda:	0016      	movs	r6, r2
 8001edc:	2920      	cmp	r1, #32
 8001ede:	d003      	beq.n	8001ee8 <__aeabi_dsub+0x498>
 8001ee0:	2240      	movs	r2, #64	; 0x40
 8001ee2:	1a51      	subs	r1, r2, r1
 8001ee4:	408b      	lsls	r3, r1
 8001ee6:	431c      	orrs	r4, r3
 8001ee8:	1e62      	subs	r2, r4, #1
 8001eea:	4194      	sbcs	r4, r2
 8001eec:	2300      	movs	r3, #0
 8001eee:	4334      	orrs	r4, r6
 8001ef0:	4698      	mov	r8, r3
 8001ef2:	2600      	movs	r6, #0
 8001ef4:	e71d      	b.n	8001d32 <__aeabi_dsub+0x2e2>
 8001ef6:	000c      	movs	r4, r1
 8001ef8:	3a20      	subs	r2, #32
 8001efa:	40d4      	lsrs	r4, r2
 8001efc:	0022      	movs	r2, r4
 8001efe:	4664      	mov	r4, ip
 8001f00:	2c20      	cmp	r4, #32
 8001f02:	d004      	beq.n	8001f0e <__aeabi_dsub+0x4be>
 8001f04:	2740      	movs	r7, #64	; 0x40
 8001f06:	1b3f      	subs	r7, r7, r4
 8001f08:	40b9      	lsls	r1, r7
 8001f0a:	4308      	orrs	r0, r1
 8001f0c:	4680      	mov	r8, r0
 8001f0e:	4644      	mov	r4, r8
 8001f10:	1e61      	subs	r1, r4, #1
 8001f12:	418c      	sbcs	r4, r1
 8001f14:	4322      	orrs	r2, r4
 8001f16:	e5e9      	b.n	8001aec <__aeabi_dsub+0x9c>
 8001f18:	464c      	mov	r4, r9
 8001f1a:	4323      	orrs	r3, r4
 8001f1c:	001c      	movs	r4, r3
 8001f1e:	1e63      	subs	r3, r4, #1
 8001f20:	419c      	sbcs	r4, r3
 8001f22:	1b04      	subs	r4, r0, r4
 8001f24:	42a0      	cmp	r0, r4
 8001f26:	419b      	sbcs	r3, r3
 8001f28:	425b      	negs	r3, r3
 8001f2a:	1acb      	subs	r3, r1, r3
 8001f2c:	4698      	mov	r8, r3
 8001f2e:	465d      	mov	r5, fp
 8001f30:	0016      	movs	r6, r2
 8001f32:	e5e2      	b.n	8001afa <__aeabi_dsub+0xaa>
 8001f34:	464e      	mov	r6, r9
 8001f36:	431e      	orrs	r6, r3
 8001f38:	d100      	bne.n	8001f3c <__aeabi_dsub+0x4ec>
 8001f3a:	e0ae      	b.n	800209a <__aeabi_dsub+0x64a>
 8001f3c:	1e66      	subs	r6, r4, #1
 8001f3e:	2c01      	cmp	r4, #1
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dsub+0x4f4>
 8001f42:	e0fd      	b.n	8002140 <__aeabi_dsub+0x6f0>
 8001f44:	4f7b      	ldr	r7, [pc, #492]	; (8002134 <__aeabi_dsub+0x6e4>)
 8001f46:	42bc      	cmp	r4, r7
 8001f48:	d100      	bne.n	8001f4c <__aeabi_dsub+0x4fc>
 8001f4a:	e107      	b.n	800215c <__aeabi_dsub+0x70c>
 8001f4c:	46b4      	mov	ip, r6
 8001f4e:	e69b      	b.n	8001c88 <__aeabi_dsub+0x238>
 8001f50:	4664      	mov	r4, ip
 8001f52:	2220      	movs	r2, #32
 8001f54:	1b12      	subs	r2, r2, r4
 8001f56:	000c      	movs	r4, r1
 8001f58:	4094      	lsls	r4, r2
 8001f5a:	0007      	movs	r7, r0
 8001f5c:	4090      	lsls	r0, r2
 8001f5e:	46a0      	mov	r8, r4
 8001f60:	4664      	mov	r4, ip
 8001f62:	1e42      	subs	r2, r0, #1
 8001f64:	4190      	sbcs	r0, r2
 8001f66:	4662      	mov	r2, ip
 8001f68:	40e7      	lsrs	r7, r4
 8001f6a:	4644      	mov	r4, r8
 8001f6c:	40d1      	lsrs	r1, r2
 8001f6e:	433c      	orrs	r4, r7
 8001f70:	4304      	orrs	r4, r0
 8001f72:	185b      	adds	r3, r3, r1
 8001f74:	e6f3      	b.n	8001d5e <__aeabi_dsub+0x30e>
 8001f76:	4c6f      	ldr	r4, [pc, #444]	; (8002134 <__aeabi_dsub+0x6e4>)
 8001f78:	42a2      	cmp	r2, r4
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_dsub+0x52e>
 8001f7c:	e0d5      	b.n	800212a <__aeabi_dsub+0x6da>
 8001f7e:	4448      	add	r0, r9
 8001f80:	185b      	adds	r3, r3, r1
 8001f82:	4548      	cmp	r0, r9
 8001f84:	4189      	sbcs	r1, r1
 8001f86:	4249      	negs	r1, r1
 8001f88:	185b      	adds	r3, r3, r1
 8001f8a:	07dc      	lsls	r4, r3, #31
 8001f8c:	0840      	lsrs	r0, r0, #1
 8001f8e:	085b      	lsrs	r3, r3, #1
 8001f90:	4698      	mov	r8, r3
 8001f92:	0016      	movs	r6, r2
 8001f94:	4304      	orrs	r4, r0
 8001f96:	e6cc      	b.n	8001d32 <__aeabi_dsub+0x2e2>
 8001f98:	2a00      	cmp	r2, #0
 8001f9a:	d000      	beq.n	8001f9e <__aeabi_dsub+0x54e>
 8001f9c:	e082      	b.n	80020a4 <__aeabi_dsub+0x654>
 8001f9e:	000a      	movs	r2, r1
 8001fa0:	4302      	orrs	r2, r0
 8001fa2:	d140      	bne.n	8002026 <__aeabi_dsub+0x5d6>
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	2500      	movs	r5, #0
 8001fa8:	031b      	lsls	r3, r3, #12
 8001faa:	e713      	b.n	8001dd4 <__aeabi_dsub+0x384>
 8001fac:	074b      	lsls	r3, r1, #29
 8001fae:	08c2      	lsrs	r2, r0, #3
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	465d      	mov	r5, fp
 8001fb4:	08cb      	lsrs	r3, r1, #3
 8001fb6:	e6c5      	b.n	8001d44 <__aeabi_dsub+0x2f4>
 8001fb8:	464a      	mov	r2, r9
 8001fba:	1a84      	subs	r4, r0, r2
 8001fbc:	42a0      	cmp	r0, r4
 8001fbe:	4192      	sbcs	r2, r2
 8001fc0:	1acb      	subs	r3, r1, r3
 8001fc2:	4252      	negs	r2, r2
 8001fc4:	1a9b      	subs	r3, r3, r2
 8001fc6:	4698      	mov	r8, r3
 8001fc8:	465d      	mov	r5, fp
 8001fca:	e59e      	b.n	8001b0a <__aeabi_dsub+0xba>
 8001fcc:	464a      	mov	r2, r9
 8001fce:	0759      	lsls	r1, r3, #29
 8001fd0:	08d2      	lsrs	r2, r2, #3
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	08db      	lsrs	r3, r3, #3
 8001fd6:	e6f9      	b.n	8001dcc <__aeabi_dsub+0x37c>
 8001fd8:	464a      	mov	r2, r9
 8001fda:	1a14      	subs	r4, r2, r0
 8001fdc:	45a1      	cmp	r9, r4
 8001fde:	4192      	sbcs	r2, r2
 8001fe0:	1a5b      	subs	r3, r3, r1
 8001fe2:	4252      	negs	r2, r2
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	4698      	mov	r8, r3
 8001fe8:	2601      	movs	r6, #1
 8001fea:	e586      	b.n	8001afa <__aeabi_dsub+0xaa>
 8001fec:	464a      	mov	r2, r9
 8001fee:	0759      	lsls	r1, r3, #29
 8001ff0:	08d2      	lsrs	r2, r2, #3
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	08db      	lsrs	r3, r3, #3
 8001ff6:	e6a5      	b.n	8001d44 <__aeabi_dsub+0x2f4>
 8001ff8:	464c      	mov	r4, r9
 8001ffa:	4323      	orrs	r3, r4
 8001ffc:	001c      	movs	r4, r3
 8001ffe:	1e63      	subs	r3, r4, #1
 8002000:	419c      	sbcs	r4, r3
 8002002:	e65b      	b.n	8001cbc <__aeabi_dsub+0x26c>
 8002004:	4665      	mov	r5, ip
 8002006:	001e      	movs	r6, r3
 8002008:	3d20      	subs	r5, #32
 800200a:	40ee      	lsrs	r6, r5
 800200c:	2c20      	cmp	r4, #32
 800200e:	d005      	beq.n	800201c <__aeabi_dsub+0x5cc>
 8002010:	2540      	movs	r5, #64	; 0x40
 8002012:	1b2d      	subs	r5, r5, r4
 8002014:	40ab      	lsls	r3, r5
 8002016:	464c      	mov	r4, r9
 8002018:	431c      	orrs	r4, r3
 800201a:	46a2      	mov	sl, r4
 800201c:	4654      	mov	r4, sl
 800201e:	1e63      	subs	r3, r4, #1
 8002020:	419c      	sbcs	r4, r3
 8002022:	4334      	orrs	r4, r6
 8002024:	e77d      	b.n	8001f22 <__aeabi_dsub+0x4d2>
 8002026:	074b      	lsls	r3, r1, #29
 8002028:	08c2      	lsrs	r2, r0, #3
 800202a:	431a      	orrs	r2, r3
 800202c:	465d      	mov	r5, fp
 800202e:	08cb      	lsrs	r3, r1, #3
 8002030:	e6cc      	b.n	8001dcc <__aeabi_dsub+0x37c>
 8002032:	000a      	movs	r2, r1
 8002034:	4302      	orrs	r2, r0
 8002036:	d100      	bne.n	800203a <__aeabi_dsub+0x5ea>
 8002038:	e736      	b.n	8001ea8 <__aeabi_dsub+0x458>
 800203a:	074b      	lsls	r3, r1, #29
 800203c:	08c2      	lsrs	r2, r0, #3
 800203e:	431a      	orrs	r2, r3
 8002040:	465d      	mov	r5, fp
 8002042:	08cb      	lsrs	r3, r1, #3
 8002044:	e681      	b.n	8001d4a <__aeabi_dsub+0x2fa>
 8002046:	464a      	mov	r2, r9
 8002048:	1a84      	subs	r4, r0, r2
 800204a:	42a0      	cmp	r0, r4
 800204c:	4192      	sbcs	r2, r2
 800204e:	1acb      	subs	r3, r1, r3
 8002050:	4252      	negs	r2, r2
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	4698      	mov	r8, r3
 8002056:	465d      	mov	r5, fp
 8002058:	2601      	movs	r6, #1
 800205a:	e54e      	b.n	8001afa <__aeabi_dsub+0xaa>
 800205c:	074b      	lsls	r3, r1, #29
 800205e:	08c2      	lsrs	r2, r0, #3
 8002060:	431a      	orrs	r2, r3
 8002062:	08cb      	lsrs	r3, r1, #3
 8002064:	e6b2      	b.n	8001dcc <__aeabi_dsub+0x37c>
 8002066:	464a      	mov	r2, r9
 8002068:	1a14      	subs	r4, r2, r0
 800206a:	45a1      	cmp	r9, r4
 800206c:	4192      	sbcs	r2, r2
 800206e:	1a5f      	subs	r7, r3, r1
 8002070:	4252      	negs	r2, r2
 8002072:	1aba      	subs	r2, r7, r2
 8002074:	4690      	mov	r8, r2
 8002076:	0212      	lsls	r2, r2, #8
 8002078:	d56b      	bpl.n	8002152 <__aeabi_dsub+0x702>
 800207a:	464a      	mov	r2, r9
 800207c:	1a84      	subs	r4, r0, r2
 800207e:	42a0      	cmp	r0, r4
 8002080:	4192      	sbcs	r2, r2
 8002082:	1acb      	subs	r3, r1, r3
 8002084:	4252      	negs	r2, r2
 8002086:	1a9b      	subs	r3, r3, r2
 8002088:	4698      	mov	r8, r3
 800208a:	465d      	mov	r5, fp
 800208c:	e564      	b.n	8001b58 <__aeabi_dsub+0x108>
 800208e:	074b      	lsls	r3, r1, #29
 8002090:	08c2      	lsrs	r2, r0, #3
 8002092:	431a      	orrs	r2, r3
 8002094:	465d      	mov	r5, fp
 8002096:	08cb      	lsrs	r3, r1, #3
 8002098:	e698      	b.n	8001dcc <__aeabi_dsub+0x37c>
 800209a:	074b      	lsls	r3, r1, #29
 800209c:	08c2      	lsrs	r2, r0, #3
 800209e:	431a      	orrs	r2, r3
 80020a0:	08cb      	lsrs	r3, r1, #3
 80020a2:	e64f      	b.n	8001d44 <__aeabi_dsub+0x2f4>
 80020a4:	000a      	movs	r2, r1
 80020a6:	4302      	orrs	r2, r0
 80020a8:	d090      	beq.n	8001fcc <__aeabi_dsub+0x57c>
 80020aa:	464a      	mov	r2, r9
 80020ac:	075c      	lsls	r4, r3, #29
 80020ae:	08d2      	lsrs	r2, r2, #3
 80020b0:	4314      	orrs	r4, r2
 80020b2:	2280      	movs	r2, #128	; 0x80
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	0312      	lsls	r2, r2, #12
 80020b8:	4213      	tst	r3, r2
 80020ba:	d008      	beq.n	80020ce <__aeabi_dsub+0x67e>
 80020bc:	08ce      	lsrs	r6, r1, #3
 80020be:	4216      	tst	r6, r2
 80020c0:	d105      	bne.n	80020ce <__aeabi_dsub+0x67e>
 80020c2:	08c0      	lsrs	r0, r0, #3
 80020c4:	0749      	lsls	r1, r1, #29
 80020c6:	4308      	orrs	r0, r1
 80020c8:	0004      	movs	r4, r0
 80020ca:	465d      	mov	r5, fp
 80020cc:	0033      	movs	r3, r6
 80020ce:	0f61      	lsrs	r1, r4, #29
 80020d0:	00e2      	lsls	r2, r4, #3
 80020d2:	0749      	lsls	r1, r1, #29
 80020d4:	08d2      	lsrs	r2, r2, #3
 80020d6:	430a      	orrs	r2, r1
 80020d8:	e678      	b.n	8001dcc <__aeabi_dsub+0x37c>
 80020da:	074b      	lsls	r3, r1, #29
 80020dc:	08c2      	lsrs	r2, r0, #3
 80020de:	431a      	orrs	r2, r3
 80020e0:	08cb      	lsrs	r3, r1, #3
 80020e2:	e632      	b.n	8001d4a <__aeabi_dsub+0x2fa>
 80020e4:	4448      	add	r0, r9
 80020e6:	185b      	adds	r3, r3, r1
 80020e8:	4548      	cmp	r0, r9
 80020ea:	4192      	sbcs	r2, r2
 80020ec:	4698      	mov	r8, r3
 80020ee:	4252      	negs	r2, r2
 80020f0:	4490      	add	r8, r2
 80020f2:	4643      	mov	r3, r8
 80020f4:	0004      	movs	r4, r0
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	d400      	bmi.n	80020fc <__aeabi_dsub+0x6ac>
 80020fa:	e61a      	b.n	8001d32 <__aeabi_dsub+0x2e2>
 80020fc:	4642      	mov	r2, r8
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <__aeabi_dsub+0x6e8>)
 8002100:	2601      	movs	r6, #1
 8002102:	401a      	ands	r2, r3
 8002104:	4690      	mov	r8, r2
 8002106:	e614      	b.n	8001d32 <__aeabi_dsub+0x2e2>
 8002108:	4666      	mov	r6, ip
 800210a:	001f      	movs	r7, r3
 800210c:	3e20      	subs	r6, #32
 800210e:	40f7      	lsrs	r7, r6
 8002110:	2c20      	cmp	r4, #32
 8002112:	d005      	beq.n	8002120 <__aeabi_dsub+0x6d0>
 8002114:	2640      	movs	r6, #64	; 0x40
 8002116:	1b36      	subs	r6, r6, r4
 8002118:	40b3      	lsls	r3, r6
 800211a:	464c      	mov	r4, r9
 800211c:	431c      	orrs	r4, r3
 800211e:	46a2      	mov	sl, r4
 8002120:	4654      	mov	r4, sl
 8002122:	1e63      	subs	r3, r4, #1
 8002124:	419c      	sbcs	r4, r3
 8002126:	433c      	orrs	r4, r7
 8002128:	e5c8      	b.n	8001cbc <__aeabi_dsub+0x26c>
 800212a:	0011      	movs	r1, r2
 800212c:	2300      	movs	r3, #0
 800212e:	2200      	movs	r2, #0
 8002130:	e532      	b.n	8001b98 <__aeabi_dsub+0x148>
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	000007ff 	.word	0x000007ff
 8002138:	ff7fffff 	.word	0xff7fffff
 800213c:	000007fe 	.word	0x000007fe
 8002140:	464a      	mov	r2, r9
 8002142:	1814      	adds	r4, r2, r0
 8002144:	4284      	cmp	r4, r0
 8002146:	4192      	sbcs	r2, r2
 8002148:	185b      	adds	r3, r3, r1
 800214a:	4698      	mov	r8, r3
 800214c:	4252      	negs	r2, r2
 800214e:	4490      	add	r8, r2
 8002150:	e5e9      	b.n	8001d26 <__aeabi_dsub+0x2d6>
 8002152:	4642      	mov	r2, r8
 8002154:	4322      	orrs	r2, r4
 8002156:	d100      	bne.n	800215a <__aeabi_dsub+0x70a>
 8002158:	e6a6      	b.n	8001ea8 <__aeabi_dsub+0x458>
 800215a:	e5ea      	b.n	8001d32 <__aeabi_dsub+0x2e2>
 800215c:	074b      	lsls	r3, r1, #29
 800215e:	08c2      	lsrs	r2, r0, #3
 8002160:	431a      	orrs	r2, r3
 8002162:	08cb      	lsrs	r3, r1, #3
 8002164:	e632      	b.n	8001dcc <__aeabi_dsub+0x37c>
 8002166:	2200      	movs	r2, #0
 8002168:	4901      	ldr	r1, [pc, #4]	; (8002170 <__aeabi_dsub+0x720>)
 800216a:	0013      	movs	r3, r2
 800216c:	e514      	b.n	8001b98 <__aeabi_dsub+0x148>
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	000007ff 	.word	0x000007ff

08002174 <__aeabi_dcmpun>:
 8002174:	b570      	push	{r4, r5, r6, lr}
 8002176:	0005      	movs	r5, r0
 8002178:	480c      	ldr	r0, [pc, #48]	; (80021ac <__aeabi_dcmpun+0x38>)
 800217a:	030c      	lsls	r4, r1, #12
 800217c:	0016      	movs	r6, r2
 800217e:	0049      	lsls	r1, r1, #1
 8002180:	031a      	lsls	r2, r3, #12
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	0b24      	lsrs	r4, r4, #12
 8002186:	0d49      	lsrs	r1, r1, #21
 8002188:	0b12      	lsrs	r2, r2, #12
 800218a:	0d5b      	lsrs	r3, r3, #21
 800218c:	4281      	cmp	r1, r0
 800218e:	d008      	beq.n	80021a2 <__aeabi_dcmpun+0x2e>
 8002190:	4906      	ldr	r1, [pc, #24]	; (80021ac <__aeabi_dcmpun+0x38>)
 8002192:	2000      	movs	r0, #0
 8002194:	428b      	cmp	r3, r1
 8002196:	d103      	bne.n	80021a0 <__aeabi_dcmpun+0x2c>
 8002198:	4332      	orrs	r2, r6
 800219a:	0010      	movs	r0, r2
 800219c:	1e42      	subs	r2, r0, #1
 800219e:	4190      	sbcs	r0, r2
 80021a0:	bd70      	pop	{r4, r5, r6, pc}
 80021a2:	2001      	movs	r0, #1
 80021a4:	432c      	orrs	r4, r5
 80021a6:	d1fb      	bne.n	80021a0 <__aeabi_dcmpun+0x2c>
 80021a8:	e7f2      	b.n	8002190 <__aeabi_dcmpun+0x1c>
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	000007ff 	.word	0x000007ff

080021b0 <__aeabi_d2iz>:
 80021b0:	000a      	movs	r2, r1
 80021b2:	b530      	push	{r4, r5, lr}
 80021b4:	4c13      	ldr	r4, [pc, #76]	; (8002204 <__aeabi_d2iz+0x54>)
 80021b6:	0053      	lsls	r3, r2, #1
 80021b8:	0309      	lsls	r1, r1, #12
 80021ba:	0005      	movs	r5, r0
 80021bc:	0b09      	lsrs	r1, r1, #12
 80021be:	2000      	movs	r0, #0
 80021c0:	0d5b      	lsrs	r3, r3, #21
 80021c2:	0fd2      	lsrs	r2, r2, #31
 80021c4:	42a3      	cmp	r3, r4
 80021c6:	dd04      	ble.n	80021d2 <__aeabi_d2iz+0x22>
 80021c8:	480f      	ldr	r0, [pc, #60]	; (8002208 <__aeabi_d2iz+0x58>)
 80021ca:	4283      	cmp	r3, r0
 80021cc:	dd02      	ble.n	80021d4 <__aeabi_d2iz+0x24>
 80021ce:	4b0f      	ldr	r3, [pc, #60]	; (800220c <__aeabi_d2iz+0x5c>)
 80021d0:	18d0      	adds	r0, r2, r3
 80021d2:	bd30      	pop	{r4, r5, pc}
 80021d4:	2080      	movs	r0, #128	; 0x80
 80021d6:	0340      	lsls	r0, r0, #13
 80021d8:	4301      	orrs	r1, r0
 80021da:	480d      	ldr	r0, [pc, #52]	; (8002210 <__aeabi_d2iz+0x60>)
 80021dc:	1ac0      	subs	r0, r0, r3
 80021de:	281f      	cmp	r0, #31
 80021e0:	dd08      	ble.n	80021f4 <__aeabi_d2iz+0x44>
 80021e2:	480c      	ldr	r0, [pc, #48]	; (8002214 <__aeabi_d2iz+0x64>)
 80021e4:	1ac3      	subs	r3, r0, r3
 80021e6:	40d9      	lsrs	r1, r3
 80021e8:	000b      	movs	r3, r1
 80021ea:	4258      	negs	r0, r3
 80021ec:	2a00      	cmp	r2, #0
 80021ee:	d1f0      	bne.n	80021d2 <__aeabi_d2iz+0x22>
 80021f0:	0018      	movs	r0, r3
 80021f2:	e7ee      	b.n	80021d2 <__aeabi_d2iz+0x22>
 80021f4:	4c08      	ldr	r4, [pc, #32]	; (8002218 <__aeabi_d2iz+0x68>)
 80021f6:	40c5      	lsrs	r5, r0
 80021f8:	46a4      	mov	ip, r4
 80021fa:	4463      	add	r3, ip
 80021fc:	4099      	lsls	r1, r3
 80021fe:	000b      	movs	r3, r1
 8002200:	432b      	orrs	r3, r5
 8002202:	e7f2      	b.n	80021ea <__aeabi_d2iz+0x3a>
 8002204:	000003fe 	.word	0x000003fe
 8002208:	0000041d 	.word	0x0000041d
 800220c:	7fffffff 	.word	0x7fffffff
 8002210:	00000433 	.word	0x00000433
 8002214:	00000413 	.word	0x00000413
 8002218:	fffffbed 	.word	0xfffffbed

0800221c <__aeabi_i2d>:
 800221c:	b570      	push	{r4, r5, r6, lr}
 800221e:	2800      	cmp	r0, #0
 8002220:	d016      	beq.n	8002250 <__aeabi_i2d+0x34>
 8002222:	17c3      	asrs	r3, r0, #31
 8002224:	18c5      	adds	r5, r0, r3
 8002226:	405d      	eors	r5, r3
 8002228:	0fc4      	lsrs	r4, r0, #31
 800222a:	0028      	movs	r0, r5
 800222c:	f000 f91c 	bl	8002468 <__clzsi2>
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <__aeabi_i2d+0x5c>)
 8002232:	1a12      	subs	r2, r2, r0
 8002234:	280a      	cmp	r0, #10
 8002236:	dc16      	bgt.n	8002266 <__aeabi_i2d+0x4a>
 8002238:	0003      	movs	r3, r0
 800223a:	002e      	movs	r6, r5
 800223c:	3315      	adds	r3, #21
 800223e:	409e      	lsls	r6, r3
 8002240:	230b      	movs	r3, #11
 8002242:	1a18      	subs	r0, r3, r0
 8002244:	40c5      	lsrs	r5, r0
 8002246:	0553      	lsls	r3, r2, #21
 8002248:	032d      	lsls	r5, r5, #12
 800224a:	0b2d      	lsrs	r5, r5, #12
 800224c:	0d5b      	lsrs	r3, r3, #21
 800224e:	e003      	b.n	8002258 <__aeabi_i2d+0x3c>
 8002250:	2400      	movs	r4, #0
 8002252:	2300      	movs	r3, #0
 8002254:	2500      	movs	r5, #0
 8002256:	2600      	movs	r6, #0
 8002258:	051b      	lsls	r3, r3, #20
 800225a:	432b      	orrs	r3, r5
 800225c:	07e4      	lsls	r4, r4, #31
 800225e:	4323      	orrs	r3, r4
 8002260:	0030      	movs	r0, r6
 8002262:	0019      	movs	r1, r3
 8002264:	bd70      	pop	{r4, r5, r6, pc}
 8002266:	380b      	subs	r0, #11
 8002268:	4085      	lsls	r5, r0
 800226a:	0553      	lsls	r3, r2, #21
 800226c:	032d      	lsls	r5, r5, #12
 800226e:	2600      	movs	r6, #0
 8002270:	0b2d      	lsrs	r5, r5, #12
 8002272:	0d5b      	lsrs	r3, r3, #21
 8002274:	e7f0      	b.n	8002258 <__aeabi_i2d+0x3c>
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	0000041e 	.word	0x0000041e

0800227c <__aeabi_ui2d>:
 800227c:	b510      	push	{r4, lr}
 800227e:	1e04      	subs	r4, r0, #0
 8002280:	d010      	beq.n	80022a4 <__aeabi_ui2d+0x28>
 8002282:	f000 f8f1 	bl	8002468 <__clzsi2>
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <__aeabi_ui2d+0x48>)
 8002288:	1a1b      	subs	r3, r3, r0
 800228a:	280a      	cmp	r0, #10
 800228c:	dc11      	bgt.n	80022b2 <__aeabi_ui2d+0x36>
 800228e:	220b      	movs	r2, #11
 8002290:	0021      	movs	r1, r4
 8002292:	1a12      	subs	r2, r2, r0
 8002294:	40d1      	lsrs	r1, r2
 8002296:	3015      	adds	r0, #21
 8002298:	030a      	lsls	r2, r1, #12
 800229a:	055b      	lsls	r3, r3, #21
 800229c:	4084      	lsls	r4, r0
 800229e:	0b12      	lsrs	r2, r2, #12
 80022a0:	0d5b      	lsrs	r3, r3, #21
 80022a2:	e001      	b.n	80022a8 <__aeabi_ui2d+0x2c>
 80022a4:	2300      	movs	r3, #0
 80022a6:	2200      	movs	r2, #0
 80022a8:	051b      	lsls	r3, r3, #20
 80022aa:	4313      	orrs	r3, r2
 80022ac:	0020      	movs	r0, r4
 80022ae:	0019      	movs	r1, r3
 80022b0:	bd10      	pop	{r4, pc}
 80022b2:	0022      	movs	r2, r4
 80022b4:	380b      	subs	r0, #11
 80022b6:	4082      	lsls	r2, r0
 80022b8:	055b      	lsls	r3, r3, #21
 80022ba:	0312      	lsls	r2, r2, #12
 80022bc:	2400      	movs	r4, #0
 80022be:	0b12      	lsrs	r2, r2, #12
 80022c0:	0d5b      	lsrs	r3, r3, #21
 80022c2:	e7f1      	b.n	80022a8 <__aeabi_ui2d+0x2c>
 80022c4:	0000041e 	.word	0x0000041e

080022c8 <__aeabi_f2d>:
 80022c8:	b570      	push	{r4, r5, r6, lr}
 80022ca:	0043      	lsls	r3, r0, #1
 80022cc:	0246      	lsls	r6, r0, #9
 80022ce:	0fc4      	lsrs	r4, r0, #31
 80022d0:	20fe      	movs	r0, #254	; 0xfe
 80022d2:	0e1b      	lsrs	r3, r3, #24
 80022d4:	1c59      	adds	r1, r3, #1
 80022d6:	0a75      	lsrs	r5, r6, #9
 80022d8:	4208      	tst	r0, r1
 80022da:	d00c      	beq.n	80022f6 <__aeabi_f2d+0x2e>
 80022dc:	22e0      	movs	r2, #224	; 0xe0
 80022de:	0092      	lsls	r2, r2, #2
 80022e0:	4694      	mov	ip, r2
 80022e2:	076d      	lsls	r5, r5, #29
 80022e4:	0b36      	lsrs	r6, r6, #12
 80022e6:	4463      	add	r3, ip
 80022e8:	051b      	lsls	r3, r3, #20
 80022ea:	4333      	orrs	r3, r6
 80022ec:	07e4      	lsls	r4, r4, #31
 80022ee:	4323      	orrs	r3, r4
 80022f0:	0028      	movs	r0, r5
 80022f2:	0019      	movs	r1, r3
 80022f4:	bd70      	pop	{r4, r5, r6, pc}
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d114      	bne.n	8002324 <__aeabi_f2d+0x5c>
 80022fa:	2d00      	cmp	r5, #0
 80022fc:	d01b      	beq.n	8002336 <__aeabi_f2d+0x6e>
 80022fe:	0028      	movs	r0, r5
 8002300:	f000 f8b2 	bl	8002468 <__clzsi2>
 8002304:	280a      	cmp	r0, #10
 8002306:	dc1c      	bgt.n	8002342 <__aeabi_f2d+0x7a>
 8002308:	230b      	movs	r3, #11
 800230a:	002a      	movs	r2, r5
 800230c:	1a1b      	subs	r3, r3, r0
 800230e:	40da      	lsrs	r2, r3
 8002310:	0003      	movs	r3, r0
 8002312:	3315      	adds	r3, #21
 8002314:	409d      	lsls	r5, r3
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <__aeabi_f2d+0x88>)
 8002318:	0312      	lsls	r2, r2, #12
 800231a:	1a1b      	subs	r3, r3, r0
 800231c:	055b      	lsls	r3, r3, #21
 800231e:	0b16      	lsrs	r6, r2, #12
 8002320:	0d5b      	lsrs	r3, r3, #21
 8002322:	e7e1      	b.n	80022e8 <__aeabi_f2d+0x20>
 8002324:	2d00      	cmp	r5, #0
 8002326:	d009      	beq.n	800233c <__aeabi_f2d+0x74>
 8002328:	0b32      	lsrs	r2, r6, #12
 800232a:	2680      	movs	r6, #128	; 0x80
 800232c:	0336      	lsls	r6, r6, #12
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <__aeabi_f2d+0x8c>)
 8002330:	076d      	lsls	r5, r5, #29
 8002332:	4316      	orrs	r6, r2
 8002334:	e7d8      	b.n	80022e8 <__aeabi_f2d+0x20>
 8002336:	2300      	movs	r3, #0
 8002338:	2600      	movs	r6, #0
 800233a:	e7d5      	b.n	80022e8 <__aeabi_f2d+0x20>
 800233c:	2600      	movs	r6, #0
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <__aeabi_f2d+0x8c>)
 8002340:	e7d2      	b.n	80022e8 <__aeabi_f2d+0x20>
 8002342:	0003      	movs	r3, r0
 8002344:	002a      	movs	r2, r5
 8002346:	3b0b      	subs	r3, #11
 8002348:	409a      	lsls	r2, r3
 800234a:	2500      	movs	r5, #0
 800234c:	e7e3      	b.n	8002316 <__aeabi_f2d+0x4e>
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	00000389 	.word	0x00000389
 8002354:	000007ff 	.word	0x000007ff

08002358 <__aeabi_d2f>:
 8002358:	0002      	movs	r2, r0
 800235a:	004b      	lsls	r3, r1, #1
 800235c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235e:	0308      	lsls	r0, r1, #12
 8002360:	0d5b      	lsrs	r3, r3, #21
 8002362:	4e3d      	ldr	r6, [pc, #244]	; (8002458 <__aeabi_d2f+0x100>)
 8002364:	0fcc      	lsrs	r4, r1, #31
 8002366:	0a40      	lsrs	r0, r0, #9
 8002368:	0f51      	lsrs	r1, r2, #29
 800236a:	1c5f      	adds	r7, r3, #1
 800236c:	4308      	orrs	r0, r1
 800236e:	00d5      	lsls	r5, r2, #3
 8002370:	4237      	tst	r7, r6
 8002372:	d00a      	beq.n	800238a <__aeabi_d2f+0x32>
 8002374:	4939      	ldr	r1, [pc, #228]	; (800245c <__aeabi_d2f+0x104>)
 8002376:	185e      	adds	r6, r3, r1
 8002378:	2efe      	cmp	r6, #254	; 0xfe
 800237a:	dd16      	ble.n	80023aa <__aeabi_d2f+0x52>
 800237c:	23ff      	movs	r3, #255	; 0xff
 800237e:	2100      	movs	r1, #0
 8002380:	05db      	lsls	r3, r3, #23
 8002382:	430b      	orrs	r3, r1
 8002384:	07e0      	lsls	r0, r4, #31
 8002386:	4318      	orrs	r0, r3
 8002388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <__aeabi_d2f+0x44>
 800238e:	4328      	orrs	r0, r5
 8002390:	d027      	beq.n	80023e2 <__aeabi_d2f+0x8a>
 8002392:	2105      	movs	r1, #5
 8002394:	0189      	lsls	r1, r1, #6
 8002396:	0a49      	lsrs	r1, r1, #9
 8002398:	b2db      	uxtb	r3, r3
 800239a:	e7f1      	b.n	8002380 <__aeabi_d2f+0x28>
 800239c:	4305      	orrs	r5, r0
 800239e:	d0ed      	beq.n	800237c <__aeabi_d2f+0x24>
 80023a0:	2180      	movs	r1, #128	; 0x80
 80023a2:	03c9      	lsls	r1, r1, #15
 80023a4:	23ff      	movs	r3, #255	; 0xff
 80023a6:	4301      	orrs	r1, r0
 80023a8:	e7ea      	b.n	8002380 <__aeabi_d2f+0x28>
 80023aa:	2e00      	cmp	r6, #0
 80023ac:	dd1c      	ble.n	80023e8 <__aeabi_d2f+0x90>
 80023ae:	0192      	lsls	r2, r2, #6
 80023b0:	0011      	movs	r1, r2
 80023b2:	1e4a      	subs	r2, r1, #1
 80023b4:	4191      	sbcs	r1, r2
 80023b6:	00c0      	lsls	r0, r0, #3
 80023b8:	0f6d      	lsrs	r5, r5, #29
 80023ba:	4301      	orrs	r1, r0
 80023bc:	4329      	orrs	r1, r5
 80023be:	074b      	lsls	r3, r1, #29
 80023c0:	d048      	beq.n	8002454 <__aeabi_d2f+0xfc>
 80023c2:	230f      	movs	r3, #15
 80023c4:	400b      	ands	r3, r1
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d000      	beq.n	80023cc <__aeabi_d2f+0x74>
 80023ca:	3104      	adds	r1, #4
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	04db      	lsls	r3, r3, #19
 80023d0:	400b      	ands	r3, r1
 80023d2:	d03f      	beq.n	8002454 <__aeabi_d2f+0xfc>
 80023d4:	1c72      	adds	r2, r6, #1
 80023d6:	2efe      	cmp	r6, #254	; 0xfe
 80023d8:	d0d0      	beq.n	800237c <__aeabi_d2f+0x24>
 80023da:	0189      	lsls	r1, r1, #6
 80023dc:	0a49      	lsrs	r1, r1, #9
 80023de:	b2d3      	uxtb	r3, r2
 80023e0:	e7ce      	b.n	8002380 <__aeabi_d2f+0x28>
 80023e2:	2300      	movs	r3, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	e7cb      	b.n	8002380 <__aeabi_d2f+0x28>
 80023e8:	0032      	movs	r2, r6
 80023ea:	3217      	adds	r2, #23
 80023ec:	db22      	blt.n	8002434 <__aeabi_d2f+0xdc>
 80023ee:	2180      	movs	r1, #128	; 0x80
 80023f0:	221e      	movs	r2, #30
 80023f2:	0409      	lsls	r1, r1, #16
 80023f4:	4308      	orrs	r0, r1
 80023f6:	1b92      	subs	r2, r2, r6
 80023f8:	2a1f      	cmp	r2, #31
 80023fa:	dd1d      	ble.n	8002438 <__aeabi_d2f+0xe0>
 80023fc:	2102      	movs	r1, #2
 80023fe:	4249      	negs	r1, r1
 8002400:	1b8e      	subs	r6, r1, r6
 8002402:	0001      	movs	r1, r0
 8002404:	40f1      	lsrs	r1, r6
 8002406:	000e      	movs	r6, r1
 8002408:	2a20      	cmp	r2, #32
 800240a:	d004      	beq.n	8002416 <__aeabi_d2f+0xbe>
 800240c:	4a14      	ldr	r2, [pc, #80]	; (8002460 <__aeabi_d2f+0x108>)
 800240e:	4694      	mov	ip, r2
 8002410:	4463      	add	r3, ip
 8002412:	4098      	lsls	r0, r3
 8002414:	4305      	orrs	r5, r0
 8002416:	0029      	movs	r1, r5
 8002418:	1e4d      	subs	r5, r1, #1
 800241a:	41a9      	sbcs	r1, r5
 800241c:	4331      	orrs	r1, r6
 800241e:	2600      	movs	r6, #0
 8002420:	074b      	lsls	r3, r1, #29
 8002422:	d1ce      	bne.n	80023c2 <__aeabi_d2f+0x6a>
 8002424:	2080      	movs	r0, #128	; 0x80
 8002426:	000b      	movs	r3, r1
 8002428:	04c0      	lsls	r0, r0, #19
 800242a:	2201      	movs	r2, #1
 800242c:	4003      	ands	r3, r0
 800242e:	4201      	tst	r1, r0
 8002430:	d1d3      	bne.n	80023da <__aeabi_d2f+0x82>
 8002432:	e7af      	b.n	8002394 <__aeabi_d2f+0x3c>
 8002434:	2300      	movs	r3, #0
 8002436:	e7ac      	b.n	8002392 <__aeabi_d2f+0x3a>
 8002438:	490a      	ldr	r1, [pc, #40]	; (8002464 <__aeabi_d2f+0x10c>)
 800243a:	468c      	mov	ip, r1
 800243c:	0029      	movs	r1, r5
 800243e:	4463      	add	r3, ip
 8002440:	40d1      	lsrs	r1, r2
 8002442:	409d      	lsls	r5, r3
 8002444:	000a      	movs	r2, r1
 8002446:	0029      	movs	r1, r5
 8002448:	4098      	lsls	r0, r3
 800244a:	1e4d      	subs	r5, r1, #1
 800244c:	41a9      	sbcs	r1, r5
 800244e:	4301      	orrs	r1, r0
 8002450:	4311      	orrs	r1, r2
 8002452:	e7e4      	b.n	800241e <__aeabi_d2f+0xc6>
 8002454:	0033      	movs	r3, r6
 8002456:	e79d      	b.n	8002394 <__aeabi_d2f+0x3c>
 8002458:	000007fe 	.word	0x000007fe
 800245c:	fffffc80 	.word	0xfffffc80
 8002460:	fffffca2 	.word	0xfffffca2
 8002464:	fffffc82 	.word	0xfffffc82

08002468 <__clzsi2>:
 8002468:	211c      	movs	r1, #28
 800246a:	2301      	movs	r3, #1
 800246c:	041b      	lsls	r3, r3, #16
 800246e:	4298      	cmp	r0, r3
 8002470:	d301      	bcc.n	8002476 <__clzsi2+0xe>
 8002472:	0c00      	lsrs	r0, r0, #16
 8002474:	3910      	subs	r1, #16
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	4298      	cmp	r0, r3
 800247a:	d301      	bcc.n	8002480 <__clzsi2+0x18>
 800247c:	0a00      	lsrs	r0, r0, #8
 800247e:	3908      	subs	r1, #8
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	4298      	cmp	r0, r3
 8002484:	d301      	bcc.n	800248a <__clzsi2+0x22>
 8002486:	0900      	lsrs	r0, r0, #4
 8002488:	3904      	subs	r1, #4
 800248a:	a202      	add	r2, pc, #8	; (adr r2, 8002494 <__clzsi2+0x2c>)
 800248c:	5c10      	ldrb	r0, [r2, r0]
 800248e:	1840      	adds	r0, r0, r1
 8002490:	4770      	bx	lr
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	02020304 	.word	0x02020304
 8002498:	01010101 	.word	0x01010101
	...

080024a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024a8:	f000 fcbe 	bl	8002e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024ac:	f000 f832 	bl	8002514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024b0:	f000 f942 	bl	8002738 <MX_GPIO_Init>
  MX_TIM1_Init();
 80024b4:	f000 f890 	bl	80025d8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80024b8:	f000 f90e 	bl	80026d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80024bc:	4b11      	ldr	r3, [pc, #68]	; (8002504 <main+0x60>)
 80024be:	2100      	movs	r1, #0
 80024c0:	0018      	movs	r0, r3
 80024c2:	f001 fdb3 	bl	800402c <HAL_TIM_IC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Ultrasonic_Read();
 80024c6:	f000 f9d7 	bl	8002878 <Ultrasonic_Read>
	  if(Distance < 10)
 80024ca:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <main+0x64>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	490f      	ldr	r1, [pc, #60]	; (800250c <main+0x68>)
 80024d0:	1c18      	adds	r0, r3, #0
 80024d2:	f7fd fffb 	bl	80004cc <__aeabi_fcmplt>
 80024d6:	1e03      	subs	r3, r0, #0
 80024d8:	d007      	beq.n	80024ea <main+0x46>
	  {
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	480c      	ldr	r0, [pc, #48]	; (8002510 <main+0x6c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	0019      	movs	r1, r3
 80024e4:	f000 ff76 	bl	80033d4 <HAL_GPIO_WritePin>
 80024e8:	e006      	b.n	80024f8 <main+0x54>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4808      	ldr	r0, [pc, #32]	; (8002510 <main+0x6c>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	0019      	movs	r1, r3
 80024f4:	f000 ff6e 	bl	80033d4 <HAL_GPIO_WritePin>
	  }
	  Send_Data();
 80024f8:	f000 fa90 	bl	8002a1c <Send_Data>
	  HAL_Delay(200);
 80024fc:	20c8      	movs	r0, #200	; 0xc8
 80024fe:	f000 fcf7 	bl	8002ef0 <HAL_Delay>
	  Ultrasonic_Read();
 8002502:	e7e0      	b.n	80024c6 <main+0x22>
 8002504:	200002b8 	.word	0x200002b8
 8002508:	20000208 	.word	0x20000208
 800250c:	41200000 	.word	0x41200000
 8002510:	48000800 	.word	0x48000800

08002514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002514:	b590      	push	{r4, r7, lr}
 8002516:	b097      	sub	sp, #92	; 0x5c
 8002518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800251a:	2428      	movs	r4, #40	; 0x28
 800251c:	193b      	adds	r3, r7, r4
 800251e:	0018      	movs	r0, r3
 8002520:	2330      	movs	r3, #48	; 0x30
 8002522:	001a      	movs	r2, r3
 8002524:	2100      	movs	r1, #0
 8002526:	f003 f861 	bl	80055ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800252a:	2318      	movs	r3, #24
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	0018      	movs	r0, r3
 8002530:	2310      	movs	r3, #16
 8002532:	001a      	movs	r2, r3
 8002534:	2100      	movs	r1, #0
 8002536:	f003 f859 	bl	80055ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	0018      	movs	r0, r3
 800253e:	2314      	movs	r3, #20
 8002540:	001a      	movs	r2, r3
 8002542:	2100      	movs	r1, #0
 8002544:	f003 f852 	bl	80055ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002548:	0021      	movs	r1, r4
 800254a:	187b      	adds	r3, r7, r1
 800254c:	2202      	movs	r2, #2
 800254e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002550:	187b      	adds	r3, r7, r1
 8002552:	2201      	movs	r2, #1
 8002554:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002556:	187b      	adds	r3, r7, r1
 8002558:	2210      	movs	r2, #16
 800255a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800255c:	187b      	adds	r3, r7, r1
 800255e:	2202      	movs	r2, #2
 8002560:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002562:	187b      	adds	r3, r7, r1
 8002564:	2200      	movs	r2, #0
 8002566:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002568:	187b      	adds	r3, r7, r1
 800256a:	22a0      	movs	r2, #160	; 0xa0
 800256c:	0392      	lsls	r2, r2, #14
 800256e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002570:	187b      	adds	r3, r7, r1
 8002572:	2200      	movs	r2, #0
 8002574:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002576:	187b      	adds	r3, r7, r1
 8002578:	0018      	movs	r0, r3
 800257a:	f000 ff65 	bl	8003448 <HAL_RCC_OscConfig>
 800257e:	1e03      	subs	r3, r0, #0
 8002580:	d001      	beq.n	8002586 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002582:	f000 fa69 	bl	8002a58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002586:	2118      	movs	r1, #24
 8002588:	187b      	adds	r3, r7, r1
 800258a:	2207      	movs	r2, #7
 800258c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800258e:	187b      	adds	r3, r7, r1
 8002590:	2202      	movs	r2, #2
 8002592:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002594:	187b      	adds	r3, r7, r1
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800259a:	187b      	adds	r3, r7, r1
 800259c:	2200      	movs	r2, #0
 800259e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80025a0:	187b      	adds	r3, r7, r1
 80025a2:	2101      	movs	r1, #1
 80025a4:	0018      	movs	r0, r3
 80025a6:	f001 fa69 	bl	8003a7c <HAL_RCC_ClockConfig>
 80025aa:	1e03      	subs	r3, r0, #0
 80025ac:	d001      	beq.n	80025b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80025ae:	f000 fa53 	bl	8002a58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	2201      	movs	r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	0018      	movs	r0, r3
 80025c2:	f001 fbad 	bl	8003d20 <HAL_RCCEx_PeriphCLKConfig>
 80025c6:	1e03      	subs	r3, r0, #0
 80025c8:	d001      	beq.n	80025ce <SystemClock_Config+0xba>
  {
    Error_Handler();
 80025ca:	f000 fa45 	bl	8002a58 <Error_Handler>
  }
}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b017      	add	sp, #92	; 0x5c
 80025d4:	bd90      	pop	{r4, r7, pc}
	...

080025d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08a      	sub	sp, #40	; 0x28
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025de:	2318      	movs	r3, #24
 80025e0:	18fb      	adds	r3, r7, r3
 80025e2:	0018      	movs	r0, r3
 80025e4:	2310      	movs	r3, #16
 80025e6:	001a      	movs	r2, r3
 80025e8:	2100      	movs	r1, #0
 80025ea:	f002 ffff 	bl	80055ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ee:	2310      	movs	r3, #16
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	0018      	movs	r0, r3
 80025f4:	2308      	movs	r3, #8
 80025f6:	001a      	movs	r2, r3
 80025f8:	2100      	movs	r1, #0
 80025fa:	f002 fff7 	bl	80055ec <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80025fe:	003b      	movs	r3, r7
 8002600:	0018      	movs	r0, r3
 8002602:	2310      	movs	r3, #16
 8002604:	001a      	movs	r2, r3
 8002606:	2100      	movs	r1, #0
 8002608:	f002 fff0 	bl	80055ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800260c:	4b2f      	ldr	r3, [pc, #188]	; (80026cc <MX_TIM1_Init+0xf4>)
 800260e:	4a30      	ldr	r2, [pc, #192]	; (80026d0 <MX_TIM1_Init+0xf8>)
 8002610:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8002612:	4b2e      	ldr	r3, [pc, #184]	; (80026cc <MX_TIM1_Init+0xf4>)
 8002614:	222f      	movs	r2, #47	; 0x2f
 8002616:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002618:	4b2c      	ldr	r3, [pc, #176]	; (80026cc <MX_TIM1_Init+0xf4>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800261e:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <MX_TIM1_Init+0xf4>)
 8002620:	4a2c      	ldr	r2, [pc, #176]	; (80026d4 <MX_TIM1_Init+0xfc>)
 8002622:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002624:	4b29      	ldr	r3, [pc, #164]	; (80026cc <MX_TIM1_Init+0xf4>)
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800262a:	4b28      	ldr	r3, [pc, #160]	; (80026cc <MX_TIM1_Init+0xf4>)
 800262c:	2200      	movs	r2, #0
 800262e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002630:	4b26      	ldr	r3, [pc, #152]	; (80026cc <MX_TIM1_Init+0xf4>)
 8002632:	2200      	movs	r2, #0
 8002634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002636:	4b25      	ldr	r3, [pc, #148]	; (80026cc <MX_TIM1_Init+0xf4>)
 8002638:	0018      	movs	r0, r3
 800263a:	f001 fc4f 	bl	8003edc <HAL_TIM_Base_Init>
 800263e:	1e03      	subs	r3, r0, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002642:	f000 fa09 	bl	8002a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002646:	2118      	movs	r1, #24
 8002648:	187b      	adds	r3, r7, r1
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	0152      	lsls	r2, r2, #5
 800264e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002650:	187a      	adds	r2, r7, r1
 8002652:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <MX_TIM1_Init+0xf4>)
 8002654:	0011      	movs	r1, r2
 8002656:	0018      	movs	r0, r3
 8002658:	f001 ffb0 	bl	80045bc <HAL_TIM_ConfigClockSource>
 800265c:	1e03      	subs	r3, r0, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8002660:	f000 f9fa 	bl	8002a58 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002664:	4b19      	ldr	r3, [pc, #100]	; (80026cc <MX_TIM1_Init+0xf4>)
 8002666:	0018      	movs	r0, r3
 8002668:	f001 fc88 	bl	8003f7c <HAL_TIM_IC_Init>
 800266c:	1e03      	subs	r3, r0, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002670:	f000 f9f2 	bl	8002a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002674:	2110      	movs	r1, #16
 8002676:	187b      	adds	r3, r7, r1
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800267c:	187b      	adds	r3, r7, r1
 800267e:	2200      	movs	r2, #0
 8002680:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002682:	187a      	adds	r2, r7, r1
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <MX_TIM1_Init+0xf4>)
 8002686:	0011      	movs	r1, r2
 8002688:	0018      	movs	r0, r3
 800268a:	f002 fb19 	bl	8004cc0 <HAL_TIMEx_MasterConfigSynchronization>
 800268e:	1e03      	subs	r3, r0, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002692:	f000 f9e1 	bl	8002a58 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002696:	003b      	movs	r3, r7
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800269c:	003b      	movs	r3, r7
 800269e:	2201      	movs	r2, #1
 80026a0:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80026a2:	003b      	movs	r3, r7
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80026a8:	003b      	movs	r3, r7
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80026ae:	0039      	movs	r1, r7
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <MX_TIM1_Init+0xf4>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	0018      	movs	r0, r3
 80026b6:	f001 fedd 	bl	8004474 <HAL_TIM_IC_ConfigChannel>
 80026ba:	1e03      	subs	r3, r0, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 80026be:	f000 f9cb 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b00a      	add	sp, #40	; 0x28
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	200002b8 	.word	0x200002b8
 80026d0:	40012c00 	.word	0x40012c00
 80026d4:	0000fffe 	.word	0x0000fffe

080026d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026dc:	4b14      	ldr	r3, [pc, #80]	; (8002730 <MX_USART1_UART_Init+0x58>)
 80026de:	4a15      	ldr	r2, [pc, #84]	; (8002734 <MX_USART1_UART_Init+0x5c>)
 80026e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80026e2:	4b13      	ldr	r3, [pc, #76]	; (8002730 <MX_USART1_UART_Init+0x58>)
 80026e4:	2296      	movs	r2, #150	; 0x96
 80026e6:	0192      	lsls	r2, r2, #6
 80026e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <MX_USART1_UART_Init+0x58>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <MX_USART1_UART_Init+0x58>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <MX_USART1_UART_Init+0x58>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <MX_USART1_UART_Init+0x58>)
 80026fe:	220c      	movs	r2, #12
 8002700:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <MX_USART1_UART_Init+0x58>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <MX_USART1_UART_Init+0x58>)
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <MX_USART1_UART_Init+0x58>)
 8002710:	2200      	movs	r2, #0
 8002712:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <MX_USART1_UART_Init+0x58>)
 8002716:	2200      	movs	r2, #0
 8002718:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <MX_USART1_UART_Init+0x58>)
 800271c:	0018      	movs	r0, r3
 800271e:	f002 fb3d 	bl	8004d9c <HAL_UART_Init>
 8002722:	1e03      	subs	r3, r0, #0
 8002724:	d001      	beq.n	800272a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002726:	f000 f997 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000234 	.word	0x20000234
 8002734:	40013800 	.word	0x40013800

08002738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b089      	sub	sp, #36	; 0x24
 800273c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273e:	240c      	movs	r4, #12
 8002740:	193b      	adds	r3, r7, r4
 8002742:	0018      	movs	r0, r3
 8002744:	2314      	movs	r3, #20
 8002746:	001a      	movs	r2, r3
 8002748:	2100      	movs	r1, #0
 800274a:	f002 ff4f 	bl	80055ec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800274e:	4b37      	ldr	r3, [pc, #220]	; (800282c <MX_GPIO_Init+0xf4>)
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	4b36      	ldr	r3, [pc, #216]	; (800282c <MX_GPIO_Init+0xf4>)
 8002754:	2180      	movs	r1, #128	; 0x80
 8002756:	0289      	lsls	r1, r1, #10
 8002758:	430a      	orrs	r2, r1
 800275a:	615a      	str	r2, [r3, #20]
 800275c:	4b33      	ldr	r3, [pc, #204]	; (800282c <MX_GPIO_Init+0xf4>)
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	029b      	lsls	r3, r3, #10
 8002764:	4013      	ands	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800276a:	4b30      	ldr	r3, [pc, #192]	; (800282c <MX_GPIO_Init+0xf4>)
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	4b2f      	ldr	r3, [pc, #188]	; (800282c <MX_GPIO_Init+0xf4>)
 8002770:	2180      	movs	r1, #128	; 0x80
 8002772:	0309      	lsls	r1, r1, #12
 8002774:	430a      	orrs	r2, r1
 8002776:	615a      	str	r2, [r3, #20]
 8002778:	4b2c      	ldr	r3, [pc, #176]	; (800282c <MX_GPIO_Init+0xf4>)
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	031b      	lsls	r3, r3, #12
 8002780:	4013      	ands	r3, r2
 8002782:	607b      	str	r3, [r7, #4]
 8002784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 8002786:	2390      	movs	r3, #144	; 0x90
 8002788:	05db      	lsls	r3, r3, #23
 800278a:	2200      	movs	r2, #0
 800278c:	2140      	movs	r1, #64	; 0x40
 800278e:	0018      	movs	r0, r3
 8002790:	f000 fe20 	bl	80033d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4825      	ldr	r0, [pc, #148]	; (8002830 <MX_GPIO_Init+0xf8>)
 800279a:	2200      	movs	r2, #0
 800279c:	0019      	movs	r1, r3
 800279e:	f000 fe19 	bl	80033d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80027a2:	193b      	adds	r3, r7, r4
 80027a4:	2201      	movs	r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027a8:	193b      	adds	r3, r7, r4
 80027aa:	2288      	movs	r2, #136	; 0x88
 80027ac:	0352      	lsls	r2, r2, #13
 80027ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	193b      	adds	r3, r7, r4
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80027b6:	193a      	adds	r2, r7, r4
 80027b8:	2390      	movs	r3, #144	; 0x90
 80027ba:	05db      	lsls	r3, r3, #23
 80027bc:	0011      	movs	r1, r2
 80027be:	0018      	movs	r0, r3
 80027c0:	f000 fc98 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : US_TRIG_Pin */
  GPIO_InitStruct.Pin = US_TRIG_Pin;
 80027c4:	193b      	adds	r3, r7, r4
 80027c6:	2240      	movs	r2, #64	; 0x40
 80027c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ca:	193b      	adds	r3, r7, r4
 80027cc:	2201      	movs	r2, #1
 80027ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	193b      	adds	r3, r7, r4
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	193b      	adds	r3, r7, r4
 80027d8:	2200      	movs	r2, #0
 80027da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(US_TRIG_GPIO_Port, &GPIO_InitStruct);
 80027dc:	193a      	adds	r2, r7, r4
 80027de:	2390      	movs	r3, #144	; 0x90
 80027e0:	05db      	lsls	r3, r3, #23
 80027e2:	0011      	movs	r1, r2
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 fc85 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80027ea:	0021      	movs	r1, r4
 80027ec:	187b      	adds	r3, r7, r1
 80027ee:	2280      	movs	r2, #128	; 0x80
 80027f0:	0052      	lsls	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f4:	187b      	adds	r3, r7, r1
 80027f6:	2201      	movs	r2, #1
 80027f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	187b      	adds	r3, r7, r1
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002800:	187b      	adds	r3, r7, r1
 8002802:	2200      	movs	r2, #0
 8002804:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002806:	187b      	adds	r3, r7, r1
 8002808:	4a09      	ldr	r2, [pc, #36]	; (8002830 <MX_GPIO_Init+0xf8>)
 800280a:	0019      	movs	r1, r3
 800280c:	0010      	movs	r0, r2
 800280e:	f000 fc71 	bl	80030f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	2100      	movs	r1, #0
 8002816:	2005      	movs	r0, #5
 8002818:	f000 fc3a 	bl	8003090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800281c:	2005      	movs	r0, #5
 800281e:	f000 fc4c 	bl	80030ba <HAL_NVIC_EnableIRQ>

}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	b009      	add	sp, #36	; 0x24
 8002828:	bd90      	pop	{r4, r7, pc}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	40021000 	.word	0x40021000
 8002830:	48000800 	.word	0x48000800

08002834 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	b002      	add	sp, #8
 8002842:	bd80      	pop	{r7, pc}

08002844 <delay>:

void delay (uint16_t time)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	0002      	movs	r2, r0
 800284c:	1dbb      	adds	r3, r7, #6
 800284e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <delay+0x30>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2200      	movs	r2, #0
 8002856:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <delay+0x30>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002860:	1dbb      	adds	r3, r7, #6
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d3f8      	bcc.n	800285a <delay+0x16>
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	46bd      	mov	sp, r7
 800286e:	b002      	add	sp, #8
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	200002b8 	.word	0x200002b8

08002878 <Ultrasonic_Read>:

void Ultrasonic_Read()
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_SET);
 800287c:	2390      	movs	r3, #144	; 0x90
 800287e:	05db      	lsls	r3, r3, #23
 8002880:	2201      	movs	r2, #1
 8002882:	2140      	movs	r1, #64	; 0x40
 8002884:	0018      	movs	r0, r3
 8002886:	f000 fda5 	bl	80033d4 <HAL_GPIO_WritePin>
	delay(10);
 800288a:	200a      	movs	r0, #10
 800288c:	f7ff ffda 	bl	8002844 <delay>
	HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 8002890:	2390      	movs	r3, #144	; 0x90
 8002892:	05db      	lsls	r3, r3, #23
 8002894:	2200      	movs	r2, #0
 8002896:	2140      	movs	r1, #64	; 0x40
 8002898:	0018      	movs	r0, r3
 800289a:	f000 fd9b 	bl	80033d4 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 800289e:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <Ultrasonic_Read+0x3c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <Ultrasonic_Read+0x3c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2102      	movs	r1, #2
 80028aa:	430a      	orrs	r2, r1
 80028ac:	60da      	str	r2, [r3, #12]
//	__HAL_TIM_ENABLE_IT(&htim1, TIM_CHANNEL_1);

}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	200002b8 	.word	0x200002b8

080028b8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	0002      	movs	r2, r0
 80028c0:	1dbb      	adds	r3, r7, #6
 80028c2:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_Pin)
	{
//		Ultrasonic_Read();
	}
}
 80028c4:	46c0      	nop			; (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b002      	add	sp, #8
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_TIM_IC_CaptureCallback>:
// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a46      	ldr	r2, [pc, #280]	; (80029f4 <HAL_TIM_IC_CaptureCallback+0x128>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d000      	beq.n	80028e0 <HAL_TIM_IC_CaptureCallback+0x14>
 80028de:	e084      	b.n	80029ea <HAL_TIM_IC_CaptureCallback+0x11e>
	{
		if (htim-> Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	7f1b      	ldrb	r3, [r3, #28]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d000      	beq.n	80028ea <HAL_TIM_IC_CaptureCallback+0x1e>
 80028e8:	e07f      	b.n	80029ea <HAL_TIM_IC_CaptureCallback+0x11e>
		{
			if (!Is_First_Captured) // if the first value is not captured
 80028ea:	4b43      	ldr	r3, [pc, #268]	; (80029f8 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2201      	movs	r2, #1
 80028f0:	4053      	eors	r3, r2
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01b      	beq.n	8002930 <HAL_TIM_IC_CaptureCallback+0x64>
			{
				First_Val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2100      	movs	r1, #0
 80028fc:	0018      	movs	r0, r3
 80028fe:	f001 ff31 	bl	8004764 <HAL_TIM_ReadCapturedValue>
 8002902:	0002      	movs	r2, r0
 8002904:	4b3d      	ldr	r3, [pc, #244]	; (80029fc <HAL_TIM_IC_CaptureCallback+0x130>)
 8002906:	601a      	str	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6a1a      	ldr	r2, [r3, #32]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	210a      	movs	r1, #10
 8002914:	438a      	bics	r2, r1
 8002916:	621a      	str	r2, [r3, #32]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6a1a      	ldr	r2, [r3, #32]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2102      	movs	r1, #2
 8002924:	430a      	orrs	r2, r1
 8002926:	621a      	str	r2, [r3, #32]
				Is_First_Captured = 1;  // set the first captured as true
 8002928:	4b33      	ldr	r3, [pc, #204]	; (80029f8 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800292a:	2201      	movs	r2, #1
 800292c:	701a      	strb	r2, [r3, #0]
				Is_First_Captured = 0; // set it back to false
			}
		}
	}

}
 800292e:	e05c      	b.n	80029ea <HAL_TIM_IC_CaptureCallback+0x11e>
				Sec_Val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2100      	movs	r1, #0
 8002934:	0018      	movs	r0, r3
 8002936:	f001 ff15 	bl	8004764 <HAL_TIM_ReadCapturedValue>
 800293a:	0002      	movs	r2, r0
 800293c:	4b30      	ldr	r3, [pc, #192]	; (8002a00 <HAL_TIM_IC_CaptureCallback+0x134>)
 800293e:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2200      	movs	r2, #0
 8002946:	625a      	str	r2, [r3, #36]	; 0x24
				if (Sec_Val > First_Val)
 8002948:	4b2d      	ldr	r3, [pc, #180]	; (8002a00 <HAL_TIM_IC_CaptureCallback+0x134>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <HAL_TIM_IC_CaptureCallback+0x130>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d907      	bls.n	8002964 <HAL_TIM_IC_CaptureCallback+0x98>
					Difference = Sec_Val-First_Val;
 8002954:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b28      	ldr	r3, [pc, #160]	; (80029fc <HAL_TIM_IC_CaptureCallback+0x130>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	1ad2      	subs	r2, r2, r3
 800295e:	4b29      	ldr	r3, [pc, #164]	; (8002a04 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	e00e      	b.n	8002982 <HAL_TIM_IC_CaptureCallback+0xb6>
				else if (First_Val > Sec_Val)
 8002964:	4b25      	ldr	r3, [pc, #148]	; (80029fc <HAL_TIM_IC_CaptureCallback+0x130>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b25      	ldr	r3, [pc, #148]	; (8002a00 <HAL_TIM_IC_CaptureCallback+0x134>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d908      	bls.n	8002982 <HAL_TIM_IC_CaptureCallback+0xb6>
					Difference = (0xffff - First_Val) + Sec_Val;
 8002970:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b21      	ldr	r3, [pc, #132]	; (80029fc <HAL_TIM_IC_CaptureCallback+0x130>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	4a23      	ldr	r2, [pc, #140]	; (8002a08 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800297c:	189a      	adds	r2, r3, r2
 800297e:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002980:	601a      	str	r2, [r3, #0]
				Distance = Difference * .034/2;
 8002982:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0018      	movs	r0, r3
 8002988:	f7ff fc78 	bl	800227c <__aeabi_ui2d>
 800298c:	4a1f      	ldr	r2, [pc, #124]	; (8002a0c <HAL_TIM_IC_CaptureCallback+0x140>)
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <HAL_TIM_IC_CaptureCallback+0x144>)
 8002990:	f7fe fdf2 	bl	8001578 <__aeabi_dmul>
 8002994:	0002      	movs	r2, r0
 8002996:	000b      	movs	r3, r1
 8002998:	0010      	movs	r0, r2
 800299a:	0019      	movs	r1, r3
 800299c:	2200      	movs	r2, #0
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	05db      	lsls	r3, r3, #23
 80029a2:	f7fe f9e3 	bl	8000d6c <__aeabi_ddiv>
 80029a6:	0002      	movs	r2, r0
 80029a8:	000b      	movs	r3, r1
 80029aa:	0010      	movs	r0, r2
 80029ac:	0019      	movs	r1, r3
 80029ae:	f7ff fcd3 	bl	8002358 <__aeabi_d2f>
 80029b2:	1c02      	adds	r2, r0, #0
 80029b4:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <HAL_TIM_IC_CaptureCallback+0x148>)
 80029b6:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6a1a      	ldr	r2, [r3, #32]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	210a      	movs	r1, #10
 80029c4:	438a      	bics	r2, r1
 80029c6:	621a      	str	r2, [r3, #32]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6a12      	ldr	r2, [r2, #32]
 80029d2:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80029d4:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2102      	movs	r1, #2
 80029e0:	438a      	bics	r2, r1
 80029e2:	60da      	str	r2, [r3, #12]
				Is_First_Captured = 0; // set it back to false
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b002      	add	sp, #8
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	40012c00 	.word	0x40012c00
 80029f8:	20000204 	.word	0x20000204
 80029fc:	200001f8 	.word	0x200001f8
 8002a00:	200001fc 	.word	0x200001fc
 8002a04:	20000200 	.word	0x20000200
 8002a08:	0000ffff 	.word	0x0000ffff
 8002a0c:	b020c49c 	.word	0xb020c49c
 8002a10:	3fa16872 	.word	0x3fa16872
 8002a14:	20000208 	.word	0x20000208
 8002a18:	200002b8 	.word	0x200002b8

08002a1c <Send_Data>:

char TEXT[25] = {0};


void Send_Data()
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
    sprintf(TEXT, "Distance = %.2fcm\r\n", Distance);
 8002a20:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <Send_Data+0x2c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	1c18      	adds	r0, r3, #0
 8002a26:	f7ff fc4f 	bl	80022c8 <__aeabi_f2d>
 8002a2a:	0002      	movs	r2, r0
 8002a2c:	000b      	movs	r3, r1
 8002a2e:	4907      	ldr	r1, [pc, #28]	; (8002a4c <Send_Data+0x30>)
 8002a30:	4807      	ldr	r0, [pc, #28]	; (8002a50 <Send_Data+0x34>)
 8002a32:	f003 fa5d 	bl	8005ef0 <siprintf>
//    sprintf(TEXT, "%.2f\r\n", Difference);
//    sprintf(str, "%d, %d\r\n", First_Val, Sec_Val);



    HAL_UART_Transmit(&huart1, TEXT, sizeof(TEXT), 100);
 8002a36:	4906      	ldr	r1, [pc, #24]	; (8002a50 <Send_Data+0x34>)
 8002a38:	4806      	ldr	r0, [pc, #24]	; (8002a54 <Send_Data+0x38>)
 8002a3a:	2364      	movs	r3, #100	; 0x64
 8002a3c:	2219      	movs	r2, #25
 8002a3e:	f002 fa01 	bl	8004e44 <HAL_UART_Transmit>
}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20000208 	.word	0x20000208
 8002a4c:	080084b0 	.word	0x080084b0
 8002a50:	2000020c 	.word	0x2000020c
 8002a54:	20000234 	.word	0x20000234

08002a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a5c:	b672      	cpsid	i
}
 8002a5e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a60:	e7fe      	b.n	8002a60 <Error_Handler+0x8>
	...

08002a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <HAL_MspInit+0x44>)
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <HAL_MspInit+0x44>)
 8002a70:	2101      	movs	r1, #1
 8002a72:	430a      	orrs	r2, r1
 8002a74:	619a      	str	r2, [r3, #24]
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <HAL_MspInit+0x44>)
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	607b      	str	r3, [r7, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a82:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <HAL_MspInit+0x44>)
 8002a84:	69da      	ldr	r2, [r3, #28]
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <HAL_MspInit+0x44>)
 8002a88:	2180      	movs	r1, #128	; 0x80
 8002a8a:	0549      	lsls	r1, r1, #21
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	61da      	str	r2, [r3, #28]
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <HAL_MspInit+0x44>)
 8002a92:	69da      	ldr	r2, [r3, #28]
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	055b      	lsls	r3, r3, #21
 8002a98:	4013      	ands	r3, r2
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b002      	add	sp, #8
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	40021000 	.word	0x40021000

08002aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b08b      	sub	sp, #44	; 0x2c
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab4:	2414      	movs	r4, #20
 8002ab6:	193b      	adds	r3, r7, r4
 8002ab8:	0018      	movs	r0, r3
 8002aba:	2314      	movs	r3, #20
 8002abc:	001a      	movs	r2, r3
 8002abe:	2100      	movs	r1, #0
 8002ac0:	f002 fd94 	bl	80055ec <memset>
  if(htim_base->Instance==TIM1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a21      	ldr	r2, [pc, #132]	; (8002b50 <HAL_TIM_Base_MspInit+0xa4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d13b      	bne.n	8002b46 <HAL_TIM_Base_MspInit+0x9a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ace:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <HAL_TIM_Base_MspInit+0xa8>)
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <HAL_TIM_Base_MspInit+0xa8>)
 8002ad4:	2180      	movs	r1, #128	; 0x80
 8002ad6:	0109      	lsls	r1, r1, #4
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	619a      	str	r2, [r3, #24]
 8002adc:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <HAL_TIM_Base_MspInit+0xa8>)
 8002ade:	699a      	ldr	r2, [r3, #24]
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aea:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <HAL_TIM_Base_MspInit+0xa8>)
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_TIM_Base_MspInit+0xa8>)
 8002af0:	2180      	movs	r1, #128	; 0x80
 8002af2:	0289      	lsls	r1, r1, #10
 8002af4:	430a      	orrs	r2, r1
 8002af6:	615a      	str	r2, [r3, #20]
 8002af8:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <HAL_TIM_Base_MspInit+0xa8>)
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	029b      	lsls	r3, r3, #10
 8002b00:	4013      	ands	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b06:	193b      	adds	r3, r7, r4
 8002b08:	2280      	movs	r2, #128	; 0x80
 8002b0a:	0052      	lsls	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	0021      	movs	r1, r4
 8002b10:	187b      	adds	r3, r7, r1
 8002b12:	2202      	movs	r2, #2
 8002b14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	187b      	adds	r3, r7, r1
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1c:	187b      	adds	r3, r7, r1
 8002b1e:	2200      	movs	r2, #0
 8002b20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002b22:	187b      	adds	r3, r7, r1
 8002b24:	2202      	movs	r2, #2
 8002b26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b28:	187a      	adds	r2, r7, r1
 8002b2a:	2390      	movs	r3, #144	; 0x90
 8002b2c:	05db      	lsls	r3, r3, #23
 8002b2e:	0011      	movs	r1, r2
 8002b30:	0018      	movs	r0, r3
 8002b32:	f000 fadf 	bl	80030f4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2100      	movs	r1, #0
 8002b3a:	200e      	movs	r0, #14
 8002b3c:	f000 faa8 	bl	8003090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002b40:	200e      	movs	r0, #14
 8002b42:	f000 faba 	bl	80030ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b00b      	add	sp, #44	; 0x2c
 8002b4c:	bd90      	pop	{r4, r7, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	40012c00 	.word	0x40012c00
 8002b54:	40021000 	.word	0x40021000

08002b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b08b      	sub	sp, #44	; 0x2c
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	2414      	movs	r4, #20
 8002b62:	193b      	adds	r3, r7, r4
 8002b64:	0018      	movs	r0, r3
 8002b66:	2314      	movs	r3, #20
 8002b68:	001a      	movs	r2, r3
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	f002 fd3e 	bl	80055ec <memset>
  if(huart->Instance==USART1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a1d      	ldr	r2, [pc, #116]	; (8002bec <HAL_UART_MspInit+0x94>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d133      	bne.n	8002be2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <HAL_UART_MspInit+0x98>)
 8002b7c:	699a      	ldr	r2, [r3, #24]
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <HAL_UART_MspInit+0x98>)
 8002b80:	2180      	movs	r1, #128	; 0x80
 8002b82:	01c9      	lsls	r1, r1, #7
 8002b84:	430a      	orrs	r2, r1
 8002b86:	619a      	str	r2, [r3, #24]
 8002b88:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <HAL_UART_MspInit+0x98>)
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	01db      	lsls	r3, r3, #7
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b96:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <HAL_UART_MspInit+0x98>)
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <HAL_UART_MspInit+0x98>)
 8002b9c:	2180      	movs	r1, #128	; 0x80
 8002b9e:	0289      	lsls	r1, r1, #10
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	615a      	str	r2, [r3, #20]
 8002ba4:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <HAL_UART_MspInit+0x98>)
 8002ba6:	695a      	ldr	r2, [r3, #20]
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	029b      	lsls	r3, r3, #10
 8002bac:	4013      	ands	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002bb2:	193b      	adds	r3, r7, r4
 8002bb4:	22c0      	movs	r2, #192	; 0xc0
 8002bb6:	00d2      	lsls	r2, r2, #3
 8002bb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bba:	0021      	movs	r1, r4
 8002bbc:	187b      	adds	r3, r7, r1
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	187b      	adds	r3, r7, r1
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bc8:	187b      	adds	r3, r7, r1
 8002bca:	2203      	movs	r2, #3
 8002bcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002bce:	187b      	adds	r3, r7, r1
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd4:	187a      	adds	r2, r7, r1
 8002bd6:	2390      	movs	r3, #144	; 0x90
 8002bd8:	05db      	lsls	r3, r3, #23
 8002bda:	0011      	movs	r1, r2
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f000 fa89 	bl	80030f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b00b      	add	sp, #44	; 0x2c
 8002be8:	bd90      	pop	{r4, r7, pc}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	40013800 	.word	0x40013800
 8002bf0:	40021000 	.word	0x40021000

08002bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bf8:	e7fe      	b.n	8002bf8 <NMI_Handler+0x4>

08002bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bfe:	e7fe      	b.n	8002bfe <HardFault_Handler+0x4>

08002c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c04:	46c0      	nop			; (mov r8, r8)
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c18:	f000 f94e 	bl	8002eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c1c:	46c0      	nop			; (mov r8, r8)
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002c26:	2001      	movs	r0, #1
 8002c28:	f000 fbf2 	bl	8003410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002c2c:	46c0      	nop			; (mov r8, r8)
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <TIM1_CC_IRQHandler+0x14>)
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f001 fb04 	bl	8004248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	200002b8 	.word	0x200002b8

08002c4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
	return 1;
 8002c50:	2301      	movs	r3, #1
}
 8002c52:	0018      	movs	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <_kill>:

int _kill(int pid, int sig)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c62:	f002 fc99 	bl	8005598 <__errno>
 8002c66:	0003      	movs	r3, r0
 8002c68:	2216      	movs	r2, #22
 8002c6a:	601a      	str	r2, [r3, #0]
	return -1;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	425b      	negs	r3, r3
}
 8002c70:	0018      	movs	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b002      	add	sp, #8
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <_exit>:

void _exit (int status)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c80:	2301      	movs	r3, #1
 8002c82:	425a      	negs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	0011      	movs	r1, r2
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7ff ffe5 	bl	8002c58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c8e:	e7fe      	b.n	8002c8e <_exit+0x16>

08002c90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	e00a      	b.n	8002cb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ca2:	e000      	b.n	8002ca6 <_read+0x16>
 8002ca4:	bf00      	nop
 8002ca6:	0001      	movs	r1, r0
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	60ba      	str	r2, [r7, #8]
 8002cae:	b2ca      	uxtb	r2, r1
 8002cb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	dbf0      	blt.n	8002ca2 <_read+0x12>
	}

return len;
 8002cc0:	687b      	ldr	r3, [r7, #4]
}
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b006      	add	sp, #24
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b086      	sub	sp, #24
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	e009      	b.n	8002cf0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	60ba      	str	r2, [r7, #8]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	e000      	b.n	8002cea <_write+0x20>
 8002ce8:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	3301      	adds	r3, #1
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	dbf1      	blt.n	8002cdc <_write+0x12>
	}
	return len;
 8002cf8:	687b      	ldr	r3, [r7, #4]
}
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	b006      	add	sp, #24
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <_close>:

int _close(int file)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
	return -1;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	425b      	negs	r3, r3
}
 8002d0e:	0018      	movs	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b002      	add	sp, #8
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	0192      	lsls	r2, r2, #6
 8002d26:	605a      	str	r2, [r3, #4]
	return 0;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b002      	add	sp, #8
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <_isatty>:

int _isatty(int file)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
	return 1;
 8002d3a:	2301      	movs	r3, #1
}
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b002      	add	sp, #8
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
	return 0;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	0018      	movs	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b004      	add	sp, #16
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d64:	4a14      	ldr	r2, [pc, #80]	; (8002db8 <_sbrk+0x5c>)
 8002d66:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <_sbrk+0x60>)
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d70:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <_sbrk+0x64>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d102      	bne.n	8002d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d78:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <_sbrk+0x64>)
 8002d7a:	4a12      	ldr	r2, [pc, #72]	; (8002dc4 <_sbrk+0x68>)
 8002d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <_sbrk+0x64>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	18d3      	adds	r3, r2, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d207      	bcs.n	8002d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d8c:	f002 fc04 	bl	8005598 <__errno>
 8002d90:	0003      	movs	r3, r0
 8002d92:	220c      	movs	r2, #12
 8002d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d96:	2301      	movs	r3, #1
 8002d98:	425b      	negs	r3, r3
 8002d9a:	e009      	b.n	8002db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <_sbrk+0x64>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002da2:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <_sbrk+0x64>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	18d2      	adds	r2, r2, r3
 8002daa:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <_sbrk+0x64>)
 8002dac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002dae:	68fb      	ldr	r3, [r7, #12]
}
 8002db0:	0018      	movs	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b006      	add	sp, #24
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20002000 	.word	0x20002000
 8002dbc:	00000400 	.word	0x00000400
 8002dc0:	20000228 	.word	0x20000228
 8002dc4:	20000318 	.word	0x20000318

08002dc8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002dd4:	480d      	ldr	r0, [pc, #52]	; (8002e0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dd6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dd8:	480d      	ldr	r0, [pc, #52]	; (8002e10 <LoopForever+0x6>)
  ldr r1, =_edata
 8002dda:	490e      	ldr	r1, [pc, #56]	; (8002e14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ddc:	4a0e      	ldr	r2, [pc, #56]	; (8002e18 <LoopForever+0xe>)
  movs r3, #0
 8002dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002de0:	e002      	b.n	8002de8 <LoopCopyDataInit>

08002de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002de6:	3304      	adds	r3, #4

08002de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dec:	d3f9      	bcc.n	8002de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dee:	4a0b      	ldr	r2, [pc, #44]	; (8002e1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002df0:	4c0b      	ldr	r4, [pc, #44]	; (8002e20 <LoopForever+0x16>)
  movs r3, #0
 8002df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df4:	e001      	b.n	8002dfa <LoopFillZerobss>

08002df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002df8:	3204      	adds	r2, #4

08002dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dfc:	d3fb      	bcc.n	8002df6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002dfe:	f7ff ffe3 	bl	8002dc8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002e02:	f002 fbcf 	bl	80055a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e06:	f7ff fb4d 	bl	80024a4 <main>

08002e0a <LoopForever>:

LoopForever:
    b LoopForever
 8002e0a:	e7fe      	b.n	8002e0a <LoopForever>
  ldr   r0, =_estack
 8002e0c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e14:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002e18:	08008964 	.word	0x08008964
  ldr r2, =_sbss
 8002e1c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002e20:	20000314 	.word	0x20000314

08002e24 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e24:	e7fe      	b.n	8002e24 <ADC1_COMP_IRQHandler>
	...

08002e28 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e2c:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <HAL_Init+0x24>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_Init+0x24>)
 8002e32:	2110      	movs	r1, #16
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002e38:	2003      	movs	r0, #3
 8002e3a:	f000 f809 	bl	8002e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e3e:	f7ff fe11 	bl	8002a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	0018      	movs	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	40022000 	.word	0x40022000

08002e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e50:	b590      	push	{r4, r7, lr}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e58:	4b14      	ldr	r3, [pc, #80]	; (8002eac <HAL_InitTick+0x5c>)
 8002e5a:	681c      	ldr	r4, [r3, #0]
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <HAL_InitTick+0x60>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	0019      	movs	r1, r3
 8002e62:	23fa      	movs	r3, #250	; 0xfa
 8002e64:	0098      	lsls	r0, r3, #2
 8002e66:	f7fd f96b 	bl	8000140 <__udivsi3>
 8002e6a:	0003      	movs	r3, r0
 8002e6c:	0019      	movs	r1, r3
 8002e6e:	0020      	movs	r0, r4
 8002e70:	f7fd f966 	bl	8000140 <__udivsi3>
 8002e74:	0003      	movs	r3, r0
 8002e76:	0018      	movs	r0, r3
 8002e78:	f000 f92f 	bl	80030da <HAL_SYSTICK_Config>
 8002e7c:	1e03      	subs	r3, r0, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e00f      	b.n	8002ea4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d80b      	bhi.n	8002ea2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	425b      	negs	r3, r3
 8002e90:	2200      	movs	r2, #0
 8002e92:	0018      	movs	r0, r3
 8002e94:	f000 f8fc 	bl	8003090 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e98:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <HAL_InitTick+0x64>)
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	e000      	b.n	8002ea4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
}
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b003      	add	sp, #12
 8002eaa:	bd90      	pop	{r4, r7, pc}
 8002eac:	20000000 	.word	0x20000000
 8002eb0:	20000008 	.word	0x20000008
 8002eb4:	20000004 	.word	0x20000004

08002eb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <HAL_IncTick+0x1c>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	001a      	movs	r2, r3
 8002ec2:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <HAL_IncTick+0x20>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	18d2      	adds	r2, r2, r3
 8002ec8:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <HAL_IncTick+0x20>)
 8002eca:	601a      	str	r2, [r3, #0]
}
 8002ecc:	46c0      	nop			; (mov r8, r8)
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	20000008 	.word	0x20000008
 8002ed8:	20000300 	.word	0x20000300

08002edc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee0:	4b02      	ldr	r3, [pc, #8]	; (8002eec <HAL_GetTick+0x10>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
}
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	20000300 	.word	0x20000300

08002ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ef8:	f7ff fff0 	bl	8002edc <HAL_GetTick>
 8002efc:	0003      	movs	r3, r0
 8002efe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3301      	adds	r3, #1
 8002f08:	d005      	beq.n	8002f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <HAL_Delay+0x44>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	001a      	movs	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	189b      	adds	r3, r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	f7ff ffe0 	bl	8002edc <HAL_GetTick>
 8002f1c:	0002      	movs	r2, r0
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d8f7      	bhi.n	8002f18 <HAL_Delay+0x28>
  {
  }
}
 8002f28:	46c0      	nop			; (mov r8, r8)
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b004      	add	sp, #16
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	20000008 	.word	0x20000008

08002f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	0002      	movs	r2, r0
 8002f40:	1dfb      	adds	r3, r7, #7
 8002f42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f44:	1dfb      	adds	r3, r7, #7
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b7f      	cmp	r3, #127	; 0x7f
 8002f4a:	d809      	bhi.n	8002f60 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f4c:	1dfb      	adds	r3, r7, #7
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	001a      	movs	r2, r3
 8002f52:	231f      	movs	r3, #31
 8002f54:	401a      	ands	r2, r3
 8002f56:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <__NVIC_EnableIRQ+0x30>)
 8002f58:	2101      	movs	r1, #1
 8002f5a:	4091      	lsls	r1, r2
 8002f5c:	000a      	movs	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]
  }
}
 8002f60:	46c0      	nop			; (mov r8, r8)
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b002      	add	sp, #8
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	e000e100 	.word	0xe000e100

08002f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f6c:	b590      	push	{r4, r7, lr}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	0002      	movs	r2, r0
 8002f74:	6039      	str	r1, [r7, #0]
 8002f76:	1dfb      	adds	r3, r7, #7
 8002f78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f7a:	1dfb      	adds	r3, r7, #7
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b7f      	cmp	r3, #127	; 0x7f
 8002f80:	d828      	bhi.n	8002fd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f82:	4a2f      	ldr	r2, [pc, #188]	; (8003040 <__NVIC_SetPriority+0xd4>)
 8002f84:	1dfb      	adds	r3, r7, #7
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	b25b      	sxtb	r3, r3
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	33c0      	adds	r3, #192	; 0xc0
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	589b      	ldr	r3, [r3, r2]
 8002f92:	1dfa      	adds	r2, r7, #7
 8002f94:	7812      	ldrb	r2, [r2, #0]
 8002f96:	0011      	movs	r1, r2
 8002f98:	2203      	movs	r2, #3
 8002f9a:	400a      	ands	r2, r1
 8002f9c:	00d2      	lsls	r2, r2, #3
 8002f9e:	21ff      	movs	r1, #255	; 0xff
 8002fa0:	4091      	lsls	r1, r2
 8002fa2:	000a      	movs	r2, r1
 8002fa4:	43d2      	mvns	r2, r2
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	019b      	lsls	r3, r3, #6
 8002fae:	22ff      	movs	r2, #255	; 0xff
 8002fb0:	401a      	ands	r2, r3
 8002fb2:	1dfb      	adds	r3, r7, #7
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	2303      	movs	r3, #3
 8002fba:	4003      	ands	r3, r0
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fc0:	481f      	ldr	r0, [pc, #124]	; (8003040 <__NVIC_SetPriority+0xd4>)
 8002fc2:	1dfb      	adds	r3, r7, #7
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	b25b      	sxtb	r3, r3
 8002fc8:	089b      	lsrs	r3, r3, #2
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	33c0      	adds	r3, #192	; 0xc0
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002fd2:	e031      	b.n	8003038 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fd4:	4a1b      	ldr	r2, [pc, #108]	; (8003044 <__NVIC_SetPriority+0xd8>)
 8002fd6:	1dfb      	adds	r3, r7, #7
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	0019      	movs	r1, r3
 8002fdc:	230f      	movs	r3, #15
 8002fde:	400b      	ands	r3, r1
 8002fe0:	3b08      	subs	r3, #8
 8002fe2:	089b      	lsrs	r3, r3, #2
 8002fe4:	3306      	adds	r3, #6
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	18d3      	adds	r3, r2, r3
 8002fea:	3304      	adds	r3, #4
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	1dfa      	adds	r2, r7, #7
 8002ff0:	7812      	ldrb	r2, [r2, #0]
 8002ff2:	0011      	movs	r1, r2
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	400a      	ands	r2, r1
 8002ff8:	00d2      	lsls	r2, r2, #3
 8002ffa:	21ff      	movs	r1, #255	; 0xff
 8002ffc:	4091      	lsls	r1, r2
 8002ffe:	000a      	movs	r2, r1
 8003000:	43d2      	mvns	r2, r2
 8003002:	401a      	ands	r2, r3
 8003004:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	019b      	lsls	r3, r3, #6
 800300a:	22ff      	movs	r2, #255	; 0xff
 800300c:	401a      	ands	r2, r3
 800300e:	1dfb      	adds	r3, r7, #7
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	0018      	movs	r0, r3
 8003014:	2303      	movs	r3, #3
 8003016:	4003      	ands	r3, r0
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800301c:	4809      	ldr	r0, [pc, #36]	; (8003044 <__NVIC_SetPriority+0xd8>)
 800301e:	1dfb      	adds	r3, r7, #7
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	001c      	movs	r4, r3
 8003024:	230f      	movs	r3, #15
 8003026:	4023      	ands	r3, r4
 8003028:	3b08      	subs	r3, #8
 800302a:	089b      	lsrs	r3, r3, #2
 800302c:	430a      	orrs	r2, r1
 800302e:	3306      	adds	r3, #6
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	18c3      	adds	r3, r0, r3
 8003034:	3304      	adds	r3, #4
 8003036:	601a      	str	r2, [r3, #0]
}
 8003038:	46c0      	nop			; (mov r8, r8)
 800303a:	46bd      	mov	sp, r7
 800303c:	b003      	add	sp, #12
 800303e:	bd90      	pop	{r4, r7, pc}
 8003040:	e000e100 	.word	0xe000e100
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	1e5a      	subs	r2, r3, #1
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	045b      	lsls	r3, r3, #17
 8003058:	429a      	cmp	r2, r3
 800305a:	d301      	bcc.n	8003060 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800305c:	2301      	movs	r3, #1
 800305e:	e010      	b.n	8003082 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003060:	4b0a      	ldr	r3, [pc, #40]	; (800308c <SysTick_Config+0x44>)
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	3a01      	subs	r2, #1
 8003066:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003068:	2301      	movs	r3, #1
 800306a:	425b      	negs	r3, r3
 800306c:	2103      	movs	r1, #3
 800306e:	0018      	movs	r0, r3
 8003070:	f7ff ff7c 	bl	8002f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <SysTick_Config+0x44>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800307a:	4b04      	ldr	r3, [pc, #16]	; (800308c <SysTick_Config+0x44>)
 800307c:	2207      	movs	r2, #7
 800307e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003080:	2300      	movs	r3, #0
}
 8003082:	0018      	movs	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	b002      	add	sp, #8
 8003088:	bd80      	pop	{r7, pc}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	e000e010 	.word	0xe000e010

08003090 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	210f      	movs	r1, #15
 800309c:	187b      	adds	r3, r7, r1
 800309e:	1c02      	adds	r2, r0, #0
 80030a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	187b      	adds	r3, r7, r1
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	b25b      	sxtb	r3, r3
 80030aa:	0011      	movs	r1, r2
 80030ac:	0018      	movs	r0, r3
 80030ae:	f7ff ff5d 	bl	8002f6c <__NVIC_SetPriority>
}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b004      	add	sp, #16
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	0002      	movs	r2, r0
 80030c2:	1dfb      	adds	r3, r7, #7
 80030c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030c6:	1dfb      	adds	r3, r7, #7
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	b25b      	sxtb	r3, r3
 80030cc:	0018      	movs	r0, r3
 80030ce:	f7ff ff33 	bl	8002f38 <__NVIC_EnableIRQ>
}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b002      	add	sp, #8
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f7ff ffaf 	bl	8003048 <SysTick_Config>
 80030ea:	0003      	movs	r3, r0
}
 80030ec:	0018      	movs	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003102:	e14f      	b.n	80033a4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2101      	movs	r1, #1
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4091      	lsls	r1, r2
 800310e:	000a      	movs	r2, r1
 8003110:	4013      	ands	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d100      	bne.n	800311c <HAL_GPIO_Init+0x28>
 800311a:	e140      	b.n	800339e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2203      	movs	r2, #3
 8003122:	4013      	ands	r3, r2
 8003124:	2b01      	cmp	r3, #1
 8003126:	d005      	beq.n	8003134 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2203      	movs	r2, #3
 800312e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003130:	2b02      	cmp	r3, #2
 8003132:	d130      	bne.n	8003196 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	2203      	movs	r2, #3
 8003140:	409a      	lsls	r2, r3
 8003142:	0013      	movs	r3, r2
 8003144:	43da      	mvns	r2, r3
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	409a      	lsls	r2, r3
 8003156:	0013      	movs	r3, r2
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800316a:	2201      	movs	r2, #1
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	409a      	lsls	r2, r3
 8003170:	0013      	movs	r3, r2
 8003172:	43da      	mvns	r2, r3
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	2201      	movs	r2, #1
 8003182:	401a      	ands	r2, r3
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	409a      	lsls	r2, r3
 8003188:	0013      	movs	r3, r2
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2203      	movs	r2, #3
 800319c:	4013      	ands	r3, r2
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d017      	beq.n	80031d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	2203      	movs	r2, #3
 80031ae:	409a      	lsls	r2, r3
 80031b0:	0013      	movs	r3, r2
 80031b2:	43da      	mvns	r2, r3
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4013      	ands	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	409a      	lsls	r2, r3
 80031c4:	0013      	movs	r3, r2
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2203      	movs	r2, #3
 80031d8:	4013      	ands	r3, r2
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d123      	bne.n	8003226 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	08da      	lsrs	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3208      	adds	r2, #8
 80031e6:	0092      	lsls	r2, r2, #2
 80031e8:	58d3      	ldr	r3, [r2, r3]
 80031ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2207      	movs	r2, #7
 80031f0:	4013      	ands	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	220f      	movs	r2, #15
 80031f6:	409a      	lsls	r2, r3
 80031f8:	0013      	movs	r3, r2
 80031fa:	43da      	mvns	r2, r3
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4013      	ands	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2107      	movs	r1, #7
 800320a:	400b      	ands	r3, r1
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	409a      	lsls	r2, r3
 8003210:	0013      	movs	r3, r2
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	08da      	lsrs	r2, r3, #3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3208      	adds	r2, #8
 8003220:	0092      	lsls	r2, r2, #2
 8003222:	6939      	ldr	r1, [r7, #16]
 8003224:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	2203      	movs	r2, #3
 8003232:	409a      	lsls	r2, r3
 8003234:	0013      	movs	r3, r2
 8003236:	43da      	mvns	r2, r3
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4013      	ands	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2203      	movs	r2, #3
 8003244:	401a      	ands	r2, r3
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	409a      	lsls	r2, r3
 800324c:	0013      	movs	r3, r2
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	23c0      	movs	r3, #192	; 0xc0
 8003260:	029b      	lsls	r3, r3, #10
 8003262:	4013      	ands	r3, r2
 8003264:	d100      	bne.n	8003268 <HAL_GPIO_Init+0x174>
 8003266:	e09a      	b.n	800339e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003268:	4b54      	ldr	r3, [pc, #336]	; (80033bc <HAL_GPIO_Init+0x2c8>)
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	4b53      	ldr	r3, [pc, #332]	; (80033bc <HAL_GPIO_Init+0x2c8>)
 800326e:	2101      	movs	r1, #1
 8003270:	430a      	orrs	r2, r1
 8003272:	619a      	str	r2, [r3, #24]
 8003274:	4b51      	ldr	r3, [pc, #324]	; (80033bc <HAL_GPIO_Init+0x2c8>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2201      	movs	r2, #1
 800327a:	4013      	ands	r3, r2
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003280:	4a4f      	ldr	r2, [pc, #316]	; (80033c0 <HAL_GPIO_Init+0x2cc>)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	089b      	lsrs	r3, r3, #2
 8003286:	3302      	adds	r3, #2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	589b      	ldr	r3, [r3, r2]
 800328c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2203      	movs	r2, #3
 8003292:	4013      	ands	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	220f      	movs	r2, #15
 8003298:	409a      	lsls	r2, r3
 800329a:	0013      	movs	r3, r2
 800329c:	43da      	mvns	r2, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	2390      	movs	r3, #144	; 0x90
 80032a8:	05db      	lsls	r3, r3, #23
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d013      	beq.n	80032d6 <HAL_GPIO_Init+0x1e2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a44      	ldr	r2, [pc, #272]	; (80033c4 <HAL_GPIO_Init+0x2d0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00d      	beq.n	80032d2 <HAL_GPIO_Init+0x1de>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a43      	ldr	r2, [pc, #268]	; (80033c8 <HAL_GPIO_Init+0x2d4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d007      	beq.n	80032ce <HAL_GPIO_Init+0x1da>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a42      	ldr	r2, [pc, #264]	; (80033cc <HAL_GPIO_Init+0x2d8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d101      	bne.n	80032ca <HAL_GPIO_Init+0x1d6>
 80032c6:	2303      	movs	r3, #3
 80032c8:	e006      	b.n	80032d8 <HAL_GPIO_Init+0x1e4>
 80032ca:	2305      	movs	r3, #5
 80032cc:	e004      	b.n	80032d8 <HAL_GPIO_Init+0x1e4>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e002      	b.n	80032d8 <HAL_GPIO_Init+0x1e4>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <HAL_GPIO_Init+0x1e4>
 80032d6:	2300      	movs	r3, #0
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	2103      	movs	r1, #3
 80032dc:	400a      	ands	r2, r1
 80032de:	0092      	lsls	r2, r2, #2
 80032e0:	4093      	lsls	r3, r2
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032e8:	4935      	ldr	r1, [pc, #212]	; (80033c0 <HAL_GPIO_Init+0x2cc>)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	089b      	lsrs	r3, r3, #2
 80032ee:	3302      	adds	r3, #2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032f6:	4b36      	ldr	r3, [pc, #216]	; (80033d0 <HAL_GPIO_Init+0x2dc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	43da      	mvns	r2, r3
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	025b      	lsls	r3, r3, #9
 800330e:	4013      	ands	r3, r2
 8003310:	d003      	beq.n	800331a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800331a:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <HAL_GPIO_Init+0x2dc>)
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003320:	4b2b      	ldr	r3, [pc, #172]	; (80033d0 <HAL_GPIO_Init+0x2dc>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	43da      	mvns	r2, r3
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	029b      	lsls	r3, r3, #10
 8003338:	4013      	ands	r3, r2
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003344:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <HAL_GPIO_Init+0x2dc>)
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800334a:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <HAL_GPIO_Init+0x2dc>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	43da      	mvns	r2, r3
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4013      	ands	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	035b      	lsls	r3, r3, #13
 8003362:	4013      	ands	r3, r2
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800336e:	4b18      	ldr	r3, [pc, #96]	; (80033d0 <HAL_GPIO_Init+0x2dc>)
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003374:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <HAL_GPIO_Init+0x2dc>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	43da      	mvns	r2, r3
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	039b      	lsls	r3, r3, #14
 800338c:	4013      	ands	r3, r2
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003398:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <HAL_GPIO_Init+0x2dc>)
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	3301      	adds	r3, #1
 80033a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	40da      	lsrs	r2, r3
 80033ac:	1e13      	subs	r3, r2, #0
 80033ae:	d000      	beq.n	80033b2 <HAL_GPIO_Init+0x2be>
 80033b0:	e6a8      	b.n	8003104 <HAL_GPIO_Init+0x10>
  } 
}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b006      	add	sp, #24
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40010000 	.word	0x40010000
 80033c4:	48000400 	.word	0x48000400
 80033c8:	48000800 	.word	0x48000800
 80033cc:	48000c00 	.word	0x48000c00
 80033d0:	40010400 	.word	0x40010400

080033d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	0008      	movs	r0, r1
 80033de:	0011      	movs	r1, r2
 80033e0:	1cbb      	adds	r3, r7, #2
 80033e2:	1c02      	adds	r2, r0, #0
 80033e4:	801a      	strh	r2, [r3, #0]
 80033e6:	1c7b      	adds	r3, r7, #1
 80033e8:	1c0a      	adds	r2, r1, #0
 80033ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033ec:	1c7b      	adds	r3, r7, #1
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d004      	beq.n	80033fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033f4:	1cbb      	adds	r3, r7, #2
 80033f6:	881a      	ldrh	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033fc:	e003      	b.n	8003406 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033fe:	1cbb      	adds	r3, r7, #2
 8003400:	881a      	ldrh	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	46bd      	mov	sp, r7
 800340a:	b002      	add	sp, #8
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	0002      	movs	r2, r0
 8003418:	1dbb      	adds	r3, r7, #6
 800341a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	1dba      	adds	r2, r7, #6
 8003422:	8812      	ldrh	r2, [r2, #0]
 8003424:	4013      	ands	r3, r2
 8003426:	d008      	beq.n	800343a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800342a:	1dba      	adds	r2, r7, #6
 800342c:	8812      	ldrh	r2, [r2, #0]
 800342e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003430:	1dbb      	adds	r3, r7, #6
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	0018      	movs	r0, r3
 8003436:	f7ff fa3f 	bl	80028b8 <HAL_GPIO_EXTI_Callback>
  }
}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	46bd      	mov	sp, r7
 800343e:	b002      	add	sp, #8
 8003440:	bd80      	pop	{r7, pc}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	40010400 	.word	0x40010400

08003448 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e301      	b.n	8003a5e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2201      	movs	r2, #1
 8003460:	4013      	ands	r3, r2
 8003462:	d100      	bne.n	8003466 <HAL_RCC_OscConfig+0x1e>
 8003464:	e08d      	b.n	8003582 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003466:	4bc3      	ldr	r3, [pc, #780]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	220c      	movs	r2, #12
 800346c:	4013      	ands	r3, r2
 800346e:	2b04      	cmp	r3, #4
 8003470:	d00e      	beq.n	8003490 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003472:	4bc0      	ldr	r3, [pc, #768]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	220c      	movs	r2, #12
 8003478:	4013      	ands	r3, r2
 800347a:	2b08      	cmp	r3, #8
 800347c:	d116      	bne.n	80034ac <HAL_RCC_OscConfig+0x64>
 800347e:	4bbd      	ldr	r3, [pc, #756]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	2380      	movs	r3, #128	; 0x80
 8003484:	025b      	lsls	r3, r3, #9
 8003486:	401a      	ands	r2, r3
 8003488:	2380      	movs	r3, #128	; 0x80
 800348a:	025b      	lsls	r3, r3, #9
 800348c:	429a      	cmp	r2, r3
 800348e:	d10d      	bne.n	80034ac <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003490:	4bb8      	ldr	r3, [pc, #736]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	2380      	movs	r3, #128	; 0x80
 8003496:	029b      	lsls	r3, r3, #10
 8003498:	4013      	ands	r3, r2
 800349a:	d100      	bne.n	800349e <HAL_RCC_OscConfig+0x56>
 800349c:	e070      	b.n	8003580 <HAL_RCC_OscConfig+0x138>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d000      	beq.n	80034a8 <HAL_RCC_OscConfig+0x60>
 80034a6:	e06b      	b.n	8003580 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e2d8      	b.n	8003a5e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d107      	bne.n	80034c4 <HAL_RCC_OscConfig+0x7c>
 80034b4:	4baf      	ldr	r3, [pc, #700]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4bae      	ldr	r3, [pc, #696]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 80034ba:	2180      	movs	r1, #128	; 0x80
 80034bc:	0249      	lsls	r1, r1, #9
 80034be:	430a      	orrs	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	e02f      	b.n	8003524 <HAL_RCC_OscConfig+0xdc>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10c      	bne.n	80034e6 <HAL_RCC_OscConfig+0x9e>
 80034cc:	4ba9      	ldr	r3, [pc, #676]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4ba8      	ldr	r3, [pc, #672]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 80034d2:	49a9      	ldr	r1, [pc, #676]	; (8003778 <HAL_RCC_OscConfig+0x330>)
 80034d4:	400a      	ands	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	4ba6      	ldr	r3, [pc, #664]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4ba5      	ldr	r3, [pc, #660]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 80034de:	49a7      	ldr	r1, [pc, #668]	; (800377c <HAL_RCC_OscConfig+0x334>)
 80034e0:	400a      	ands	r2, r1
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	e01e      	b.n	8003524 <HAL_RCC_OscConfig+0xdc>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d10e      	bne.n	800350c <HAL_RCC_OscConfig+0xc4>
 80034ee:	4ba1      	ldr	r3, [pc, #644]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	4ba0      	ldr	r3, [pc, #640]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 80034f4:	2180      	movs	r1, #128	; 0x80
 80034f6:	02c9      	lsls	r1, r1, #11
 80034f8:	430a      	orrs	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	4b9d      	ldr	r3, [pc, #628]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b9c      	ldr	r3, [pc, #624]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 8003502:	2180      	movs	r1, #128	; 0x80
 8003504:	0249      	lsls	r1, r1, #9
 8003506:	430a      	orrs	r2, r1
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	e00b      	b.n	8003524 <HAL_RCC_OscConfig+0xdc>
 800350c:	4b99      	ldr	r3, [pc, #612]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4b98      	ldr	r3, [pc, #608]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 8003512:	4999      	ldr	r1, [pc, #612]	; (8003778 <HAL_RCC_OscConfig+0x330>)
 8003514:	400a      	ands	r2, r1
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	4b96      	ldr	r3, [pc, #600]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4b95      	ldr	r3, [pc, #596]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 800351e:	4997      	ldr	r1, [pc, #604]	; (800377c <HAL_RCC_OscConfig+0x334>)
 8003520:	400a      	ands	r2, r1
 8003522:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d014      	beq.n	8003556 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7ff fcd6 	bl	8002edc <HAL_GetTick>
 8003530:	0003      	movs	r3, r0
 8003532:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003536:	f7ff fcd1 	bl	8002edc <HAL_GetTick>
 800353a:	0002      	movs	r2, r0
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b64      	cmp	r3, #100	; 0x64
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e28a      	b.n	8003a5e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003548:	4b8a      	ldr	r3, [pc, #552]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	029b      	lsls	r3, r3, #10
 8003550:	4013      	ands	r3, r2
 8003552:	d0f0      	beq.n	8003536 <HAL_RCC_OscConfig+0xee>
 8003554:	e015      	b.n	8003582 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003556:	f7ff fcc1 	bl	8002edc <HAL_GetTick>
 800355a:	0003      	movs	r3, r0
 800355c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003560:	f7ff fcbc 	bl	8002edc <HAL_GetTick>
 8003564:	0002      	movs	r2, r0
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b64      	cmp	r3, #100	; 0x64
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e275      	b.n	8003a5e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003572:	4b80      	ldr	r3, [pc, #512]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	029b      	lsls	r3, r3, #10
 800357a:	4013      	ands	r3, r2
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0x118>
 800357e:	e000      	b.n	8003582 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003580:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2202      	movs	r2, #2
 8003588:	4013      	ands	r3, r2
 800358a:	d100      	bne.n	800358e <HAL_RCC_OscConfig+0x146>
 800358c:	e069      	b.n	8003662 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800358e:	4b79      	ldr	r3, [pc, #484]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	220c      	movs	r2, #12
 8003594:	4013      	ands	r3, r2
 8003596:	d00b      	beq.n	80035b0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003598:	4b76      	ldr	r3, [pc, #472]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	220c      	movs	r2, #12
 800359e:	4013      	ands	r3, r2
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d11c      	bne.n	80035de <HAL_RCC_OscConfig+0x196>
 80035a4:	4b73      	ldr	r3, [pc, #460]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	2380      	movs	r3, #128	; 0x80
 80035aa:	025b      	lsls	r3, r3, #9
 80035ac:	4013      	ands	r3, r2
 80035ae:	d116      	bne.n	80035de <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b0:	4b70      	ldr	r3, [pc, #448]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2202      	movs	r2, #2
 80035b6:	4013      	ands	r3, r2
 80035b8:	d005      	beq.n	80035c6 <HAL_RCC_OscConfig+0x17e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d001      	beq.n	80035c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e24b      	b.n	8003a5e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c6:	4b6b      	ldr	r3, [pc, #428]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	22f8      	movs	r2, #248	; 0xf8
 80035cc:	4393      	bics	r3, r2
 80035ce:	0019      	movs	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	00da      	lsls	r2, r3, #3
 80035d6:	4b67      	ldr	r3, [pc, #412]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 80035d8:	430a      	orrs	r2, r1
 80035da:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035dc:	e041      	b.n	8003662 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d024      	beq.n	8003630 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e6:	4b63      	ldr	r3, [pc, #396]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	4b62      	ldr	r3, [pc, #392]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 80035ec:	2101      	movs	r1, #1
 80035ee:	430a      	orrs	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f2:	f7ff fc73 	bl	8002edc <HAL_GetTick>
 80035f6:	0003      	movs	r3, r0
 80035f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035fc:	f7ff fc6e 	bl	8002edc <HAL_GetTick>
 8003600:	0002      	movs	r2, r0
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e227      	b.n	8003a5e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360e:	4b59      	ldr	r3, [pc, #356]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2202      	movs	r2, #2
 8003614:	4013      	ands	r3, r2
 8003616:	d0f1      	beq.n	80035fc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003618:	4b56      	ldr	r3, [pc, #344]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	22f8      	movs	r2, #248	; 0xf8
 800361e:	4393      	bics	r3, r2
 8003620:	0019      	movs	r1, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	00da      	lsls	r2, r3, #3
 8003628:	4b52      	ldr	r3, [pc, #328]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 800362a:	430a      	orrs	r2, r1
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	e018      	b.n	8003662 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003630:	4b50      	ldr	r3, [pc, #320]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4b4f      	ldr	r3, [pc, #316]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 8003636:	2101      	movs	r1, #1
 8003638:	438a      	bics	r2, r1
 800363a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7ff fc4e 	bl	8002edc <HAL_GetTick>
 8003640:	0003      	movs	r3, r0
 8003642:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003646:	f7ff fc49 	bl	8002edc <HAL_GetTick>
 800364a:	0002      	movs	r2, r0
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e202      	b.n	8003a5e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003658:	4b46      	ldr	r3, [pc, #280]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2202      	movs	r2, #2
 800365e:	4013      	ands	r3, r2
 8003660:	d1f1      	bne.n	8003646 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2208      	movs	r2, #8
 8003668:	4013      	ands	r3, r2
 800366a:	d036      	beq.n	80036da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d019      	beq.n	80036a8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003674:	4b3f      	ldr	r3, [pc, #252]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 8003676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003678:	4b3e      	ldr	r3, [pc, #248]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 800367a:	2101      	movs	r1, #1
 800367c:	430a      	orrs	r2, r1
 800367e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003680:	f7ff fc2c 	bl	8002edc <HAL_GetTick>
 8003684:	0003      	movs	r3, r0
 8003686:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800368a:	f7ff fc27 	bl	8002edc <HAL_GetTick>
 800368e:	0002      	movs	r2, r0
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e1e0      	b.n	8003a5e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369c:	4b35      	ldr	r3, [pc, #212]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	2202      	movs	r2, #2
 80036a2:	4013      	ands	r3, r2
 80036a4:	d0f1      	beq.n	800368a <HAL_RCC_OscConfig+0x242>
 80036a6:	e018      	b.n	80036da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a8:	4b32      	ldr	r3, [pc, #200]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 80036aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ac:	4b31      	ldr	r3, [pc, #196]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 80036ae:	2101      	movs	r1, #1
 80036b0:	438a      	bics	r2, r1
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b4:	f7ff fc12 	bl	8002edc <HAL_GetTick>
 80036b8:	0003      	movs	r3, r0
 80036ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036be:	f7ff fc0d 	bl	8002edc <HAL_GetTick>
 80036c2:	0002      	movs	r2, r0
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e1c6      	b.n	8003a5e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d0:	4b28      	ldr	r3, [pc, #160]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	2202      	movs	r2, #2
 80036d6:	4013      	ands	r3, r2
 80036d8:	d1f1      	bne.n	80036be <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2204      	movs	r2, #4
 80036e0:	4013      	ands	r3, r2
 80036e2:	d100      	bne.n	80036e6 <HAL_RCC_OscConfig+0x29e>
 80036e4:	e0b4      	b.n	8003850 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036e6:	201f      	movs	r0, #31
 80036e8:	183b      	adds	r3, r7, r0
 80036ea:	2200      	movs	r2, #0
 80036ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ee:	4b21      	ldr	r3, [pc, #132]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 80036f0:	69da      	ldr	r2, [r3, #28]
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	055b      	lsls	r3, r3, #21
 80036f6:	4013      	ands	r3, r2
 80036f8:	d110      	bne.n	800371c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fa:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 80036fc:	69da      	ldr	r2, [r3, #28]
 80036fe:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 8003700:	2180      	movs	r1, #128	; 0x80
 8003702:	0549      	lsls	r1, r1, #21
 8003704:	430a      	orrs	r2, r1
 8003706:	61da      	str	r2, [r3, #28]
 8003708:	4b1a      	ldr	r3, [pc, #104]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 800370a:	69da      	ldr	r2, [r3, #28]
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	055b      	lsls	r3, r3, #21
 8003710:	4013      	ands	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003716:	183b      	adds	r3, r7, r0
 8003718:	2201      	movs	r2, #1
 800371a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371c:	4b18      	ldr	r3, [pc, #96]	; (8003780 <HAL_RCC_OscConfig+0x338>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	2380      	movs	r3, #128	; 0x80
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4013      	ands	r3, r2
 8003726:	d11a      	bne.n	800375e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003728:	4b15      	ldr	r3, [pc, #84]	; (8003780 <HAL_RCC_OscConfig+0x338>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4b14      	ldr	r3, [pc, #80]	; (8003780 <HAL_RCC_OscConfig+0x338>)
 800372e:	2180      	movs	r1, #128	; 0x80
 8003730:	0049      	lsls	r1, r1, #1
 8003732:	430a      	orrs	r2, r1
 8003734:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003736:	f7ff fbd1 	bl	8002edc <HAL_GetTick>
 800373a:	0003      	movs	r3, r0
 800373c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003740:	f7ff fbcc 	bl	8002edc <HAL_GetTick>
 8003744:	0002      	movs	r2, r0
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b64      	cmp	r3, #100	; 0x64
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e185      	b.n	8003a5e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <HAL_RCC_OscConfig+0x338>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	2380      	movs	r3, #128	; 0x80
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4013      	ands	r3, r2
 800375c:	d0f0      	beq.n	8003740 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d10e      	bne.n	8003784 <HAL_RCC_OscConfig+0x33c>
 8003766:	4b03      	ldr	r3, [pc, #12]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 8003768:	6a1a      	ldr	r2, [r3, #32]
 800376a:	4b02      	ldr	r3, [pc, #8]	; (8003774 <HAL_RCC_OscConfig+0x32c>)
 800376c:	2101      	movs	r1, #1
 800376e:	430a      	orrs	r2, r1
 8003770:	621a      	str	r2, [r3, #32]
 8003772:	e035      	b.n	80037e0 <HAL_RCC_OscConfig+0x398>
 8003774:	40021000 	.word	0x40021000
 8003778:	fffeffff 	.word	0xfffeffff
 800377c:	fffbffff 	.word	0xfffbffff
 8003780:	40007000 	.word	0x40007000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10c      	bne.n	80037a6 <HAL_RCC_OscConfig+0x35e>
 800378c:	4bb6      	ldr	r3, [pc, #728]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 800378e:	6a1a      	ldr	r2, [r3, #32]
 8003790:	4bb5      	ldr	r3, [pc, #724]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 8003792:	2101      	movs	r1, #1
 8003794:	438a      	bics	r2, r1
 8003796:	621a      	str	r2, [r3, #32]
 8003798:	4bb3      	ldr	r3, [pc, #716]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 800379a:	6a1a      	ldr	r2, [r3, #32]
 800379c:	4bb2      	ldr	r3, [pc, #712]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 800379e:	2104      	movs	r1, #4
 80037a0:	438a      	bics	r2, r1
 80037a2:	621a      	str	r2, [r3, #32]
 80037a4:	e01c      	b.n	80037e0 <HAL_RCC_OscConfig+0x398>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	2b05      	cmp	r3, #5
 80037ac:	d10c      	bne.n	80037c8 <HAL_RCC_OscConfig+0x380>
 80037ae:	4bae      	ldr	r3, [pc, #696]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80037b0:	6a1a      	ldr	r2, [r3, #32]
 80037b2:	4bad      	ldr	r3, [pc, #692]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80037b4:	2104      	movs	r1, #4
 80037b6:	430a      	orrs	r2, r1
 80037b8:	621a      	str	r2, [r3, #32]
 80037ba:	4bab      	ldr	r3, [pc, #684]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80037bc:	6a1a      	ldr	r2, [r3, #32]
 80037be:	4baa      	ldr	r3, [pc, #680]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80037c0:	2101      	movs	r1, #1
 80037c2:	430a      	orrs	r2, r1
 80037c4:	621a      	str	r2, [r3, #32]
 80037c6:	e00b      	b.n	80037e0 <HAL_RCC_OscConfig+0x398>
 80037c8:	4ba7      	ldr	r3, [pc, #668]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80037ca:	6a1a      	ldr	r2, [r3, #32]
 80037cc:	4ba6      	ldr	r3, [pc, #664]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80037ce:	2101      	movs	r1, #1
 80037d0:	438a      	bics	r2, r1
 80037d2:	621a      	str	r2, [r3, #32]
 80037d4:	4ba4      	ldr	r3, [pc, #656]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80037d6:	6a1a      	ldr	r2, [r3, #32]
 80037d8:	4ba3      	ldr	r3, [pc, #652]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80037da:	2104      	movs	r1, #4
 80037dc:	438a      	bics	r2, r1
 80037de:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d014      	beq.n	8003812 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e8:	f7ff fb78 	bl	8002edc <HAL_GetTick>
 80037ec:	0003      	movs	r3, r0
 80037ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f0:	e009      	b.n	8003806 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f2:	f7ff fb73 	bl	8002edc <HAL_GetTick>
 80037f6:	0002      	movs	r2, r0
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	4a9b      	ldr	r2, [pc, #620]	; (8003a6c <HAL_RCC_OscConfig+0x624>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e12b      	b.n	8003a5e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003806:	4b98      	ldr	r3, [pc, #608]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	2202      	movs	r2, #2
 800380c:	4013      	ands	r3, r2
 800380e:	d0f0      	beq.n	80037f2 <HAL_RCC_OscConfig+0x3aa>
 8003810:	e013      	b.n	800383a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003812:	f7ff fb63 	bl	8002edc <HAL_GetTick>
 8003816:	0003      	movs	r3, r0
 8003818:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381a:	e009      	b.n	8003830 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800381c:	f7ff fb5e 	bl	8002edc <HAL_GetTick>
 8003820:	0002      	movs	r2, r0
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	4a91      	ldr	r2, [pc, #580]	; (8003a6c <HAL_RCC_OscConfig+0x624>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e116      	b.n	8003a5e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003830:	4b8d      	ldr	r3, [pc, #564]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	2202      	movs	r2, #2
 8003836:	4013      	ands	r3, r2
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800383a:	231f      	movs	r3, #31
 800383c:	18fb      	adds	r3, r7, r3
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d105      	bne.n	8003850 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003844:	4b88      	ldr	r3, [pc, #544]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 8003846:	69da      	ldr	r2, [r3, #28]
 8003848:	4b87      	ldr	r3, [pc, #540]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 800384a:	4989      	ldr	r1, [pc, #548]	; (8003a70 <HAL_RCC_OscConfig+0x628>)
 800384c:	400a      	ands	r2, r1
 800384e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2210      	movs	r2, #16
 8003856:	4013      	ands	r3, r2
 8003858:	d063      	beq.n	8003922 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d12a      	bne.n	80038b8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003862:	4b81      	ldr	r3, [pc, #516]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 8003864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003866:	4b80      	ldr	r3, [pc, #512]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 8003868:	2104      	movs	r1, #4
 800386a:	430a      	orrs	r2, r1
 800386c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800386e:	4b7e      	ldr	r3, [pc, #504]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 8003870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003872:	4b7d      	ldr	r3, [pc, #500]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 8003874:	2101      	movs	r1, #1
 8003876:	430a      	orrs	r2, r1
 8003878:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387a:	f7ff fb2f 	bl	8002edc <HAL_GetTick>
 800387e:	0003      	movs	r3, r0
 8003880:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003884:	f7ff fb2a 	bl	8002edc <HAL_GetTick>
 8003888:	0002      	movs	r2, r0
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e0e3      	b.n	8003a5e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003896:	4b74      	ldr	r3, [pc, #464]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 8003898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389a:	2202      	movs	r2, #2
 800389c:	4013      	ands	r3, r2
 800389e:	d0f1      	beq.n	8003884 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80038a0:	4b71      	ldr	r3, [pc, #452]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80038a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a4:	22f8      	movs	r2, #248	; 0xf8
 80038a6:	4393      	bics	r3, r2
 80038a8:	0019      	movs	r1, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	00da      	lsls	r2, r3, #3
 80038b0:	4b6d      	ldr	r3, [pc, #436]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80038b2:	430a      	orrs	r2, r1
 80038b4:	635a      	str	r2, [r3, #52]	; 0x34
 80038b6:	e034      	b.n	8003922 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	3305      	adds	r3, #5
 80038be:	d111      	bne.n	80038e4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80038c0:	4b69      	ldr	r3, [pc, #420]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80038c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c4:	4b68      	ldr	r3, [pc, #416]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80038c6:	2104      	movs	r1, #4
 80038c8:	438a      	bics	r2, r1
 80038ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80038cc:	4b66      	ldr	r3, [pc, #408]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80038ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d0:	22f8      	movs	r2, #248	; 0xf8
 80038d2:	4393      	bics	r3, r2
 80038d4:	0019      	movs	r1, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	00da      	lsls	r2, r3, #3
 80038dc:	4b62      	ldr	r3, [pc, #392]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80038de:	430a      	orrs	r2, r1
 80038e0:	635a      	str	r2, [r3, #52]	; 0x34
 80038e2:	e01e      	b.n	8003922 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80038e4:	4b60      	ldr	r3, [pc, #384]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80038e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e8:	4b5f      	ldr	r3, [pc, #380]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80038ea:	2104      	movs	r1, #4
 80038ec:	430a      	orrs	r2, r1
 80038ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80038f0:	4b5d      	ldr	r3, [pc, #372]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80038f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038f4:	4b5c      	ldr	r3, [pc, #368]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80038f6:	2101      	movs	r1, #1
 80038f8:	438a      	bics	r2, r1
 80038fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fc:	f7ff faee 	bl	8002edc <HAL_GetTick>
 8003900:	0003      	movs	r3, r0
 8003902:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003906:	f7ff fae9 	bl	8002edc <HAL_GetTick>
 800390a:	0002      	movs	r2, r0
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e0a2      	b.n	8003a5e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003918:	4b53      	ldr	r3, [pc, #332]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 800391a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391c:	2202      	movs	r2, #2
 800391e:	4013      	ands	r3, r2
 8003920:	d1f1      	bne.n	8003906 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d100      	bne.n	800392c <HAL_RCC_OscConfig+0x4e4>
 800392a:	e097      	b.n	8003a5c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800392c:	4b4e      	ldr	r3, [pc, #312]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	220c      	movs	r2, #12
 8003932:	4013      	ands	r3, r2
 8003934:	2b08      	cmp	r3, #8
 8003936:	d100      	bne.n	800393a <HAL_RCC_OscConfig+0x4f2>
 8003938:	e06b      	b.n	8003a12 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	2b02      	cmp	r3, #2
 8003940:	d14c      	bne.n	80039dc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003942:	4b49      	ldr	r3, [pc, #292]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	4b48      	ldr	r3, [pc, #288]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 8003948:	494a      	ldr	r1, [pc, #296]	; (8003a74 <HAL_RCC_OscConfig+0x62c>)
 800394a:	400a      	ands	r2, r1
 800394c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394e:	f7ff fac5 	bl	8002edc <HAL_GetTick>
 8003952:	0003      	movs	r3, r0
 8003954:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003958:	f7ff fac0 	bl	8002edc <HAL_GetTick>
 800395c:	0002      	movs	r2, r0
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e079      	b.n	8003a5e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800396a:	4b3f      	ldr	r3, [pc, #252]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	049b      	lsls	r3, r3, #18
 8003972:	4013      	ands	r3, r2
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003976:	4b3c      	ldr	r3, [pc, #240]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 8003978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397a:	220f      	movs	r2, #15
 800397c:	4393      	bics	r3, r2
 800397e:	0019      	movs	r1, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003984:	4b38      	ldr	r3, [pc, #224]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 8003986:	430a      	orrs	r2, r1
 8003988:	62da      	str	r2, [r3, #44]	; 0x2c
 800398a:	4b37      	ldr	r3, [pc, #220]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	4a3a      	ldr	r2, [pc, #232]	; (8003a78 <HAL_RCC_OscConfig+0x630>)
 8003990:	4013      	ands	r3, r2
 8003992:	0019      	movs	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	431a      	orrs	r2, r3
 800399e:	4b32      	ldr	r3, [pc, #200]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80039a0:	430a      	orrs	r2, r1
 80039a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a4:	4b30      	ldr	r3, [pc, #192]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	4b2f      	ldr	r3, [pc, #188]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80039aa:	2180      	movs	r1, #128	; 0x80
 80039ac:	0449      	lsls	r1, r1, #17
 80039ae:	430a      	orrs	r2, r1
 80039b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b2:	f7ff fa93 	bl	8002edc <HAL_GetTick>
 80039b6:	0003      	movs	r3, r0
 80039b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039bc:	f7ff fa8e 	bl	8002edc <HAL_GetTick>
 80039c0:	0002      	movs	r2, r0
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e047      	b.n	8003a5e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039ce:	4b26      	ldr	r3, [pc, #152]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	049b      	lsls	r3, r3, #18
 80039d6:	4013      	ands	r3, r2
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0x574>
 80039da:	e03f      	b.n	8003a5c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039dc:	4b22      	ldr	r3, [pc, #136]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4b21      	ldr	r3, [pc, #132]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 80039e2:	4924      	ldr	r1, [pc, #144]	; (8003a74 <HAL_RCC_OscConfig+0x62c>)
 80039e4:	400a      	ands	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7ff fa78 	bl	8002edc <HAL_GetTick>
 80039ec:	0003      	movs	r3, r0
 80039ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039f2:	f7ff fa73 	bl	8002edc <HAL_GetTick>
 80039f6:	0002      	movs	r2, r0
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e02c      	b.n	8003a5e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a04:	4b18      	ldr	r3, [pc, #96]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	049b      	lsls	r3, r3, #18
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d1f0      	bne.n	80039f2 <HAL_RCC_OscConfig+0x5aa>
 8003a10:	e024      	b.n	8003a5c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e01f      	b.n	8003a5e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003a1e:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003a24:	4b10      	ldr	r3, [pc, #64]	; (8003a68 <HAL_RCC_OscConfig+0x620>)
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	025b      	lsls	r3, r3, #9
 8003a30:	401a      	ands	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d10e      	bne.n	8003a58 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	220f      	movs	r2, #15
 8003a3e:	401a      	ands	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	23f0      	movs	r3, #240	; 0xf0
 8003a4c:	039b      	lsls	r3, r3, #14
 8003a4e:	401a      	ands	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	0018      	movs	r0, r3
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b008      	add	sp, #32
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	00001388 	.word	0x00001388
 8003a70:	efffffff 	.word	0xefffffff
 8003a74:	feffffff 	.word	0xfeffffff
 8003a78:	ffc2ffff 	.word	0xffc2ffff

08003a7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0b3      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a90:	4b5b      	ldr	r3, [pc, #364]	; (8003c00 <HAL_RCC_ClockConfig+0x184>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2201      	movs	r2, #1
 8003a96:	4013      	ands	r3, r2
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d911      	bls.n	8003ac2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	4b58      	ldr	r3, [pc, #352]	; (8003c00 <HAL_RCC_ClockConfig+0x184>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	4393      	bics	r3, r2
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	4b55      	ldr	r3, [pc, #340]	; (8003c00 <HAL_RCC_ClockConfig+0x184>)
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab0:	4b53      	ldr	r3, [pc, #332]	; (8003c00 <HAL_RCC_ClockConfig+0x184>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d001      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e09a      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d015      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d006      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003ad6:	4b4b      	ldr	r3, [pc, #300]	; (8003c04 <HAL_RCC_ClockConfig+0x188>)
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	4b4a      	ldr	r3, [pc, #296]	; (8003c04 <HAL_RCC_ClockConfig+0x188>)
 8003adc:	21e0      	movs	r1, #224	; 0xe0
 8003ade:	00c9      	lsls	r1, r1, #3
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae4:	4b47      	ldr	r3, [pc, #284]	; (8003c04 <HAL_RCC_ClockConfig+0x188>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	22f0      	movs	r2, #240	; 0xf0
 8003aea:	4393      	bics	r3, r2
 8003aec:	0019      	movs	r1, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	4b44      	ldr	r3, [pc, #272]	; (8003c04 <HAL_RCC_ClockConfig+0x188>)
 8003af4:	430a      	orrs	r2, r1
 8003af6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2201      	movs	r2, #1
 8003afe:	4013      	ands	r3, r2
 8003b00:	d040      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0a:	4b3e      	ldr	r3, [pc, #248]	; (8003c04 <HAL_RCC_ClockConfig+0x188>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	2380      	movs	r3, #128	; 0x80
 8003b10:	029b      	lsls	r3, r3, #10
 8003b12:	4013      	ands	r3, r2
 8003b14:	d114      	bne.n	8003b40 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e06e      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d107      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b22:	4b38      	ldr	r3, [pc, #224]	; (8003c04 <HAL_RCC_ClockConfig+0x188>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	2380      	movs	r3, #128	; 0x80
 8003b28:	049b      	lsls	r3, r3, #18
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d108      	bne.n	8003b40 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e062      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b32:	4b34      	ldr	r3, [pc, #208]	; (8003c04 <HAL_RCC_ClockConfig+0x188>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2202      	movs	r2, #2
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d101      	bne.n	8003b40 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e05b      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b40:	4b30      	ldr	r3, [pc, #192]	; (8003c04 <HAL_RCC_ClockConfig+0x188>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2203      	movs	r2, #3
 8003b46:	4393      	bics	r3, r2
 8003b48:	0019      	movs	r1, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	4b2d      	ldr	r3, [pc, #180]	; (8003c04 <HAL_RCC_ClockConfig+0x188>)
 8003b50:	430a      	orrs	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b54:	f7ff f9c2 	bl	8002edc <HAL_GetTick>
 8003b58:	0003      	movs	r3, r0
 8003b5a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5c:	e009      	b.n	8003b72 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b5e:	f7ff f9bd 	bl	8002edc <HAL_GetTick>
 8003b62:	0002      	movs	r2, r0
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	4a27      	ldr	r2, [pc, #156]	; (8003c08 <HAL_RCC_ClockConfig+0x18c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e042      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b72:	4b24      	ldr	r3, [pc, #144]	; (8003c04 <HAL_RCC_ClockConfig+0x188>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	220c      	movs	r2, #12
 8003b78:	401a      	ands	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d1ec      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b84:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <HAL_RCC_ClockConfig+0x184>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d211      	bcs.n	8003bb6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	4b1b      	ldr	r3, [pc, #108]	; (8003c00 <HAL_RCC_ClockConfig+0x184>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2201      	movs	r2, #1
 8003b98:	4393      	bics	r3, r2
 8003b9a:	0019      	movs	r1, r3
 8003b9c:	4b18      	ldr	r3, [pc, #96]	; (8003c00 <HAL_RCC_ClockConfig+0x184>)
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba4:	4b16      	ldr	r3, [pc, #88]	; (8003c00 <HAL_RCC_ClockConfig+0x184>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	4013      	ands	r3, r2
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d001      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e020      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2204      	movs	r2, #4
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d009      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc0:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <HAL_RCC_ClockConfig+0x188>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	4a11      	ldr	r2, [pc, #68]	; (8003c0c <HAL_RCC_ClockConfig+0x190>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	0019      	movs	r1, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	4b0d      	ldr	r3, [pc, #52]	; (8003c04 <HAL_RCC_ClockConfig+0x188>)
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003bd4:	f000 f820 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8003bd8:	0001      	movs	r1, r0
 8003bda:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <HAL_RCC_ClockConfig+0x188>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	091b      	lsrs	r3, r3, #4
 8003be0:	220f      	movs	r2, #15
 8003be2:	4013      	ands	r3, r2
 8003be4:	4a0a      	ldr	r2, [pc, #40]	; (8003c10 <HAL_RCC_ClockConfig+0x194>)
 8003be6:	5cd3      	ldrb	r3, [r2, r3]
 8003be8:	000a      	movs	r2, r1
 8003bea:	40da      	lsrs	r2, r3
 8003bec:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_RCC_ClockConfig+0x198>)
 8003bee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003bf0:	2003      	movs	r0, #3
 8003bf2:	f7ff f92d 	bl	8002e50 <HAL_InitTick>
  
  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b004      	add	sp, #16
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40022000 	.word	0x40022000
 8003c04:	40021000 	.word	0x40021000
 8003c08:	00001388 	.word	0x00001388
 8003c0c:	fffff8ff 	.word	0xfffff8ff
 8003c10:	08008564 	.word	0x08008564
 8003c14:	20000000 	.word	0x20000000

08003c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c18:	b590      	push	{r4, r7, lr}
 8003c1a:	b08f      	sub	sp, #60	; 0x3c
 8003c1c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003c1e:	2314      	movs	r3, #20
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	4a2b      	ldr	r2, [pc, #172]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c24:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003c26:	c313      	stmia	r3!, {r0, r1, r4}
 8003c28:	6812      	ldr	r2, [r2, #0]
 8003c2a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003c2c:	1d3b      	adds	r3, r7, #4
 8003c2e:	4a29      	ldr	r2, [pc, #164]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c30:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003c32:	c313      	stmia	r3!, {r0, r1, r4}
 8003c34:	6812      	ldr	r2, [r2, #0]
 8003c36:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c40:	2300      	movs	r3, #0
 8003c42:	637b      	str	r3, [r7, #52]	; 0x34
 8003c44:	2300      	movs	r3, #0
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003c4c:	4b22      	ldr	r3, [pc, #136]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	220c      	movs	r2, #12
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d002      	beq.n	8003c62 <HAL_RCC_GetSysClockFreq+0x4a>
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d003      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0x50>
 8003c60:	e02d      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c62:	4b1e      	ldr	r3, [pc, #120]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c64:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003c66:	e02d      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6a:	0c9b      	lsrs	r3, r3, #18
 8003c6c:	220f      	movs	r2, #15
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2214      	movs	r2, #20
 8003c72:	18ba      	adds	r2, r7, r2
 8003c74:	5cd3      	ldrb	r3, [r2, r3]
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003c78:	4b17      	ldr	r3, [pc, #92]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	220f      	movs	r2, #15
 8003c7e:	4013      	ands	r3, r2
 8003c80:	1d3a      	adds	r2, r7, #4
 8003c82:	5cd3      	ldrb	r3, [r2, r3]
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c88:	2380      	movs	r3, #128	; 0x80
 8003c8a:	025b      	lsls	r3, r3, #9
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d009      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c92:	4812      	ldr	r0, [pc, #72]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c94:	f7fc fa54 	bl	8000140 <__udivsi3>
 8003c98:	0003      	movs	r3, r0
 8003c9a:	001a      	movs	r2, r3
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	4353      	muls	r3, r2
 8003ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca2:	e009      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ca6:	000a      	movs	r2, r1
 8003ca8:	0152      	lsls	r2, r2, #5
 8003caa:	1a52      	subs	r2, r2, r1
 8003cac:	0193      	lsls	r3, r2, #6
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	185b      	adds	r3, r3, r1
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003cbc:	e002      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cbe:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cc0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003cc2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b00f      	add	sp, #60	; 0x3c
 8003ccc:	bd90      	pop	{r4, r7, pc}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	080084c4 	.word	0x080084c4
 8003cd4:	080084d4 	.word	0x080084d4
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	007a1200 	.word	0x007a1200

08003ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce4:	4b02      	ldr	r3, [pc, #8]	; (8003cf0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
}
 8003ce8:	0018      	movs	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	20000000 	.word	0x20000000

08003cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003cf8:	f7ff fff2 	bl	8003ce0 <HAL_RCC_GetHCLKFreq>
 8003cfc:	0001      	movs	r1, r0
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	0a1b      	lsrs	r3, r3, #8
 8003d04:	2207      	movs	r2, #7
 8003d06:	4013      	ands	r3, r2
 8003d08:	4a04      	ldr	r2, [pc, #16]	; (8003d1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d0a:	5cd3      	ldrb	r3, [r2, r3]
 8003d0c:	40d9      	lsrs	r1, r3
 8003d0e:	000b      	movs	r3, r1
}    
 8003d10:	0018      	movs	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	08008574 	.word	0x08008574

08003d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	025b      	lsls	r3, r3, #9
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d100      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003d3c:	e08e      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003d3e:	2017      	movs	r0, #23
 8003d40:	183b      	adds	r3, r7, r0
 8003d42:	2200      	movs	r2, #0
 8003d44:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d46:	4b5f      	ldr	r3, [pc, #380]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d48:	69da      	ldr	r2, [r3, #28]
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	055b      	lsls	r3, r3, #21
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d110      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d52:	4b5c      	ldr	r3, [pc, #368]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d54:	69da      	ldr	r2, [r3, #28]
 8003d56:	4b5b      	ldr	r3, [pc, #364]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d58:	2180      	movs	r1, #128	; 0x80
 8003d5a:	0549      	lsls	r1, r1, #21
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	61da      	str	r2, [r3, #28]
 8003d60:	4b58      	ldr	r3, [pc, #352]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d62:	69da      	ldr	r2, [r3, #28]
 8003d64:	2380      	movs	r3, #128	; 0x80
 8003d66:	055b      	lsls	r3, r3, #21
 8003d68:	4013      	ands	r3, r2
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d6e:	183b      	adds	r3, r7, r0
 8003d70:	2201      	movs	r2, #1
 8003d72:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d74:	4b54      	ldr	r3, [pc, #336]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	2380      	movs	r3, #128	; 0x80
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d11a      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d80:	4b51      	ldr	r3, [pc, #324]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	4b50      	ldr	r3, [pc, #320]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d86:	2180      	movs	r1, #128	; 0x80
 8003d88:	0049      	lsls	r1, r1, #1
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8e:	f7ff f8a5 	bl	8002edc <HAL_GetTick>
 8003d92:	0003      	movs	r3, r0
 8003d94:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d96:	e008      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d98:	f7ff f8a0 	bl	8002edc <HAL_GetTick>
 8003d9c:	0002      	movs	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	; 0x64
 8003da4:	d901      	bls.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e087      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003daa:	4b47      	ldr	r3, [pc, #284]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	2380      	movs	r3, #128	; 0x80
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4013      	ands	r3, r2
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003db6:	4b43      	ldr	r3, [pc, #268]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003db8:	6a1a      	ldr	r2, [r3, #32]
 8003dba:	23c0      	movs	r3, #192	; 0xc0
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d034      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	23c0      	movs	r3, #192	; 0xc0
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d02c      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dd8:	4b3a      	ldr	r3, [pc, #232]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	4a3b      	ldr	r2, [pc, #236]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003de2:	4b38      	ldr	r3, [pc, #224]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003de4:	6a1a      	ldr	r2, [r3, #32]
 8003de6:	4b37      	ldr	r3, [pc, #220]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003de8:	2180      	movs	r1, #128	; 0x80
 8003dea:	0249      	lsls	r1, r1, #9
 8003dec:	430a      	orrs	r2, r1
 8003dee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003df0:	4b34      	ldr	r3, [pc, #208]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003df2:	6a1a      	ldr	r2, [r3, #32]
 8003df4:	4b33      	ldr	r3, [pc, #204]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003df6:	4936      	ldr	r1, [pc, #216]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003df8:	400a      	ands	r2, r1
 8003dfa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dfc:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	4013      	ands	r3, r2
 8003e08:	d013      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0a:	f7ff f867 	bl	8002edc <HAL_GetTick>
 8003e0e:	0003      	movs	r3, r0
 8003e10:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e12:	e009      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e14:	f7ff f862 	bl	8002edc <HAL_GetTick>
 8003e18:	0002      	movs	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	4a2d      	ldr	r2, [pc, #180]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e048      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e28:	4b26      	ldr	r3, [pc, #152]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	4013      	ands	r3, r2
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e32:	4b24      	ldr	r3, [pc, #144]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	4a25      	ldr	r2, [pc, #148]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	0019      	movs	r1, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	4b20      	ldr	r3, [pc, #128]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e42:	430a      	orrs	r2, r1
 8003e44:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e46:	2317      	movs	r3, #23
 8003e48:	18fb      	adds	r3, r7, r3
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d105      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e50:	4b1c      	ldr	r3, [pc, #112]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e52:	69da      	ldr	r2, [r3, #28]
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e56:	4920      	ldr	r1, [pc, #128]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e58:	400a      	ands	r2, r1
 8003e5a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2201      	movs	r2, #1
 8003e62:	4013      	ands	r3, r2
 8003e64:	d009      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e66:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	4393      	bics	r3, r2
 8003e6e:	0019      	movs	r1, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	4b13      	ldr	r3, [pc, #76]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e76:	430a      	orrs	r2, r1
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	4013      	ands	r3, r2
 8003e82:	d009      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e84:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	2210      	movs	r2, #16
 8003e8a:	4393      	bics	r3, r2
 8003e8c:	0019      	movs	r1, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e94:	430a      	orrs	r2, r1
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d009      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ea4:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	2240      	movs	r2, #64	; 0x40
 8003eaa:	4393      	bics	r3, r2
 8003eac:	0019      	movs	r1, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	4b04      	ldr	r3, [pc, #16]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	0018      	movs	r0, r3
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b006      	add	sp, #24
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	40007000 	.word	0x40007000
 8003ecc:	fffffcff 	.word	0xfffffcff
 8003ed0:	fffeffff 	.word	0xfffeffff
 8003ed4:	00001388 	.word	0x00001388
 8003ed8:	efffffff 	.word	0xefffffff

08003edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e042      	b.n	8003f74 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	223d      	movs	r2, #61	; 0x3d
 8003ef2:	5c9b      	ldrb	r3, [r3, r2]
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d107      	bne.n	8003f0a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	223c      	movs	r2, #60	; 0x3c
 8003efe:	2100      	movs	r1, #0
 8003f00:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	0018      	movs	r0, r3
 8003f06:	f7fe fdd1 	bl	8002aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	223d      	movs	r2, #61	; 0x3d
 8003f0e:	2102      	movs	r1, #2
 8003f10:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	0019      	movs	r1, r3
 8003f1c:	0010      	movs	r0, r2
 8003f1e:	f000 fc6d 	bl	80047fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2246      	movs	r2, #70	; 0x46
 8003f26:	2101      	movs	r1, #1
 8003f28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	223e      	movs	r2, #62	; 0x3e
 8003f2e:	2101      	movs	r1, #1
 8003f30:	5499      	strb	r1, [r3, r2]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	223f      	movs	r2, #63	; 0x3f
 8003f36:	2101      	movs	r1, #1
 8003f38:	5499      	strb	r1, [r3, r2]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2240      	movs	r2, #64	; 0x40
 8003f3e:	2101      	movs	r1, #1
 8003f40:	5499      	strb	r1, [r3, r2]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2241      	movs	r2, #65	; 0x41
 8003f46:	2101      	movs	r1, #1
 8003f48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2242      	movs	r2, #66	; 0x42
 8003f4e:	2101      	movs	r1, #1
 8003f50:	5499      	strb	r1, [r3, r2]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2243      	movs	r2, #67	; 0x43
 8003f56:	2101      	movs	r1, #1
 8003f58:	5499      	strb	r1, [r3, r2]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2244      	movs	r2, #68	; 0x44
 8003f5e:	2101      	movs	r1, #1
 8003f60:	5499      	strb	r1, [r3, r2]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2245      	movs	r2, #69	; 0x45
 8003f66:	2101      	movs	r1, #1
 8003f68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	223d      	movs	r2, #61	; 0x3d
 8003f6e:	2101      	movs	r1, #1
 8003f70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	0018      	movs	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b002      	add	sp, #8
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e042      	b.n	8004014 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	223d      	movs	r2, #61	; 0x3d
 8003f92:	5c9b      	ldrb	r3, [r3, r2]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d107      	bne.n	8003faa <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	223c      	movs	r2, #60	; 0x3c
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f000 f839 	bl	800401c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	223d      	movs	r2, #61	; 0x3d
 8003fae:	2102      	movs	r1, #2
 8003fb0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	0019      	movs	r1, r3
 8003fbc:	0010      	movs	r0, r2
 8003fbe:	f000 fc1d 	bl	80047fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2246      	movs	r2, #70	; 0x46
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	223e      	movs	r2, #62	; 0x3e
 8003fce:	2101      	movs	r1, #1
 8003fd0:	5499      	strb	r1, [r3, r2]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	223f      	movs	r2, #63	; 0x3f
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	5499      	strb	r1, [r3, r2]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2240      	movs	r2, #64	; 0x40
 8003fde:	2101      	movs	r1, #1
 8003fe0:	5499      	strb	r1, [r3, r2]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2241      	movs	r2, #65	; 0x41
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2242      	movs	r2, #66	; 0x42
 8003fee:	2101      	movs	r1, #1
 8003ff0:	5499      	strb	r1, [r3, r2]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2243      	movs	r2, #67	; 0x43
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	5499      	strb	r1, [r3, r2]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2244      	movs	r2, #68	; 0x44
 8003ffe:	2101      	movs	r1, #1
 8004000:	5499      	strb	r1, [r3, r2]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2245      	movs	r2, #69	; 0x45
 8004006:	2101      	movs	r1, #1
 8004008:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	223d      	movs	r2, #61	; 0x3d
 800400e:	2101      	movs	r1, #1
 8004010:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	0018      	movs	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	b002      	add	sp, #8
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004024:	46c0      	nop			; (mov r8, r8)
 8004026:	46bd      	mov	sp, r7
 8004028:	b002      	add	sp, #8
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004036:	230f      	movs	r3, #15
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	2200      	movs	r2, #0
 800403c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d104      	bne.n	800404e <HAL_TIM_IC_Start_IT+0x22>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	223e      	movs	r2, #62	; 0x3e
 8004048:	5c9b      	ldrb	r3, [r3, r2]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	e013      	b.n	8004076 <HAL_TIM_IC_Start_IT+0x4a>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b04      	cmp	r3, #4
 8004052:	d104      	bne.n	800405e <HAL_TIM_IC_Start_IT+0x32>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	223f      	movs	r2, #63	; 0x3f
 8004058:	5c9b      	ldrb	r3, [r3, r2]
 800405a:	b2db      	uxtb	r3, r3
 800405c:	e00b      	b.n	8004076 <HAL_TIM_IC_Start_IT+0x4a>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b08      	cmp	r3, #8
 8004062:	d104      	bne.n	800406e <HAL_TIM_IC_Start_IT+0x42>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2240      	movs	r2, #64	; 0x40
 8004068:	5c9b      	ldrb	r3, [r3, r2]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	e003      	b.n	8004076 <HAL_TIM_IC_Start_IT+0x4a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2241      	movs	r2, #65	; 0x41
 8004072:	5c9b      	ldrb	r3, [r3, r2]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	220e      	movs	r2, #14
 8004078:	18ba      	adds	r2, r7, r2
 800407a:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d104      	bne.n	800408c <HAL_TIM_IC_Start_IT+0x60>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2242      	movs	r2, #66	; 0x42
 8004086:	5c9b      	ldrb	r3, [r3, r2]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	e013      	b.n	80040b4 <HAL_TIM_IC_Start_IT+0x88>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	2b04      	cmp	r3, #4
 8004090:	d104      	bne.n	800409c <HAL_TIM_IC_Start_IT+0x70>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2243      	movs	r2, #67	; 0x43
 8004096:	5c9b      	ldrb	r3, [r3, r2]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	e00b      	b.n	80040b4 <HAL_TIM_IC_Start_IT+0x88>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d104      	bne.n	80040ac <HAL_TIM_IC_Start_IT+0x80>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2244      	movs	r2, #68	; 0x44
 80040a6:	5c9b      	ldrb	r3, [r3, r2]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	e003      	b.n	80040b4 <HAL_TIM_IC_Start_IT+0x88>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2245      	movs	r2, #69	; 0x45
 80040b0:	5c9b      	ldrb	r3, [r3, r2]
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	210d      	movs	r1, #13
 80040b6:	187a      	adds	r2, r7, r1
 80040b8:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80040ba:	230e      	movs	r3, #14
 80040bc:	18fb      	adds	r3, r7, r3
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d103      	bne.n	80040cc <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80040c4:	187b      	adds	r3, r7, r1
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d001      	beq.n	80040d0 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0b1      	b.n	8004234 <HAL_TIM_IC_Start_IT+0x208>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d104      	bne.n	80040e0 <HAL_TIM_IC_Start_IT+0xb4>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	223e      	movs	r2, #62	; 0x3e
 80040da:	2102      	movs	r1, #2
 80040dc:	5499      	strb	r1, [r3, r2]
 80040de:	e013      	b.n	8004108 <HAL_TIM_IC_Start_IT+0xdc>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d104      	bne.n	80040f0 <HAL_TIM_IC_Start_IT+0xc4>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	223f      	movs	r2, #63	; 0x3f
 80040ea:	2102      	movs	r1, #2
 80040ec:	5499      	strb	r1, [r3, r2]
 80040ee:	e00b      	b.n	8004108 <HAL_TIM_IC_Start_IT+0xdc>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d104      	bne.n	8004100 <HAL_TIM_IC_Start_IT+0xd4>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2240      	movs	r2, #64	; 0x40
 80040fa:	2102      	movs	r1, #2
 80040fc:	5499      	strb	r1, [r3, r2]
 80040fe:	e003      	b.n	8004108 <HAL_TIM_IC_Start_IT+0xdc>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2241      	movs	r2, #65	; 0x41
 8004104:	2102      	movs	r1, #2
 8004106:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d104      	bne.n	8004118 <HAL_TIM_IC_Start_IT+0xec>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2242      	movs	r2, #66	; 0x42
 8004112:	2102      	movs	r1, #2
 8004114:	5499      	strb	r1, [r3, r2]
 8004116:	e013      	b.n	8004140 <HAL_TIM_IC_Start_IT+0x114>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2b04      	cmp	r3, #4
 800411c:	d104      	bne.n	8004128 <HAL_TIM_IC_Start_IT+0xfc>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2243      	movs	r2, #67	; 0x43
 8004122:	2102      	movs	r1, #2
 8004124:	5499      	strb	r1, [r3, r2]
 8004126:	e00b      	b.n	8004140 <HAL_TIM_IC_Start_IT+0x114>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	2b08      	cmp	r3, #8
 800412c:	d104      	bne.n	8004138 <HAL_TIM_IC_Start_IT+0x10c>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2244      	movs	r2, #68	; 0x44
 8004132:	2102      	movs	r1, #2
 8004134:	5499      	strb	r1, [r3, r2]
 8004136:	e003      	b.n	8004140 <HAL_TIM_IC_Start_IT+0x114>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2245      	movs	r2, #69	; 0x45
 800413c:	2102      	movs	r1, #2
 800413e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b0c      	cmp	r3, #12
 8004144:	d02a      	beq.n	800419c <HAL_TIM_IC_Start_IT+0x170>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b0c      	cmp	r3, #12
 800414a:	d830      	bhi.n	80041ae <HAL_TIM_IC_Start_IT+0x182>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2b08      	cmp	r3, #8
 8004150:	d01b      	beq.n	800418a <HAL_TIM_IC_Start_IT+0x15e>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b08      	cmp	r3, #8
 8004156:	d82a      	bhi.n	80041ae <HAL_TIM_IC_Start_IT+0x182>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_TIM_IC_Start_IT+0x13a>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b04      	cmp	r3, #4
 8004162:	d009      	beq.n	8004178 <HAL_TIM_IC_Start_IT+0x14c>
 8004164:	e023      	b.n	80041ae <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2102      	movs	r1, #2
 8004172:	430a      	orrs	r2, r1
 8004174:	60da      	str	r2, [r3, #12]
      break;
 8004176:	e01f      	b.n	80041b8 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2104      	movs	r1, #4
 8004184:	430a      	orrs	r2, r1
 8004186:	60da      	str	r2, [r3, #12]
      break;
 8004188:	e016      	b.n	80041b8 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2108      	movs	r1, #8
 8004196:	430a      	orrs	r2, r1
 8004198:	60da      	str	r2, [r3, #12]
      break;
 800419a:	e00d      	b.n	80041b8 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2110      	movs	r1, #16
 80041a8:	430a      	orrs	r2, r1
 80041aa:	60da      	str	r2, [r3, #12]
      break;
 80041ac:	e004      	b.n	80041b8 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 80041ae:	230f      	movs	r3, #15
 80041b0:	18fb      	adds	r3, r7, r3
 80041b2:	2201      	movs	r2, #1
 80041b4:	701a      	strb	r2, [r3, #0]
      break;
 80041b6:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80041b8:	230f      	movs	r3, #15
 80041ba:	18fb      	adds	r3, r7, r3
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d135      	bne.n	800422e <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6839      	ldr	r1, [r7, #0]
 80041c8:	2201      	movs	r2, #1
 80041ca:	0018      	movs	r0, r3
 80041cc:	f000 fd54 	bl	8004c78 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a19      	ldr	r2, [pc, #100]	; (800423c <HAL_TIM_IC_Start_IT+0x210>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00f      	beq.n	80041fa <HAL_TIM_IC_Start_IT+0x1ce>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	05db      	lsls	r3, r3, #23
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d009      	beq.n	80041fa <HAL_TIM_IC_Start_IT+0x1ce>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a15      	ldr	r2, [pc, #84]	; (8004240 <HAL_TIM_IC_Start_IT+0x214>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d004      	beq.n	80041fa <HAL_TIM_IC_Start_IT+0x1ce>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a13      	ldr	r2, [pc, #76]	; (8004244 <HAL_TIM_IC_Start_IT+0x218>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d111      	bne.n	800421e <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2207      	movs	r2, #7
 8004202:	4013      	ands	r3, r2
 8004204:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b06      	cmp	r3, #6
 800420a:	d010      	beq.n	800422e <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2101      	movs	r1, #1
 8004218:	430a      	orrs	r2, r1
 800421a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800421c:	e007      	b.n	800422e <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2101      	movs	r1, #1
 800422a:	430a      	orrs	r2, r1
 800422c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800422e:	230f      	movs	r3, #15
 8004230:	18fb      	adds	r3, r7, r3
 8004232:	781b      	ldrb	r3, [r3, #0]
}
 8004234:	0018      	movs	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	b004      	add	sp, #16
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40000400 	.word	0x40000400
 8004244:	40014000 	.word	0x40014000

08004248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	2202      	movs	r2, #2
 8004258:	4013      	ands	r3, r2
 800425a:	2b02      	cmp	r3, #2
 800425c:	d124      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	2202      	movs	r2, #2
 8004266:	4013      	ands	r3, r2
 8004268:	2b02      	cmp	r3, #2
 800426a:	d11d      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2203      	movs	r2, #3
 8004272:	4252      	negs	r2, r2
 8004274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	2203      	movs	r2, #3
 8004284:	4013      	ands	r3, r2
 8004286:	d004      	beq.n	8004292 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	0018      	movs	r0, r3
 800428c:	f7fe fb1e 	bl	80028cc <HAL_TIM_IC_CaptureCallback>
 8004290:	e007      	b.n	80042a2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	0018      	movs	r0, r3
 8004296:	f000 fa99 	bl	80047cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	0018      	movs	r0, r3
 800429e:	f000 fa9d 	bl	80047dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2204      	movs	r2, #4
 80042b0:	4013      	ands	r3, r2
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d125      	bne.n	8004302 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	2204      	movs	r2, #4
 80042be:	4013      	ands	r3, r2
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d11e      	bne.n	8004302 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2205      	movs	r2, #5
 80042ca:	4252      	negs	r2, r2
 80042cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2202      	movs	r2, #2
 80042d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699a      	ldr	r2, [r3, #24]
 80042da:	23c0      	movs	r3, #192	; 0xc0
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4013      	ands	r3, r2
 80042e0:	d004      	beq.n	80042ec <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	0018      	movs	r0, r3
 80042e6:	f7fe faf1 	bl	80028cc <HAL_TIM_IC_CaptureCallback>
 80042ea:	e007      	b.n	80042fc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	0018      	movs	r0, r3
 80042f0:	f000 fa6c 	bl	80047cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	0018      	movs	r0, r3
 80042f8:	f000 fa70 	bl	80047dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	2208      	movs	r2, #8
 800430a:	4013      	ands	r3, r2
 800430c:	2b08      	cmp	r3, #8
 800430e:	d124      	bne.n	800435a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2208      	movs	r2, #8
 8004318:	4013      	ands	r3, r2
 800431a:	2b08      	cmp	r3, #8
 800431c:	d11d      	bne.n	800435a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2209      	movs	r2, #9
 8004324:	4252      	negs	r2, r2
 8004326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2204      	movs	r2, #4
 800432c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	2203      	movs	r2, #3
 8004336:	4013      	ands	r3, r2
 8004338:	d004      	beq.n	8004344 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	0018      	movs	r0, r3
 800433e:	f7fe fac5 	bl	80028cc <HAL_TIM_IC_CaptureCallback>
 8004342:	e007      	b.n	8004354 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	0018      	movs	r0, r3
 8004348:	f000 fa40 	bl	80047cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	0018      	movs	r0, r3
 8004350:	f000 fa44 	bl	80047dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	2210      	movs	r2, #16
 8004362:	4013      	ands	r3, r2
 8004364:	2b10      	cmp	r3, #16
 8004366:	d125      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	2210      	movs	r2, #16
 8004370:	4013      	ands	r3, r2
 8004372:	2b10      	cmp	r3, #16
 8004374:	d11e      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2211      	movs	r2, #17
 800437c:	4252      	negs	r2, r2
 800437e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2208      	movs	r2, #8
 8004384:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69da      	ldr	r2, [r3, #28]
 800438c:	23c0      	movs	r3, #192	; 0xc0
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4013      	ands	r3, r2
 8004392:	d004      	beq.n	800439e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	0018      	movs	r0, r3
 8004398:	f7fe fa98 	bl	80028cc <HAL_TIM_IC_CaptureCallback>
 800439c:	e007      	b.n	80043ae <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	0018      	movs	r0, r3
 80043a2:	f000 fa13 	bl	80047cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	0018      	movs	r0, r3
 80043aa:	f000 fa17 	bl	80047dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2201      	movs	r2, #1
 80043bc:	4013      	ands	r3, r2
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d10f      	bne.n	80043e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	4013      	ands	r3, r2
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d108      	bne.n	80043e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2202      	movs	r2, #2
 80043d6:	4252      	negs	r2, r2
 80043d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	0018      	movs	r0, r3
 80043de:	f7fe fa29 	bl	8002834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	2280      	movs	r2, #128	; 0x80
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b80      	cmp	r3, #128	; 0x80
 80043ee:	d10f      	bne.n	8004410 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	2280      	movs	r2, #128	; 0x80
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b80      	cmp	r3, #128	; 0x80
 80043fc:	d108      	bne.n	8004410 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2281      	movs	r2, #129	; 0x81
 8004404:	4252      	negs	r2, r2
 8004406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	0018      	movs	r0, r3
 800440c:	f000 fcbe 	bl	8004d8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2240      	movs	r2, #64	; 0x40
 8004418:	4013      	ands	r3, r2
 800441a:	2b40      	cmp	r3, #64	; 0x40
 800441c:	d10f      	bne.n	800443e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	2240      	movs	r2, #64	; 0x40
 8004426:	4013      	ands	r3, r2
 8004428:	2b40      	cmp	r3, #64	; 0x40
 800442a:	d108      	bne.n	800443e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2241      	movs	r2, #65	; 0x41
 8004432:	4252      	negs	r2, r2
 8004434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	0018      	movs	r0, r3
 800443a:	f000 f9d7 	bl	80047ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	2220      	movs	r2, #32
 8004446:	4013      	ands	r3, r2
 8004448:	2b20      	cmp	r3, #32
 800444a:	d10f      	bne.n	800446c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	2220      	movs	r2, #32
 8004454:	4013      	ands	r3, r2
 8004456:	2b20      	cmp	r3, #32
 8004458:	d108      	bne.n	800446c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2221      	movs	r2, #33	; 0x21
 8004460:	4252      	negs	r2, r2
 8004462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	0018      	movs	r0, r3
 8004468:	f000 fc88 	bl	8004d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800446c:	46c0      	nop			; (mov r8, r8)
 800446e:	46bd      	mov	sp, r7
 8004470:	b002      	add	sp, #8
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004480:	2317      	movs	r3, #23
 8004482:	18fb      	adds	r3, r7, r3
 8004484:	2200      	movs	r2, #0
 8004486:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	223c      	movs	r2, #60	; 0x3c
 800448c:	5c9b      	ldrb	r3, [r3, r2]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_TIM_IC_ConfigChannel+0x22>
 8004492:	2302      	movs	r3, #2
 8004494:	e08c      	b.n	80045b0 <HAL_TIM_IC_ConfigChannel+0x13c>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	223c      	movs	r2, #60	; 0x3c
 800449a:	2101      	movs	r1, #1
 800449c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d11b      	bne.n	80044dc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	6819      	ldr	r1, [r3, #0]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f000 fa22 	bl	80048fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	210c      	movs	r1, #12
 80044c4:	438a      	bics	r2, r1
 80044c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6999      	ldr	r1, [r3, #24]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	619a      	str	r2, [r3, #24]
 80044da:	e062      	b.n	80045a2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d11c      	bne.n	800451c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	6819      	ldr	r1, [r3, #0]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f000 fa8d 	bl	8004a10 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699a      	ldr	r2, [r3, #24]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	492d      	ldr	r1, [pc, #180]	; (80045b8 <HAL_TIM_IC_ConfigChannel+0x144>)
 8004502:	400a      	ands	r2, r1
 8004504:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6999      	ldr	r1, [r3, #24]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	021a      	lsls	r2, r3, #8
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	619a      	str	r2, [r3, #24]
 800451a:	e042      	b.n	80045a2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b08      	cmp	r3, #8
 8004520:	d11b      	bne.n	800455a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	6819      	ldr	r1, [r3, #0]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f000 fae1 	bl	8004af8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69da      	ldr	r2, [r3, #28]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	210c      	movs	r1, #12
 8004542:	438a      	bics	r2, r1
 8004544:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69d9      	ldr	r1, [r3, #28]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	61da      	str	r2, [r3, #28]
 8004558:	e023      	b.n	80045a2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b0c      	cmp	r3, #12
 800455e:	d11c      	bne.n	800459a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	6819      	ldr	r1, [r3, #0]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f000 fb02 	bl	8004b78 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	69da      	ldr	r2, [r3, #28]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	490e      	ldr	r1, [pc, #56]	; (80045b8 <HAL_TIM_IC_ConfigChannel+0x144>)
 8004580:	400a      	ands	r2, r1
 8004582:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	69d9      	ldr	r1, [r3, #28]
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	021a      	lsls	r2, r3, #8
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	61da      	str	r2, [r3, #28]
 8004598:	e003      	b.n	80045a2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800459a:	2317      	movs	r3, #23
 800459c:	18fb      	adds	r3, r7, r3
 800459e:	2201      	movs	r2, #1
 80045a0:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	223c      	movs	r2, #60	; 0x3c
 80045a6:	2100      	movs	r1, #0
 80045a8:	5499      	strb	r1, [r3, r2]

  return status;
 80045aa:	2317      	movs	r3, #23
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	781b      	ldrb	r3, [r3, #0]
}
 80045b0:	0018      	movs	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b006      	add	sp, #24
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	fffff3ff 	.word	0xfffff3ff

080045bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045c6:	230f      	movs	r3, #15
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	2200      	movs	r2, #0
 80045cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	223c      	movs	r2, #60	; 0x3c
 80045d2:	5c9b      	ldrb	r3, [r3, r2]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_TIM_ConfigClockSource+0x20>
 80045d8:	2302      	movs	r3, #2
 80045da:	e0bc      	b.n	8004756 <HAL_TIM_ConfigClockSource+0x19a>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	223c      	movs	r2, #60	; 0x3c
 80045e0:	2101      	movs	r1, #1
 80045e2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	223d      	movs	r2, #61	; 0x3d
 80045e8:	2102      	movs	r1, #2
 80045ea:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2277      	movs	r2, #119	; 0x77
 80045f8:	4393      	bics	r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4a58      	ldr	r2, [pc, #352]	; (8004760 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004600:	4013      	ands	r3, r2
 8004602:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2280      	movs	r2, #128	; 0x80
 8004612:	0192      	lsls	r2, r2, #6
 8004614:	4293      	cmp	r3, r2
 8004616:	d040      	beq.n	800469a <HAL_TIM_ConfigClockSource+0xde>
 8004618:	2280      	movs	r2, #128	; 0x80
 800461a:	0192      	lsls	r2, r2, #6
 800461c:	4293      	cmp	r3, r2
 800461e:	d900      	bls.n	8004622 <HAL_TIM_ConfigClockSource+0x66>
 8004620:	e088      	b.n	8004734 <HAL_TIM_ConfigClockSource+0x178>
 8004622:	2280      	movs	r2, #128	; 0x80
 8004624:	0152      	lsls	r2, r2, #5
 8004626:	4293      	cmp	r3, r2
 8004628:	d100      	bne.n	800462c <HAL_TIM_ConfigClockSource+0x70>
 800462a:	e088      	b.n	800473e <HAL_TIM_ConfigClockSource+0x182>
 800462c:	2280      	movs	r2, #128	; 0x80
 800462e:	0152      	lsls	r2, r2, #5
 8004630:	4293      	cmp	r3, r2
 8004632:	d900      	bls.n	8004636 <HAL_TIM_ConfigClockSource+0x7a>
 8004634:	e07e      	b.n	8004734 <HAL_TIM_ConfigClockSource+0x178>
 8004636:	2b70      	cmp	r3, #112	; 0x70
 8004638:	d018      	beq.n	800466c <HAL_TIM_ConfigClockSource+0xb0>
 800463a:	d900      	bls.n	800463e <HAL_TIM_ConfigClockSource+0x82>
 800463c:	e07a      	b.n	8004734 <HAL_TIM_ConfigClockSource+0x178>
 800463e:	2b60      	cmp	r3, #96	; 0x60
 8004640:	d04f      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0x126>
 8004642:	d900      	bls.n	8004646 <HAL_TIM_ConfigClockSource+0x8a>
 8004644:	e076      	b.n	8004734 <HAL_TIM_ConfigClockSource+0x178>
 8004646:	2b50      	cmp	r3, #80	; 0x50
 8004648:	d03b      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x106>
 800464a:	d900      	bls.n	800464e <HAL_TIM_ConfigClockSource+0x92>
 800464c:	e072      	b.n	8004734 <HAL_TIM_ConfigClockSource+0x178>
 800464e:	2b40      	cmp	r3, #64	; 0x40
 8004650:	d057      	beq.n	8004702 <HAL_TIM_ConfigClockSource+0x146>
 8004652:	d900      	bls.n	8004656 <HAL_TIM_ConfigClockSource+0x9a>
 8004654:	e06e      	b.n	8004734 <HAL_TIM_ConfigClockSource+0x178>
 8004656:	2b30      	cmp	r3, #48	; 0x30
 8004658:	d063      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0x166>
 800465a:	d86b      	bhi.n	8004734 <HAL_TIM_ConfigClockSource+0x178>
 800465c:	2b20      	cmp	r3, #32
 800465e:	d060      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0x166>
 8004660:	d868      	bhi.n	8004734 <HAL_TIM_ConfigClockSource+0x178>
 8004662:	2b00      	cmp	r3, #0
 8004664:	d05d      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0x166>
 8004666:	2b10      	cmp	r3, #16
 8004668:	d05b      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0x166>
 800466a:	e063      	b.n	8004734 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	6899      	ldr	r1, [r3, #8]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f000 fadc 	bl	8004c38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2277      	movs	r2, #119	; 0x77
 800468c:	4313      	orrs	r3, r2
 800468e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	609a      	str	r2, [r3, #8]
      break;
 8004698:	e052      	b.n	8004740 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	6899      	ldr	r1, [r3, #8]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f000 fac5 	bl	8004c38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2180      	movs	r1, #128	; 0x80
 80046ba:	01c9      	lsls	r1, r1, #7
 80046bc:	430a      	orrs	r2, r1
 80046be:	609a      	str	r2, [r3, #8]
      break;
 80046c0:	e03e      	b.n	8004740 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6859      	ldr	r1, [r3, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	001a      	movs	r2, r3
 80046d0:	f000 f970 	bl	80049b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2150      	movs	r1, #80	; 0x50
 80046da:	0018      	movs	r0, r3
 80046dc:	f000 fa92 	bl	8004c04 <TIM_ITRx_SetConfig>
      break;
 80046e0:	e02e      	b.n	8004740 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6818      	ldr	r0, [r3, #0]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	6859      	ldr	r1, [r3, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	001a      	movs	r2, r3
 80046f0:	f000 f9d0 	bl	8004a94 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2160      	movs	r1, #96	; 0x60
 80046fa:	0018      	movs	r0, r3
 80046fc:	f000 fa82 	bl	8004c04 <TIM_ITRx_SetConfig>
      break;
 8004700:	e01e      	b.n	8004740 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	6859      	ldr	r1, [r3, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	001a      	movs	r2, r3
 8004710:	f000 f950 	bl	80049b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2140      	movs	r1, #64	; 0x40
 800471a:	0018      	movs	r0, r3
 800471c:	f000 fa72 	bl	8004c04 <TIM_ITRx_SetConfig>
      break;
 8004720:	e00e      	b.n	8004740 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	0019      	movs	r1, r3
 800472c:	0010      	movs	r0, r2
 800472e:	f000 fa69 	bl	8004c04 <TIM_ITRx_SetConfig>
      break;
 8004732:	e005      	b.n	8004740 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004734:	230f      	movs	r3, #15
 8004736:	18fb      	adds	r3, r7, r3
 8004738:	2201      	movs	r2, #1
 800473a:	701a      	strb	r2, [r3, #0]
      break;
 800473c:	e000      	b.n	8004740 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800473e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	223d      	movs	r2, #61	; 0x3d
 8004744:	2101      	movs	r1, #1
 8004746:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	223c      	movs	r2, #60	; 0x3c
 800474c:	2100      	movs	r1, #0
 800474e:	5499      	strb	r1, [r3, r2]

  return status;
 8004750:	230f      	movs	r3, #15
 8004752:	18fb      	adds	r3, r7, r3
 8004754:	781b      	ldrb	r3, [r3, #0]
}
 8004756:	0018      	movs	r0, r3
 8004758:	46bd      	mov	sp, r7
 800475a:	b004      	add	sp, #16
 800475c:	bd80      	pop	{r7, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	ffff00ff 	.word	0xffff00ff

08004764 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b0c      	cmp	r3, #12
 8004776:	d01e      	beq.n	80047b6 <HAL_TIM_ReadCapturedValue+0x52>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b0c      	cmp	r3, #12
 800477c:	d820      	bhi.n	80047c0 <HAL_TIM_ReadCapturedValue+0x5c>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b08      	cmp	r3, #8
 8004782:	d013      	beq.n	80047ac <HAL_TIM_ReadCapturedValue+0x48>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2b08      	cmp	r3, #8
 8004788:	d81a      	bhi.n	80047c0 <HAL_TIM_ReadCapturedValue+0x5c>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_TIM_ReadCapturedValue+0x34>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b04      	cmp	r3, #4
 8004794:	d005      	beq.n	80047a2 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8004796:	e013      	b.n	80047c0 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479e:	60fb      	str	r3, [r7, #12]
      break;
 80047a0:	e00f      	b.n	80047c2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	60fb      	str	r3, [r7, #12]
      break;
 80047aa:	e00a      	b.n	80047c2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b2:	60fb      	str	r3, [r7, #12]
      break;
 80047b4:	e005      	b.n	80047c2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	60fb      	str	r3, [r7, #12]
      break;
 80047be:	e000      	b.n	80047c2 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 80047c0:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 80047c2:	68fb      	ldr	r3, [r7, #12]
}
 80047c4:	0018      	movs	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	b004      	add	sp, #16
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047d4:	46c0      	nop			; (mov r8, r8)
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b002      	add	sp, #8
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047e4:	46c0      	nop			; (mov r8, r8)
 80047e6:	46bd      	mov	sp, r7
 80047e8:	b002      	add	sp, #8
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b002      	add	sp, #8
 80047fa:	bd80      	pop	{r7, pc}

080047fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a34      	ldr	r2, [pc, #208]	; (80048e0 <TIM_Base_SetConfig+0xe4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d008      	beq.n	8004826 <TIM_Base_SetConfig+0x2a>
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	2380      	movs	r3, #128	; 0x80
 8004818:	05db      	lsls	r3, r3, #23
 800481a:	429a      	cmp	r2, r3
 800481c:	d003      	beq.n	8004826 <TIM_Base_SetConfig+0x2a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a30      	ldr	r2, [pc, #192]	; (80048e4 <TIM_Base_SetConfig+0xe8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d108      	bne.n	8004838 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2270      	movs	r2, #112	; 0x70
 800482a:	4393      	bics	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4313      	orrs	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a29      	ldr	r2, [pc, #164]	; (80048e0 <TIM_Base_SetConfig+0xe4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d018      	beq.n	8004872 <TIM_Base_SetConfig+0x76>
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	05db      	lsls	r3, r3, #23
 8004846:	429a      	cmp	r2, r3
 8004848:	d013      	beq.n	8004872 <TIM_Base_SetConfig+0x76>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a25      	ldr	r2, [pc, #148]	; (80048e4 <TIM_Base_SetConfig+0xe8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00f      	beq.n	8004872 <TIM_Base_SetConfig+0x76>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a24      	ldr	r2, [pc, #144]	; (80048e8 <TIM_Base_SetConfig+0xec>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00b      	beq.n	8004872 <TIM_Base_SetConfig+0x76>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a23      	ldr	r2, [pc, #140]	; (80048ec <TIM_Base_SetConfig+0xf0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d007      	beq.n	8004872 <TIM_Base_SetConfig+0x76>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a22      	ldr	r2, [pc, #136]	; (80048f0 <TIM_Base_SetConfig+0xf4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d003      	beq.n	8004872 <TIM_Base_SetConfig+0x76>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a21      	ldr	r2, [pc, #132]	; (80048f4 <TIM_Base_SetConfig+0xf8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d108      	bne.n	8004884 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4a20      	ldr	r2, [pc, #128]	; (80048f8 <TIM_Base_SetConfig+0xfc>)
 8004876:	4013      	ands	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2280      	movs	r2, #128	; 0x80
 8004888:	4393      	bics	r3, r2
 800488a:	001a      	movs	r2, r3
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a0c      	ldr	r2, [pc, #48]	; (80048e0 <TIM_Base_SetConfig+0xe4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00b      	beq.n	80048ca <TIM_Base_SetConfig+0xce>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a0d      	ldr	r2, [pc, #52]	; (80048ec <TIM_Base_SetConfig+0xf0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d007      	beq.n	80048ca <TIM_Base_SetConfig+0xce>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a0c      	ldr	r2, [pc, #48]	; (80048f0 <TIM_Base_SetConfig+0xf4>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d003      	beq.n	80048ca <TIM_Base_SetConfig+0xce>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a0b      	ldr	r2, [pc, #44]	; (80048f4 <TIM_Base_SetConfig+0xf8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d103      	bne.n	80048d2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	615a      	str	r2, [r3, #20]
}
 80048d8:	46c0      	nop			; (mov r8, r8)
 80048da:	46bd      	mov	sp, r7
 80048dc:	b004      	add	sp, #16
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40012c00 	.word	0x40012c00
 80048e4:	40000400 	.word	0x40000400
 80048e8:	40002000 	.word	0x40002000
 80048ec:	40014000 	.word	0x40014000
 80048f0:	40014400 	.word	0x40014400
 80048f4:	40014800 	.word	0x40014800
 80048f8:	fffffcff 	.word	0xfffffcff

080048fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	2201      	movs	r2, #1
 8004910:	4393      	bics	r3, r2
 8004912:	001a      	movs	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a20      	ldr	r2, [pc, #128]	; (80049a8 <TIM_TI1_SetConfig+0xac>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00c      	beq.n	8004946 <TIM_TI1_SetConfig+0x4a>
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	2380      	movs	r3, #128	; 0x80
 8004930:	05db      	lsls	r3, r3, #23
 8004932:	429a      	cmp	r2, r3
 8004934:	d007      	beq.n	8004946 <TIM_TI1_SetConfig+0x4a>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a1c      	ldr	r2, [pc, #112]	; (80049ac <TIM_TI1_SetConfig+0xb0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d003      	beq.n	8004946 <TIM_TI1_SetConfig+0x4a>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4a1b      	ldr	r2, [pc, #108]	; (80049b0 <TIM_TI1_SetConfig+0xb4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d101      	bne.n	800494a <TIM_TI1_SetConfig+0x4e>
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <TIM_TI1_SetConfig+0x50>
 800494a:	2300      	movs	r3, #0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	2203      	movs	r2, #3
 8004954:	4393      	bics	r3, r2
 8004956:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	e003      	b.n	800496a <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2201      	movs	r2, #1
 8004966:	4313      	orrs	r3, r2
 8004968:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	22f0      	movs	r2, #240	; 0xf0
 800496e:	4393      	bics	r3, r2
 8004970:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	22ff      	movs	r2, #255	; 0xff
 8004978:	4013      	ands	r3, r2
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	220a      	movs	r2, #10
 8004984:	4393      	bics	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	220a      	movs	r2, #10
 800498c:	4013      	ands	r3, r2
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	621a      	str	r2, [r3, #32]
}
 80049a0:	46c0      	nop			; (mov r8, r8)
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b006      	add	sp, #24
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40012c00 	.word	0x40012c00
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40014000 	.word	0x40014000

080049b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	2201      	movs	r2, #1
 80049cc:	4393      	bics	r3, r2
 80049ce:	001a      	movs	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	22f0      	movs	r2, #240	; 0xf0
 80049de:	4393      	bics	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	220a      	movs	r2, #10
 80049f0:	4393      	bics	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	621a      	str	r2, [r3, #32]
}
 8004a08:	46c0      	nop			; (mov r8, r8)
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	b006      	add	sp, #24
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	2210      	movs	r2, #16
 8004a24:	4393      	bics	r3, r2
 8004a26:	001a      	movs	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	4a14      	ldr	r2, [pc, #80]	; (8004a8c <TIM_TI2_SetConfig+0x7c>)
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	4a10      	ldr	r2, [pc, #64]	; (8004a90 <TIM_TI2_SetConfig+0x80>)
 8004a4e:	4013      	ands	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	031b      	lsls	r3, r3, #12
 8004a56:	041b      	lsls	r3, r3, #16
 8004a58:	0c1b      	lsrs	r3, r3, #16
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	22a0      	movs	r2, #160	; 0xa0
 8004a64:	4393      	bics	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	22a0      	movs	r2, #160	; 0xa0
 8004a6e:	4013      	ands	r3, r2
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	621a      	str	r2, [r3, #32]
}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	46bd      	mov	sp, r7
 8004a86:	b006      	add	sp, #24
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	fffffcff 	.word	0xfffffcff
 8004a90:	ffff0fff 	.word	0xffff0fff

08004a94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	2210      	movs	r2, #16
 8004aa6:	4393      	bics	r3, r2
 8004aa8:	001a      	movs	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	4a0d      	ldr	r2, [pc, #52]	; (8004af4 <TIM_TI2_ConfigInputStage+0x60>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	031b      	lsls	r3, r3, #12
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	22a0      	movs	r2, #160	; 0xa0
 8004ad0:	4393      	bics	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	621a      	str	r2, [r3, #32]
}
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	46bd      	mov	sp, r7
 8004aee:	b006      	add	sp, #24
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	ffff0fff 	.word	0xffff0fff

08004af8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	4a19      	ldr	r2, [pc, #100]	; (8004b70 <TIM_TI3_SetConfig+0x78>)
 8004b0c:	401a      	ands	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2203      	movs	r2, #3
 8004b22:	4393      	bics	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	22f0      	movs	r2, #240	; 0xf0
 8004b32:	4393      	bics	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	22ff      	movs	r2, #255	; 0xff
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	4a0b      	ldr	r2, [pc, #44]	; (8004b74 <TIM_TI3_SetConfig+0x7c>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	021a      	lsls	r2, r3, #8
 8004b50:	23a0      	movs	r3, #160	; 0xa0
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	4013      	ands	r3, r2
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	621a      	str	r2, [r3, #32]
}
 8004b68:	46c0      	nop			; (mov r8, r8)
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	b006      	add	sp, #24
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	fffffeff 	.word	0xfffffeff
 8004b74:	fffff5ff 	.word	0xfffff5ff

08004b78 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	4a1a      	ldr	r2, [pc, #104]	; (8004bf4 <TIM_TI4_SetConfig+0x7c>)
 8004b8c:	401a      	ands	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	4a15      	ldr	r2, [pc, #84]	; (8004bf8 <TIM_TI4_SetConfig+0x80>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	021b      	lsls	r3, r3, #8
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	4a12      	ldr	r2, [pc, #72]	; (8004bfc <TIM_TI4_SetConfig+0x84>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	031b      	lsls	r3, r3, #12
 8004bbc:	041b      	lsls	r3, r3, #16
 8004bbe:	0c1b      	lsrs	r3, r3, #16
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	4a0d      	ldr	r2, [pc, #52]	; (8004c00 <TIM_TI4_SetConfig+0x88>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	031a      	lsls	r2, r3, #12
 8004bd2:	23a0      	movs	r3, #160	; 0xa0
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	621a      	str	r2, [r3, #32]
}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b006      	add	sp, #24
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	ffffefff 	.word	0xffffefff
 8004bf8:	fffffcff 	.word	0xfffffcff
 8004bfc:	ffff0fff 	.word	0xffff0fff
 8004c00:	ffff5fff 	.word	0xffff5fff

08004c04 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2270      	movs	r2, #112	; 0x70
 8004c18:	4393      	bics	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	2207      	movs	r2, #7
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	609a      	str	r2, [r3, #8]
}
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b004      	add	sp, #16
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	4a09      	ldr	r2, [pc, #36]	; (8004c74 <TIM_ETR_SetConfig+0x3c>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	021a      	lsls	r2, r3, #8
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	609a      	str	r2, [r3, #8]
}
 8004c6c:	46c0      	nop			; (mov r8, r8)
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b006      	add	sp, #24
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	ffff00ff 	.word	0xffff00ff

08004c78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	221f      	movs	r2, #31
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	409a      	lsls	r2, r3
 8004c8e:	0013      	movs	r3, r2
 8004c90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	43d2      	mvns	r2, r2
 8004c9a:	401a      	ands	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a1a      	ldr	r2, [r3, #32]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	211f      	movs	r1, #31
 8004ca8:	400b      	ands	r3, r1
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	4099      	lsls	r1, r3
 8004cae:	000b      	movs	r3, r1
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	621a      	str	r2, [r3, #32]
}
 8004cb6:	46c0      	nop			; (mov r8, r8)
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	b006      	add	sp, #24
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	223c      	movs	r2, #60	; 0x3c
 8004cce:	5c9b      	ldrb	r3, [r3, r2]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e047      	b.n	8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	223c      	movs	r2, #60	; 0x3c
 8004cdc:	2101      	movs	r1, #1
 8004cde:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	223d      	movs	r2, #61	; 0x3d
 8004ce4:	2102      	movs	r1, #2
 8004ce6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2270      	movs	r2, #112	; 0x70
 8004cfc:	4393      	bics	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a16      	ldr	r2, [pc, #88]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00f      	beq.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	2380      	movs	r3, #128	; 0x80
 8004d22:	05db      	lsls	r3, r3, #23
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d009      	beq.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a11      	ldr	r2, [pc, #68]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d004      	beq.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a10      	ldr	r2, [pc, #64]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d10c      	bne.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2280      	movs	r2, #128	; 0x80
 8004d40:	4393      	bics	r3, r2
 8004d42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	223d      	movs	r2, #61	; 0x3d
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	223c      	movs	r2, #60	; 0x3c
 8004d62:	2100      	movs	r1, #0
 8004d64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	0018      	movs	r0, r3
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	b004      	add	sp, #16
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40012c00 	.word	0x40012c00
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40014000 	.word	0x40014000

08004d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d84:	46c0      	nop			; (mov r8, r8)
 8004d86:	46bd      	mov	sp, r7
 8004d88:	b002      	add	sp, #8
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d94:	46c0      	nop			; (mov r8, r8)
 8004d96:	46bd      	mov	sp, r7
 8004d98:	b002      	add	sp, #8
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e044      	b.n	8004e38 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d107      	bne.n	8004dc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2274      	movs	r2, #116	; 0x74
 8004dba:	2100      	movs	r1, #0
 8004dbc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f7fd fec9 	bl	8002b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2224      	movs	r2, #36	; 0x24
 8004dca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	438a      	bics	r2, r1
 8004dda:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	0018      	movs	r0, r3
 8004de0:	f000 f8da 	bl	8004f98 <UART_SetConfig>
 8004de4:	0003      	movs	r3, r0
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e024      	b.n	8004e38 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f000 fa0d 	bl	8005218 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	490d      	ldr	r1, [pc, #52]	; (8004e40 <HAL_UART_Init+0xa4>)
 8004e0a:	400a      	ands	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	212a      	movs	r1, #42	; 0x2a
 8004e1a:	438a      	bics	r2, r1
 8004e1c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2101      	movs	r1, #1
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	0018      	movs	r0, r3
 8004e32:	f000 faa5 	bl	8005380 <UART_CheckIdleState>
 8004e36:	0003      	movs	r3, r0
}
 8004e38:	0018      	movs	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b002      	add	sp, #8
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	ffffb7ff 	.word	0xffffb7ff

08004e44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b08a      	sub	sp, #40	; 0x28
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	603b      	str	r3, [r7, #0]
 8004e50:	1dbb      	adds	r3, r7, #6
 8004e52:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e58:	2b20      	cmp	r3, #32
 8004e5a:	d000      	beq.n	8004e5e <HAL_UART_Transmit+0x1a>
 8004e5c:	e096      	b.n	8004f8c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <HAL_UART_Transmit+0x28>
 8004e64:	1dbb      	adds	r3, r7, #6
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e08e      	b.n	8004f8e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	2380      	movs	r3, #128	; 0x80
 8004e76:	015b      	lsls	r3, r3, #5
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d109      	bne.n	8004e90 <HAL_UART_Transmit+0x4c>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d105      	bne.n	8004e90 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2201      	movs	r2, #1
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d001      	beq.n	8004e90 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e07e      	b.n	8004f8e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2274      	movs	r2, #116	; 0x74
 8004e94:	5c9b      	ldrb	r3, [r3, r2]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_UART_Transmit+0x5a>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e077      	b.n	8004f8e <HAL_UART_Transmit+0x14a>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2274      	movs	r2, #116	; 0x74
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2280      	movs	r2, #128	; 0x80
 8004eaa:	2100      	movs	r1, #0
 8004eac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2221      	movs	r2, #33	; 0x21
 8004eb2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eb4:	f7fe f812 	bl	8002edc <HAL_GetTick>
 8004eb8:	0003      	movs	r3, r0
 8004eba:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	1dba      	adds	r2, r7, #6
 8004ec0:	2150      	movs	r1, #80	; 0x50
 8004ec2:	8812      	ldrh	r2, [r2, #0]
 8004ec4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	1dba      	adds	r2, r7, #6
 8004eca:	2152      	movs	r1, #82	; 0x52
 8004ecc:	8812      	ldrh	r2, [r2, #0]
 8004ece:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	2380      	movs	r3, #128	; 0x80
 8004ed6:	015b      	lsls	r3, r3, #5
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d108      	bne.n	8004eee <HAL_UART_Transmit+0xaa>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d104      	bne.n	8004eee <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	61bb      	str	r3, [r7, #24]
 8004eec:	e003      	b.n	8004ef6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2274      	movs	r2, #116	; 0x74
 8004efa:	2100      	movs	r1, #0
 8004efc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004efe:	e02d      	b.n	8004f5c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	0013      	movs	r3, r2
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2180      	movs	r1, #128	; 0x80
 8004f0e:	f000 fa7f 	bl	8005410 <UART_WaitOnFlagUntilTimeout>
 8004f12:	1e03      	subs	r3, r0, #0
 8004f14:	d001      	beq.n	8004f1a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e039      	b.n	8004f8e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10b      	bne.n	8004f38 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	881a      	ldrh	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	05d2      	lsls	r2, r2, #23
 8004f2a:	0dd2      	lsrs	r2, r2, #23
 8004f2c:	b292      	uxth	r2, r2
 8004f2e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	3302      	adds	r3, #2
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	e008      	b.n	8004f4a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	781a      	ldrb	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	b292      	uxth	r2, r2
 8004f42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	3301      	adds	r3, #1
 8004f48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2252      	movs	r2, #82	; 0x52
 8004f4e:	5a9b      	ldrh	r3, [r3, r2]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b299      	uxth	r1, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2252      	movs	r2, #82	; 0x52
 8004f5a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2252      	movs	r2, #82	; 0x52
 8004f60:	5a9b      	ldrh	r3, [r3, r2]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1cb      	bne.n	8004f00 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	0013      	movs	r3, r2
 8004f72:	2200      	movs	r2, #0
 8004f74:	2140      	movs	r1, #64	; 0x40
 8004f76:	f000 fa4b 	bl	8005410 <UART_WaitOnFlagUntilTimeout>
 8004f7a:	1e03      	subs	r3, r0, #0
 8004f7c:	d001      	beq.n	8004f82 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e005      	b.n	8004f8e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e000      	b.n	8004f8e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004f8c:	2302      	movs	r3, #2
  }
}
 8004f8e:	0018      	movs	r0, r3
 8004f90:	46bd      	mov	sp, r7
 8004f92:	b008      	add	sp, #32
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fa0:	231e      	movs	r3, #30
 8004fa2:	18fb      	adds	r3, r7, r3
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a8d      	ldr	r2, [pc, #564]	; (80051fc <UART_SetConfig+0x264>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	0019      	movs	r1, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4a88      	ldr	r2, [pc, #544]	; (8005200 <UART_SetConfig+0x268>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	0019      	movs	r1, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	4a7f      	ldr	r2, [pc, #508]	; (8005204 <UART_SetConfig+0x26c>)
 8005006:	4013      	ands	r3, r2
 8005008:	0019      	movs	r1, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	430a      	orrs	r2, r1
 8005012:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a7b      	ldr	r2, [pc, #492]	; (8005208 <UART_SetConfig+0x270>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d127      	bne.n	800506e <UART_SetConfig+0xd6>
 800501e:	4b7b      	ldr	r3, [pc, #492]	; (800520c <UART_SetConfig+0x274>)
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	2203      	movs	r2, #3
 8005024:	4013      	ands	r3, r2
 8005026:	2b03      	cmp	r3, #3
 8005028:	d00d      	beq.n	8005046 <UART_SetConfig+0xae>
 800502a:	d81b      	bhi.n	8005064 <UART_SetConfig+0xcc>
 800502c:	2b02      	cmp	r3, #2
 800502e:	d014      	beq.n	800505a <UART_SetConfig+0xc2>
 8005030:	d818      	bhi.n	8005064 <UART_SetConfig+0xcc>
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <UART_SetConfig+0xa4>
 8005036:	2b01      	cmp	r3, #1
 8005038:	d00a      	beq.n	8005050 <UART_SetConfig+0xb8>
 800503a:	e013      	b.n	8005064 <UART_SetConfig+0xcc>
 800503c:	231f      	movs	r3, #31
 800503e:	18fb      	adds	r3, r7, r3
 8005040:	2200      	movs	r2, #0
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	e021      	b.n	800508a <UART_SetConfig+0xf2>
 8005046:	231f      	movs	r3, #31
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	2202      	movs	r2, #2
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	e01c      	b.n	800508a <UART_SetConfig+0xf2>
 8005050:	231f      	movs	r3, #31
 8005052:	18fb      	adds	r3, r7, r3
 8005054:	2204      	movs	r2, #4
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	e017      	b.n	800508a <UART_SetConfig+0xf2>
 800505a:	231f      	movs	r3, #31
 800505c:	18fb      	adds	r3, r7, r3
 800505e:	2208      	movs	r2, #8
 8005060:	701a      	strb	r2, [r3, #0]
 8005062:	e012      	b.n	800508a <UART_SetConfig+0xf2>
 8005064:	231f      	movs	r3, #31
 8005066:	18fb      	adds	r3, r7, r3
 8005068:	2210      	movs	r2, #16
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	e00d      	b.n	800508a <UART_SetConfig+0xf2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a67      	ldr	r2, [pc, #412]	; (8005210 <UART_SetConfig+0x278>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d104      	bne.n	8005082 <UART_SetConfig+0xea>
 8005078:	231f      	movs	r3, #31
 800507a:	18fb      	adds	r3, r7, r3
 800507c:	2200      	movs	r2, #0
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	e003      	b.n	800508a <UART_SetConfig+0xf2>
 8005082:	231f      	movs	r3, #31
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	2210      	movs	r2, #16
 8005088:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69da      	ldr	r2, [r3, #28]
 800508e:	2380      	movs	r3, #128	; 0x80
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	429a      	cmp	r2, r3
 8005094:	d15d      	bne.n	8005152 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8005096:	231f      	movs	r3, #31
 8005098:	18fb      	adds	r3, r7, r3
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	2b08      	cmp	r3, #8
 800509e:	d015      	beq.n	80050cc <UART_SetConfig+0x134>
 80050a0:	dc18      	bgt.n	80050d4 <UART_SetConfig+0x13c>
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d00d      	beq.n	80050c2 <UART_SetConfig+0x12a>
 80050a6:	dc15      	bgt.n	80050d4 <UART_SetConfig+0x13c>
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <UART_SetConfig+0x11a>
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d005      	beq.n	80050bc <UART_SetConfig+0x124>
 80050b0:	e010      	b.n	80050d4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050b2:	f7fe fe1f 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 80050b6:	0003      	movs	r3, r0
 80050b8:	61bb      	str	r3, [r7, #24]
        break;
 80050ba:	e012      	b.n	80050e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050bc:	4b55      	ldr	r3, [pc, #340]	; (8005214 <UART_SetConfig+0x27c>)
 80050be:	61bb      	str	r3, [r7, #24]
        break;
 80050c0:	e00f      	b.n	80050e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050c2:	f7fe fda9 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 80050c6:	0003      	movs	r3, r0
 80050c8:	61bb      	str	r3, [r7, #24]
        break;
 80050ca:	e00a      	b.n	80050e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050cc:	2380      	movs	r3, #128	; 0x80
 80050ce:	021b      	lsls	r3, r3, #8
 80050d0:	61bb      	str	r3, [r7, #24]
        break;
 80050d2:	e006      	b.n	80050e2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050d8:	231e      	movs	r3, #30
 80050da:	18fb      	adds	r3, r7, r3
 80050dc:	2201      	movs	r2, #1
 80050de:	701a      	strb	r2, [r3, #0]
        break;
 80050e0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d100      	bne.n	80050ea <UART_SetConfig+0x152>
 80050e8:	e07b      	b.n	80051e2 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	005a      	lsls	r2, r3, #1
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	085b      	lsrs	r3, r3, #1
 80050f4:	18d2      	adds	r2, r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	0019      	movs	r1, r3
 80050fc:	0010      	movs	r0, r2
 80050fe:	f7fb f81f 	bl	8000140 <__udivsi3>
 8005102:	0003      	movs	r3, r0
 8005104:	b29b      	uxth	r3, r3
 8005106:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	2b0f      	cmp	r3, #15
 800510c:	d91c      	bls.n	8005148 <UART_SetConfig+0x1b0>
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	2380      	movs	r3, #128	; 0x80
 8005112:	025b      	lsls	r3, r3, #9
 8005114:	429a      	cmp	r2, r3
 8005116:	d217      	bcs.n	8005148 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	b29a      	uxth	r2, r3
 800511c:	200e      	movs	r0, #14
 800511e:	183b      	adds	r3, r7, r0
 8005120:	210f      	movs	r1, #15
 8005122:	438a      	bics	r2, r1
 8005124:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	085b      	lsrs	r3, r3, #1
 800512a:	b29b      	uxth	r3, r3
 800512c:	2207      	movs	r2, #7
 800512e:	4013      	ands	r3, r2
 8005130:	b299      	uxth	r1, r3
 8005132:	183b      	adds	r3, r7, r0
 8005134:	183a      	adds	r2, r7, r0
 8005136:	8812      	ldrh	r2, [r2, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	183a      	adds	r2, r7, r0
 8005142:	8812      	ldrh	r2, [r2, #0]
 8005144:	60da      	str	r2, [r3, #12]
 8005146:	e04c      	b.n	80051e2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005148:	231e      	movs	r3, #30
 800514a:	18fb      	adds	r3, r7, r3
 800514c:	2201      	movs	r2, #1
 800514e:	701a      	strb	r2, [r3, #0]
 8005150:	e047      	b.n	80051e2 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005152:	231f      	movs	r3, #31
 8005154:	18fb      	adds	r3, r7, r3
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b08      	cmp	r3, #8
 800515a:	d015      	beq.n	8005188 <UART_SetConfig+0x1f0>
 800515c:	dc18      	bgt.n	8005190 <UART_SetConfig+0x1f8>
 800515e:	2b04      	cmp	r3, #4
 8005160:	d00d      	beq.n	800517e <UART_SetConfig+0x1e6>
 8005162:	dc15      	bgt.n	8005190 <UART_SetConfig+0x1f8>
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <UART_SetConfig+0x1d6>
 8005168:	2b02      	cmp	r3, #2
 800516a:	d005      	beq.n	8005178 <UART_SetConfig+0x1e0>
 800516c:	e010      	b.n	8005190 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800516e:	f7fe fdc1 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 8005172:	0003      	movs	r3, r0
 8005174:	61bb      	str	r3, [r7, #24]
        break;
 8005176:	e012      	b.n	800519e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005178:	4b26      	ldr	r3, [pc, #152]	; (8005214 <UART_SetConfig+0x27c>)
 800517a:	61bb      	str	r3, [r7, #24]
        break;
 800517c:	e00f      	b.n	800519e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800517e:	f7fe fd4b 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8005182:	0003      	movs	r3, r0
 8005184:	61bb      	str	r3, [r7, #24]
        break;
 8005186:	e00a      	b.n	800519e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005188:	2380      	movs	r3, #128	; 0x80
 800518a:	021b      	lsls	r3, r3, #8
 800518c:	61bb      	str	r3, [r7, #24]
        break;
 800518e:	e006      	b.n	800519e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005194:	231e      	movs	r3, #30
 8005196:	18fb      	adds	r3, r7, r3
 8005198:	2201      	movs	r2, #1
 800519a:	701a      	strb	r2, [r3, #0]
        break;
 800519c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01e      	beq.n	80051e2 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	085a      	lsrs	r2, r3, #1
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	18d2      	adds	r2, r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	0019      	movs	r1, r3
 80051b4:	0010      	movs	r0, r2
 80051b6:	f7fa ffc3 	bl	8000140 <__udivsi3>
 80051ba:	0003      	movs	r3, r0
 80051bc:	b29b      	uxth	r3, r3
 80051be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2b0f      	cmp	r3, #15
 80051c4:	d909      	bls.n	80051da <UART_SetConfig+0x242>
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	2380      	movs	r3, #128	; 0x80
 80051ca:	025b      	lsls	r3, r3, #9
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d204      	bcs.n	80051da <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	60da      	str	r2, [r3, #12]
 80051d8:	e003      	b.n	80051e2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80051da:	231e      	movs	r3, #30
 80051dc:	18fb      	adds	r3, r7, r3
 80051de:	2201      	movs	r2, #1
 80051e0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80051ee:	231e      	movs	r3, #30
 80051f0:	18fb      	adds	r3, r7, r3
 80051f2:	781b      	ldrb	r3, [r3, #0]
}
 80051f4:	0018      	movs	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b008      	add	sp, #32
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	ffff69f3 	.word	0xffff69f3
 8005200:	ffffcfff 	.word	0xffffcfff
 8005204:	fffff4ff 	.word	0xfffff4ff
 8005208:	40013800 	.word	0x40013800
 800520c:	40021000 	.word	0x40021000
 8005210:	40004400 	.word	0x40004400
 8005214:	007a1200 	.word	0x007a1200

08005218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	2201      	movs	r2, #1
 8005226:	4013      	ands	r3, r2
 8005228:	d00b      	beq.n	8005242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	4a4a      	ldr	r2, [pc, #296]	; (800535c <UART_AdvFeatureConfig+0x144>)
 8005232:	4013      	ands	r3, r2
 8005234:	0019      	movs	r1, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	2202      	movs	r2, #2
 8005248:	4013      	ands	r3, r2
 800524a:	d00b      	beq.n	8005264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	4a43      	ldr	r2, [pc, #268]	; (8005360 <UART_AdvFeatureConfig+0x148>)
 8005254:	4013      	ands	r3, r2
 8005256:	0019      	movs	r1, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	2204      	movs	r2, #4
 800526a:	4013      	ands	r3, r2
 800526c:	d00b      	beq.n	8005286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	4a3b      	ldr	r2, [pc, #236]	; (8005364 <UART_AdvFeatureConfig+0x14c>)
 8005276:	4013      	ands	r3, r2
 8005278:	0019      	movs	r1, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	2208      	movs	r2, #8
 800528c:	4013      	ands	r3, r2
 800528e:	d00b      	beq.n	80052a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	4a34      	ldr	r2, [pc, #208]	; (8005368 <UART_AdvFeatureConfig+0x150>)
 8005298:	4013      	ands	r3, r2
 800529a:	0019      	movs	r1, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	2210      	movs	r2, #16
 80052ae:	4013      	ands	r3, r2
 80052b0:	d00b      	beq.n	80052ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	4a2c      	ldr	r2, [pc, #176]	; (800536c <UART_AdvFeatureConfig+0x154>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	0019      	movs	r1, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	2220      	movs	r2, #32
 80052d0:	4013      	ands	r3, r2
 80052d2:	d00b      	beq.n	80052ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	4a25      	ldr	r2, [pc, #148]	; (8005370 <UART_AdvFeatureConfig+0x158>)
 80052dc:	4013      	ands	r3, r2
 80052de:	0019      	movs	r1, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	2240      	movs	r2, #64	; 0x40
 80052f2:	4013      	ands	r3, r2
 80052f4:	d01d      	beq.n	8005332 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	4a1d      	ldr	r2, [pc, #116]	; (8005374 <UART_AdvFeatureConfig+0x15c>)
 80052fe:	4013      	ands	r3, r2
 8005300:	0019      	movs	r1, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005312:	2380      	movs	r3, #128	; 0x80
 8005314:	035b      	lsls	r3, r3, #13
 8005316:	429a      	cmp	r2, r3
 8005318:	d10b      	bne.n	8005332 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	4a15      	ldr	r2, [pc, #84]	; (8005378 <UART_AdvFeatureConfig+0x160>)
 8005322:	4013      	ands	r3, r2
 8005324:	0019      	movs	r1, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	2280      	movs	r2, #128	; 0x80
 8005338:	4013      	ands	r3, r2
 800533a:	d00b      	beq.n	8005354 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	4a0e      	ldr	r2, [pc, #56]	; (800537c <UART_AdvFeatureConfig+0x164>)
 8005344:	4013      	ands	r3, r2
 8005346:	0019      	movs	r1, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	605a      	str	r2, [r3, #4]
  }
}
 8005354:	46c0      	nop			; (mov r8, r8)
 8005356:	46bd      	mov	sp, r7
 8005358:	b002      	add	sp, #8
 800535a:	bd80      	pop	{r7, pc}
 800535c:	fffdffff 	.word	0xfffdffff
 8005360:	fffeffff 	.word	0xfffeffff
 8005364:	fffbffff 	.word	0xfffbffff
 8005368:	ffff7fff 	.word	0xffff7fff
 800536c:	ffffefff 	.word	0xffffefff
 8005370:	ffffdfff 	.word	0xffffdfff
 8005374:	ffefffff 	.word	0xffefffff
 8005378:	ff9fffff 	.word	0xff9fffff
 800537c:	fff7ffff 	.word	0xfff7ffff

08005380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af02      	add	r7, sp, #8
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2280      	movs	r2, #128	; 0x80
 800538c:	2100      	movs	r1, #0
 800538e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005390:	f7fd fda4 	bl	8002edc <HAL_GetTick>
 8005394:	0003      	movs	r3, r0
 8005396:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2208      	movs	r2, #8
 80053a0:	4013      	ands	r3, r2
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d10c      	bne.n	80053c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2280      	movs	r2, #128	; 0x80
 80053aa:	0391      	lsls	r1, r2, #14
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	4a17      	ldr	r2, [pc, #92]	; (800540c <UART_CheckIdleState+0x8c>)
 80053b0:	9200      	str	r2, [sp, #0]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f000 f82c 	bl	8005410 <UART_WaitOnFlagUntilTimeout>
 80053b8:	1e03      	subs	r3, r0, #0
 80053ba:	d001      	beq.n	80053c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e021      	b.n	8005404 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2204      	movs	r2, #4
 80053c8:	4013      	ands	r3, r2
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d10c      	bne.n	80053e8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2280      	movs	r2, #128	; 0x80
 80053d2:	03d1      	lsls	r1, r2, #15
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	4a0d      	ldr	r2, [pc, #52]	; (800540c <UART_CheckIdleState+0x8c>)
 80053d8:	9200      	str	r2, [sp, #0]
 80053da:	2200      	movs	r2, #0
 80053dc:	f000 f818 	bl	8005410 <UART_WaitOnFlagUntilTimeout>
 80053e0:	1e03      	subs	r3, r0, #0
 80053e2:	d001      	beq.n	80053e8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e00d      	b.n	8005404 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2220      	movs	r2, #32
 80053f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2274      	movs	r2, #116	; 0x74
 80053fe:	2100      	movs	r1, #0
 8005400:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	0018      	movs	r0, r3
 8005406:	46bd      	mov	sp, r7
 8005408:	b004      	add	sp, #16
 800540a:	bd80      	pop	{r7, pc}
 800540c:	01ffffff 	.word	0x01ffffff

08005410 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b094      	sub	sp, #80	; 0x50
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	1dfb      	adds	r3, r7, #7
 800541e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005420:	e0a3      	b.n	800556a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005422:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005424:	3301      	adds	r3, #1
 8005426:	d100      	bne.n	800542a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005428:	e09f      	b.n	800556a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800542a:	f7fd fd57 	bl	8002edc <HAL_GetTick>
 800542e:	0002      	movs	r2, r0
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005436:	429a      	cmp	r2, r3
 8005438:	d302      	bcc.n	8005440 <UART_WaitOnFlagUntilTimeout+0x30>
 800543a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800543c:	2b00      	cmp	r3, #0
 800543e:	d13d      	bne.n	80054bc <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005440:	f3ef 8310 	mrs	r3, PRIMASK
 8005444:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005448:	647b      	str	r3, [r7, #68]	; 0x44
 800544a:	2301      	movs	r3, #1
 800544c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800544e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005450:	f383 8810 	msr	PRIMASK, r3
}
 8005454:	46c0      	nop			; (mov r8, r8)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	494c      	ldr	r1, [pc, #304]	; (8005594 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005462:	400a      	ands	r2, r1
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005468:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	f383 8810 	msr	PRIMASK, r3
}
 8005470:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005472:	f3ef 8310 	mrs	r3, PRIMASK
 8005476:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800547a:	643b      	str	r3, [r7, #64]	; 0x40
 800547c:	2301      	movs	r3, #1
 800547e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005482:	f383 8810 	msr	PRIMASK, r3
}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2101      	movs	r1, #1
 8005494:	438a      	bics	r2, r1
 8005496:	609a      	str	r2, [r3, #8]
 8005498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800549a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800549c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800549e:	f383 8810 	msr	PRIMASK, r3
}
 80054a2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2220      	movs	r2, #32
 80054a8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2220      	movs	r2, #32
 80054ae:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2274      	movs	r2, #116	; 0x74
 80054b4:	2100      	movs	r1, #0
 80054b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e067      	b.n	800558c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2204      	movs	r2, #4
 80054c4:	4013      	ands	r3, r2
 80054c6:	d050      	beq.n	800556a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69da      	ldr	r2, [r3, #28]
 80054ce:	2380      	movs	r3, #128	; 0x80
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	401a      	ands	r2, r3
 80054d4:	2380      	movs	r3, #128	; 0x80
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	429a      	cmp	r2, r3
 80054da:	d146      	bne.n	800556a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2280      	movs	r2, #128	; 0x80
 80054e2:	0112      	lsls	r2, r2, #4
 80054e4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054e6:	f3ef 8310 	mrs	r3, PRIMASK
 80054ea:	613b      	str	r3, [r7, #16]
  return(result);
 80054ec:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f0:	2301      	movs	r3, #1
 80054f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f383 8810 	msr	PRIMASK, r3
}
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4923      	ldr	r1, [pc, #140]	; (8005594 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005508:	400a      	ands	r2, r1
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800550e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	f383 8810 	msr	PRIMASK, r3
}
 8005516:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005518:	f3ef 8310 	mrs	r3, PRIMASK
 800551c:	61fb      	str	r3, [r7, #28]
  return(result);
 800551e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005520:	64bb      	str	r3, [r7, #72]	; 0x48
 8005522:	2301      	movs	r3, #1
 8005524:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	f383 8810 	msr	PRIMASK, r3
}
 800552c:	46c0      	nop			; (mov r8, r8)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2101      	movs	r1, #1
 800553a:	438a      	bics	r2, r1
 800553c:	609a      	str	r2, [r3, #8]
 800553e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005540:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	f383 8810 	msr	PRIMASK, r3
}
 8005548:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2220      	movs	r2, #32
 800554e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2280      	movs	r2, #128	; 0x80
 800555a:	2120      	movs	r1, #32
 800555c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2274      	movs	r2, #116	; 0x74
 8005562:	2100      	movs	r1, #0
 8005564:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e010      	b.n	800558c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	4013      	ands	r3, r2
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	425a      	negs	r2, r3
 800557a:	4153      	adcs	r3, r2
 800557c:	b2db      	uxtb	r3, r3
 800557e:	001a      	movs	r2, r3
 8005580:	1dfb      	adds	r3, r7, #7
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	429a      	cmp	r2, r3
 8005586:	d100      	bne.n	800558a <UART_WaitOnFlagUntilTimeout+0x17a>
 8005588:	e74b      	b.n	8005422 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	0018      	movs	r0, r3
 800558e:	46bd      	mov	sp, r7
 8005590:	b014      	add	sp, #80	; 0x50
 8005592:	bd80      	pop	{r7, pc}
 8005594:	fffffe5f 	.word	0xfffffe5f

08005598 <__errno>:
 8005598:	4b01      	ldr	r3, [pc, #4]	; (80055a0 <__errno+0x8>)
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	4770      	bx	lr
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	2000000c 	.word	0x2000000c

080055a4 <__libc_init_array>:
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	2600      	movs	r6, #0
 80055a8:	4d0c      	ldr	r5, [pc, #48]	; (80055dc <__libc_init_array+0x38>)
 80055aa:	4c0d      	ldr	r4, [pc, #52]	; (80055e0 <__libc_init_array+0x3c>)
 80055ac:	1b64      	subs	r4, r4, r5
 80055ae:	10a4      	asrs	r4, r4, #2
 80055b0:	42a6      	cmp	r6, r4
 80055b2:	d109      	bne.n	80055c8 <__libc_init_array+0x24>
 80055b4:	2600      	movs	r6, #0
 80055b6:	f002 ff6d 	bl	8008494 <_init>
 80055ba:	4d0a      	ldr	r5, [pc, #40]	; (80055e4 <__libc_init_array+0x40>)
 80055bc:	4c0a      	ldr	r4, [pc, #40]	; (80055e8 <__libc_init_array+0x44>)
 80055be:	1b64      	subs	r4, r4, r5
 80055c0:	10a4      	asrs	r4, r4, #2
 80055c2:	42a6      	cmp	r6, r4
 80055c4:	d105      	bne.n	80055d2 <__libc_init_array+0x2e>
 80055c6:	bd70      	pop	{r4, r5, r6, pc}
 80055c8:	00b3      	lsls	r3, r6, #2
 80055ca:	58eb      	ldr	r3, [r5, r3]
 80055cc:	4798      	blx	r3
 80055ce:	3601      	adds	r6, #1
 80055d0:	e7ee      	b.n	80055b0 <__libc_init_array+0xc>
 80055d2:	00b3      	lsls	r3, r6, #2
 80055d4:	58eb      	ldr	r3, [r5, r3]
 80055d6:	4798      	blx	r3
 80055d8:	3601      	adds	r6, #1
 80055da:	e7f2      	b.n	80055c2 <__libc_init_array+0x1e>
 80055dc:	0800895c 	.word	0x0800895c
 80055e0:	0800895c 	.word	0x0800895c
 80055e4:	0800895c 	.word	0x0800895c
 80055e8:	08008960 	.word	0x08008960

080055ec <memset>:
 80055ec:	0003      	movs	r3, r0
 80055ee:	1882      	adds	r2, r0, r2
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d100      	bne.n	80055f6 <memset+0xa>
 80055f4:	4770      	bx	lr
 80055f6:	7019      	strb	r1, [r3, #0]
 80055f8:	3301      	adds	r3, #1
 80055fa:	e7f9      	b.n	80055f0 <memset+0x4>

080055fc <__cvt>:
 80055fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055fe:	001e      	movs	r6, r3
 8005600:	2300      	movs	r3, #0
 8005602:	0014      	movs	r4, r2
 8005604:	b08b      	sub	sp, #44	; 0x2c
 8005606:	429e      	cmp	r6, r3
 8005608:	da04      	bge.n	8005614 <__cvt+0x18>
 800560a:	2180      	movs	r1, #128	; 0x80
 800560c:	0609      	lsls	r1, r1, #24
 800560e:	1873      	adds	r3, r6, r1
 8005610:	001e      	movs	r6, r3
 8005612:	232d      	movs	r3, #45	; 0x2d
 8005614:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005616:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005618:	7013      	strb	r3, [r2, #0]
 800561a:	2320      	movs	r3, #32
 800561c:	2203      	movs	r2, #3
 800561e:	439f      	bics	r7, r3
 8005620:	2f46      	cmp	r7, #70	; 0x46
 8005622:	d007      	beq.n	8005634 <__cvt+0x38>
 8005624:	003b      	movs	r3, r7
 8005626:	3b45      	subs	r3, #69	; 0x45
 8005628:	4259      	negs	r1, r3
 800562a:	414b      	adcs	r3, r1
 800562c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800562e:	3a01      	subs	r2, #1
 8005630:	18cb      	adds	r3, r1, r3
 8005632:	9310      	str	r3, [sp, #64]	; 0x40
 8005634:	ab09      	add	r3, sp, #36	; 0x24
 8005636:	9304      	str	r3, [sp, #16]
 8005638:	ab08      	add	r3, sp, #32
 800563a:	9303      	str	r3, [sp, #12]
 800563c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800563e:	9200      	str	r2, [sp, #0]
 8005640:	9302      	str	r3, [sp, #8]
 8005642:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005644:	0022      	movs	r2, r4
 8005646:	9301      	str	r3, [sp, #4]
 8005648:	0033      	movs	r3, r6
 800564a:	f000 fcfd 	bl	8006048 <_dtoa_r>
 800564e:	0005      	movs	r5, r0
 8005650:	2f47      	cmp	r7, #71	; 0x47
 8005652:	d102      	bne.n	800565a <__cvt+0x5e>
 8005654:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005656:	07db      	lsls	r3, r3, #31
 8005658:	d528      	bpl.n	80056ac <__cvt+0xb0>
 800565a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800565c:	18eb      	adds	r3, r5, r3
 800565e:	9307      	str	r3, [sp, #28]
 8005660:	2f46      	cmp	r7, #70	; 0x46
 8005662:	d114      	bne.n	800568e <__cvt+0x92>
 8005664:	782b      	ldrb	r3, [r5, #0]
 8005666:	2b30      	cmp	r3, #48	; 0x30
 8005668:	d10c      	bne.n	8005684 <__cvt+0x88>
 800566a:	2200      	movs	r2, #0
 800566c:	2300      	movs	r3, #0
 800566e:	0020      	movs	r0, r4
 8005670:	0031      	movs	r1, r6
 8005672:	f7fa feeb 	bl	800044c <__aeabi_dcmpeq>
 8005676:	2800      	cmp	r0, #0
 8005678:	d104      	bne.n	8005684 <__cvt+0x88>
 800567a:	2301      	movs	r3, #1
 800567c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800567e:	1a9b      	subs	r3, r3, r2
 8005680:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005686:	9a07      	ldr	r2, [sp, #28]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	18d3      	adds	r3, r2, r3
 800568c:	9307      	str	r3, [sp, #28]
 800568e:	2200      	movs	r2, #0
 8005690:	2300      	movs	r3, #0
 8005692:	0020      	movs	r0, r4
 8005694:	0031      	movs	r1, r6
 8005696:	f7fa fed9 	bl	800044c <__aeabi_dcmpeq>
 800569a:	2800      	cmp	r0, #0
 800569c:	d001      	beq.n	80056a2 <__cvt+0xa6>
 800569e:	9b07      	ldr	r3, [sp, #28]
 80056a0:	9309      	str	r3, [sp, #36]	; 0x24
 80056a2:	2230      	movs	r2, #48	; 0x30
 80056a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a6:	9907      	ldr	r1, [sp, #28]
 80056a8:	428b      	cmp	r3, r1
 80056aa:	d306      	bcc.n	80056ba <__cvt+0xbe>
 80056ac:	0028      	movs	r0, r5
 80056ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80056b2:	1b5b      	subs	r3, r3, r5
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	b00b      	add	sp, #44	; 0x2c
 80056b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ba:	1c59      	adds	r1, r3, #1
 80056bc:	9109      	str	r1, [sp, #36]	; 0x24
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	e7f0      	b.n	80056a4 <__cvt+0xa8>

080056c2 <__exponent>:
 80056c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056c4:	1c83      	adds	r3, r0, #2
 80056c6:	b087      	sub	sp, #28
 80056c8:	9303      	str	r3, [sp, #12]
 80056ca:	0005      	movs	r5, r0
 80056cc:	000c      	movs	r4, r1
 80056ce:	232b      	movs	r3, #43	; 0x2b
 80056d0:	7002      	strb	r2, [r0, #0]
 80056d2:	2900      	cmp	r1, #0
 80056d4:	da01      	bge.n	80056da <__exponent+0x18>
 80056d6:	424c      	negs	r4, r1
 80056d8:	3302      	adds	r3, #2
 80056da:	706b      	strb	r3, [r5, #1]
 80056dc:	2c09      	cmp	r4, #9
 80056de:	dd31      	ble.n	8005744 <__exponent+0x82>
 80056e0:	270a      	movs	r7, #10
 80056e2:	ab04      	add	r3, sp, #16
 80056e4:	1dde      	adds	r6, r3, #7
 80056e6:	0020      	movs	r0, r4
 80056e8:	0039      	movs	r1, r7
 80056ea:	9601      	str	r6, [sp, #4]
 80056ec:	f7fa fe98 	bl	8000420 <__aeabi_idivmod>
 80056f0:	3e01      	subs	r6, #1
 80056f2:	3130      	adds	r1, #48	; 0x30
 80056f4:	0020      	movs	r0, r4
 80056f6:	7031      	strb	r1, [r6, #0]
 80056f8:	0039      	movs	r1, r7
 80056fa:	9402      	str	r4, [sp, #8]
 80056fc:	f7fa fdaa 	bl	8000254 <__divsi3>
 8005700:	9b02      	ldr	r3, [sp, #8]
 8005702:	0004      	movs	r4, r0
 8005704:	2b63      	cmp	r3, #99	; 0x63
 8005706:	dcee      	bgt.n	80056e6 <__exponent+0x24>
 8005708:	9b01      	ldr	r3, [sp, #4]
 800570a:	3430      	adds	r4, #48	; 0x30
 800570c:	1e9a      	subs	r2, r3, #2
 800570e:	0013      	movs	r3, r2
 8005710:	9903      	ldr	r1, [sp, #12]
 8005712:	7014      	strb	r4, [r2, #0]
 8005714:	a804      	add	r0, sp, #16
 8005716:	3007      	adds	r0, #7
 8005718:	4298      	cmp	r0, r3
 800571a:	d80e      	bhi.n	800573a <__exponent+0x78>
 800571c:	ab04      	add	r3, sp, #16
 800571e:	3307      	adds	r3, #7
 8005720:	2000      	movs	r0, #0
 8005722:	429a      	cmp	r2, r3
 8005724:	d804      	bhi.n	8005730 <__exponent+0x6e>
 8005726:	ab04      	add	r3, sp, #16
 8005728:	3009      	adds	r0, #9
 800572a:	18c0      	adds	r0, r0, r3
 800572c:	9b01      	ldr	r3, [sp, #4]
 800572e:	1ac0      	subs	r0, r0, r3
 8005730:	9b03      	ldr	r3, [sp, #12]
 8005732:	1818      	adds	r0, r3, r0
 8005734:	1b40      	subs	r0, r0, r5
 8005736:	b007      	add	sp, #28
 8005738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800573a:	7818      	ldrb	r0, [r3, #0]
 800573c:	3301      	adds	r3, #1
 800573e:	7008      	strb	r0, [r1, #0]
 8005740:	3101      	adds	r1, #1
 8005742:	e7e7      	b.n	8005714 <__exponent+0x52>
 8005744:	2330      	movs	r3, #48	; 0x30
 8005746:	18e4      	adds	r4, r4, r3
 8005748:	70ab      	strb	r3, [r5, #2]
 800574a:	1d28      	adds	r0, r5, #4
 800574c:	70ec      	strb	r4, [r5, #3]
 800574e:	e7f1      	b.n	8005734 <__exponent+0x72>

08005750 <_printf_float>:
 8005750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005752:	b095      	sub	sp, #84	; 0x54
 8005754:	000c      	movs	r4, r1
 8005756:	9208      	str	r2, [sp, #32]
 8005758:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800575a:	9309      	str	r3, [sp, #36]	; 0x24
 800575c:	0007      	movs	r7, r0
 800575e:	f001 fa91 	bl	8006c84 <_localeconv_r>
 8005762:	6803      	ldr	r3, [r0, #0]
 8005764:	0018      	movs	r0, r3
 8005766:	930b      	str	r3, [sp, #44]	; 0x2c
 8005768:	f7fa fcce 	bl	8000108 <strlen>
 800576c:	2300      	movs	r3, #0
 800576e:	9312      	str	r3, [sp, #72]	; 0x48
 8005770:	7e23      	ldrb	r3, [r4, #24]
 8005772:	2207      	movs	r2, #7
 8005774:	001e      	movs	r6, r3
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	900d      	str	r0, [sp, #52]	; 0x34
 800577a:	930c      	str	r3, [sp, #48]	; 0x30
 800577c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800577e:	682b      	ldr	r3, [r5, #0]
 8005780:	05c9      	lsls	r1, r1, #23
 8005782:	d547      	bpl.n	8005814 <_printf_float+0xc4>
 8005784:	189b      	adds	r3, r3, r2
 8005786:	4393      	bics	r3, r2
 8005788:	001a      	movs	r2, r3
 800578a:	3208      	adds	r2, #8
 800578c:	602a      	str	r2, [r5, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	64a2      	str	r2, [r4, #72]	; 0x48
 8005794:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005796:	2201      	movs	r2, #1
 8005798:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800579a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800579c:	930a      	str	r3, [sp, #40]	; 0x28
 800579e:	006b      	lsls	r3, r5, #1
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	930e      	str	r3, [sp, #56]	; 0x38
 80057a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80057a6:	4ba8      	ldr	r3, [pc, #672]	; (8005a48 <_printf_float+0x2f8>)
 80057a8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80057aa:	4252      	negs	r2, r2
 80057ac:	f7fc fce2 	bl	8002174 <__aeabi_dcmpun>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	d131      	bne.n	8005818 <_printf_float+0xc8>
 80057b4:	2201      	movs	r2, #1
 80057b6:	4ba4      	ldr	r3, [pc, #656]	; (8005a48 <_printf_float+0x2f8>)
 80057b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80057ba:	990e      	ldr	r1, [sp, #56]	; 0x38
 80057bc:	4252      	negs	r2, r2
 80057be:	f7fa fe55 	bl	800046c <__aeabi_dcmple>
 80057c2:	2800      	cmp	r0, #0
 80057c4:	d128      	bne.n	8005818 <_printf_float+0xc8>
 80057c6:	2200      	movs	r2, #0
 80057c8:	2300      	movs	r3, #0
 80057ca:	0029      	movs	r1, r5
 80057cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80057ce:	f7fa fe43 	bl	8000458 <__aeabi_dcmplt>
 80057d2:	2800      	cmp	r0, #0
 80057d4:	d003      	beq.n	80057de <_printf_float+0x8e>
 80057d6:	0023      	movs	r3, r4
 80057d8:	222d      	movs	r2, #45	; 0x2d
 80057da:	3343      	adds	r3, #67	; 0x43
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	4d9b      	ldr	r5, [pc, #620]	; (8005a4c <_printf_float+0x2fc>)
 80057e0:	2e47      	cmp	r6, #71	; 0x47
 80057e2:	d900      	bls.n	80057e6 <_printf_float+0x96>
 80057e4:	4d9a      	ldr	r5, [pc, #616]	; (8005a50 <_printf_float+0x300>)
 80057e6:	2303      	movs	r3, #3
 80057e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057ea:	6123      	str	r3, [r4, #16]
 80057ec:	3301      	adds	r3, #1
 80057ee:	439a      	bics	r2, r3
 80057f0:	2300      	movs	r3, #0
 80057f2:	6022      	str	r2, [r4, #0]
 80057f4:	930a      	str	r3, [sp, #40]	; 0x28
 80057f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f8:	0021      	movs	r1, r4
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	0038      	movs	r0, r7
 80057fe:	9b08      	ldr	r3, [sp, #32]
 8005800:	aa13      	add	r2, sp, #76	; 0x4c
 8005802:	f000 f9f3 	bl	8005bec <_printf_common>
 8005806:	1c43      	adds	r3, r0, #1
 8005808:	d000      	beq.n	800580c <_printf_float+0xbc>
 800580a:	e09e      	b.n	800594a <_printf_float+0x1fa>
 800580c:	2001      	movs	r0, #1
 800580e:	4240      	negs	r0, r0
 8005810:	b015      	add	sp, #84	; 0x54
 8005812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005814:	3307      	adds	r3, #7
 8005816:	e7b6      	b.n	8005786 <_printf_float+0x36>
 8005818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800581a:	002b      	movs	r3, r5
 800581c:	0010      	movs	r0, r2
 800581e:	0029      	movs	r1, r5
 8005820:	f7fc fca8 	bl	8002174 <__aeabi_dcmpun>
 8005824:	2800      	cmp	r0, #0
 8005826:	d00a      	beq.n	800583e <_printf_float+0xee>
 8005828:	2d00      	cmp	r5, #0
 800582a:	da03      	bge.n	8005834 <_printf_float+0xe4>
 800582c:	0023      	movs	r3, r4
 800582e:	222d      	movs	r2, #45	; 0x2d
 8005830:	3343      	adds	r3, #67	; 0x43
 8005832:	701a      	strb	r2, [r3, #0]
 8005834:	4d87      	ldr	r5, [pc, #540]	; (8005a54 <_printf_float+0x304>)
 8005836:	2e47      	cmp	r6, #71	; 0x47
 8005838:	d9d5      	bls.n	80057e6 <_printf_float+0x96>
 800583a:	4d87      	ldr	r5, [pc, #540]	; (8005a58 <_printf_float+0x308>)
 800583c:	e7d3      	b.n	80057e6 <_printf_float+0x96>
 800583e:	2220      	movs	r2, #32
 8005840:	0031      	movs	r1, r6
 8005842:	6863      	ldr	r3, [r4, #4]
 8005844:	4391      	bics	r1, r2
 8005846:	910e      	str	r1, [sp, #56]	; 0x38
 8005848:	1c5a      	adds	r2, r3, #1
 800584a:	d147      	bne.n	80058dc <_printf_float+0x18c>
 800584c:	3307      	adds	r3, #7
 800584e:	6063      	str	r3, [r4, #4]
 8005850:	2380      	movs	r3, #128	; 0x80
 8005852:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	4313      	orrs	r3, r2
 8005858:	2200      	movs	r2, #0
 800585a:	9206      	str	r2, [sp, #24]
 800585c:	aa12      	add	r2, sp, #72	; 0x48
 800585e:	9205      	str	r2, [sp, #20]
 8005860:	aa11      	add	r2, sp, #68	; 0x44
 8005862:	9203      	str	r2, [sp, #12]
 8005864:	2223      	movs	r2, #35	; 0x23
 8005866:	a908      	add	r1, sp, #32
 8005868:	6023      	str	r3, [r4, #0]
 800586a:	9301      	str	r3, [sp, #4]
 800586c:	6863      	ldr	r3, [r4, #4]
 800586e:	1852      	adds	r2, r2, r1
 8005870:	9202      	str	r2, [sp, #8]
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	0038      	movs	r0, r7
 8005876:	002b      	movs	r3, r5
 8005878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800587a:	9604      	str	r6, [sp, #16]
 800587c:	f7ff febe 	bl	80055fc <__cvt>
 8005880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005882:	0005      	movs	r5, r0
 8005884:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005886:	2b47      	cmp	r3, #71	; 0x47
 8005888:	d108      	bne.n	800589c <_printf_float+0x14c>
 800588a:	1ccb      	adds	r3, r1, #3
 800588c:	db02      	blt.n	8005894 <_printf_float+0x144>
 800588e:	6863      	ldr	r3, [r4, #4]
 8005890:	4299      	cmp	r1, r3
 8005892:	dd46      	ble.n	8005922 <_printf_float+0x1d2>
 8005894:	0033      	movs	r3, r6
 8005896:	3b02      	subs	r3, #2
 8005898:	b2db      	uxtb	r3, r3
 800589a:	001e      	movs	r6, r3
 800589c:	2e65      	cmp	r6, #101	; 0x65
 800589e:	d824      	bhi.n	80058ea <_printf_float+0x19a>
 80058a0:	0020      	movs	r0, r4
 80058a2:	0032      	movs	r2, r6
 80058a4:	3901      	subs	r1, #1
 80058a6:	3050      	adds	r0, #80	; 0x50
 80058a8:	9111      	str	r1, [sp, #68]	; 0x44
 80058aa:	f7ff ff0a 	bl	80056c2 <__exponent>
 80058ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80058b0:	900a      	str	r0, [sp, #40]	; 0x28
 80058b2:	1813      	adds	r3, r2, r0
 80058b4:	6123      	str	r3, [r4, #16]
 80058b6:	2a01      	cmp	r2, #1
 80058b8:	dc02      	bgt.n	80058c0 <_printf_float+0x170>
 80058ba:	6822      	ldr	r2, [r4, #0]
 80058bc:	07d2      	lsls	r2, r2, #31
 80058be:	d501      	bpl.n	80058c4 <_printf_float+0x174>
 80058c0:	3301      	adds	r3, #1
 80058c2:	6123      	str	r3, [r4, #16]
 80058c4:	2323      	movs	r3, #35	; 0x23
 80058c6:	aa08      	add	r2, sp, #32
 80058c8:	189b      	adds	r3, r3, r2
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d100      	bne.n	80058d2 <_printf_float+0x182>
 80058d0:	e791      	b.n	80057f6 <_printf_float+0xa6>
 80058d2:	0023      	movs	r3, r4
 80058d4:	222d      	movs	r2, #45	; 0x2d
 80058d6:	3343      	adds	r3, #67	; 0x43
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	e78c      	b.n	80057f6 <_printf_float+0xa6>
 80058dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058de:	2a47      	cmp	r2, #71	; 0x47
 80058e0:	d1b6      	bne.n	8005850 <_printf_float+0x100>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1b4      	bne.n	8005850 <_printf_float+0x100>
 80058e6:	3301      	adds	r3, #1
 80058e8:	e7b1      	b.n	800584e <_printf_float+0xfe>
 80058ea:	2e66      	cmp	r6, #102	; 0x66
 80058ec:	d11b      	bne.n	8005926 <_printf_float+0x1d6>
 80058ee:	6863      	ldr	r3, [r4, #4]
 80058f0:	2900      	cmp	r1, #0
 80058f2:	dd0d      	ble.n	8005910 <_printf_float+0x1c0>
 80058f4:	6121      	str	r1, [r4, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d102      	bne.n	8005900 <_printf_float+0x1b0>
 80058fa:	6822      	ldr	r2, [r4, #0]
 80058fc:	07d2      	lsls	r2, r2, #31
 80058fe:	d502      	bpl.n	8005906 <_printf_float+0x1b6>
 8005900:	3301      	adds	r3, #1
 8005902:	1859      	adds	r1, r3, r1
 8005904:	6121      	str	r1, [r4, #16]
 8005906:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005908:	65a3      	str	r3, [r4, #88]	; 0x58
 800590a:	2300      	movs	r3, #0
 800590c:	930a      	str	r3, [sp, #40]	; 0x28
 800590e:	e7d9      	b.n	80058c4 <_printf_float+0x174>
 8005910:	2b00      	cmp	r3, #0
 8005912:	d103      	bne.n	800591c <_printf_float+0x1cc>
 8005914:	2201      	movs	r2, #1
 8005916:	6821      	ldr	r1, [r4, #0]
 8005918:	4211      	tst	r1, r2
 800591a:	d000      	beq.n	800591e <_printf_float+0x1ce>
 800591c:	1c9a      	adds	r2, r3, #2
 800591e:	6122      	str	r2, [r4, #16]
 8005920:	e7f1      	b.n	8005906 <_printf_float+0x1b6>
 8005922:	2367      	movs	r3, #103	; 0x67
 8005924:	001e      	movs	r6, r3
 8005926:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005928:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800592a:	4293      	cmp	r3, r2
 800592c:	db06      	blt.n	800593c <_printf_float+0x1ec>
 800592e:	6822      	ldr	r2, [r4, #0]
 8005930:	6123      	str	r3, [r4, #16]
 8005932:	07d2      	lsls	r2, r2, #31
 8005934:	d5e7      	bpl.n	8005906 <_printf_float+0x1b6>
 8005936:	3301      	adds	r3, #1
 8005938:	6123      	str	r3, [r4, #16]
 800593a:	e7e4      	b.n	8005906 <_printf_float+0x1b6>
 800593c:	2101      	movs	r1, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	dc01      	bgt.n	8005946 <_printf_float+0x1f6>
 8005942:	1849      	adds	r1, r1, r1
 8005944:	1ac9      	subs	r1, r1, r3
 8005946:	1852      	adds	r2, r2, r1
 8005948:	e7e9      	b.n	800591e <_printf_float+0x1ce>
 800594a:	6822      	ldr	r2, [r4, #0]
 800594c:	0553      	lsls	r3, r2, #21
 800594e:	d408      	bmi.n	8005962 <_printf_float+0x212>
 8005950:	6923      	ldr	r3, [r4, #16]
 8005952:	002a      	movs	r2, r5
 8005954:	0038      	movs	r0, r7
 8005956:	9908      	ldr	r1, [sp, #32]
 8005958:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800595a:	47a8      	blx	r5
 800595c:	1c43      	adds	r3, r0, #1
 800595e:	d129      	bne.n	80059b4 <_printf_float+0x264>
 8005960:	e754      	b.n	800580c <_printf_float+0xbc>
 8005962:	2e65      	cmp	r6, #101	; 0x65
 8005964:	d800      	bhi.n	8005968 <_printf_float+0x218>
 8005966:	e0ec      	b.n	8005b42 <_printf_float+0x3f2>
 8005968:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800596a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800596c:	2200      	movs	r2, #0
 800596e:	2300      	movs	r3, #0
 8005970:	f7fa fd6c 	bl	800044c <__aeabi_dcmpeq>
 8005974:	2800      	cmp	r0, #0
 8005976:	d034      	beq.n	80059e2 <_printf_float+0x292>
 8005978:	2301      	movs	r3, #1
 800597a:	0038      	movs	r0, r7
 800597c:	4a37      	ldr	r2, [pc, #220]	; (8005a5c <_printf_float+0x30c>)
 800597e:	9908      	ldr	r1, [sp, #32]
 8005980:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005982:	47a8      	blx	r5
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	d100      	bne.n	800598a <_printf_float+0x23a>
 8005988:	e740      	b.n	800580c <_printf_float+0xbc>
 800598a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800598c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800598e:	4293      	cmp	r3, r2
 8005990:	db02      	blt.n	8005998 <_printf_float+0x248>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	07db      	lsls	r3, r3, #31
 8005996:	d50d      	bpl.n	80059b4 <_printf_float+0x264>
 8005998:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800599a:	0038      	movs	r0, r7
 800599c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800599e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059a0:	9908      	ldr	r1, [sp, #32]
 80059a2:	47a8      	blx	r5
 80059a4:	2500      	movs	r5, #0
 80059a6:	1c43      	adds	r3, r0, #1
 80059a8:	d100      	bne.n	80059ac <_printf_float+0x25c>
 80059aa:	e72f      	b.n	800580c <_printf_float+0xbc>
 80059ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059ae:	3b01      	subs	r3, #1
 80059b0:	42ab      	cmp	r3, r5
 80059b2:	dc0a      	bgt.n	80059ca <_printf_float+0x27a>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	079b      	lsls	r3, r3, #30
 80059b8:	d500      	bpl.n	80059bc <_printf_float+0x26c>
 80059ba:	e114      	b.n	8005be6 <_printf_float+0x496>
 80059bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80059be:	68e0      	ldr	r0, [r4, #12]
 80059c0:	4298      	cmp	r0, r3
 80059c2:	db00      	blt.n	80059c6 <_printf_float+0x276>
 80059c4:	e724      	b.n	8005810 <_printf_float+0xc0>
 80059c6:	0018      	movs	r0, r3
 80059c8:	e722      	b.n	8005810 <_printf_float+0xc0>
 80059ca:	0022      	movs	r2, r4
 80059cc:	2301      	movs	r3, #1
 80059ce:	0038      	movs	r0, r7
 80059d0:	9908      	ldr	r1, [sp, #32]
 80059d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80059d4:	321a      	adds	r2, #26
 80059d6:	47b0      	blx	r6
 80059d8:	1c43      	adds	r3, r0, #1
 80059da:	d100      	bne.n	80059de <_printf_float+0x28e>
 80059dc:	e716      	b.n	800580c <_printf_float+0xbc>
 80059de:	3501      	adds	r5, #1
 80059e0:	e7e4      	b.n	80059ac <_printf_float+0x25c>
 80059e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	dc3b      	bgt.n	8005a60 <_printf_float+0x310>
 80059e8:	2301      	movs	r3, #1
 80059ea:	0038      	movs	r0, r7
 80059ec:	4a1b      	ldr	r2, [pc, #108]	; (8005a5c <_printf_float+0x30c>)
 80059ee:	9908      	ldr	r1, [sp, #32]
 80059f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80059f2:	47b0      	blx	r6
 80059f4:	1c43      	adds	r3, r0, #1
 80059f6:	d100      	bne.n	80059fa <_printf_float+0x2aa>
 80059f8:	e708      	b.n	800580c <_printf_float+0xbc>
 80059fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059fe:	4313      	orrs	r3, r2
 8005a00:	d102      	bne.n	8005a08 <_printf_float+0x2b8>
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	07db      	lsls	r3, r3, #31
 8005a06:	d5d5      	bpl.n	80059b4 <_printf_float+0x264>
 8005a08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a0a:	0038      	movs	r0, r7
 8005a0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a0e:	9908      	ldr	r1, [sp, #32]
 8005a10:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005a12:	47b0      	blx	r6
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	d100      	bne.n	8005a1a <_printf_float+0x2ca>
 8005a18:	e6f8      	b.n	800580c <_printf_float+0xbc>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	930a      	str	r3, [sp, #40]	; 0x28
 8005a1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a22:	425b      	negs	r3, r3
 8005a24:	4293      	cmp	r3, r2
 8005a26:	dc01      	bgt.n	8005a2c <_printf_float+0x2dc>
 8005a28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a2a:	e792      	b.n	8005952 <_printf_float+0x202>
 8005a2c:	0022      	movs	r2, r4
 8005a2e:	2301      	movs	r3, #1
 8005a30:	0038      	movs	r0, r7
 8005a32:	9908      	ldr	r1, [sp, #32]
 8005a34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005a36:	321a      	adds	r2, #26
 8005a38:	47b0      	blx	r6
 8005a3a:	1c43      	adds	r3, r0, #1
 8005a3c:	d100      	bne.n	8005a40 <_printf_float+0x2f0>
 8005a3e:	e6e5      	b.n	800580c <_printf_float+0xbc>
 8005a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a42:	3301      	adds	r3, #1
 8005a44:	e7ea      	b.n	8005a1c <_printf_float+0x2cc>
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	7fefffff 	.word	0x7fefffff
 8005a4c:	08008580 	.word	0x08008580
 8005a50:	08008584 	.word	0x08008584
 8005a54:	08008588 	.word	0x08008588
 8005a58:	0800858c 	.word	0x0800858c
 8005a5c:	08008590 	.word	0x08008590
 8005a60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a64:	920a      	str	r2, [sp, #40]	; 0x28
 8005a66:	429a      	cmp	r2, r3
 8005a68:	dd00      	ble.n	8005a6c <_printf_float+0x31c>
 8005a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8005a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	dc3d      	bgt.n	8005aee <_printf_float+0x39e>
 8005a72:	2300      	movs	r3, #0
 8005a74:	930e      	str	r3, [sp, #56]	; 0x38
 8005a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	17db      	asrs	r3, r3, #31
 8005a7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a82:	930c      	str	r3, [sp, #48]	; 0x30
 8005a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a86:	4013      	ands	r3, r2
 8005a88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	dc36      	bgt.n	8005b00 <_printf_float+0x3b0>
 8005a92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a96:	4293      	cmp	r3, r2
 8005a98:	db40      	blt.n	8005b1c <_printf_float+0x3cc>
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	07db      	lsls	r3, r3, #31
 8005a9e:	d43d      	bmi.n	8005b1c <_printf_float+0x3cc>
 8005aa0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005aa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005aa4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	1a52      	subs	r2, r2, r1
 8005aaa:	920a      	str	r2, [sp, #40]	; 0x28
 8005aac:	429a      	cmp	r2, r3
 8005aae:	dd00      	ble.n	8005ab2 <_printf_float+0x362>
 8005ab0:	930a      	str	r3, [sp, #40]	; 0x28
 8005ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	dc3a      	bgt.n	8005b2e <_printf_float+0x3de>
 8005ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aba:	2500      	movs	r5, #0
 8005abc:	43db      	mvns	r3, r3
 8005abe:	17db      	asrs	r3, r3, #31
 8005ac0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ac2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005ac4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ac6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ac8:	1a9b      	subs	r3, r3, r2
 8005aca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005acc:	400a      	ands	r2, r1
 8005ace:	1a9b      	subs	r3, r3, r2
 8005ad0:	42ab      	cmp	r3, r5
 8005ad2:	dc00      	bgt.n	8005ad6 <_printf_float+0x386>
 8005ad4:	e76e      	b.n	80059b4 <_printf_float+0x264>
 8005ad6:	0022      	movs	r2, r4
 8005ad8:	2301      	movs	r3, #1
 8005ada:	0038      	movs	r0, r7
 8005adc:	9908      	ldr	r1, [sp, #32]
 8005ade:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005ae0:	321a      	adds	r2, #26
 8005ae2:	47b0      	blx	r6
 8005ae4:	1c43      	adds	r3, r0, #1
 8005ae6:	d100      	bne.n	8005aea <_printf_float+0x39a>
 8005ae8:	e690      	b.n	800580c <_printf_float+0xbc>
 8005aea:	3501      	adds	r5, #1
 8005aec:	e7e9      	b.n	8005ac2 <_printf_float+0x372>
 8005aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005af0:	002a      	movs	r2, r5
 8005af2:	0038      	movs	r0, r7
 8005af4:	9908      	ldr	r1, [sp, #32]
 8005af6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005af8:	47b0      	blx	r6
 8005afa:	1c43      	adds	r3, r0, #1
 8005afc:	d1b9      	bne.n	8005a72 <_printf_float+0x322>
 8005afe:	e685      	b.n	800580c <_printf_float+0xbc>
 8005b00:	0022      	movs	r2, r4
 8005b02:	2301      	movs	r3, #1
 8005b04:	0038      	movs	r0, r7
 8005b06:	9908      	ldr	r1, [sp, #32]
 8005b08:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005b0a:	321a      	adds	r2, #26
 8005b0c:	47b0      	blx	r6
 8005b0e:	1c43      	adds	r3, r0, #1
 8005b10:	d100      	bne.n	8005b14 <_printf_float+0x3c4>
 8005b12:	e67b      	b.n	800580c <_printf_float+0xbc>
 8005b14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b16:	3301      	adds	r3, #1
 8005b18:	930e      	str	r3, [sp, #56]	; 0x38
 8005b1a:	e7b0      	b.n	8005a7e <_printf_float+0x32e>
 8005b1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b1e:	0038      	movs	r0, r7
 8005b20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b22:	9908      	ldr	r1, [sp, #32]
 8005b24:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005b26:	47b0      	blx	r6
 8005b28:	1c43      	adds	r3, r0, #1
 8005b2a:	d1b9      	bne.n	8005aa0 <_printf_float+0x350>
 8005b2c:	e66e      	b.n	800580c <_printf_float+0xbc>
 8005b2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b30:	0038      	movs	r0, r7
 8005b32:	18ea      	adds	r2, r5, r3
 8005b34:	9908      	ldr	r1, [sp, #32]
 8005b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b38:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005b3a:	47a8      	blx	r5
 8005b3c:	1c43      	adds	r3, r0, #1
 8005b3e:	d1bb      	bne.n	8005ab8 <_printf_float+0x368>
 8005b40:	e664      	b.n	800580c <_printf_float+0xbc>
 8005b42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	dc02      	bgt.n	8005b4e <_printf_float+0x3fe>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	421a      	tst	r2, r3
 8005b4c:	d038      	beq.n	8005bc0 <_printf_float+0x470>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	002a      	movs	r2, r5
 8005b52:	0038      	movs	r0, r7
 8005b54:	9908      	ldr	r1, [sp, #32]
 8005b56:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005b58:	47b0      	blx	r6
 8005b5a:	1c43      	adds	r3, r0, #1
 8005b5c:	d100      	bne.n	8005b60 <_printf_float+0x410>
 8005b5e:	e655      	b.n	800580c <_printf_float+0xbc>
 8005b60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b62:	0038      	movs	r0, r7
 8005b64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b66:	9908      	ldr	r1, [sp, #32]
 8005b68:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005b6a:	47b0      	blx	r6
 8005b6c:	1c43      	adds	r3, r0, #1
 8005b6e:	d100      	bne.n	8005b72 <_printf_float+0x422>
 8005b70:	e64c      	b.n	800580c <_printf_float+0xbc>
 8005b72:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005b74:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005b76:	2200      	movs	r2, #0
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f7fa fc67 	bl	800044c <__aeabi_dcmpeq>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d11c      	bne.n	8005bbc <_printf_float+0x46c>
 8005b82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b84:	1c6a      	adds	r2, r5, #1
 8005b86:	3b01      	subs	r3, #1
 8005b88:	0038      	movs	r0, r7
 8005b8a:	9908      	ldr	r1, [sp, #32]
 8005b8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005b8e:	47a8      	blx	r5
 8005b90:	1c43      	adds	r3, r0, #1
 8005b92:	d10f      	bne.n	8005bb4 <_printf_float+0x464>
 8005b94:	e63a      	b.n	800580c <_printf_float+0xbc>
 8005b96:	0022      	movs	r2, r4
 8005b98:	2301      	movs	r3, #1
 8005b9a:	0038      	movs	r0, r7
 8005b9c:	9908      	ldr	r1, [sp, #32]
 8005b9e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005ba0:	321a      	adds	r2, #26
 8005ba2:	47b0      	blx	r6
 8005ba4:	1c43      	adds	r3, r0, #1
 8005ba6:	d100      	bne.n	8005baa <_printf_float+0x45a>
 8005ba8:	e630      	b.n	800580c <_printf_float+0xbc>
 8005baa:	3501      	adds	r5, #1
 8005bac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	42ab      	cmp	r3, r5
 8005bb2:	dcf0      	bgt.n	8005b96 <_printf_float+0x446>
 8005bb4:	0022      	movs	r2, r4
 8005bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb8:	3250      	adds	r2, #80	; 0x50
 8005bba:	e6cb      	b.n	8005954 <_printf_float+0x204>
 8005bbc:	2500      	movs	r5, #0
 8005bbe:	e7f5      	b.n	8005bac <_printf_float+0x45c>
 8005bc0:	002a      	movs	r2, r5
 8005bc2:	e7e1      	b.n	8005b88 <_printf_float+0x438>
 8005bc4:	0022      	movs	r2, r4
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	0038      	movs	r0, r7
 8005bca:	9908      	ldr	r1, [sp, #32]
 8005bcc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005bce:	3219      	adds	r2, #25
 8005bd0:	47b0      	blx	r6
 8005bd2:	1c43      	adds	r3, r0, #1
 8005bd4:	d100      	bne.n	8005bd8 <_printf_float+0x488>
 8005bd6:	e619      	b.n	800580c <_printf_float+0xbc>
 8005bd8:	3501      	adds	r5, #1
 8005bda:	68e3      	ldr	r3, [r4, #12]
 8005bdc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005bde:	1a9b      	subs	r3, r3, r2
 8005be0:	42ab      	cmp	r3, r5
 8005be2:	dcef      	bgt.n	8005bc4 <_printf_float+0x474>
 8005be4:	e6ea      	b.n	80059bc <_printf_float+0x26c>
 8005be6:	2500      	movs	r5, #0
 8005be8:	e7f7      	b.n	8005bda <_printf_float+0x48a>
 8005bea:	46c0      	nop			; (mov r8, r8)

08005bec <_printf_common>:
 8005bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bee:	0015      	movs	r5, r2
 8005bf0:	9301      	str	r3, [sp, #4]
 8005bf2:	688a      	ldr	r2, [r1, #8]
 8005bf4:	690b      	ldr	r3, [r1, #16]
 8005bf6:	000c      	movs	r4, r1
 8005bf8:	9000      	str	r0, [sp, #0]
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	da00      	bge.n	8005c00 <_printf_common+0x14>
 8005bfe:	0013      	movs	r3, r2
 8005c00:	0022      	movs	r2, r4
 8005c02:	602b      	str	r3, [r5, #0]
 8005c04:	3243      	adds	r2, #67	; 0x43
 8005c06:	7812      	ldrb	r2, [r2, #0]
 8005c08:	2a00      	cmp	r2, #0
 8005c0a:	d001      	beq.n	8005c10 <_printf_common+0x24>
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	602b      	str	r3, [r5, #0]
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	069b      	lsls	r3, r3, #26
 8005c14:	d502      	bpl.n	8005c1c <_printf_common+0x30>
 8005c16:	682b      	ldr	r3, [r5, #0]
 8005c18:	3302      	adds	r3, #2
 8005c1a:	602b      	str	r3, [r5, #0]
 8005c1c:	6822      	ldr	r2, [r4, #0]
 8005c1e:	2306      	movs	r3, #6
 8005c20:	0017      	movs	r7, r2
 8005c22:	401f      	ands	r7, r3
 8005c24:	421a      	tst	r2, r3
 8005c26:	d027      	beq.n	8005c78 <_printf_common+0x8c>
 8005c28:	0023      	movs	r3, r4
 8005c2a:	3343      	adds	r3, #67	; 0x43
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	1e5a      	subs	r2, r3, #1
 8005c30:	4193      	sbcs	r3, r2
 8005c32:	6822      	ldr	r2, [r4, #0]
 8005c34:	0692      	lsls	r2, r2, #26
 8005c36:	d430      	bmi.n	8005c9a <_printf_common+0xae>
 8005c38:	0022      	movs	r2, r4
 8005c3a:	9901      	ldr	r1, [sp, #4]
 8005c3c:	9800      	ldr	r0, [sp, #0]
 8005c3e:	9e08      	ldr	r6, [sp, #32]
 8005c40:	3243      	adds	r2, #67	; 0x43
 8005c42:	47b0      	blx	r6
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d025      	beq.n	8005c94 <_printf_common+0xa8>
 8005c48:	2306      	movs	r3, #6
 8005c4a:	6820      	ldr	r0, [r4, #0]
 8005c4c:	682a      	ldr	r2, [r5, #0]
 8005c4e:	68e1      	ldr	r1, [r4, #12]
 8005c50:	2500      	movs	r5, #0
 8005c52:	4003      	ands	r3, r0
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	d103      	bne.n	8005c60 <_printf_common+0x74>
 8005c58:	1a8d      	subs	r5, r1, r2
 8005c5a:	43eb      	mvns	r3, r5
 8005c5c:	17db      	asrs	r3, r3, #31
 8005c5e:	401d      	ands	r5, r3
 8005c60:	68a3      	ldr	r3, [r4, #8]
 8005c62:	6922      	ldr	r2, [r4, #16]
 8005c64:	4293      	cmp	r3, r2
 8005c66:	dd01      	ble.n	8005c6c <_printf_common+0x80>
 8005c68:	1a9b      	subs	r3, r3, r2
 8005c6a:	18ed      	adds	r5, r5, r3
 8005c6c:	2700      	movs	r7, #0
 8005c6e:	42bd      	cmp	r5, r7
 8005c70:	d120      	bne.n	8005cb4 <_printf_common+0xc8>
 8005c72:	2000      	movs	r0, #0
 8005c74:	e010      	b.n	8005c98 <_printf_common+0xac>
 8005c76:	3701      	adds	r7, #1
 8005c78:	68e3      	ldr	r3, [r4, #12]
 8005c7a:	682a      	ldr	r2, [r5, #0]
 8005c7c:	1a9b      	subs	r3, r3, r2
 8005c7e:	42bb      	cmp	r3, r7
 8005c80:	ddd2      	ble.n	8005c28 <_printf_common+0x3c>
 8005c82:	0022      	movs	r2, r4
 8005c84:	2301      	movs	r3, #1
 8005c86:	9901      	ldr	r1, [sp, #4]
 8005c88:	9800      	ldr	r0, [sp, #0]
 8005c8a:	9e08      	ldr	r6, [sp, #32]
 8005c8c:	3219      	adds	r2, #25
 8005c8e:	47b0      	blx	r6
 8005c90:	1c43      	adds	r3, r0, #1
 8005c92:	d1f0      	bne.n	8005c76 <_printf_common+0x8a>
 8005c94:	2001      	movs	r0, #1
 8005c96:	4240      	negs	r0, r0
 8005c98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c9a:	2030      	movs	r0, #48	; 0x30
 8005c9c:	18e1      	adds	r1, r4, r3
 8005c9e:	3143      	adds	r1, #67	; 0x43
 8005ca0:	7008      	strb	r0, [r1, #0]
 8005ca2:	0021      	movs	r1, r4
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	3145      	adds	r1, #69	; 0x45
 8005ca8:	7809      	ldrb	r1, [r1, #0]
 8005caa:	18a2      	adds	r2, r4, r2
 8005cac:	3243      	adds	r2, #67	; 0x43
 8005cae:	3302      	adds	r3, #2
 8005cb0:	7011      	strb	r1, [r2, #0]
 8005cb2:	e7c1      	b.n	8005c38 <_printf_common+0x4c>
 8005cb4:	0022      	movs	r2, r4
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	9901      	ldr	r1, [sp, #4]
 8005cba:	9800      	ldr	r0, [sp, #0]
 8005cbc:	9e08      	ldr	r6, [sp, #32]
 8005cbe:	321a      	adds	r2, #26
 8005cc0:	47b0      	blx	r6
 8005cc2:	1c43      	adds	r3, r0, #1
 8005cc4:	d0e6      	beq.n	8005c94 <_printf_common+0xa8>
 8005cc6:	3701      	adds	r7, #1
 8005cc8:	e7d1      	b.n	8005c6e <_printf_common+0x82>
	...

08005ccc <_printf_i>:
 8005ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cce:	b08b      	sub	sp, #44	; 0x2c
 8005cd0:	9206      	str	r2, [sp, #24]
 8005cd2:	000a      	movs	r2, r1
 8005cd4:	3243      	adds	r2, #67	; 0x43
 8005cd6:	9307      	str	r3, [sp, #28]
 8005cd8:	9005      	str	r0, [sp, #20]
 8005cda:	9204      	str	r2, [sp, #16]
 8005cdc:	7e0a      	ldrb	r2, [r1, #24]
 8005cde:	000c      	movs	r4, r1
 8005ce0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ce2:	2a78      	cmp	r2, #120	; 0x78
 8005ce4:	d806      	bhi.n	8005cf4 <_printf_i+0x28>
 8005ce6:	2a62      	cmp	r2, #98	; 0x62
 8005ce8:	d808      	bhi.n	8005cfc <_printf_i+0x30>
 8005cea:	2a00      	cmp	r2, #0
 8005cec:	d100      	bne.n	8005cf0 <_printf_i+0x24>
 8005cee:	e0c0      	b.n	8005e72 <_printf_i+0x1a6>
 8005cf0:	2a58      	cmp	r2, #88	; 0x58
 8005cf2:	d052      	beq.n	8005d9a <_printf_i+0xce>
 8005cf4:	0026      	movs	r6, r4
 8005cf6:	3642      	adds	r6, #66	; 0x42
 8005cf8:	7032      	strb	r2, [r6, #0]
 8005cfa:	e022      	b.n	8005d42 <_printf_i+0x76>
 8005cfc:	0010      	movs	r0, r2
 8005cfe:	3863      	subs	r0, #99	; 0x63
 8005d00:	2815      	cmp	r0, #21
 8005d02:	d8f7      	bhi.n	8005cf4 <_printf_i+0x28>
 8005d04:	f7fa fa12 	bl	800012c <__gnu_thumb1_case_shi>
 8005d08:	001f0016 	.word	0x001f0016
 8005d0c:	fff6fff6 	.word	0xfff6fff6
 8005d10:	fff6fff6 	.word	0xfff6fff6
 8005d14:	fff6001f 	.word	0xfff6001f
 8005d18:	fff6fff6 	.word	0xfff6fff6
 8005d1c:	00a8fff6 	.word	0x00a8fff6
 8005d20:	009a0036 	.word	0x009a0036
 8005d24:	fff6fff6 	.word	0xfff6fff6
 8005d28:	fff600b9 	.word	0xfff600b9
 8005d2c:	fff60036 	.word	0xfff60036
 8005d30:	009efff6 	.word	0x009efff6
 8005d34:	0026      	movs	r6, r4
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	3642      	adds	r6, #66	; 0x42
 8005d3a:	1d11      	adds	r1, r2, #4
 8005d3c:	6019      	str	r1, [r3, #0]
 8005d3e:	6813      	ldr	r3, [r2, #0]
 8005d40:	7033      	strb	r3, [r6, #0]
 8005d42:	2301      	movs	r3, #1
 8005d44:	e0a7      	b.n	8005e96 <_printf_i+0x1ca>
 8005d46:	6808      	ldr	r0, [r1, #0]
 8005d48:	6819      	ldr	r1, [r3, #0]
 8005d4a:	1d0a      	adds	r2, r1, #4
 8005d4c:	0605      	lsls	r5, r0, #24
 8005d4e:	d50b      	bpl.n	8005d68 <_printf_i+0x9c>
 8005d50:	680d      	ldr	r5, [r1, #0]
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	2d00      	cmp	r5, #0
 8005d56:	da03      	bge.n	8005d60 <_printf_i+0x94>
 8005d58:	232d      	movs	r3, #45	; 0x2d
 8005d5a:	9a04      	ldr	r2, [sp, #16]
 8005d5c:	426d      	negs	r5, r5
 8005d5e:	7013      	strb	r3, [r2, #0]
 8005d60:	4b61      	ldr	r3, [pc, #388]	; (8005ee8 <_printf_i+0x21c>)
 8005d62:	270a      	movs	r7, #10
 8005d64:	9303      	str	r3, [sp, #12]
 8005d66:	e032      	b.n	8005dce <_printf_i+0x102>
 8005d68:	680d      	ldr	r5, [r1, #0]
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	0641      	lsls	r1, r0, #25
 8005d6e:	d5f1      	bpl.n	8005d54 <_printf_i+0x88>
 8005d70:	b22d      	sxth	r5, r5
 8005d72:	e7ef      	b.n	8005d54 <_printf_i+0x88>
 8005d74:	680d      	ldr	r5, [r1, #0]
 8005d76:	6819      	ldr	r1, [r3, #0]
 8005d78:	1d08      	adds	r0, r1, #4
 8005d7a:	6018      	str	r0, [r3, #0]
 8005d7c:	062e      	lsls	r6, r5, #24
 8005d7e:	d501      	bpl.n	8005d84 <_printf_i+0xb8>
 8005d80:	680d      	ldr	r5, [r1, #0]
 8005d82:	e003      	b.n	8005d8c <_printf_i+0xc0>
 8005d84:	066d      	lsls	r5, r5, #25
 8005d86:	d5fb      	bpl.n	8005d80 <_printf_i+0xb4>
 8005d88:	680d      	ldr	r5, [r1, #0]
 8005d8a:	b2ad      	uxth	r5, r5
 8005d8c:	4b56      	ldr	r3, [pc, #344]	; (8005ee8 <_printf_i+0x21c>)
 8005d8e:	270a      	movs	r7, #10
 8005d90:	9303      	str	r3, [sp, #12]
 8005d92:	2a6f      	cmp	r2, #111	; 0x6f
 8005d94:	d117      	bne.n	8005dc6 <_printf_i+0xfa>
 8005d96:	2708      	movs	r7, #8
 8005d98:	e015      	b.n	8005dc6 <_printf_i+0xfa>
 8005d9a:	3145      	adds	r1, #69	; 0x45
 8005d9c:	700a      	strb	r2, [r1, #0]
 8005d9e:	4a52      	ldr	r2, [pc, #328]	; (8005ee8 <_printf_i+0x21c>)
 8005da0:	9203      	str	r2, [sp, #12]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	6821      	ldr	r1, [r4, #0]
 8005da6:	ca20      	ldmia	r2!, {r5}
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	0608      	lsls	r0, r1, #24
 8005dac:	d550      	bpl.n	8005e50 <_printf_i+0x184>
 8005dae:	07cb      	lsls	r3, r1, #31
 8005db0:	d502      	bpl.n	8005db8 <_printf_i+0xec>
 8005db2:	2320      	movs	r3, #32
 8005db4:	4319      	orrs	r1, r3
 8005db6:	6021      	str	r1, [r4, #0]
 8005db8:	2710      	movs	r7, #16
 8005dba:	2d00      	cmp	r5, #0
 8005dbc:	d103      	bne.n	8005dc6 <_printf_i+0xfa>
 8005dbe:	2320      	movs	r3, #32
 8005dc0:	6822      	ldr	r2, [r4, #0]
 8005dc2:	439a      	bics	r2, r3
 8005dc4:	6022      	str	r2, [r4, #0]
 8005dc6:	0023      	movs	r3, r4
 8005dc8:	2200      	movs	r2, #0
 8005dca:	3343      	adds	r3, #67	; 0x43
 8005dcc:	701a      	strb	r2, [r3, #0]
 8005dce:	6863      	ldr	r3, [r4, #4]
 8005dd0:	60a3      	str	r3, [r4, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	db03      	blt.n	8005dde <_printf_i+0x112>
 8005dd6:	2204      	movs	r2, #4
 8005dd8:	6821      	ldr	r1, [r4, #0]
 8005dda:	4391      	bics	r1, r2
 8005ddc:	6021      	str	r1, [r4, #0]
 8005dde:	2d00      	cmp	r5, #0
 8005de0:	d102      	bne.n	8005de8 <_printf_i+0x11c>
 8005de2:	9e04      	ldr	r6, [sp, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00c      	beq.n	8005e02 <_printf_i+0x136>
 8005de8:	9e04      	ldr	r6, [sp, #16]
 8005dea:	0028      	movs	r0, r5
 8005dec:	0039      	movs	r1, r7
 8005dee:	f7fa fa2d 	bl	800024c <__aeabi_uidivmod>
 8005df2:	9b03      	ldr	r3, [sp, #12]
 8005df4:	3e01      	subs	r6, #1
 8005df6:	5c5b      	ldrb	r3, [r3, r1]
 8005df8:	7033      	strb	r3, [r6, #0]
 8005dfa:	002b      	movs	r3, r5
 8005dfc:	0005      	movs	r5, r0
 8005dfe:	429f      	cmp	r7, r3
 8005e00:	d9f3      	bls.n	8005dea <_printf_i+0x11e>
 8005e02:	2f08      	cmp	r7, #8
 8005e04:	d109      	bne.n	8005e1a <_printf_i+0x14e>
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	07db      	lsls	r3, r3, #31
 8005e0a:	d506      	bpl.n	8005e1a <_printf_i+0x14e>
 8005e0c:	6863      	ldr	r3, [r4, #4]
 8005e0e:	6922      	ldr	r2, [r4, #16]
 8005e10:	4293      	cmp	r3, r2
 8005e12:	dc02      	bgt.n	8005e1a <_printf_i+0x14e>
 8005e14:	2330      	movs	r3, #48	; 0x30
 8005e16:	3e01      	subs	r6, #1
 8005e18:	7033      	strb	r3, [r6, #0]
 8005e1a:	9b04      	ldr	r3, [sp, #16]
 8005e1c:	1b9b      	subs	r3, r3, r6
 8005e1e:	6123      	str	r3, [r4, #16]
 8005e20:	9b07      	ldr	r3, [sp, #28]
 8005e22:	0021      	movs	r1, r4
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	9805      	ldr	r0, [sp, #20]
 8005e28:	9b06      	ldr	r3, [sp, #24]
 8005e2a:	aa09      	add	r2, sp, #36	; 0x24
 8005e2c:	f7ff fede 	bl	8005bec <_printf_common>
 8005e30:	1c43      	adds	r3, r0, #1
 8005e32:	d135      	bne.n	8005ea0 <_printf_i+0x1d4>
 8005e34:	2001      	movs	r0, #1
 8005e36:	4240      	negs	r0, r0
 8005e38:	b00b      	add	sp, #44	; 0x2c
 8005e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	6809      	ldr	r1, [r1, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	6022      	str	r2, [r4, #0]
 8005e44:	0022      	movs	r2, r4
 8005e46:	2178      	movs	r1, #120	; 0x78
 8005e48:	3245      	adds	r2, #69	; 0x45
 8005e4a:	7011      	strb	r1, [r2, #0]
 8005e4c:	4a27      	ldr	r2, [pc, #156]	; (8005eec <_printf_i+0x220>)
 8005e4e:	e7a7      	b.n	8005da0 <_printf_i+0xd4>
 8005e50:	0648      	lsls	r0, r1, #25
 8005e52:	d5ac      	bpl.n	8005dae <_printf_i+0xe2>
 8005e54:	b2ad      	uxth	r5, r5
 8005e56:	e7aa      	b.n	8005dae <_printf_i+0xe2>
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	680d      	ldr	r5, [r1, #0]
 8005e5c:	1d10      	adds	r0, r2, #4
 8005e5e:	6949      	ldr	r1, [r1, #20]
 8005e60:	6018      	str	r0, [r3, #0]
 8005e62:	6813      	ldr	r3, [r2, #0]
 8005e64:	062e      	lsls	r6, r5, #24
 8005e66:	d501      	bpl.n	8005e6c <_printf_i+0x1a0>
 8005e68:	6019      	str	r1, [r3, #0]
 8005e6a:	e002      	b.n	8005e72 <_printf_i+0x1a6>
 8005e6c:	066d      	lsls	r5, r5, #25
 8005e6e:	d5fb      	bpl.n	8005e68 <_printf_i+0x19c>
 8005e70:	8019      	strh	r1, [r3, #0]
 8005e72:	2300      	movs	r3, #0
 8005e74:	9e04      	ldr	r6, [sp, #16]
 8005e76:	6123      	str	r3, [r4, #16]
 8005e78:	e7d2      	b.n	8005e20 <_printf_i+0x154>
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	1d11      	adds	r1, r2, #4
 8005e7e:	6019      	str	r1, [r3, #0]
 8005e80:	6816      	ldr	r6, [r2, #0]
 8005e82:	2100      	movs	r1, #0
 8005e84:	0030      	movs	r0, r6
 8005e86:	6862      	ldr	r2, [r4, #4]
 8005e88:	f000 ff0a 	bl	8006ca0 <memchr>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	d001      	beq.n	8005e94 <_printf_i+0x1c8>
 8005e90:	1b80      	subs	r0, r0, r6
 8005e92:	6060      	str	r0, [r4, #4]
 8005e94:	6863      	ldr	r3, [r4, #4]
 8005e96:	6123      	str	r3, [r4, #16]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	9a04      	ldr	r2, [sp, #16]
 8005e9c:	7013      	strb	r3, [r2, #0]
 8005e9e:	e7bf      	b.n	8005e20 <_printf_i+0x154>
 8005ea0:	6923      	ldr	r3, [r4, #16]
 8005ea2:	0032      	movs	r2, r6
 8005ea4:	9906      	ldr	r1, [sp, #24]
 8005ea6:	9805      	ldr	r0, [sp, #20]
 8005ea8:	9d07      	ldr	r5, [sp, #28]
 8005eaa:	47a8      	blx	r5
 8005eac:	1c43      	adds	r3, r0, #1
 8005eae:	d0c1      	beq.n	8005e34 <_printf_i+0x168>
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	079b      	lsls	r3, r3, #30
 8005eb4:	d415      	bmi.n	8005ee2 <_printf_i+0x216>
 8005eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eb8:	68e0      	ldr	r0, [r4, #12]
 8005eba:	4298      	cmp	r0, r3
 8005ebc:	dabc      	bge.n	8005e38 <_printf_i+0x16c>
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	e7ba      	b.n	8005e38 <_printf_i+0x16c>
 8005ec2:	0022      	movs	r2, r4
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	9906      	ldr	r1, [sp, #24]
 8005ec8:	9805      	ldr	r0, [sp, #20]
 8005eca:	9e07      	ldr	r6, [sp, #28]
 8005ecc:	3219      	adds	r2, #25
 8005ece:	47b0      	blx	r6
 8005ed0:	1c43      	adds	r3, r0, #1
 8005ed2:	d0af      	beq.n	8005e34 <_printf_i+0x168>
 8005ed4:	3501      	adds	r5, #1
 8005ed6:	68e3      	ldr	r3, [r4, #12]
 8005ed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eda:	1a9b      	subs	r3, r3, r2
 8005edc:	42ab      	cmp	r3, r5
 8005ede:	dcf0      	bgt.n	8005ec2 <_printf_i+0x1f6>
 8005ee0:	e7e9      	b.n	8005eb6 <_printf_i+0x1ea>
 8005ee2:	2500      	movs	r5, #0
 8005ee4:	e7f7      	b.n	8005ed6 <_printf_i+0x20a>
 8005ee6:	46c0      	nop			; (mov r8, r8)
 8005ee8:	08008592 	.word	0x08008592
 8005eec:	080085a3 	.word	0x080085a3

08005ef0 <siprintf>:
 8005ef0:	b40e      	push	{r1, r2, r3}
 8005ef2:	b500      	push	{lr}
 8005ef4:	490b      	ldr	r1, [pc, #44]	; (8005f24 <siprintf+0x34>)
 8005ef6:	b09c      	sub	sp, #112	; 0x70
 8005ef8:	ab1d      	add	r3, sp, #116	; 0x74
 8005efa:	9002      	str	r0, [sp, #8]
 8005efc:	9006      	str	r0, [sp, #24]
 8005efe:	9107      	str	r1, [sp, #28]
 8005f00:	9104      	str	r1, [sp, #16]
 8005f02:	4809      	ldr	r0, [pc, #36]	; (8005f28 <siprintf+0x38>)
 8005f04:	4909      	ldr	r1, [pc, #36]	; (8005f2c <siprintf+0x3c>)
 8005f06:	cb04      	ldmia	r3!, {r2}
 8005f08:	9105      	str	r1, [sp, #20]
 8005f0a:	6800      	ldr	r0, [r0, #0]
 8005f0c:	a902      	add	r1, sp, #8
 8005f0e:	9301      	str	r3, [sp, #4]
 8005f10:	f001 fb90 	bl	8007634 <_svfiprintf_r>
 8005f14:	2300      	movs	r3, #0
 8005f16:	9a02      	ldr	r2, [sp, #8]
 8005f18:	7013      	strb	r3, [r2, #0]
 8005f1a:	b01c      	add	sp, #112	; 0x70
 8005f1c:	bc08      	pop	{r3}
 8005f1e:	b003      	add	sp, #12
 8005f20:	4718      	bx	r3
 8005f22:	46c0      	nop			; (mov r8, r8)
 8005f24:	7fffffff 	.word	0x7fffffff
 8005f28:	2000000c 	.word	0x2000000c
 8005f2c:	ffff0208 	.word	0xffff0208

08005f30 <quorem>:
 8005f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f32:	0006      	movs	r6, r0
 8005f34:	690d      	ldr	r5, [r1, #16]
 8005f36:	6933      	ldr	r3, [r6, #16]
 8005f38:	b087      	sub	sp, #28
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	9102      	str	r1, [sp, #8]
 8005f3e:	42ab      	cmp	r3, r5
 8005f40:	db6b      	blt.n	800601a <quorem+0xea>
 8005f42:	000b      	movs	r3, r1
 8005f44:	3d01      	subs	r5, #1
 8005f46:	00ac      	lsls	r4, r5, #2
 8005f48:	3314      	adds	r3, #20
 8005f4a:	9305      	str	r3, [sp, #20]
 8005f4c:	191b      	adds	r3, r3, r4
 8005f4e:	9303      	str	r3, [sp, #12]
 8005f50:	0033      	movs	r3, r6
 8005f52:	3314      	adds	r3, #20
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	191c      	adds	r4, r3, r4
 8005f58:	9b03      	ldr	r3, [sp, #12]
 8005f5a:	6827      	ldr	r7, [r4, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	0038      	movs	r0, r7
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	3301      	adds	r3, #1
 8005f64:	0019      	movs	r1, r3
 8005f66:	9304      	str	r3, [sp, #16]
 8005f68:	f7fa f8ea 	bl	8000140 <__udivsi3>
 8005f6c:	9b04      	ldr	r3, [sp, #16]
 8005f6e:	9000      	str	r0, [sp, #0]
 8005f70:	429f      	cmp	r7, r3
 8005f72:	d329      	bcc.n	8005fc8 <quorem+0x98>
 8005f74:	2300      	movs	r3, #0
 8005f76:	469c      	mov	ip, r3
 8005f78:	9801      	ldr	r0, [sp, #4]
 8005f7a:	9f05      	ldr	r7, [sp, #20]
 8005f7c:	9304      	str	r3, [sp, #16]
 8005f7e:	cf08      	ldmia	r7!, {r3}
 8005f80:	9a00      	ldr	r2, [sp, #0]
 8005f82:	b299      	uxth	r1, r3
 8005f84:	4351      	muls	r1, r2
 8005f86:	0c1b      	lsrs	r3, r3, #16
 8005f88:	4353      	muls	r3, r2
 8005f8a:	4461      	add	r1, ip
 8005f8c:	0c0a      	lsrs	r2, r1, #16
 8005f8e:	189b      	adds	r3, r3, r2
 8005f90:	0c1a      	lsrs	r2, r3, #16
 8005f92:	9305      	str	r3, [sp, #20]
 8005f94:	6803      	ldr	r3, [r0, #0]
 8005f96:	4694      	mov	ip, r2
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	9b04      	ldr	r3, [sp, #16]
 8005f9c:	b289      	uxth	r1, r1
 8005f9e:	18d2      	adds	r2, r2, r3
 8005fa0:	6803      	ldr	r3, [r0, #0]
 8005fa2:	1a52      	subs	r2, r2, r1
 8005fa4:	0c19      	lsrs	r1, r3, #16
 8005fa6:	466b      	mov	r3, sp
 8005fa8:	8a9b      	ldrh	r3, [r3, #20]
 8005faa:	1acb      	subs	r3, r1, r3
 8005fac:	1411      	asrs	r1, r2, #16
 8005fae:	185b      	adds	r3, r3, r1
 8005fb0:	1419      	asrs	r1, r3, #16
 8005fb2:	b292      	uxth	r2, r2
 8005fb4:	041b      	lsls	r3, r3, #16
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	9b03      	ldr	r3, [sp, #12]
 8005fba:	9104      	str	r1, [sp, #16]
 8005fbc:	c004      	stmia	r0!, {r2}
 8005fbe:	42bb      	cmp	r3, r7
 8005fc0:	d2dd      	bcs.n	8005f7e <quorem+0x4e>
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d02e      	beq.n	8006026 <quorem+0xf6>
 8005fc8:	0030      	movs	r0, r6
 8005fca:	9902      	ldr	r1, [sp, #8]
 8005fcc:	f001 f902 	bl	80071d4 <__mcmp>
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	db21      	blt.n	8006018 <quorem+0xe8>
 8005fd4:	0030      	movs	r0, r6
 8005fd6:	2400      	movs	r4, #0
 8005fd8:	9b00      	ldr	r3, [sp, #0]
 8005fda:	9902      	ldr	r1, [sp, #8]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	3014      	adds	r0, #20
 8005fe2:	3114      	adds	r1, #20
 8005fe4:	6802      	ldr	r2, [r0, #0]
 8005fe6:	c908      	ldmia	r1!, {r3}
 8005fe8:	b292      	uxth	r2, r2
 8005fea:	1914      	adds	r4, r2, r4
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	1aa2      	subs	r2, r4, r2
 8005ff0:	6804      	ldr	r4, [r0, #0]
 8005ff2:	0c1b      	lsrs	r3, r3, #16
 8005ff4:	0c24      	lsrs	r4, r4, #16
 8005ff6:	1ae3      	subs	r3, r4, r3
 8005ff8:	1414      	asrs	r4, r2, #16
 8005ffa:	191b      	adds	r3, r3, r4
 8005ffc:	141c      	asrs	r4, r3, #16
 8005ffe:	b292      	uxth	r2, r2
 8006000:	041b      	lsls	r3, r3, #16
 8006002:	4313      	orrs	r3, r2
 8006004:	c008      	stmia	r0!, {r3}
 8006006:	9b03      	ldr	r3, [sp, #12]
 8006008:	428b      	cmp	r3, r1
 800600a:	d2eb      	bcs.n	8005fe4 <quorem+0xb4>
 800600c:	9a01      	ldr	r2, [sp, #4]
 800600e:	00ab      	lsls	r3, r5, #2
 8006010:	18d3      	adds	r3, r2, r3
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	2a00      	cmp	r2, #0
 8006016:	d010      	beq.n	800603a <quorem+0x10a>
 8006018:	9800      	ldr	r0, [sp, #0]
 800601a:	b007      	add	sp, #28
 800601c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d104      	bne.n	800602e <quorem+0xfe>
 8006024:	3d01      	subs	r5, #1
 8006026:	9b01      	ldr	r3, [sp, #4]
 8006028:	3c04      	subs	r4, #4
 800602a:	42a3      	cmp	r3, r4
 800602c:	d3f7      	bcc.n	800601e <quorem+0xee>
 800602e:	6135      	str	r5, [r6, #16]
 8006030:	e7ca      	b.n	8005fc8 <quorem+0x98>
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	2a00      	cmp	r2, #0
 8006036:	d104      	bne.n	8006042 <quorem+0x112>
 8006038:	3d01      	subs	r5, #1
 800603a:	9a01      	ldr	r2, [sp, #4]
 800603c:	3b04      	subs	r3, #4
 800603e:	429a      	cmp	r2, r3
 8006040:	d3f7      	bcc.n	8006032 <quorem+0x102>
 8006042:	6135      	str	r5, [r6, #16]
 8006044:	e7e8      	b.n	8006018 <quorem+0xe8>
	...

08006048 <_dtoa_r>:
 8006048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800604a:	b09d      	sub	sp, #116	; 0x74
 800604c:	9202      	str	r2, [sp, #8]
 800604e:	9303      	str	r3, [sp, #12]
 8006050:	9b02      	ldr	r3, [sp, #8]
 8006052:	9c03      	ldr	r4, [sp, #12]
 8006054:	930a      	str	r3, [sp, #40]	; 0x28
 8006056:	940b      	str	r4, [sp, #44]	; 0x2c
 8006058:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800605a:	0007      	movs	r7, r0
 800605c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800605e:	2c00      	cmp	r4, #0
 8006060:	d10e      	bne.n	8006080 <_dtoa_r+0x38>
 8006062:	2010      	movs	r0, #16
 8006064:	f000 fe12 	bl	8006c8c <malloc>
 8006068:	1e02      	subs	r2, r0, #0
 800606a:	6278      	str	r0, [r7, #36]	; 0x24
 800606c:	d104      	bne.n	8006078 <_dtoa_r+0x30>
 800606e:	21ea      	movs	r1, #234	; 0xea
 8006070:	4bc0      	ldr	r3, [pc, #768]	; (8006374 <_dtoa_r+0x32c>)
 8006072:	48c1      	ldr	r0, [pc, #772]	; (8006378 <_dtoa_r+0x330>)
 8006074:	f001 fbf0 	bl	8007858 <__assert_func>
 8006078:	6044      	str	r4, [r0, #4]
 800607a:	6084      	str	r4, [r0, #8]
 800607c:	6004      	str	r4, [r0, #0]
 800607e:	60c4      	str	r4, [r0, #12]
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	6819      	ldr	r1, [r3, #0]
 8006084:	2900      	cmp	r1, #0
 8006086:	d00a      	beq.n	800609e <_dtoa_r+0x56>
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	2301      	movs	r3, #1
 800608c:	4093      	lsls	r3, r2
 800608e:	604a      	str	r2, [r1, #4]
 8006090:	608b      	str	r3, [r1, #8]
 8006092:	0038      	movs	r0, r7
 8006094:	f000 fe5c 	bl	8006d50 <_Bfree>
 8006098:	2200      	movs	r2, #0
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	9b03      	ldr	r3, [sp, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	da21      	bge.n	80060e8 <_dtoa_r+0xa0>
 80060a4:	2301      	movs	r3, #1
 80060a6:	602b      	str	r3, [r5, #0]
 80060a8:	9b03      	ldr	r3, [sp, #12]
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	085b      	lsrs	r3, r3, #1
 80060ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80060b0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80060b2:	4bb2      	ldr	r3, [pc, #712]	; (800637c <_dtoa_r+0x334>)
 80060b4:	002a      	movs	r2, r5
 80060b6:	9318      	str	r3, [sp, #96]	; 0x60
 80060b8:	401a      	ands	r2, r3
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d117      	bne.n	80060ee <_dtoa_r+0xa6>
 80060be:	4bb0      	ldr	r3, [pc, #704]	; (8006380 <_dtoa_r+0x338>)
 80060c0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80060c2:	0328      	lsls	r0, r5, #12
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	9b02      	ldr	r3, [sp, #8]
 80060c8:	0b00      	lsrs	r0, r0, #12
 80060ca:	4318      	orrs	r0, r3
 80060cc:	d101      	bne.n	80060d2 <_dtoa_r+0x8a>
 80060ce:	f000 fdc3 	bl	8006c58 <_dtoa_r+0xc10>
 80060d2:	48ac      	ldr	r0, [pc, #688]	; (8006384 <_dtoa_r+0x33c>)
 80060d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060d6:	9005      	str	r0, [sp, #20]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <_dtoa_r+0x9a>
 80060dc:	4baa      	ldr	r3, [pc, #680]	; (8006388 <_dtoa_r+0x340>)
 80060de:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	9805      	ldr	r0, [sp, #20]
 80060e4:	b01d      	add	sp, #116	; 0x74
 80060e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060e8:	2300      	movs	r3, #0
 80060ea:	602b      	str	r3, [r5, #0]
 80060ec:	e7e0      	b.n	80060b0 <_dtoa_r+0x68>
 80060ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80060f2:	9312      	str	r3, [sp, #72]	; 0x48
 80060f4:	9413      	str	r4, [sp, #76]	; 0x4c
 80060f6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80060f8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80060fa:	2200      	movs	r2, #0
 80060fc:	2300      	movs	r3, #0
 80060fe:	f7fa f9a5 	bl	800044c <__aeabi_dcmpeq>
 8006102:	1e04      	subs	r4, r0, #0
 8006104:	d00b      	beq.n	800611e <_dtoa_r+0xd6>
 8006106:	2301      	movs	r3, #1
 8006108:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	4b9f      	ldr	r3, [pc, #636]	; (800638c <_dtoa_r+0x344>)
 800610e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006110:	9305      	str	r3, [sp, #20]
 8006112:	2a00      	cmp	r2, #0
 8006114:	d0e5      	beq.n	80060e2 <_dtoa_r+0x9a>
 8006116:	4a9e      	ldr	r2, [pc, #632]	; (8006390 <_dtoa_r+0x348>)
 8006118:	9926      	ldr	r1, [sp, #152]	; 0x98
 800611a:	600a      	str	r2, [r1, #0]
 800611c:	e7e1      	b.n	80060e2 <_dtoa_r+0x9a>
 800611e:	ab1a      	add	r3, sp, #104	; 0x68
 8006120:	9301      	str	r3, [sp, #4]
 8006122:	ab1b      	add	r3, sp, #108	; 0x6c
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	0038      	movs	r0, r7
 8006128:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800612a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800612c:	f001 f906 	bl	800733c <__d2b>
 8006130:	006e      	lsls	r6, r5, #1
 8006132:	9004      	str	r0, [sp, #16]
 8006134:	0d76      	lsrs	r6, r6, #21
 8006136:	d100      	bne.n	800613a <_dtoa_r+0xf2>
 8006138:	e07c      	b.n	8006234 <_dtoa_r+0x1ec>
 800613a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800613c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800613e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006140:	4a94      	ldr	r2, [pc, #592]	; (8006394 <_dtoa_r+0x34c>)
 8006142:	031b      	lsls	r3, r3, #12
 8006144:	0b1b      	lsrs	r3, r3, #12
 8006146:	431a      	orrs	r2, r3
 8006148:	0011      	movs	r1, r2
 800614a:	4b93      	ldr	r3, [pc, #588]	; (8006398 <_dtoa_r+0x350>)
 800614c:	9416      	str	r4, [sp, #88]	; 0x58
 800614e:	18f6      	adds	r6, r6, r3
 8006150:	2200      	movs	r2, #0
 8006152:	4b92      	ldr	r3, [pc, #584]	; (800639c <_dtoa_r+0x354>)
 8006154:	f7fb fc7c 	bl	8001a50 <__aeabi_dsub>
 8006158:	4a91      	ldr	r2, [pc, #580]	; (80063a0 <_dtoa_r+0x358>)
 800615a:	4b92      	ldr	r3, [pc, #584]	; (80063a4 <_dtoa_r+0x35c>)
 800615c:	f7fb fa0c 	bl	8001578 <__aeabi_dmul>
 8006160:	4a91      	ldr	r2, [pc, #580]	; (80063a8 <_dtoa_r+0x360>)
 8006162:	4b92      	ldr	r3, [pc, #584]	; (80063ac <_dtoa_r+0x364>)
 8006164:	f7fa fa98 	bl	8000698 <__aeabi_dadd>
 8006168:	0004      	movs	r4, r0
 800616a:	0030      	movs	r0, r6
 800616c:	000d      	movs	r5, r1
 800616e:	f7fc f855 	bl	800221c <__aeabi_i2d>
 8006172:	4a8f      	ldr	r2, [pc, #572]	; (80063b0 <_dtoa_r+0x368>)
 8006174:	4b8f      	ldr	r3, [pc, #572]	; (80063b4 <_dtoa_r+0x36c>)
 8006176:	f7fb f9ff 	bl	8001578 <__aeabi_dmul>
 800617a:	0002      	movs	r2, r0
 800617c:	000b      	movs	r3, r1
 800617e:	0020      	movs	r0, r4
 8006180:	0029      	movs	r1, r5
 8006182:	f7fa fa89 	bl	8000698 <__aeabi_dadd>
 8006186:	0004      	movs	r4, r0
 8006188:	000d      	movs	r5, r1
 800618a:	f7fc f811 	bl	80021b0 <__aeabi_d2iz>
 800618e:	2200      	movs	r2, #0
 8006190:	9002      	str	r0, [sp, #8]
 8006192:	2300      	movs	r3, #0
 8006194:	0020      	movs	r0, r4
 8006196:	0029      	movs	r1, r5
 8006198:	f7fa f95e 	bl	8000458 <__aeabi_dcmplt>
 800619c:	2800      	cmp	r0, #0
 800619e:	d00b      	beq.n	80061b8 <_dtoa_r+0x170>
 80061a0:	9802      	ldr	r0, [sp, #8]
 80061a2:	f7fc f83b 	bl	800221c <__aeabi_i2d>
 80061a6:	002b      	movs	r3, r5
 80061a8:	0022      	movs	r2, r4
 80061aa:	f7fa f94f 	bl	800044c <__aeabi_dcmpeq>
 80061ae:	4243      	negs	r3, r0
 80061b0:	4158      	adcs	r0, r3
 80061b2:	9b02      	ldr	r3, [sp, #8]
 80061b4:	1a1b      	subs	r3, r3, r0
 80061b6:	9302      	str	r3, [sp, #8]
 80061b8:	2301      	movs	r3, #1
 80061ba:	9315      	str	r3, [sp, #84]	; 0x54
 80061bc:	9b02      	ldr	r3, [sp, #8]
 80061be:	2b16      	cmp	r3, #22
 80061c0:	d80f      	bhi.n	80061e2 <_dtoa_r+0x19a>
 80061c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80061c4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80061c6:	00da      	lsls	r2, r3, #3
 80061c8:	4b7b      	ldr	r3, [pc, #492]	; (80063b8 <_dtoa_r+0x370>)
 80061ca:	189b      	adds	r3, r3, r2
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f7fa f942 	bl	8000458 <__aeabi_dcmplt>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	d049      	beq.n	800626c <_dtoa_r+0x224>
 80061d8:	9b02      	ldr	r3, [sp, #8]
 80061da:	3b01      	subs	r3, #1
 80061dc:	9302      	str	r3, [sp, #8]
 80061de:	2300      	movs	r3, #0
 80061e0:	9315      	str	r3, [sp, #84]	; 0x54
 80061e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80061e4:	1b9e      	subs	r6, r3, r6
 80061e6:	2300      	movs	r3, #0
 80061e8:	9308      	str	r3, [sp, #32]
 80061ea:	0033      	movs	r3, r6
 80061ec:	3b01      	subs	r3, #1
 80061ee:	930d      	str	r3, [sp, #52]	; 0x34
 80061f0:	d504      	bpl.n	80061fc <_dtoa_r+0x1b4>
 80061f2:	2301      	movs	r3, #1
 80061f4:	1b9b      	subs	r3, r3, r6
 80061f6:	9308      	str	r3, [sp, #32]
 80061f8:	2300      	movs	r3, #0
 80061fa:	930d      	str	r3, [sp, #52]	; 0x34
 80061fc:	9b02      	ldr	r3, [sp, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	db36      	blt.n	8006270 <_dtoa_r+0x228>
 8006202:	9a02      	ldr	r2, [sp, #8]
 8006204:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006206:	4694      	mov	ip, r2
 8006208:	4463      	add	r3, ip
 800620a:	930d      	str	r3, [sp, #52]	; 0x34
 800620c:	2300      	movs	r3, #0
 800620e:	9214      	str	r2, [sp, #80]	; 0x50
 8006210:	930e      	str	r3, [sp, #56]	; 0x38
 8006212:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006214:	2401      	movs	r4, #1
 8006216:	2b09      	cmp	r3, #9
 8006218:	d862      	bhi.n	80062e0 <_dtoa_r+0x298>
 800621a:	2b05      	cmp	r3, #5
 800621c:	dd02      	ble.n	8006224 <_dtoa_r+0x1dc>
 800621e:	2400      	movs	r4, #0
 8006220:	3b04      	subs	r3, #4
 8006222:	9322      	str	r3, [sp, #136]	; 0x88
 8006224:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006226:	1e98      	subs	r0, r3, #2
 8006228:	2803      	cmp	r0, #3
 800622a:	d862      	bhi.n	80062f2 <_dtoa_r+0x2aa>
 800622c:	f7f9 ff74 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006230:	56343629 	.word	0x56343629
 8006234:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006236:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006238:	189e      	adds	r6, r3, r2
 800623a:	4b60      	ldr	r3, [pc, #384]	; (80063bc <_dtoa_r+0x374>)
 800623c:	18f2      	adds	r2, r6, r3
 800623e:	2a20      	cmp	r2, #32
 8006240:	dd0f      	ble.n	8006262 <_dtoa_r+0x21a>
 8006242:	2340      	movs	r3, #64	; 0x40
 8006244:	1a9b      	subs	r3, r3, r2
 8006246:	409d      	lsls	r5, r3
 8006248:	4b5d      	ldr	r3, [pc, #372]	; (80063c0 <_dtoa_r+0x378>)
 800624a:	9802      	ldr	r0, [sp, #8]
 800624c:	18f3      	adds	r3, r6, r3
 800624e:	40d8      	lsrs	r0, r3
 8006250:	4328      	orrs	r0, r5
 8006252:	f7fc f813 	bl	800227c <__aeabi_ui2d>
 8006256:	2301      	movs	r3, #1
 8006258:	4c5a      	ldr	r4, [pc, #360]	; (80063c4 <_dtoa_r+0x37c>)
 800625a:	3e01      	subs	r6, #1
 800625c:	1909      	adds	r1, r1, r4
 800625e:	9316      	str	r3, [sp, #88]	; 0x58
 8006260:	e776      	b.n	8006150 <_dtoa_r+0x108>
 8006262:	2320      	movs	r3, #32
 8006264:	9802      	ldr	r0, [sp, #8]
 8006266:	1a9b      	subs	r3, r3, r2
 8006268:	4098      	lsls	r0, r3
 800626a:	e7f2      	b.n	8006252 <_dtoa_r+0x20a>
 800626c:	9015      	str	r0, [sp, #84]	; 0x54
 800626e:	e7b8      	b.n	80061e2 <_dtoa_r+0x19a>
 8006270:	9b08      	ldr	r3, [sp, #32]
 8006272:	9a02      	ldr	r2, [sp, #8]
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	9308      	str	r3, [sp, #32]
 8006278:	4253      	negs	r3, r2
 800627a:	930e      	str	r3, [sp, #56]	; 0x38
 800627c:	2300      	movs	r3, #0
 800627e:	9314      	str	r3, [sp, #80]	; 0x50
 8006280:	e7c7      	b.n	8006212 <_dtoa_r+0x1ca>
 8006282:	2300      	movs	r3, #0
 8006284:	930f      	str	r3, [sp, #60]	; 0x3c
 8006286:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006288:	2b00      	cmp	r3, #0
 800628a:	dc36      	bgt.n	80062fa <_dtoa_r+0x2b2>
 800628c:	2301      	movs	r3, #1
 800628e:	001a      	movs	r2, r3
 8006290:	930c      	str	r3, [sp, #48]	; 0x30
 8006292:	9306      	str	r3, [sp, #24]
 8006294:	9223      	str	r2, [sp, #140]	; 0x8c
 8006296:	e00d      	b.n	80062b4 <_dtoa_r+0x26c>
 8006298:	2301      	movs	r3, #1
 800629a:	e7f3      	b.n	8006284 <_dtoa_r+0x23c>
 800629c:	2300      	movs	r3, #0
 800629e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80062a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80062a2:	4694      	mov	ip, r2
 80062a4:	9b02      	ldr	r3, [sp, #8]
 80062a6:	4463      	add	r3, ip
 80062a8:	930c      	str	r3, [sp, #48]	; 0x30
 80062aa:	3301      	adds	r3, #1
 80062ac:	9306      	str	r3, [sp, #24]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	dc00      	bgt.n	80062b4 <_dtoa_r+0x26c>
 80062b2:	2301      	movs	r3, #1
 80062b4:	2200      	movs	r2, #0
 80062b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062b8:	6042      	str	r2, [r0, #4]
 80062ba:	3204      	adds	r2, #4
 80062bc:	0015      	movs	r5, r2
 80062be:	3514      	adds	r5, #20
 80062c0:	6841      	ldr	r1, [r0, #4]
 80062c2:	429d      	cmp	r5, r3
 80062c4:	d91d      	bls.n	8006302 <_dtoa_r+0x2ba>
 80062c6:	0038      	movs	r0, r7
 80062c8:	f000 fcfe 	bl	8006cc8 <_Balloc>
 80062cc:	9005      	str	r0, [sp, #20]
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d11b      	bne.n	800630a <_dtoa_r+0x2c2>
 80062d2:	21d5      	movs	r1, #213	; 0xd5
 80062d4:	0002      	movs	r2, r0
 80062d6:	4b3c      	ldr	r3, [pc, #240]	; (80063c8 <_dtoa_r+0x380>)
 80062d8:	0049      	lsls	r1, r1, #1
 80062da:	e6ca      	b.n	8006072 <_dtoa_r+0x2a>
 80062dc:	2301      	movs	r3, #1
 80062de:	e7de      	b.n	800629e <_dtoa_r+0x256>
 80062e0:	2300      	movs	r3, #0
 80062e2:	940f      	str	r4, [sp, #60]	; 0x3c
 80062e4:	9322      	str	r3, [sp, #136]	; 0x88
 80062e6:	3b01      	subs	r3, #1
 80062e8:	930c      	str	r3, [sp, #48]	; 0x30
 80062ea:	9306      	str	r3, [sp, #24]
 80062ec:	2200      	movs	r2, #0
 80062ee:	3313      	adds	r3, #19
 80062f0:	e7d0      	b.n	8006294 <_dtoa_r+0x24c>
 80062f2:	2301      	movs	r3, #1
 80062f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80062f6:	3b02      	subs	r3, #2
 80062f8:	e7f6      	b.n	80062e8 <_dtoa_r+0x2a0>
 80062fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062fc:	930c      	str	r3, [sp, #48]	; 0x30
 80062fe:	9306      	str	r3, [sp, #24]
 8006300:	e7d8      	b.n	80062b4 <_dtoa_r+0x26c>
 8006302:	3101      	adds	r1, #1
 8006304:	6041      	str	r1, [r0, #4]
 8006306:	0052      	lsls	r2, r2, #1
 8006308:	e7d8      	b.n	80062bc <_dtoa_r+0x274>
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	9a05      	ldr	r2, [sp, #20]
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	9b06      	ldr	r3, [sp, #24]
 8006312:	2b0e      	cmp	r3, #14
 8006314:	d900      	bls.n	8006318 <_dtoa_r+0x2d0>
 8006316:	e0eb      	b.n	80064f0 <_dtoa_r+0x4a8>
 8006318:	2c00      	cmp	r4, #0
 800631a:	d100      	bne.n	800631e <_dtoa_r+0x2d6>
 800631c:	e0e8      	b.n	80064f0 <_dtoa_r+0x4a8>
 800631e:	9b02      	ldr	r3, [sp, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	dd68      	ble.n	80063f6 <_dtoa_r+0x3ae>
 8006324:	001a      	movs	r2, r3
 8006326:	210f      	movs	r1, #15
 8006328:	4b23      	ldr	r3, [pc, #140]	; (80063b8 <_dtoa_r+0x370>)
 800632a:	400a      	ands	r2, r1
 800632c:	00d2      	lsls	r2, r2, #3
 800632e:	189b      	adds	r3, r3, r2
 8006330:	681d      	ldr	r5, [r3, #0]
 8006332:	685e      	ldr	r6, [r3, #4]
 8006334:	9b02      	ldr	r3, [sp, #8]
 8006336:	111c      	asrs	r4, r3, #4
 8006338:	2302      	movs	r3, #2
 800633a:	9310      	str	r3, [sp, #64]	; 0x40
 800633c:	9b02      	ldr	r3, [sp, #8]
 800633e:	05db      	lsls	r3, r3, #23
 8006340:	d50b      	bpl.n	800635a <_dtoa_r+0x312>
 8006342:	4b22      	ldr	r3, [pc, #136]	; (80063cc <_dtoa_r+0x384>)
 8006344:	400c      	ands	r4, r1
 8006346:	6a1a      	ldr	r2, [r3, #32]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800634c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800634e:	f7fa fd0d 	bl	8000d6c <__aeabi_ddiv>
 8006352:	2303      	movs	r3, #3
 8006354:	900a      	str	r0, [sp, #40]	; 0x28
 8006356:	910b      	str	r1, [sp, #44]	; 0x2c
 8006358:	9310      	str	r3, [sp, #64]	; 0x40
 800635a:	4b1c      	ldr	r3, [pc, #112]	; (80063cc <_dtoa_r+0x384>)
 800635c:	9307      	str	r3, [sp, #28]
 800635e:	2c00      	cmp	r4, #0
 8006360:	d136      	bne.n	80063d0 <_dtoa_r+0x388>
 8006362:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006364:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006366:	002a      	movs	r2, r5
 8006368:	0033      	movs	r3, r6
 800636a:	f7fa fcff 	bl	8000d6c <__aeabi_ddiv>
 800636e:	900a      	str	r0, [sp, #40]	; 0x28
 8006370:	910b      	str	r1, [sp, #44]	; 0x2c
 8006372:	e05c      	b.n	800642e <_dtoa_r+0x3e6>
 8006374:	080085c1 	.word	0x080085c1
 8006378:	080085d8 	.word	0x080085d8
 800637c:	7ff00000 	.word	0x7ff00000
 8006380:	0000270f 	.word	0x0000270f
 8006384:	080085bd 	.word	0x080085bd
 8006388:	080085c0 	.word	0x080085c0
 800638c:	08008590 	.word	0x08008590
 8006390:	08008591 	.word	0x08008591
 8006394:	3ff00000 	.word	0x3ff00000
 8006398:	fffffc01 	.word	0xfffffc01
 800639c:	3ff80000 	.word	0x3ff80000
 80063a0:	636f4361 	.word	0x636f4361
 80063a4:	3fd287a7 	.word	0x3fd287a7
 80063a8:	8b60c8b3 	.word	0x8b60c8b3
 80063ac:	3fc68a28 	.word	0x3fc68a28
 80063b0:	509f79fb 	.word	0x509f79fb
 80063b4:	3fd34413 	.word	0x3fd34413
 80063b8:	080086d0 	.word	0x080086d0
 80063bc:	00000432 	.word	0x00000432
 80063c0:	00000412 	.word	0x00000412
 80063c4:	fe100000 	.word	0xfe100000
 80063c8:	08008637 	.word	0x08008637
 80063cc:	080086a8 	.word	0x080086a8
 80063d0:	2301      	movs	r3, #1
 80063d2:	421c      	tst	r4, r3
 80063d4:	d00b      	beq.n	80063ee <_dtoa_r+0x3a6>
 80063d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063d8:	0028      	movs	r0, r5
 80063da:	3301      	adds	r3, #1
 80063dc:	9310      	str	r3, [sp, #64]	; 0x40
 80063de:	9b07      	ldr	r3, [sp, #28]
 80063e0:	0031      	movs	r1, r6
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f7fb f8c7 	bl	8001578 <__aeabi_dmul>
 80063ea:	0005      	movs	r5, r0
 80063ec:	000e      	movs	r6, r1
 80063ee:	9b07      	ldr	r3, [sp, #28]
 80063f0:	1064      	asrs	r4, r4, #1
 80063f2:	3308      	adds	r3, #8
 80063f4:	e7b2      	b.n	800635c <_dtoa_r+0x314>
 80063f6:	2302      	movs	r3, #2
 80063f8:	9310      	str	r3, [sp, #64]	; 0x40
 80063fa:	9b02      	ldr	r3, [sp, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d016      	beq.n	800642e <_dtoa_r+0x3e6>
 8006400:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006402:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006404:	425c      	negs	r4, r3
 8006406:	230f      	movs	r3, #15
 8006408:	4ab5      	ldr	r2, [pc, #724]	; (80066e0 <_dtoa_r+0x698>)
 800640a:	4023      	ands	r3, r4
 800640c:	00db      	lsls	r3, r3, #3
 800640e:	18d3      	adds	r3, r2, r3
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f7fb f8b0 	bl	8001578 <__aeabi_dmul>
 8006418:	2601      	movs	r6, #1
 800641a:	2300      	movs	r3, #0
 800641c:	900a      	str	r0, [sp, #40]	; 0x28
 800641e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006420:	4db0      	ldr	r5, [pc, #704]	; (80066e4 <_dtoa_r+0x69c>)
 8006422:	1124      	asrs	r4, r4, #4
 8006424:	2c00      	cmp	r4, #0
 8006426:	d000      	beq.n	800642a <_dtoa_r+0x3e2>
 8006428:	e094      	b.n	8006554 <_dtoa_r+0x50c>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d19f      	bne.n	800636e <_dtoa_r+0x326>
 800642e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006430:	2b00      	cmp	r3, #0
 8006432:	d100      	bne.n	8006436 <_dtoa_r+0x3ee>
 8006434:	e09b      	b.n	800656e <_dtoa_r+0x526>
 8006436:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006438:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800643a:	2200      	movs	r2, #0
 800643c:	0020      	movs	r0, r4
 800643e:	0029      	movs	r1, r5
 8006440:	4ba9      	ldr	r3, [pc, #676]	; (80066e8 <_dtoa_r+0x6a0>)
 8006442:	f7fa f809 	bl	8000458 <__aeabi_dcmplt>
 8006446:	2800      	cmp	r0, #0
 8006448:	d100      	bne.n	800644c <_dtoa_r+0x404>
 800644a:	e090      	b.n	800656e <_dtoa_r+0x526>
 800644c:	9b06      	ldr	r3, [sp, #24]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d100      	bne.n	8006454 <_dtoa_r+0x40c>
 8006452:	e08c      	b.n	800656e <_dtoa_r+0x526>
 8006454:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006456:	2b00      	cmp	r3, #0
 8006458:	dd46      	ble.n	80064e8 <_dtoa_r+0x4a0>
 800645a:	9b02      	ldr	r3, [sp, #8]
 800645c:	2200      	movs	r2, #0
 800645e:	0020      	movs	r0, r4
 8006460:	0029      	movs	r1, r5
 8006462:	1e5e      	subs	r6, r3, #1
 8006464:	4ba1      	ldr	r3, [pc, #644]	; (80066ec <_dtoa_r+0x6a4>)
 8006466:	f7fb f887 	bl	8001578 <__aeabi_dmul>
 800646a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800646c:	900a      	str	r0, [sp, #40]	; 0x28
 800646e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006470:	3301      	adds	r3, #1
 8006472:	9310      	str	r3, [sp, #64]	; 0x40
 8006474:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006476:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006478:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800647a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800647c:	9307      	str	r3, [sp, #28]
 800647e:	f7fb fecd 	bl	800221c <__aeabi_i2d>
 8006482:	0022      	movs	r2, r4
 8006484:	002b      	movs	r3, r5
 8006486:	f7fb f877 	bl	8001578 <__aeabi_dmul>
 800648a:	2200      	movs	r2, #0
 800648c:	4b98      	ldr	r3, [pc, #608]	; (80066f0 <_dtoa_r+0x6a8>)
 800648e:	f7fa f903 	bl	8000698 <__aeabi_dadd>
 8006492:	9010      	str	r0, [sp, #64]	; 0x40
 8006494:	9111      	str	r1, [sp, #68]	; 0x44
 8006496:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006498:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800649a:	920a      	str	r2, [sp, #40]	; 0x28
 800649c:	930b      	str	r3, [sp, #44]	; 0x2c
 800649e:	4a95      	ldr	r2, [pc, #596]	; (80066f4 <_dtoa_r+0x6ac>)
 80064a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064a2:	4694      	mov	ip, r2
 80064a4:	4463      	add	r3, ip
 80064a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80064a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80064aa:	9b07      	ldr	r3, [sp, #28]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d161      	bne.n	8006574 <_dtoa_r+0x52c>
 80064b0:	2200      	movs	r2, #0
 80064b2:	0020      	movs	r0, r4
 80064b4:	0029      	movs	r1, r5
 80064b6:	4b90      	ldr	r3, [pc, #576]	; (80066f8 <_dtoa_r+0x6b0>)
 80064b8:	f7fb faca 	bl	8001a50 <__aeabi_dsub>
 80064bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064c0:	0004      	movs	r4, r0
 80064c2:	000d      	movs	r5, r1
 80064c4:	f7f9 ffdc 	bl	8000480 <__aeabi_dcmpgt>
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d000      	beq.n	80064ce <_dtoa_r+0x486>
 80064cc:	e2b5      	b.n	8006a3a <_dtoa_r+0x9f2>
 80064ce:	488b      	ldr	r0, [pc, #556]	; (80066fc <_dtoa_r+0x6b4>)
 80064d0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80064d2:	4684      	mov	ip, r0
 80064d4:	4461      	add	r1, ip
 80064d6:	000b      	movs	r3, r1
 80064d8:	0020      	movs	r0, r4
 80064da:	0029      	movs	r1, r5
 80064dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064de:	f7f9 ffbb 	bl	8000458 <__aeabi_dcmplt>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	d000      	beq.n	80064e8 <_dtoa_r+0x4a0>
 80064e6:	e2a5      	b.n	8006a34 <_dtoa_r+0x9ec>
 80064e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064ea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80064ec:	930a      	str	r3, [sp, #40]	; 0x28
 80064ee:	940b      	str	r4, [sp, #44]	; 0x2c
 80064f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	da00      	bge.n	80064f8 <_dtoa_r+0x4b0>
 80064f6:	e171      	b.n	80067dc <_dtoa_r+0x794>
 80064f8:	9a02      	ldr	r2, [sp, #8]
 80064fa:	2a0e      	cmp	r2, #14
 80064fc:	dd00      	ble.n	8006500 <_dtoa_r+0x4b8>
 80064fe:	e16d      	b.n	80067dc <_dtoa_r+0x794>
 8006500:	4b77      	ldr	r3, [pc, #476]	; (80066e0 <_dtoa_r+0x698>)
 8006502:	00d2      	lsls	r2, r2, #3
 8006504:	189b      	adds	r3, r3, r2
 8006506:	685c      	ldr	r4, [r3, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	9308      	str	r3, [sp, #32]
 800650c:	9409      	str	r4, [sp, #36]	; 0x24
 800650e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006510:	2b00      	cmp	r3, #0
 8006512:	db00      	blt.n	8006516 <_dtoa_r+0x4ce>
 8006514:	e0f6      	b.n	8006704 <_dtoa_r+0x6bc>
 8006516:	9b06      	ldr	r3, [sp, #24]
 8006518:	2b00      	cmp	r3, #0
 800651a:	dd00      	ble.n	800651e <_dtoa_r+0x4d6>
 800651c:	e0f2      	b.n	8006704 <_dtoa_r+0x6bc>
 800651e:	d000      	beq.n	8006522 <_dtoa_r+0x4da>
 8006520:	e288      	b.n	8006a34 <_dtoa_r+0x9ec>
 8006522:	9808      	ldr	r0, [sp, #32]
 8006524:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006526:	2200      	movs	r2, #0
 8006528:	4b73      	ldr	r3, [pc, #460]	; (80066f8 <_dtoa_r+0x6b0>)
 800652a:	f7fb f825 	bl	8001578 <__aeabi_dmul>
 800652e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006532:	f7f9 ffaf 	bl	8000494 <__aeabi_dcmpge>
 8006536:	9e06      	ldr	r6, [sp, #24]
 8006538:	0035      	movs	r5, r6
 800653a:	2800      	cmp	r0, #0
 800653c:	d000      	beq.n	8006540 <_dtoa_r+0x4f8>
 800653e:	e25f      	b.n	8006a00 <_dtoa_r+0x9b8>
 8006540:	9b05      	ldr	r3, [sp, #20]
 8006542:	9a05      	ldr	r2, [sp, #20]
 8006544:	3301      	adds	r3, #1
 8006546:	9307      	str	r3, [sp, #28]
 8006548:	2331      	movs	r3, #49	; 0x31
 800654a:	7013      	strb	r3, [r2, #0]
 800654c:	9b02      	ldr	r3, [sp, #8]
 800654e:	3301      	adds	r3, #1
 8006550:	9302      	str	r3, [sp, #8]
 8006552:	e25a      	b.n	8006a0a <_dtoa_r+0x9c2>
 8006554:	4234      	tst	r4, r6
 8006556:	d007      	beq.n	8006568 <_dtoa_r+0x520>
 8006558:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800655a:	3301      	adds	r3, #1
 800655c:	9310      	str	r3, [sp, #64]	; 0x40
 800655e:	682a      	ldr	r2, [r5, #0]
 8006560:	686b      	ldr	r3, [r5, #4]
 8006562:	f7fb f809 	bl	8001578 <__aeabi_dmul>
 8006566:	0033      	movs	r3, r6
 8006568:	1064      	asrs	r4, r4, #1
 800656a:	3508      	adds	r5, #8
 800656c:	e75a      	b.n	8006424 <_dtoa_r+0x3dc>
 800656e:	9e02      	ldr	r6, [sp, #8]
 8006570:	9b06      	ldr	r3, [sp, #24]
 8006572:	e780      	b.n	8006476 <_dtoa_r+0x42e>
 8006574:	9b07      	ldr	r3, [sp, #28]
 8006576:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006578:	1e5a      	subs	r2, r3, #1
 800657a:	4b59      	ldr	r3, [pc, #356]	; (80066e0 <_dtoa_r+0x698>)
 800657c:	00d2      	lsls	r2, r2, #3
 800657e:	189b      	adds	r3, r3, r2
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	2900      	cmp	r1, #0
 8006586:	d051      	beq.n	800662c <_dtoa_r+0x5e4>
 8006588:	2000      	movs	r0, #0
 800658a:	495d      	ldr	r1, [pc, #372]	; (8006700 <_dtoa_r+0x6b8>)
 800658c:	f7fa fbee 	bl	8000d6c <__aeabi_ddiv>
 8006590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006594:	f7fb fa5c 	bl	8001a50 <__aeabi_dsub>
 8006598:	9a05      	ldr	r2, [sp, #20]
 800659a:	9b05      	ldr	r3, [sp, #20]
 800659c:	4694      	mov	ip, r2
 800659e:	9310      	str	r3, [sp, #64]	; 0x40
 80065a0:	9b07      	ldr	r3, [sp, #28]
 80065a2:	900a      	str	r0, [sp, #40]	; 0x28
 80065a4:	910b      	str	r1, [sp, #44]	; 0x2c
 80065a6:	4463      	add	r3, ip
 80065a8:	9319      	str	r3, [sp, #100]	; 0x64
 80065aa:	0029      	movs	r1, r5
 80065ac:	0020      	movs	r0, r4
 80065ae:	f7fb fdff 	bl	80021b0 <__aeabi_d2iz>
 80065b2:	9017      	str	r0, [sp, #92]	; 0x5c
 80065b4:	f7fb fe32 	bl	800221c <__aeabi_i2d>
 80065b8:	0002      	movs	r2, r0
 80065ba:	000b      	movs	r3, r1
 80065bc:	0020      	movs	r0, r4
 80065be:	0029      	movs	r1, r5
 80065c0:	f7fb fa46 	bl	8001a50 <__aeabi_dsub>
 80065c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80065c8:	3301      	adds	r3, #1
 80065ca:	9307      	str	r3, [sp, #28]
 80065cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065ce:	0004      	movs	r4, r0
 80065d0:	3330      	adds	r3, #48	; 0x30
 80065d2:	7013      	strb	r3, [r2, #0]
 80065d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065d8:	000d      	movs	r5, r1
 80065da:	f7f9 ff3d 	bl	8000458 <__aeabi_dcmplt>
 80065de:	2800      	cmp	r0, #0
 80065e0:	d175      	bne.n	80066ce <_dtoa_r+0x686>
 80065e2:	0022      	movs	r2, r4
 80065e4:	002b      	movs	r3, r5
 80065e6:	2000      	movs	r0, #0
 80065e8:	493f      	ldr	r1, [pc, #252]	; (80066e8 <_dtoa_r+0x6a0>)
 80065ea:	f7fb fa31 	bl	8001a50 <__aeabi_dsub>
 80065ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065f2:	f7f9 ff31 	bl	8000458 <__aeabi_dcmplt>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	d000      	beq.n	80065fc <_dtoa_r+0x5b4>
 80065fa:	e0d1      	b.n	80067a0 <_dtoa_r+0x758>
 80065fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80065fe:	9a07      	ldr	r2, [sp, #28]
 8006600:	4293      	cmp	r3, r2
 8006602:	d100      	bne.n	8006606 <_dtoa_r+0x5be>
 8006604:	e770      	b.n	80064e8 <_dtoa_r+0x4a0>
 8006606:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006608:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800660a:	2200      	movs	r2, #0
 800660c:	4b37      	ldr	r3, [pc, #220]	; (80066ec <_dtoa_r+0x6a4>)
 800660e:	f7fa ffb3 	bl	8001578 <__aeabi_dmul>
 8006612:	4b36      	ldr	r3, [pc, #216]	; (80066ec <_dtoa_r+0x6a4>)
 8006614:	900a      	str	r0, [sp, #40]	; 0x28
 8006616:	910b      	str	r1, [sp, #44]	; 0x2c
 8006618:	2200      	movs	r2, #0
 800661a:	0020      	movs	r0, r4
 800661c:	0029      	movs	r1, r5
 800661e:	f7fa ffab 	bl	8001578 <__aeabi_dmul>
 8006622:	9b07      	ldr	r3, [sp, #28]
 8006624:	0004      	movs	r4, r0
 8006626:	000d      	movs	r5, r1
 8006628:	9310      	str	r3, [sp, #64]	; 0x40
 800662a:	e7be      	b.n	80065aa <_dtoa_r+0x562>
 800662c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800662e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006630:	f7fa ffa2 	bl	8001578 <__aeabi_dmul>
 8006634:	9a05      	ldr	r2, [sp, #20]
 8006636:	9b05      	ldr	r3, [sp, #20]
 8006638:	4694      	mov	ip, r2
 800663a:	930a      	str	r3, [sp, #40]	; 0x28
 800663c:	9b07      	ldr	r3, [sp, #28]
 800663e:	9010      	str	r0, [sp, #64]	; 0x40
 8006640:	9111      	str	r1, [sp, #68]	; 0x44
 8006642:	4463      	add	r3, ip
 8006644:	9319      	str	r3, [sp, #100]	; 0x64
 8006646:	0029      	movs	r1, r5
 8006648:	0020      	movs	r0, r4
 800664a:	f7fb fdb1 	bl	80021b0 <__aeabi_d2iz>
 800664e:	9017      	str	r0, [sp, #92]	; 0x5c
 8006650:	f7fb fde4 	bl	800221c <__aeabi_i2d>
 8006654:	0002      	movs	r2, r0
 8006656:	000b      	movs	r3, r1
 8006658:	0020      	movs	r0, r4
 800665a:	0029      	movs	r1, r5
 800665c:	f7fb f9f8 	bl	8001a50 <__aeabi_dsub>
 8006660:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006664:	3330      	adds	r3, #48	; 0x30
 8006666:	7013      	strb	r3, [r2, #0]
 8006668:	0013      	movs	r3, r2
 800666a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800666c:	3301      	adds	r3, #1
 800666e:	0004      	movs	r4, r0
 8006670:	000d      	movs	r5, r1
 8006672:	930a      	str	r3, [sp, #40]	; 0x28
 8006674:	4293      	cmp	r3, r2
 8006676:	d12c      	bne.n	80066d2 <_dtoa_r+0x68a>
 8006678:	9810      	ldr	r0, [sp, #64]	; 0x40
 800667a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800667c:	9a05      	ldr	r2, [sp, #20]
 800667e:	9b07      	ldr	r3, [sp, #28]
 8006680:	4694      	mov	ip, r2
 8006682:	4463      	add	r3, ip
 8006684:	2200      	movs	r2, #0
 8006686:	9307      	str	r3, [sp, #28]
 8006688:	4b1d      	ldr	r3, [pc, #116]	; (8006700 <_dtoa_r+0x6b8>)
 800668a:	f7fa f805 	bl	8000698 <__aeabi_dadd>
 800668e:	0002      	movs	r2, r0
 8006690:	000b      	movs	r3, r1
 8006692:	0020      	movs	r0, r4
 8006694:	0029      	movs	r1, r5
 8006696:	f7f9 fef3 	bl	8000480 <__aeabi_dcmpgt>
 800669a:	2800      	cmp	r0, #0
 800669c:	d000      	beq.n	80066a0 <_dtoa_r+0x658>
 800669e:	e07f      	b.n	80067a0 <_dtoa_r+0x758>
 80066a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80066a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066a4:	2000      	movs	r0, #0
 80066a6:	4916      	ldr	r1, [pc, #88]	; (8006700 <_dtoa_r+0x6b8>)
 80066a8:	f7fb f9d2 	bl	8001a50 <__aeabi_dsub>
 80066ac:	0002      	movs	r2, r0
 80066ae:	000b      	movs	r3, r1
 80066b0:	0020      	movs	r0, r4
 80066b2:	0029      	movs	r1, r5
 80066b4:	f7f9 fed0 	bl	8000458 <__aeabi_dcmplt>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d100      	bne.n	80066be <_dtoa_r+0x676>
 80066bc:	e714      	b.n	80064e8 <_dtoa_r+0x4a0>
 80066be:	9b07      	ldr	r3, [sp, #28]
 80066c0:	001a      	movs	r2, r3
 80066c2:	3a01      	subs	r2, #1
 80066c4:	9207      	str	r2, [sp, #28]
 80066c6:	7812      	ldrb	r2, [r2, #0]
 80066c8:	2a30      	cmp	r2, #48	; 0x30
 80066ca:	d0f8      	beq.n	80066be <_dtoa_r+0x676>
 80066cc:	9307      	str	r3, [sp, #28]
 80066ce:	9602      	str	r6, [sp, #8]
 80066d0:	e054      	b.n	800677c <_dtoa_r+0x734>
 80066d2:	2200      	movs	r2, #0
 80066d4:	4b05      	ldr	r3, [pc, #20]	; (80066ec <_dtoa_r+0x6a4>)
 80066d6:	f7fa ff4f 	bl	8001578 <__aeabi_dmul>
 80066da:	0004      	movs	r4, r0
 80066dc:	000d      	movs	r5, r1
 80066de:	e7b2      	b.n	8006646 <_dtoa_r+0x5fe>
 80066e0:	080086d0 	.word	0x080086d0
 80066e4:	080086a8 	.word	0x080086a8
 80066e8:	3ff00000 	.word	0x3ff00000
 80066ec:	40240000 	.word	0x40240000
 80066f0:	401c0000 	.word	0x401c0000
 80066f4:	fcc00000 	.word	0xfcc00000
 80066f8:	40140000 	.word	0x40140000
 80066fc:	7cc00000 	.word	0x7cc00000
 8006700:	3fe00000 	.word	0x3fe00000
 8006704:	9b06      	ldr	r3, [sp, #24]
 8006706:	9e05      	ldr	r6, [sp, #20]
 8006708:	3b01      	subs	r3, #1
 800670a:	199b      	adds	r3, r3, r6
 800670c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800670e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006710:	930a      	str	r3, [sp, #40]	; 0x28
 8006712:	9a08      	ldr	r2, [sp, #32]
 8006714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006716:	0020      	movs	r0, r4
 8006718:	0029      	movs	r1, r5
 800671a:	f7fa fb27 	bl	8000d6c <__aeabi_ddiv>
 800671e:	f7fb fd47 	bl	80021b0 <__aeabi_d2iz>
 8006722:	9006      	str	r0, [sp, #24]
 8006724:	f7fb fd7a 	bl	800221c <__aeabi_i2d>
 8006728:	9a08      	ldr	r2, [sp, #32]
 800672a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800672c:	f7fa ff24 	bl	8001578 <__aeabi_dmul>
 8006730:	0002      	movs	r2, r0
 8006732:	000b      	movs	r3, r1
 8006734:	0020      	movs	r0, r4
 8006736:	0029      	movs	r1, r5
 8006738:	f7fb f98a 	bl	8001a50 <__aeabi_dsub>
 800673c:	0033      	movs	r3, r6
 800673e:	9a06      	ldr	r2, [sp, #24]
 8006740:	3601      	adds	r6, #1
 8006742:	3230      	adds	r2, #48	; 0x30
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006748:	9607      	str	r6, [sp, #28]
 800674a:	429a      	cmp	r2, r3
 800674c:	d139      	bne.n	80067c2 <_dtoa_r+0x77a>
 800674e:	0002      	movs	r2, r0
 8006750:	000b      	movs	r3, r1
 8006752:	f7f9 ffa1 	bl	8000698 <__aeabi_dadd>
 8006756:	9a08      	ldr	r2, [sp, #32]
 8006758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675a:	0004      	movs	r4, r0
 800675c:	000d      	movs	r5, r1
 800675e:	f7f9 fe8f 	bl	8000480 <__aeabi_dcmpgt>
 8006762:	2800      	cmp	r0, #0
 8006764:	d11b      	bne.n	800679e <_dtoa_r+0x756>
 8006766:	9a08      	ldr	r2, [sp, #32]
 8006768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800676a:	0020      	movs	r0, r4
 800676c:	0029      	movs	r1, r5
 800676e:	f7f9 fe6d 	bl	800044c <__aeabi_dcmpeq>
 8006772:	2800      	cmp	r0, #0
 8006774:	d002      	beq.n	800677c <_dtoa_r+0x734>
 8006776:	9b06      	ldr	r3, [sp, #24]
 8006778:	07db      	lsls	r3, r3, #31
 800677a:	d410      	bmi.n	800679e <_dtoa_r+0x756>
 800677c:	0038      	movs	r0, r7
 800677e:	9904      	ldr	r1, [sp, #16]
 8006780:	f000 fae6 	bl	8006d50 <_Bfree>
 8006784:	2300      	movs	r3, #0
 8006786:	9a07      	ldr	r2, [sp, #28]
 8006788:	9802      	ldr	r0, [sp, #8]
 800678a:	7013      	strb	r3, [r2, #0]
 800678c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800678e:	3001      	adds	r0, #1
 8006790:	6018      	str	r0, [r3, #0]
 8006792:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006794:	2b00      	cmp	r3, #0
 8006796:	d100      	bne.n	800679a <_dtoa_r+0x752>
 8006798:	e4a3      	b.n	80060e2 <_dtoa_r+0x9a>
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	e4a1      	b.n	80060e2 <_dtoa_r+0x9a>
 800679e:	9e02      	ldr	r6, [sp, #8]
 80067a0:	9b07      	ldr	r3, [sp, #28]
 80067a2:	9307      	str	r3, [sp, #28]
 80067a4:	3b01      	subs	r3, #1
 80067a6:	781a      	ldrb	r2, [r3, #0]
 80067a8:	2a39      	cmp	r2, #57	; 0x39
 80067aa:	d106      	bne.n	80067ba <_dtoa_r+0x772>
 80067ac:	9a05      	ldr	r2, [sp, #20]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d1f7      	bne.n	80067a2 <_dtoa_r+0x75a>
 80067b2:	2230      	movs	r2, #48	; 0x30
 80067b4:	9905      	ldr	r1, [sp, #20]
 80067b6:	3601      	adds	r6, #1
 80067b8:	700a      	strb	r2, [r1, #0]
 80067ba:	781a      	ldrb	r2, [r3, #0]
 80067bc:	3201      	adds	r2, #1
 80067be:	701a      	strb	r2, [r3, #0]
 80067c0:	e785      	b.n	80066ce <_dtoa_r+0x686>
 80067c2:	2200      	movs	r2, #0
 80067c4:	4bad      	ldr	r3, [pc, #692]	; (8006a7c <_dtoa_r+0xa34>)
 80067c6:	f7fa fed7 	bl	8001578 <__aeabi_dmul>
 80067ca:	2200      	movs	r2, #0
 80067cc:	2300      	movs	r3, #0
 80067ce:	0004      	movs	r4, r0
 80067d0:	000d      	movs	r5, r1
 80067d2:	f7f9 fe3b 	bl	800044c <__aeabi_dcmpeq>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d09b      	beq.n	8006712 <_dtoa_r+0x6ca>
 80067da:	e7cf      	b.n	800677c <_dtoa_r+0x734>
 80067dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80067de:	2a00      	cmp	r2, #0
 80067e0:	d100      	bne.n	80067e4 <_dtoa_r+0x79c>
 80067e2:	e082      	b.n	80068ea <_dtoa_r+0x8a2>
 80067e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80067e6:	2a01      	cmp	r2, #1
 80067e8:	dc66      	bgt.n	80068b8 <_dtoa_r+0x870>
 80067ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80067ec:	2a00      	cmp	r2, #0
 80067ee:	d05f      	beq.n	80068b0 <_dtoa_r+0x868>
 80067f0:	4aa3      	ldr	r2, [pc, #652]	; (8006a80 <_dtoa_r+0xa38>)
 80067f2:	189b      	adds	r3, r3, r2
 80067f4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80067f6:	9c08      	ldr	r4, [sp, #32]
 80067f8:	9a08      	ldr	r2, [sp, #32]
 80067fa:	2101      	movs	r1, #1
 80067fc:	18d2      	adds	r2, r2, r3
 80067fe:	9208      	str	r2, [sp, #32]
 8006800:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006802:	0038      	movs	r0, r7
 8006804:	18d3      	adds	r3, r2, r3
 8006806:	930d      	str	r3, [sp, #52]	; 0x34
 8006808:	f000 fb52 	bl	8006eb0 <__i2b>
 800680c:	0005      	movs	r5, r0
 800680e:	2c00      	cmp	r4, #0
 8006810:	dd0e      	ble.n	8006830 <_dtoa_r+0x7e8>
 8006812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006814:	2b00      	cmp	r3, #0
 8006816:	dd0b      	ble.n	8006830 <_dtoa_r+0x7e8>
 8006818:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800681a:	0023      	movs	r3, r4
 800681c:	4294      	cmp	r4, r2
 800681e:	dd00      	ble.n	8006822 <_dtoa_r+0x7da>
 8006820:	0013      	movs	r3, r2
 8006822:	9a08      	ldr	r2, [sp, #32]
 8006824:	1ae4      	subs	r4, r4, r3
 8006826:	1ad2      	subs	r2, r2, r3
 8006828:	9208      	str	r2, [sp, #32]
 800682a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	930d      	str	r3, [sp, #52]	; 0x34
 8006830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006832:	2b00      	cmp	r3, #0
 8006834:	d01f      	beq.n	8006876 <_dtoa_r+0x82e>
 8006836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006838:	2b00      	cmp	r3, #0
 800683a:	d05a      	beq.n	80068f2 <_dtoa_r+0x8aa>
 800683c:	2e00      	cmp	r6, #0
 800683e:	dd11      	ble.n	8006864 <_dtoa_r+0x81c>
 8006840:	0029      	movs	r1, r5
 8006842:	0032      	movs	r2, r6
 8006844:	0038      	movs	r0, r7
 8006846:	f000 fbf9 	bl	800703c <__pow5mult>
 800684a:	9a04      	ldr	r2, [sp, #16]
 800684c:	0001      	movs	r1, r0
 800684e:	0005      	movs	r5, r0
 8006850:	0038      	movs	r0, r7
 8006852:	f000 fb43 	bl	8006edc <__multiply>
 8006856:	9904      	ldr	r1, [sp, #16]
 8006858:	9007      	str	r0, [sp, #28]
 800685a:	0038      	movs	r0, r7
 800685c:	f000 fa78 	bl	8006d50 <_Bfree>
 8006860:	9b07      	ldr	r3, [sp, #28]
 8006862:	9304      	str	r3, [sp, #16]
 8006864:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006866:	1b9a      	subs	r2, r3, r6
 8006868:	42b3      	cmp	r3, r6
 800686a:	d004      	beq.n	8006876 <_dtoa_r+0x82e>
 800686c:	0038      	movs	r0, r7
 800686e:	9904      	ldr	r1, [sp, #16]
 8006870:	f000 fbe4 	bl	800703c <__pow5mult>
 8006874:	9004      	str	r0, [sp, #16]
 8006876:	2101      	movs	r1, #1
 8006878:	0038      	movs	r0, r7
 800687a:	f000 fb19 	bl	8006eb0 <__i2b>
 800687e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006880:	0006      	movs	r6, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	dd37      	ble.n	80068f6 <_dtoa_r+0x8ae>
 8006886:	001a      	movs	r2, r3
 8006888:	0001      	movs	r1, r0
 800688a:	0038      	movs	r0, r7
 800688c:	f000 fbd6 	bl	800703c <__pow5mult>
 8006890:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006892:	0006      	movs	r6, r0
 8006894:	2b01      	cmp	r3, #1
 8006896:	dd33      	ble.n	8006900 <_dtoa_r+0x8b8>
 8006898:	2300      	movs	r3, #0
 800689a:	9307      	str	r3, [sp, #28]
 800689c:	6933      	ldr	r3, [r6, #16]
 800689e:	3303      	adds	r3, #3
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	18f3      	adds	r3, r6, r3
 80068a4:	6858      	ldr	r0, [r3, #4]
 80068a6:	f000 fabb 	bl	8006e20 <__hi0bits>
 80068aa:	2320      	movs	r3, #32
 80068ac:	1a18      	subs	r0, r3, r0
 80068ae:	e03f      	b.n	8006930 <_dtoa_r+0x8e8>
 80068b0:	2336      	movs	r3, #54	; 0x36
 80068b2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80068b4:	1a9b      	subs	r3, r3, r2
 80068b6:	e79d      	b.n	80067f4 <_dtoa_r+0x7ac>
 80068b8:	9b06      	ldr	r3, [sp, #24]
 80068ba:	1e5e      	subs	r6, r3, #1
 80068bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068be:	42b3      	cmp	r3, r6
 80068c0:	db08      	blt.n	80068d4 <_dtoa_r+0x88c>
 80068c2:	1b9e      	subs	r6, r3, r6
 80068c4:	9b06      	ldr	r3, [sp, #24]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	da0c      	bge.n	80068e4 <_dtoa_r+0x89c>
 80068ca:	9b08      	ldr	r3, [sp, #32]
 80068cc:	9a06      	ldr	r2, [sp, #24]
 80068ce:	1a9c      	subs	r4, r3, r2
 80068d0:	2300      	movs	r3, #0
 80068d2:	e791      	b.n	80067f8 <_dtoa_r+0x7b0>
 80068d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80068d8:	1af3      	subs	r3, r6, r3
 80068da:	18d3      	adds	r3, r2, r3
 80068dc:	960e      	str	r6, [sp, #56]	; 0x38
 80068de:	9314      	str	r3, [sp, #80]	; 0x50
 80068e0:	2600      	movs	r6, #0
 80068e2:	e7ef      	b.n	80068c4 <_dtoa_r+0x87c>
 80068e4:	9c08      	ldr	r4, [sp, #32]
 80068e6:	9b06      	ldr	r3, [sp, #24]
 80068e8:	e786      	b.n	80067f8 <_dtoa_r+0x7b0>
 80068ea:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80068ec:	9c08      	ldr	r4, [sp, #32]
 80068ee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80068f0:	e78d      	b.n	800680e <_dtoa_r+0x7c6>
 80068f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068f4:	e7ba      	b.n	800686c <_dtoa_r+0x824>
 80068f6:	2300      	movs	r3, #0
 80068f8:	9307      	str	r3, [sp, #28]
 80068fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	dc13      	bgt.n	8006928 <_dtoa_r+0x8e0>
 8006900:	2300      	movs	r3, #0
 8006902:	9307      	str	r3, [sp, #28]
 8006904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10e      	bne.n	8006928 <_dtoa_r+0x8e0>
 800690a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800690c:	031b      	lsls	r3, r3, #12
 800690e:	d10b      	bne.n	8006928 <_dtoa_r+0x8e0>
 8006910:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006912:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006914:	4213      	tst	r3, r2
 8006916:	d007      	beq.n	8006928 <_dtoa_r+0x8e0>
 8006918:	9b08      	ldr	r3, [sp, #32]
 800691a:	3301      	adds	r3, #1
 800691c:	9308      	str	r3, [sp, #32]
 800691e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006920:	3301      	adds	r3, #1
 8006922:	930d      	str	r3, [sp, #52]	; 0x34
 8006924:	2301      	movs	r3, #1
 8006926:	9307      	str	r3, [sp, #28]
 8006928:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800692a:	2001      	movs	r0, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1b5      	bne.n	800689c <_dtoa_r+0x854>
 8006930:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006932:	221f      	movs	r2, #31
 8006934:	1818      	adds	r0, r3, r0
 8006936:	0003      	movs	r3, r0
 8006938:	4013      	ands	r3, r2
 800693a:	4210      	tst	r0, r2
 800693c:	d046      	beq.n	80069cc <_dtoa_r+0x984>
 800693e:	3201      	adds	r2, #1
 8006940:	1ad2      	subs	r2, r2, r3
 8006942:	2a04      	cmp	r2, #4
 8006944:	dd3f      	ble.n	80069c6 <_dtoa_r+0x97e>
 8006946:	221c      	movs	r2, #28
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	9a08      	ldr	r2, [sp, #32]
 800694c:	18e4      	adds	r4, r4, r3
 800694e:	18d2      	adds	r2, r2, r3
 8006950:	9208      	str	r2, [sp, #32]
 8006952:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006954:	18d3      	adds	r3, r2, r3
 8006956:	930d      	str	r3, [sp, #52]	; 0x34
 8006958:	9b08      	ldr	r3, [sp, #32]
 800695a:	2b00      	cmp	r3, #0
 800695c:	dd05      	ble.n	800696a <_dtoa_r+0x922>
 800695e:	001a      	movs	r2, r3
 8006960:	0038      	movs	r0, r7
 8006962:	9904      	ldr	r1, [sp, #16]
 8006964:	f000 fbc6 	bl	80070f4 <__lshift>
 8006968:	9004      	str	r0, [sp, #16]
 800696a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800696c:	2b00      	cmp	r3, #0
 800696e:	dd05      	ble.n	800697c <_dtoa_r+0x934>
 8006970:	0031      	movs	r1, r6
 8006972:	001a      	movs	r2, r3
 8006974:	0038      	movs	r0, r7
 8006976:	f000 fbbd 	bl	80070f4 <__lshift>
 800697a:	0006      	movs	r6, r0
 800697c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800697e:	2b00      	cmp	r3, #0
 8006980:	d026      	beq.n	80069d0 <_dtoa_r+0x988>
 8006982:	0031      	movs	r1, r6
 8006984:	9804      	ldr	r0, [sp, #16]
 8006986:	f000 fc25 	bl	80071d4 <__mcmp>
 800698a:	2800      	cmp	r0, #0
 800698c:	da20      	bge.n	80069d0 <_dtoa_r+0x988>
 800698e:	9b02      	ldr	r3, [sp, #8]
 8006990:	220a      	movs	r2, #10
 8006992:	3b01      	subs	r3, #1
 8006994:	9302      	str	r3, [sp, #8]
 8006996:	0038      	movs	r0, r7
 8006998:	2300      	movs	r3, #0
 800699a:	9904      	ldr	r1, [sp, #16]
 800699c:	f000 f9fc 	bl	8006d98 <__multadd>
 80069a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069a2:	9004      	str	r0, [sp, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d100      	bne.n	80069aa <_dtoa_r+0x962>
 80069a8:	e160      	b.n	8006c6c <_dtoa_r+0xc24>
 80069aa:	2300      	movs	r3, #0
 80069ac:	0029      	movs	r1, r5
 80069ae:	220a      	movs	r2, #10
 80069b0:	0038      	movs	r0, r7
 80069b2:	f000 f9f1 	bl	8006d98 <__multadd>
 80069b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069b8:	0005      	movs	r5, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	dc47      	bgt.n	8006a4e <_dtoa_r+0xa06>
 80069be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	dc0d      	bgt.n	80069e0 <_dtoa_r+0x998>
 80069c4:	e043      	b.n	8006a4e <_dtoa_r+0xa06>
 80069c6:	2a04      	cmp	r2, #4
 80069c8:	d0c6      	beq.n	8006958 <_dtoa_r+0x910>
 80069ca:	0013      	movs	r3, r2
 80069cc:	331c      	adds	r3, #28
 80069ce:	e7bc      	b.n	800694a <_dtoa_r+0x902>
 80069d0:	9b06      	ldr	r3, [sp, #24]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	dc35      	bgt.n	8006a42 <_dtoa_r+0x9fa>
 80069d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069d8:	2b02      	cmp	r3, #2
 80069da:	dd32      	ble.n	8006a42 <_dtoa_r+0x9fa>
 80069dc:	9b06      	ldr	r3, [sp, #24]
 80069de:	930c      	str	r3, [sp, #48]	; 0x30
 80069e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10c      	bne.n	8006a00 <_dtoa_r+0x9b8>
 80069e6:	0031      	movs	r1, r6
 80069e8:	2205      	movs	r2, #5
 80069ea:	0038      	movs	r0, r7
 80069ec:	f000 f9d4 	bl	8006d98 <__multadd>
 80069f0:	0006      	movs	r6, r0
 80069f2:	0001      	movs	r1, r0
 80069f4:	9804      	ldr	r0, [sp, #16]
 80069f6:	f000 fbed 	bl	80071d4 <__mcmp>
 80069fa:	2800      	cmp	r0, #0
 80069fc:	dd00      	ble.n	8006a00 <_dtoa_r+0x9b8>
 80069fe:	e59f      	b.n	8006540 <_dtoa_r+0x4f8>
 8006a00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a02:	43db      	mvns	r3, r3
 8006a04:	9302      	str	r3, [sp, #8]
 8006a06:	9b05      	ldr	r3, [sp, #20]
 8006a08:	9307      	str	r3, [sp, #28]
 8006a0a:	2400      	movs	r4, #0
 8006a0c:	0031      	movs	r1, r6
 8006a0e:	0038      	movs	r0, r7
 8006a10:	f000 f99e 	bl	8006d50 <_Bfree>
 8006a14:	2d00      	cmp	r5, #0
 8006a16:	d100      	bne.n	8006a1a <_dtoa_r+0x9d2>
 8006a18:	e6b0      	b.n	800677c <_dtoa_r+0x734>
 8006a1a:	2c00      	cmp	r4, #0
 8006a1c:	d005      	beq.n	8006a2a <_dtoa_r+0x9e2>
 8006a1e:	42ac      	cmp	r4, r5
 8006a20:	d003      	beq.n	8006a2a <_dtoa_r+0x9e2>
 8006a22:	0021      	movs	r1, r4
 8006a24:	0038      	movs	r0, r7
 8006a26:	f000 f993 	bl	8006d50 <_Bfree>
 8006a2a:	0029      	movs	r1, r5
 8006a2c:	0038      	movs	r0, r7
 8006a2e:	f000 f98f 	bl	8006d50 <_Bfree>
 8006a32:	e6a3      	b.n	800677c <_dtoa_r+0x734>
 8006a34:	2600      	movs	r6, #0
 8006a36:	0035      	movs	r5, r6
 8006a38:	e7e2      	b.n	8006a00 <_dtoa_r+0x9b8>
 8006a3a:	9602      	str	r6, [sp, #8]
 8006a3c:	9e07      	ldr	r6, [sp, #28]
 8006a3e:	0035      	movs	r5, r6
 8006a40:	e57e      	b.n	8006540 <_dtoa_r+0x4f8>
 8006a42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d100      	bne.n	8006a4a <_dtoa_r+0xa02>
 8006a48:	e0c8      	b.n	8006bdc <_dtoa_r+0xb94>
 8006a4a:	9b06      	ldr	r3, [sp, #24]
 8006a4c:	930c      	str	r3, [sp, #48]	; 0x30
 8006a4e:	2c00      	cmp	r4, #0
 8006a50:	dd05      	ble.n	8006a5e <_dtoa_r+0xa16>
 8006a52:	0029      	movs	r1, r5
 8006a54:	0022      	movs	r2, r4
 8006a56:	0038      	movs	r0, r7
 8006a58:	f000 fb4c 	bl	80070f4 <__lshift>
 8006a5c:	0005      	movs	r5, r0
 8006a5e:	9b07      	ldr	r3, [sp, #28]
 8006a60:	0028      	movs	r0, r5
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d01f      	beq.n	8006aa6 <_dtoa_r+0xa5e>
 8006a66:	0038      	movs	r0, r7
 8006a68:	6869      	ldr	r1, [r5, #4]
 8006a6a:	f000 f92d 	bl	8006cc8 <_Balloc>
 8006a6e:	1e04      	subs	r4, r0, #0
 8006a70:	d10c      	bne.n	8006a8c <_dtoa_r+0xa44>
 8006a72:	0002      	movs	r2, r0
 8006a74:	4b03      	ldr	r3, [pc, #12]	; (8006a84 <_dtoa_r+0xa3c>)
 8006a76:	4904      	ldr	r1, [pc, #16]	; (8006a88 <_dtoa_r+0xa40>)
 8006a78:	f7ff fafb 	bl	8006072 <_dtoa_r+0x2a>
 8006a7c:	40240000 	.word	0x40240000
 8006a80:	00000433 	.word	0x00000433
 8006a84:	08008637 	.word	0x08008637
 8006a88:	000002ea 	.word	0x000002ea
 8006a8c:	0029      	movs	r1, r5
 8006a8e:	692b      	ldr	r3, [r5, #16]
 8006a90:	310c      	adds	r1, #12
 8006a92:	1c9a      	adds	r2, r3, #2
 8006a94:	0092      	lsls	r2, r2, #2
 8006a96:	300c      	adds	r0, #12
 8006a98:	f000 f90d 	bl	8006cb6 <memcpy>
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	0021      	movs	r1, r4
 8006aa0:	0038      	movs	r0, r7
 8006aa2:	f000 fb27 	bl	80070f4 <__lshift>
 8006aa6:	002c      	movs	r4, r5
 8006aa8:	0005      	movs	r5, r0
 8006aaa:	9b05      	ldr	r3, [sp, #20]
 8006aac:	9308      	str	r3, [sp, #32]
 8006aae:	0031      	movs	r1, r6
 8006ab0:	9804      	ldr	r0, [sp, #16]
 8006ab2:	f7ff fa3d 	bl	8005f30 <quorem>
 8006ab6:	0003      	movs	r3, r0
 8006ab8:	0021      	movs	r1, r4
 8006aba:	3330      	adds	r3, #48	; 0x30
 8006abc:	900e      	str	r0, [sp, #56]	; 0x38
 8006abe:	9804      	ldr	r0, [sp, #16]
 8006ac0:	9306      	str	r3, [sp, #24]
 8006ac2:	f000 fb87 	bl	80071d4 <__mcmp>
 8006ac6:	002a      	movs	r2, r5
 8006ac8:	900f      	str	r0, [sp, #60]	; 0x3c
 8006aca:	0031      	movs	r1, r6
 8006acc:	0038      	movs	r0, r7
 8006ace:	f000 fb9d 	bl	800720c <__mdiff>
 8006ad2:	68c3      	ldr	r3, [r0, #12]
 8006ad4:	9007      	str	r0, [sp, #28]
 8006ad6:	9310      	str	r3, [sp, #64]	; 0x40
 8006ad8:	2301      	movs	r3, #1
 8006ada:	930d      	str	r3, [sp, #52]	; 0x34
 8006adc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d104      	bne.n	8006aec <_dtoa_r+0xaa4>
 8006ae2:	0001      	movs	r1, r0
 8006ae4:	9804      	ldr	r0, [sp, #16]
 8006ae6:	f000 fb75 	bl	80071d4 <__mcmp>
 8006aea:	900d      	str	r0, [sp, #52]	; 0x34
 8006aec:	0038      	movs	r0, r7
 8006aee:	9907      	ldr	r1, [sp, #28]
 8006af0:	f000 f92e 	bl	8006d50 <_Bfree>
 8006af4:	2301      	movs	r3, #1
 8006af6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006af8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006afa:	4018      	ands	r0, r3
 8006afc:	9b08      	ldr	r3, [sp, #32]
 8006afe:	3301      	adds	r3, #1
 8006b00:	9307      	str	r3, [sp, #28]
 8006b02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b04:	4313      	orrs	r3, r2
 8006b06:	4303      	orrs	r3, r0
 8006b08:	d10c      	bne.n	8006b24 <_dtoa_r+0xadc>
 8006b0a:	9b06      	ldr	r3, [sp, #24]
 8006b0c:	2b39      	cmp	r3, #57	; 0x39
 8006b0e:	d025      	beq.n	8006b5c <_dtoa_r+0xb14>
 8006b10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	dd02      	ble.n	8006b1c <_dtoa_r+0xad4>
 8006b16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b18:	3331      	adds	r3, #49	; 0x31
 8006b1a:	9306      	str	r3, [sp, #24]
 8006b1c:	9b08      	ldr	r3, [sp, #32]
 8006b1e:	9a06      	ldr	r2, [sp, #24]
 8006b20:	701a      	strb	r2, [r3, #0]
 8006b22:	e773      	b.n	8006a0c <_dtoa_r+0x9c4>
 8006b24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	db03      	blt.n	8006b32 <_dtoa_r+0xaea>
 8006b2a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	4303      	orrs	r3, r0
 8006b30:	d11f      	bne.n	8006b72 <_dtoa_r+0xb2a>
 8006b32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	ddf1      	ble.n	8006b1c <_dtoa_r+0xad4>
 8006b38:	9904      	ldr	r1, [sp, #16]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	0038      	movs	r0, r7
 8006b3e:	f000 fad9 	bl	80070f4 <__lshift>
 8006b42:	0031      	movs	r1, r6
 8006b44:	9004      	str	r0, [sp, #16]
 8006b46:	f000 fb45 	bl	80071d4 <__mcmp>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	dc03      	bgt.n	8006b56 <_dtoa_r+0xb0e>
 8006b4e:	d1e5      	bne.n	8006b1c <_dtoa_r+0xad4>
 8006b50:	9b06      	ldr	r3, [sp, #24]
 8006b52:	07db      	lsls	r3, r3, #31
 8006b54:	d5e2      	bpl.n	8006b1c <_dtoa_r+0xad4>
 8006b56:	9b06      	ldr	r3, [sp, #24]
 8006b58:	2b39      	cmp	r3, #57	; 0x39
 8006b5a:	d1dc      	bne.n	8006b16 <_dtoa_r+0xace>
 8006b5c:	2339      	movs	r3, #57	; 0x39
 8006b5e:	9a08      	ldr	r2, [sp, #32]
 8006b60:	7013      	strb	r3, [r2, #0]
 8006b62:	9b07      	ldr	r3, [sp, #28]
 8006b64:	9307      	str	r3, [sp, #28]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	781a      	ldrb	r2, [r3, #0]
 8006b6a:	2a39      	cmp	r2, #57	; 0x39
 8006b6c:	d06c      	beq.n	8006c48 <_dtoa_r+0xc00>
 8006b6e:	3201      	adds	r2, #1
 8006b70:	e7d6      	b.n	8006b20 <_dtoa_r+0xad8>
 8006b72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	dd07      	ble.n	8006b88 <_dtoa_r+0xb40>
 8006b78:	9b06      	ldr	r3, [sp, #24]
 8006b7a:	2b39      	cmp	r3, #57	; 0x39
 8006b7c:	d0ee      	beq.n	8006b5c <_dtoa_r+0xb14>
 8006b7e:	9b06      	ldr	r3, [sp, #24]
 8006b80:	9a08      	ldr	r2, [sp, #32]
 8006b82:	3301      	adds	r3, #1
 8006b84:	7013      	strb	r3, [r2, #0]
 8006b86:	e741      	b.n	8006a0c <_dtoa_r+0x9c4>
 8006b88:	9b08      	ldr	r3, [sp, #32]
 8006b8a:	9a06      	ldr	r2, [sp, #24]
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	2301      	movs	r3, #1
 8006b90:	9a05      	ldr	r2, [sp, #20]
 8006b92:	1a9b      	subs	r3, r3, r2
 8006b94:	9a08      	ldr	r2, [sp, #32]
 8006b96:	189b      	adds	r3, r3, r2
 8006b98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d03e      	beq.n	8006c1c <_dtoa_r+0xbd4>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	220a      	movs	r2, #10
 8006ba2:	9904      	ldr	r1, [sp, #16]
 8006ba4:	0038      	movs	r0, r7
 8006ba6:	f000 f8f7 	bl	8006d98 <__multadd>
 8006baa:	2300      	movs	r3, #0
 8006bac:	9004      	str	r0, [sp, #16]
 8006bae:	220a      	movs	r2, #10
 8006bb0:	0021      	movs	r1, r4
 8006bb2:	0038      	movs	r0, r7
 8006bb4:	42ac      	cmp	r4, r5
 8006bb6:	d106      	bne.n	8006bc6 <_dtoa_r+0xb7e>
 8006bb8:	f000 f8ee 	bl	8006d98 <__multadd>
 8006bbc:	0004      	movs	r4, r0
 8006bbe:	0005      	movs	r5, r0
 8006bc0:	9b07      	ldr	r3, [sp, #28]
 8006bc2:	9308      	str	r3, [sp, #32]
 8006bc4:	e773      	b.n	8006aae <_dtoa_r+0xa66>
 8006bc6:	f000 f8e7 	bl	8006d98 <__multadd>
 8006bca:	0029      	movs	r1, r5
 8006bcc:	0004      	movs	r4, r0
 8006bce:	2300      	movs	r3, #0
 8006bd0:	220a      	movs	r2, #10
 8006bd2:	0038      	movs	r0, r7
 8006bd4:	f000 f8e0 	bl	8006d98 <__multadd>
 8006bd8:	0005      	movs	r5, r0
 8006bda:	e7f1      	b.n	8006bc0 <_dtoa_r+0xb78>
 8006bdc:	9b06      	ldr	r3, [sp, #24]
 8006bde:	930c      	str	r3, [sp, #48]	; 0x30
 8006be0:	2400      	movs	r4, #0
 8006be2:	0031      	movs	r1, r6
 8006be4:	9804      	ldr	r0, [sp, #16]
 8006be6:	f7ff f9a3 	bl	8005f30 <quorem>
 8006bea:	9b05      	ldr	r3, [sp, #20]
 8006bec:	3030      	adds	r0, #48	; 0x30
 8006bee:	5518      	strb	r0, [r3, r4]
 8006bf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bf2:	3401      	adds	r4, #1
 8006bf4:	9006      	str	r0, [sp, #24]
 8006bf6:	42a3      	cmp	r3, r4
 8006bf8:	dd07      	ble.n	8006c0a <_dtoa_r+0xbc2>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	220a      	movs	r2, #10
 8006bfe:	0038      	movs	r0, r7
 8006c00:	9904      	ldr	r1, [sp, #16]
 8006c02:	f000 f8c9 	bl	8006d98 <__multadd>
 8006c06:	9004      	str	r0, [sp, #16]
 8006c08:	e7eb      	b.n	8006be2 <_dtoa_r+0xb9a>
 8006c0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c0c:	2001      	movs	r0, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	dd00      	ble.n	8006c14 <_dtoa_r+0xbcc>
 8006c12:	0018      	movs	r0, r3
 8006c14:	2400      	movs	r4, #0
 8006c16:	9b05      	ldr	r3, [sp, #20]
 8006c18:	181b      	adds	r3, r3, r0
 8006c1a:	9307      	str	r3, [sp, #28]
 8006c1c:	9904      	ldr	r1, [sp, #16]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	0038      	movs	r0, r7
 8006c22:	f000 fa67 	bl	80070f4 <__lshift>
 8006c26:	0031      	movs	r1, r6
 8006c28:	9004      	str	r0, [sp, #16]
 8006c2a:	f000 fad3 	bl	80071d4 <__mcmp>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	dc97      	bgt.n	8006b62 <_dtoa_r+0xb1a>
 8006c32:	d102      	bne.n	8006c3a <_dtoa_r+0xbf2>
 8006c34:	9b06      	ldr	r3, [sp, #24]
 8006c36:	07db      	lsls	r3, r3, #31
 8006c38:	d493      	bmi.n	8006b62 <_dtoa_r+0xb1a>
 8006c3a:	9b07      	ldr	r3, [sp, #28]
 8006c3c:	9307      	str	r3, [sp, #28]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	781a      	ldrb	r2, [r3, #0]
 8006c42:	2a30      	cmp	r2, #48	; 0x30
 8006c44:	d0fa      	beq.n	8006c3c <_dtoa_r+0xbf4>
 8006c46:	e6e1      	b.n	8006a0c <_dtoa_r+0x9c4>
 8006c48:	9a05      	ldr	r2, [sp, #20]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d18a      	bne.n	8006b64 <_dtoa_r+0xb1c>
 8006c4e:	9b02      	ldr	r3, [sp, #8]
 8006c50:	3301      	adds	r3, #1
 8006c52:	9302      	str	r3, [sp, #8]
 8006c54:	2331      	movs	r3, #49	; 0x31
 8006c56:	e795      	b.n	8006b84 <_dtoa_r+0xb3c>
 8006c58:	4b08      	ldr	r3, [pc, #32]	; (8006c7c <_dtoa_r+0xc34>)
 8006c5a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006c5c:	9305      	str	r3, [sp, #20]
 8006c5e:	4b08      	ldr	r3, [pc, #32]	; (8006c80 <_dtoa_r+0xc38>)
 8006c60:	2a00      	cmp	r2, #0
 8006c62:	d001      	beq.n	8006c68 <_dtoa_r+0xc20>
 8006c64:	f7ff fa3b 	bl	80060de <_dtoa_r+0x96>
 8006c68:	f7ff fa3b 	bl	80060e2 <_dtoa_r+0x9a>
 8006c6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	dcb6      	bgt.n	8006be0 <_dtoa_r+0xb98>
 8006c72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	dd00      	ble.n	8006c7a <_dtoa_r+0xc32>
 8006c78:	e6b2      	b.n	80069e0 <_dtoa_r+0x998>
 8006c7a:	e7b1      	b.n	8006be0 <_dtoa_r+0xb98>
 8006c7c:	080085b4 	.word	0x080085b4
 8006c80:	080085bc 	.word	0x080085bc

08006c84 <_localeconv_r>:
 8006c84:	4800      	ldr	r0, [pc, #0]	; (8006c88 <_localeconv_r+0x4>)
 8006c86:	4770      	bx	lr
 8006c88:	20000160 	.word	0x20000160

08006c8c <malloc>:
 8006c8c:	b510      	push	{r4, lr}
 8006c8e:	4b03      	ldr	r3, [pc, #12]	; (8006c9c <malloc+0x10>)
 8006c90:	0001      	movs	r1, r0
 8006c92:	6818      	ldr	r0, [r3, #0]
 8006c94:	f000 fc0e 	bl	80074b4 <_malloc_r>
 8006c98:	bd10      	pop	{r4, pc}
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	2000000c 	.word	0x2000000c

08006ca0 <memchr>:
 8006ca0:	b2c9      	uxtb	r1, r1
 8006ca2:	1882      	adds	r2, r0, r2
 8006ca4:	4290      	cmp	r0, r2
 8006ca6:	d101      	bne.n	8006cac <memchr+0xc>
 8006ca8:	2000      	movs	r0, #0
 8006caa:	4770      	bx	lr
 8006cac:	7803      	ldrb	r3, [r0, #0]
 8006cae:	428b      	cmp	r3, r1
 8006cb0:	d0fb      	beq.n	8006caa <memchr+0xa>
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	e7f6      	b.n	8006ca4 <memchr+0x4>

08006cb6 <memcpy>:
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	b510      	push	{r4, lr}
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d100      	bne.n	8006cc0 <memcpy+0xa>
 8006cbe:	bd10      	pop	{r4, pc}
 8006cc0:	5ccc      	ldrb	r4, [r1, r3]
 8006cc2:	54c4      	strb	r4, [r0, r3]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	e7f8      	b.n	8006cba <memcpy+0x4>

08006cc8 <_Balloc>:
 8006cc8:	b570      	push	{r4, r5, r6, lr}
 8006cca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ccc:	0006      	movs	r6, r0
 8006cce:	000c      	movs	r4, r1
 8006cd0:	2d00      	cmp	r5, #0
 8006cd2:	d10e      	bne.n	8006cf2 <_Balloc+0x2a>
 8006cd4:	2010      	movs	r0, #16
 8006cd6:	f7ff ffd9 	bl	8006c8c <malloc>
 8006cda:	1e02      	subs	r2, r0, #0
 8006cdc:	6270      	str	r0, [r6, #36]	; 0x24
 8006cde:	d104      	bne.n	8006cea <_Balloc+0x22>
 8006ce0:	2166      	movs	r1, #102	; 0x66
 8006ce2:	4b19      	ldr	r3, [pc, #100]	; (8006d48 <_Balloc+0x80>)
 8006ce4:	4819      	ldr	r0, [pc, #100]	; (8006d4c <_Balloc+0x84>)
 8006ce6:	f000 fdb7 	bl	8007858 <__assert_func>
 8006cea:	6045      	str	r5, [r0, #4]
 8006cec:	6085      	str	r5, [r0, #8]
 8006cee:	6005      	str	r5, [r0, #0]
 8006cf0:	60c5      	str	r5, [r0, #12]
 8006cf2:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8006cf4:	68eb      	ldr	r3, [r5, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d013      	beq.n	8006d22 <_Balloc+0x5a>
 8006cfa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006cfc:	00a2      	lsls	r2, r4, #2
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	189b      	adds	r3, r3, r2
 8006d02:	6818      	ldr	r0, [r3, #0]
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d118      	bne.n	8006d3a <_Balloc+0x72>
 8006d08:	2101      	movs	r1, #1
 8006d0a:	000d      	movs	r5, r1
 8006d0c:	40a5      	lsls	r5, r4
 8006d0e:	1d6a      	adds	r2, r5, #5
 8006d10:	0030      	movs	r0, r6
 8006d12:	0092      	lsls	r2, r2, #2
 8006d14:	f000 fb76 	bl	8007404 <_calloc_r>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d00c      	beq.n	8006d36 <_Balloc+0x6e>
 8006d1c:	6044      	str	r4, [r0, #4]
 8006d1e:	6085      	str	r5, [r0, #8]
 8006d20:	e00d      	b.n	8006d3e <_Balloc+0x76>
 8006d22:	2221      	movs	r2, #33	; 0x21
 8006d24:	2104      	movs	r1, #4
 8006d26:	0030      	movs	r0, r6
 8006d28:	f000 fb6c 	bl	8007404 <_calloc_r>
 8006d2c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006d2e:	60e8      	str	r0, [r5, #12]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1e1      	bne.n	8006cfa <_Balloc+0x32>
 8006d36:	2000      	movs	r0, #0
 8006d38:	bd70      	pop	{r4, r5, r6, pc}
 8006d3a:	6802      	ldr	r2, [r0, #0]
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	6103      	str	r3, [r0, #16]
 8006d42:	60c3      	str	r3, [r0, #12]
 8006d44:	e7f8      	b.n	8006d38 <_Balloc+0x70>
 8006d46:	46c0      	nop			; (mov r8, r8)
 8006d48:	080085c1 	.word	0x080085c1
 8006d4c:	08008648 	.word	0x08008648

08006d50 <_Bfree>:
 8006d50:	b570      	push	{r4, r5, r6, lr}
 8006d52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d54:	0005      	movs	r5, r0
 8006d56:	000c      	movs	r4, r1
 8006d58:	2e00      	cmp	r6, #0
 8006d5a:	d10e      	bne.n	8006d7a <_Bfree+0x2a>
 8006d5c:	2010      	movs	r0, #16
 8006d5e:	f7ff ff95 	bl	8006c8c <malloc>
 8006d62:	1e02      	subs	r2, r0, #0
 8006d64:	6268      	str	r0, [r5, #36]	; 0x24
 8006d66:	d104      	bne.n	8006d72 <_Bfree+0x22>
 8006d68:	218a      	movs	r1, #138	; 0x8a
 8006d6a:	4b09      	ldr	r3, [pc, #36]	; (8006d90 <_Bfree+0x40>)
 8006d6c:	4809      	ldr	r0, [pc, #36]	; (8006d94 <_Bfree+0x44>)
 8006d6e:	f000 fd73 	bl	8007858 <__assert_func>
 8006d72:	6046      	str	r6, [r0, #4]
 8006d74:	6086      	str	r6, [r0, #8]
 8006d76:	6006      	str	r6, [r0, #0]
 8006d78:	60c6      	str	r6, [r0, #12]
 8006d7a:	2c00      	cmp	r4, #0
 8006d7c:	d007      	beq.n	8006d8e <_Bfree+0x3e>
 8006d7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006d80:	6862      	ldr	r2, [r4, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	0092      	lsls	r2, r2, #2
 8006d86:	189b      	adds	r3, r3, r2
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	6022      	str	r2, [r4, #0]
 8006d8c:	601c      	str	r4, [r3, #0]
 8006d8e:	bd70      	pop	{r4, r5, r6, pc}
 8006d90:	080085c1 	.word	0x080085c1
 8006d94:	08008648 	.word	0x08008648

08006d98 <__multadd>:
 8006d98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d9a:	000e      	movs	r6, r1
 8006d9c:	9001      	str	r0, [sp, #4]
 8006d9e:	000c      	movs	r4, r1
 8006da0:	001d      	movs	r5, r3
 8006da2:	2000      	movs	r0, #0
 8006da4:	690f      	ldr	r7, [r1, #16]
 8006da6:	3614      	adds	r6, #20
 8006da8:	6833      	ldr	r3, [r6, #0]
 8006daa:	3001      	adds	r0, #1
 8006dac:	b299      	uxth	r1, r3
 8006dae:	4351      	muls	r1, r2
 8006db0:	0c1b      	lsrs	r3, r3, #16
 8006db2:	4353      	muls	r3, r2
 8006db4:	1949      	adds	r1, r1, r5
 8006db6:	0c0d      	lsrs	r5, r1, #16
 8006db8:	195b      	adds	r3, r3, r5
 8006dba:	0c1d      	lsrs	r5, r3, #16
 8006dbc:	b289      	uxth	r1, r1
 8006dbe:	041b      	lsls	r3, r3, #16
 8006dc0:	185b      	adds	r3, r3, r1
 8006dc2:	c608      	stmia	r6!, {r3}
 8006dc4:	4287      	cmp	r7, r0
 8006dc6:	dcef      	bgt.n	8006da8 <__multadd+0x10>
 8006dc8:	2d00      	cmp	r5, #0
 8006dca:	d022      	beq.n	8006e12 <__multadd+0x7a>
 8006dcc:	68a3      	ldr	r3, [r4, #8]
 8006dce:	42bb      	cmp	r3, r7
 8006dd0:	dc19      	bgt.n	8006e06 <__multadd+0x6e>
 8006dd2:	6863      	ldr	r3, [r4, #4]
 8006dd4:	9801      	ldr	r0, [sp, #4]
 8006dd6:	1c59      	adds	r1, r3, #1
 8006dd8:	f7ff ff76 	bl	8006cc8 <_Balloc>
 8006ddc:	1e06      	subs	r6, r0, #0
 8006dde:	d105      	bne.n	8006dec <__multadd+0x54>
 8006de0:	0002      	movs	r2, r0
 8006de2:	21b5      	movs	r1, #181	; 0xb5
 8006de4:	4b0c      	ldr	r3, [pc, #48]	; (8006e18 <__multadd+0x80>)
 8006de6:	480d      	ldr	r0, [pc, #52]	; (8006e1c <__multadd+0x84>)
 8006de8:	f000 fd36 	bl	8007858 <__assert_func>
 8006dec:	0021      	movs	r1, r4
 8006dee:	6923      	ldr	r3, [r4, #16]
 8006df0:	310c      	adds	r1, #12
 8006df2:	1c9a      	adds	r2, r3, #2
 8006df4:	0092      	lsls	r2, r2, #2
 8006df6:	300c      	adds	r0, #12
 8006df8:	f7ff ff5d 	bl	8006cb6 <memcpy>
 8006dfc:	0021      	movs	r1, r4
 8006dfe:	9801      	ldr	r0, [sp, #4]
 8006e00:	f7ff ffa6 	bl	8006d50 <_Bfree>
 8006e04:	0034      	movs	r4, r6
 8006e06:	1d3b      	adds	r3, r7, #4
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	18e3      	adds	r3, r4, r3
 8006e0c:	605d      	str	r5, [r3, #4]
 8006e0e:	1c7b      	adds	r3, r7, #1
 8006e10:	6123      	str	r3, [r4, #16]
 8006e12:	0020      	movs	r0, r4
 8006e14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e16:	46c0      	nop			; (mov r8, r8)
 8006e18:	08008637 	.word	0x08008637
 8006e1c:	08008648 	.word	0x08008648

08006e20 <__hi0bits>:
 8006e20:	0003      	movs	r3, r0
 8006e22:	0c02      	lsrs	r2, r0, #16
 8006e24:	2000      	movs	r0, #0
 8006e26:	4282      	cmp	r2, r0
 8006e28:	d101      	bne.n	8006e2e <__hi0bits+0xe>
 8006e2a:	041b      	lsls	r3, r3, #16
 8006e2c:	3010      	adds	r0, #16
 8006e2e:	0e1a      	lsrs	r2, r3, #24
 8006e30:	d101      	bne.n	8006e36 <__hi0bits+0x16>
 8006e32:	3008      	adds	r0, #8
 8006e34:	021b      	lsls	r3, r3, #8
 8006e36:	0f1a      	lsrs	r2, r3, #28
 8006e38:	d101      	bne.n	8006e3e <__hi0bits+0x1e>
 8006e3a:	3004      	adds	r0, #4
 8006e3c:	011b      	lsls	r3, r3, #4
 8006e3e:	0f9a      	lsrs	r2, r3, #30
 8006e40:	d101      	bne.n	8006e46 <__hi0bits+0x26>
 8006e42:	3002      	adds	r0, #2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	db03      	blt.n	8006e52 <__hi0bits+0x32>
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	005b      	lsls	r3, r3, #1
 8006e4e:	d400      	bmi.n	8006e52 <__hi0bits+0x32>
 8006e50:	2020      	movs	r0, #32
 8006e52:	4770      	bx	lr

08006e54 <__lo0bits>:
 8006e54:	6803      	ldr	r3, [r0, #0]
 8006e56:	0002      	movs	r2, r0
 8006e58:	2107      	movs	r1, #7
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	4008      	ands	r0, r1
 8006e5e:	420b      	tst	r3, r1
 8006e60:	d00d      	beq.n	8006e7e <__lo0bits+0x2a>
 8006e62:	3906      	subs	r1, #6
 8006e64:	2000      	movs	r0, #0
 8006e66:	420b      	tst	r3, r1
 8006e68:	d105      	bne.n	8006e76 <__lo0bits+0x22>
 8006e6a:	3002      	adds	r0, #2
 8006e6c:	4203      	tst	r3, r0
 8006e6e:	d003      	beq.n	8006e78 <__lo0bits+0x24>
 8006e70:	40cb      	lsrs	r3, r1
 8006e72:	0008      	movs	r0, r1
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	4770      	bx	lr
 8006e78:	089b      	lsrs	r3, r3, #2
 8006e7a:	6013      	str	r3, [r2, #0]
 8006e7c:	e7fb      	b.n	8006e76 <__lo0bits+0x22>
 8006e7e:	b299      	uxth	r1, r3
 8006e80:	2900      	cmp	r1, #0
 8006e82:	d101      	bne.n	8006e88 <__lo0bits+0x34>
 8006e84:	2010      	movs	r0, #16
 8006e86:	0c1b      	lsrs	r3, r3, #16
 8006e88:	b2d9      	uxtb	r1, r3
 8006e8a:	2900      	cmp	r1, #0
 8006e8c:	d101      	bne.n	8006e92 <__lo0bits+0x3e>
 8006e8e:	3008      	adds	r0, #8
 8006e90:	0a1b      	lsrs	r3, r3, #8
 8006e92:	0719      	lsls	r1, r3, #28
 8006e94:	d101      	bne.n	8006e9a <__lo0bits+0x46>
 8006e96:	3004      	adds	r0, #4
 8006e98:	091b      	lsrs	r3, r3, #4
 8006e9a:	0799      	lsls	r1, r3, #30
 8006e9c:	d101      	bne.n	8006ea2 <__lo0bits+0x4e>
 8006e9e:	3002      	adds	r0, #2
 8006ea0:	089b      	lsrs	r3, r3, #2
 8006ea2:	07d9      	lsls	r1, r3, #31
 8006ea4:	d4e9      	bmi.n	8006e7a <__lo0bits+0x26>
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	085b      	lsrs	r3, r3, #1
 8006eaa:	d1e6      	bne.n	8006e7a <__lo0bits+0x26>
 8006eac:	2020      	movs	r0, #32
 8006eae:	e7e2      	b.n	8006e76 <__lo0bits+0x22>

08006eb0 <__i2b>:
 8006eb0:	b510      	push	{r4, lr}
 8006eb2:	000c      	movs	r4, r1
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	f7ff ff07 	bl	8006cc8 <_Balloc>
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d106      	bne.n	8006ecc <__i2b+0x1c>
 8006ebe:	21a0      	movs	r1, #160	; 0xa0
 8006ec0:	0002      	movs	r2, r0
 8006ec2:	4b04      	ldr	r3, [pc, #16]	; (8006ed4 <__i2b+0x24>)
 8006ec4:	4804      	ldr	r0, [pc, #16]	; (8006ed8 <__i2b+0x28>)
 8006ec6:	0049      	lsls	r1, r1, #1
 8006ec8:	f000 fcc6 	bl	8007858 <__assert_func>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	6144      	str	r4, [r0, #20]
 8006ed0:	6103      	str	r3, [r0, #16]
 8006ed2:	bd10      	pop	{r4, pc}
 8006ed4:	08008637 	.word	0x08008637
 8006ed8:	08008648 	.word	0x08008648

08006edc <__multiply>:
 8006edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ede:	690b      	ldr	r3, [r1, #16]
 8006ee0:	0014      	movs	r4, r2
 8006ee2:	6912      	ldr	r2, [r2, #16]
 8006ee4:	000d      	movs	r5, r1
 8006ee6:	b089      	sub	sp, #36	; 0x24
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	da01      	bge.n	8006ef0 <__multiply+0x14>
 8006eec:	0025      	movs	r5, r4
 8006eee:	000c      	movs	r4, r1
 8006ef0:	692f      	ldr	r7, [r5, #16]
 8006ef2:	6926      	ldr	r6, [r4, #16]
 8006ef4:	6869      	ldr	r1, [r5, #4]
 8006ef6:	19bb      	adds	r3, r7, r6
 8006ef8:	9302      	str	r3, [sp, #8]
 8006efa:	68ab      	ldr	r3, [r5, #8]
 8006efc:	19ba      	adds	r2, r7, r6
 8006efe:	4293      	cmp	r3, r2
 8006f00:	da00      	bge.n	8006f04 <__multiply+0x28>
 8006f02:	3101      	adds	r1, #1
 8006f04:	f7ff fee0 	bl	8006cc8 <_Balloc>
 8006f08:	9001      	str	r0, [sp, #4]
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d106      	bne.n	8006f1c <__multiply+0x40>
 8006f0e:	215e      	movs	r1, #94	; 0x5e
 8006f10:	0002      	movs	r2, r0
 8006f12:	4b48      	ldr	r3, [pc, #288]	; (8007034 <__multiply+0x158>)
 8006f14:	4848      	ldr	r0, [pc, #288]	; (8007038 <__multiply+0x15c>)
 8006f16:	31ff      	adds	r1, #255	; 0xff
 8006f18:	f000 fc9e 	bl	8007858 <__assert_func>
 8006f1c:	9b01      	ldr	r3, [sp, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	3314      	adds	r3, #20
 8006f22:	469c      	mov	ip, r3
 8006f24:	19bb      	adds	r3, r7, r6
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4463      	add	r3, ip
 8006f2a:	9303      	str	r3, [sp, #12]
 8006f2c:	4663      	mov	r3, ip
 8006f2e:	9903      	ldr	r1, [sp, #12]
 8006f30:	428b      	cmp	r3, r1
 8006f32:	d32c      	bcc.n	8006f8e <__multiply+0xb2>
 8006f34:	002b      	movs	r3, r5
 8006f36:	0022      	movs	r2, r4
 8006f38:	3314      	adds	r3, #20
 8006f3a:	00bf      	lsls	r7, r7, #2
 8006f3c:	3214      	adds	r2, #20
 8006f3e:	9306      	str	r3, [sp, #24]
 8006f40:	00b6      	lsls	r6, r6, #2
 8006f42:	19db      	adds	r3, r3, r7
 8006f44:	9304      	str	r3, [sp, #16]
 8006f46:	1993      	adds	r3, r2, r6
 8006f48:	9307      	str	r3, [sp, #28]
 8006f4a:	2304      	movs	r3, #4
 8006f4c:	9305      	str	r3, [sp, #20]
 8006f4e:	002b      	movs	r3, r5
 8006f50:	9904      	ldr	r1, [sp, #16]
 8006f52:	3315      	adds	r3, #21
 8006f54:	9200      	str	r2, [sp, #0]
 8006f56:	4299      	cmp	r1, r3
 8006f58:	d305      	bcc.n	8006f66 <__multiply+0x8a>
 8006f5a:	1b4b      	subs	r3, r1, r5
 8006f5c:	3b15      	subs	r3, #21
 8006f5e:	089b      	lsrs	r3, r3, #2
 8006f60:	3301      	adds	r3, #1
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	9305      	str	r3, [sp, #20]
 8006f66:	9b07      	ldr	r3, [sp, #28]
 8006f68:	9a00      	ldr	r2, [sp, #0]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d311      	bcc.n	8006f92 <__multiply+0xb6>
 8006f6e:	9b02      	ldr	r3, [sp, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	dd06      	ble.n	8006f82 <__multiply+0xa6>
 8006f74:	9b03      	ldr	r3, [sp, #12]
 8006f76:	3b04      	subs	r3, #4
 8006f78:	9303      	str	r3, [sp, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d054      	beq.n	800702c <__multiply+0x150>
 8006f82:	9b01      	ldr	r3, [sp, #4]
 8006f84:	9a02      	ldr	r2, [sp, #8]
 8006f86:	0018      	movs	r0, r3
 8006f88:	611a      	str	r2, [r3, #16]
 8006f8a:	b009      	add	sp, #36	; 0x24
 8006f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f8e:	c304      	stmia	r3!, {r2}
 8006f90:	e7cd      	b.n	8006f2e <__multiply+0x52>
 8006f92:	9b00      	ldr	r3, [sp, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	b298      	uxth	r0, r3
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d01c      	beq.n	8006fd6 <__multiply+0xfa>
 8006f9c:	4667      	mov	r7, ip
 8006f9e:	2400      	movs	r4, #0
 8006fa0:	9e06      	ldr	r6, [sp, #24]
 8006fa2:	ce02      	ldmia	r6!, {r1}
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	b28b      	uxth	r3, r1
 8006fa8:	4343      	muls	r3, r0
 8006faa:	0c09      	lsrs	r1, r1, #16
 8006fac:	4341      	muls	r1, r0
 8006fae:	b292      	uxth	r2, r2
 8006fb0:	189b      	adds	r3, r3, r2
 8006fb2:	191b      	adds	r3, r3, r4
 8006fb4:	000c      	movs	r4, r1
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	0c11      	lsrs	r1, r2, #16
 8006fba:	1861      	adds	r1, r4, r1
 8006fbc:	0c1c      	lsrs	r4, r3, #16
 8006fbe:	1909      	adds	r1, r1, r4
 8006fc0:	0c0c      	lsrs	r4, r1, #16
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	0409      	lsls	r1, r1, #16
 8006fc6:	430b      	orrs	r3, r1
 8006fc8:	c708      	stmia	r7!, {r3}
 8006fca:	9b04      	ldr	r3, [sp, #16]
 8006fcc:	42b3      	cmp	r3, r6
 8006fce:	d8e8      	bhi.n	8006fa2 <__multiply+0xc6>
 8006fd0:	4663      	mov	r3, ip
 8006fd2:	9a05      	ldr	r2, [sp, #20]
 8006fd4:	509c      	str	r4, [r3, r2]
 8006fd6:	9b00      	ldr	r3, [sp, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	0c1e      	lsrs	r6, r3, #16
 8006fdc:	d020      	beq.n	8007020 <__multiply+0x144>
 8006fde:	4663      	mov	r3, ip
 8006fe0:	002c      	movs	r4, r5
 8006fe2:	4660      	mov	r0, ip
 8006fe4:	2700      	movs	r7, #0
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3414      	adds	r4, #20
 8006fea:	6822      	ldr	r2, [r4, #0]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	b291      	uxth	r1, r2
 8006ff0:	4371      	muls	r1, r6
 8006ff2:	6802      	ldr	r2, [r0, #0]
 8006ff4:	0c12      	lsrs	r2, r2, #16
 8006ff6:	1889      	adds	r1, r1, r2
 8006ff8:	19cf      	adds	r7, r1, r7
 8006ffa:	0439      	lsls	r1, r7, #16
 8006ffc:	430b      	orrs	r3, r1
 8006ffe:	6003      	str	r3, [r0, #0]
 8007000:	cc02      	ldmia	r4!, {r1}
 8007002:	6843      	ldr	r3, [r0, #4]
 8007004:	0c09      	lsrs	r1, r1, #16
 8007006:	4371      	muls	r1, r6
 8007008:	b29b      	uxth	r3, r3
 800700a:	0c3f      	lsrs	r7, r7, #16
 800700c:	18cb      	adds	r3, r1, r3
 800700e:	9a04      	ldr	r2, [sp, #16]
 8007010:	19db      	adds	r3, r3, r7
 8007012:	0c1f      	lsrs	r7, r3, #16
 8007014:	3004      	adds	r0, #4
 8007016:	42a2      	cmp	r2, r4
 8007018:	d8e7      	bhi.n	8006fea <__multiply+0x10e>
 800701a:	4662      	mov	r2, ip
 800701c:	9905      	ldr	r1, [sp, #20]
 800701e:	5053      	str	r3, [r2, r1]
 8007020:	9b00      	ldr	r3, [sp, #0]
 8007022:	3304      	adds	r3, #4
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	2304      	movs	r3, #4
 8007028:	449c      	add	ip, r3
 800702a:	e79c      	b.n	8006f66 <__multiply+0x8a>
 800702c:	9b02      	ldr	r3, [sp, #8]
 800702e:	3b01      	subs	r3, #1
 8007030:	9302      	str	r3, [sp, #8]
 8007032:	e79c      	b.n	8006f6e <__multiply+0x92>
 8007034:	08008637 	.word	0x08008637
 8007038:	08008648 	.word	0x08008648

0800703c <__pow5mult>:
 800703c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800703e:	2303      	movs	r3, #3
 8007040:	0015      	movs	r5, r2
 8007042:	0007      	movs	r7, r0
 8007044:	000e      	movs	r6, r1
 8007046:	401a      	ands	r2, r3
 8007048:	421d      	tst	r5, r3
 800704a:	d008      	beq.n	800705e <__pow5mult+0x22>
 800704c:	4925      	ldr	r1, [pc, #148]	; (80070e4 <__pow5mult+0xa8>)
 800704e:	3a01      	subs	r2, #1
 8007050:	0092      	lsls	r2, r2, #2
 8007052:	5852      	ldr	r2, [r2, r1]
 8007054:	2300      	movs	r3, #0
 8007056:	0031      	movs	r1, r6
 8007058:	f7ff fe9e 	bl	8006d98 <__multadd>
 800705c:	0006      	movs	r6, r0
 800705e:	10ad      	asrs	r5, r5, #2
 8007060:	d03d      	beq.n	80070de <__pow5mult+0xa2>
 8007062:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007064:	2c00      	cmp	r4, #0
 8007066:	d10f      	bne.n	8007088 <__pow5mult+0x4c>
 8007068:	2010      	movs	r0, #16
 800706a:	f7ff fe0f 	bl	8006c8c <malloc>
 800706e:	1e02      	subs	r2, r0, #0
 8007070:	6278      	str	r0, [r7, #36]	; 0x24
 8007072:	d105      	bne.n	8007080 <__pow5mult+0x44>
 8007074:	21d7      	movs	r1, #215	; 0xd7
 8007076:	4b1c      	ldr	r3, [pc, #112]	; (80070e8 <__pow5mult+0xac>)
 8007078:	481c      	ldr	r0, [pc, #112]	; (80070ec <__pow5mult+0xb0>)
 800707a:	0049      	lsls	r1, r1, #1
 800707c:	f000 fbec 	bl	8007858 <__assert_func>
 8007080:	6044      	str	r4, [r0, #4]
 8007082:	6084      	str	r4, [r0, #8]
 8007084:	6004      	str	r4, [r0, #0]
 8007086:	60c4      	str	r4, [r0, #12]
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	689c      	ldr	r4, [r3, #8]
 800708c:	9301      	str	r3, [sp, #4]
 800708e:	2c00      	cmp	r4, #0
 8007090:	d108      	bne.n	80070a4 <__pow5mult+0x68>
 8007092:	0038      	movs	r0, r7
 8007094:	4916      	ldr	r1, [pc, #88]	; (80070f0 <__pow5mult+0xb4>)
 8007096:	f7ff ff0b 	bl	8006eb0 <__i2b>
 800709a:	9b01      	ldr	r3, [sp, #4]
 800709c:	0004      	movs	r4, r0
 800709e:	6098      	str	r0, [r3, #8]
 80070a0:	2300      	movs	r3, #0
 80070a2:	6003      	str	r3, [r0, #0]
 80070a4:	2301      	movs	r3, #1
 80070a6:	421d      	tst	r5, r3
 80070a8:	d00a      	beq.n	80070c0 <__pow5mult+0x84>
 80070aa:	0031      	movs	r1, r6
 80070ac:	0022      	movs	r2, r4
 80070ae:	0038      	movs	r0, r7
 80070b0:	f7ff ff14 	bl	8006edc <__multiply>
 80070b4:	0031      	movs	r1, r6
 80070b6:	9001      	str	r0, [sp, #4]
 80070b8:	0038      	movs	r0, r7
 80070ba:	f7ff fe49 	bl	8006d50 <_Bfree>
 80070be:	9e01      	ldr	r6, [sp, #4]
 80070c0:	106d      	asrs	r5, r5, #1
 80070c2:	d00c      	beq.n	80070de <__pow5mult+0xa2>
 80070c4:	6820      	ldr	r0, [r4, #0]
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d107      	bne.n	80070da <__pow5mult+0x9e>
 80070ca:	0022      	movs	r2, r4
 80070cc:	0021      	movs	r1, r4
 80070ce:	0038      	movs	r0, r7
 80070d0:	f7ff ff04 	bl	8006edc <__multiply>
 80070d4:	2300      	movs	r3, #0
 80070d6:	6020      	str	r0, [r4, #0]
 80070d8:	6003      	str	r3, [r0, #0]
 80070da:	0004      	movs	r4, r0
 80070dc:	e7e2      	b.n	80070a4 <__pow5mult+0x68>
 80070de:	0030      	movs	r0, r6
 80070e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070e2:	46c0      	nop			; (mov r8, r8)
 80070e4:	08008798 	.word	0x08008798
 80070e8:	080085c1 	.word	0x080085c1
 80070ec:	08008648 	.word	0x08008648
 80070f0:	00000271 	.word	0x00000271

080070f4 <__lshift>:
 80070f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070f6:	000c      	movs	r4, r1
 80070f8:	0017      	movs	r7, r2
 80070fa:	6923      	ldr	r3, [r4, #16]
 80070fc:	1155      	asrs	r5, r2, #5
 80070fe:	b087      	sub	sp, #28
 8007100:	18eb      	adds	r3, r5, r3
 8007102:	9302      	str	r3, [sp, #8]
 8007104:	3301      	adds	r3, #1
 8007106:	9301      	str	r3, [sp, #4]
 8007108:	6849      	ldr	r1, [r1, #4]
 800710a:	68a3      	ldr	r3, [r4, #8]
 800710c:	9004      	str	r0, [sp, #16]
 800710e:	9a01      	ldr	r2, [sp, #4]
 8007110:	4293      	cmp	r3, r2
 8007112:	db11      	blt.n	8007138 <__lshift+0x44>
 8007114:	9804      	ldr	r0, [sp, #16]
 8007116:	f7ff fdd7 	bl	8006cc8 <_Balloc>
 800711a:	0002      	movs	r2, r0
 800711c:	2300      	movs	r3, #0
 800711e:	3214      	adds	r2, #20
 8007120:	0006      	movs	r6, r0
 8007122:	0011      	movs	r1, r2
 8007124:	9203      	str	r2, [sp, #12]
 8007126:	4298      	cmp	r0, r3
 8007128:	d10d      	bne.n	8007146 <__lshift+0x52>
 800712a:	21da      	movs	r1, #218	; 0xda
 800712c:	0002      	movs	r2, r0
 800712e:	4b27      	ldr	r3, [pc, #156]	; (80071cc <__lshift+0xd8>)
 8007130:	4827      	ldr	r0, [pc, #156]	; (80071d0 <__lshift+0xdc>)
 8007132:	31ff      	adds	r1, #255	; 0xff
 8007134:	f000 fb90 	bl	8007858 <__assert_func>
 8007138:	3101      	adds	r1, #1
 800713a:	005b      	lsls	r3, r3, #1
 800713c:	e7e7      	b.n	800710e <__lshift+0x1a>
 800713e:	2200      	movs	r2, #0
 8007140:	0098      	lsls	r0, r3, #2
 8007142:	500a      	str	r2, [r1, r0]
 8007144:	3301      	adds	r3, #1
 8007146:	42ab      	cmp	r3, r5
 8007148:	dbf9      	blt.n	800713e <__lshift+0x4a>
 800714a:	43eb      	mvns	r3, r5
 800714c:	17db      	asrs	r3, r3, #31
 800714e:	401d      	ands	r5, r3
 8007150:	9b03      	ldr	r3, [sp, #12]
 8007152:	00ad      	lsls	r5, r5, #2
 8007154:	211f      	movs	r1, #31
 8007156:	0038      	movs	r0, r7
 8007158:	195d      	adds	r5, r3, r5
 800715a:	0023      	movs	r3, r4
 800715c:	6922      	ldr	r2, [r4, #16]
 800715e:	3314      	adds	r3, #20
 8007160:	0092      	lsls	r2, r2, #2
 8007162:	4008      	ands	r0, r1
 8007164:	4684      	mov	ip, r0
 8007166:	189a      	adds	r2, r3, r2
 8007168:	420f      	tst	r7, r1
 800716a:	d02a      	beq.n	80071c2 <__lshift+0xce>
 800716c:	3101      	adds	r1, #1
 800716e:	1a09      	subs	r1, r1, r0
 8007170:	9105      	str	r1, [sp, #20]
 8007172:	2100      	movs	r1, #0
 8007174:	9503      	str	r5, [sp, #12]
 8007176:	4667      	mov	r7, ip
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	40b8      	lsls	r0, r7
 800717c:	4301      	orrs	r1, r0
 800717e:	9803      	ldr	r0, [sp, #12]
 8007180:	c002      	stmia	r0!, {r1}
 8007182:	cb02      	ldmia	r3!, {r1}
 8007184:	9003      	str	r0, [sp, #12]
 8007186:	9805      	ldr	r0, [sp, #20]
 8007188:	40c1      	lsrs	r1, r0
 800718a:	429a      	cmp	r2, r3
 800718c:	d8f3      	bhi.n	8007176 <__lshift+0x82>
 800718e:	0020      	movs	r0, r4
 8007190:	3015      	adds	r0, #21
 8007192:	2304      	movs	r3, #4
 8007194:	4282      	cmp	r2, r0
 8007196:	d304      	bcc.n	80071a2 <__lshift+0xae>
 8007198:	1b13      	subs	r3, r2, r4
 800719a:	3b15      	subs	r3, #21
 800719c:	089b      	lsrs	r3, r3, #2
 800719e:	3301      	adds	r3, #1
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	50e9      	str	r1, [r5, r3]
 80071a4:	2900      	cmp	r1, #0
 80071a6:	d002      	beq.n	80071ae <__lshift+0xba>
 80071a8:	9b02      	ldr	r3, [sp, #8]
 80071aa:	3302      	adds	r3, #2
 80071ac:	9301      	str	r3, [sp, #4]
 80071ae:	9b01      	ldr	r3, [sp, #4]
 80071b0:	9804      	ldr	r0, [sp, #16]
 80071b2:	3b01      	subs	r3, #1
 80071b4:	0021      	movs	r1, r4
 80071b6:	6133      	str	r3, [r6, #16]
 80071b8:	f7ff fdca 	bl	8006d50 <_Bfree>
 80071bc:	0030      	movs	r0, r6
 80071be:	b007      	add	sp, #28
 80071c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071c2:	cb02      	ldmia	r3!, {r1}
 80071c4:	c502      	stmia	r5!, {r1}
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d8fb      	bhi.n	80071c2 <__lshift+0xce>
 80071ca:	e7f0      	b.n	80071ae <__lshift+0xba>
 80071cc:	08008637 	.word	0x08008637
 80071d0:	08008648 	.word	0x08008648

080071d4 <__mcmp>:
 80071d4:	6902      	ldr	r2, [r0, #16]
 80071d6:	690b      	ldr	r3, [r1, #16]
 80071d8:	b530      	push	{r4, r5, lr}
 80071da:	0004      	movs	r4, r0
 80071dc:	1ad0      	subs	r0, r2, r3
 80071de:	429a      	cmp	r2, r3
 80071e0:	d10d      	bne.n	80071fe <__mcmp+0x2a>
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	3414      	adds	r4, #20
 80071e6:	3114      	adds	r1, #20
 80071e8:	18e2      	adds	r2, r4, r3
 80071ea:	18c9      	adds	r1, r1, r3
 80071ec:	3a04      	subs	r2, #4
 80071ee:	3904      	subs	r1, #4
 80071f0:	6815      	ldr	r5, [r2, #0]
 80071f2:	680b      	ldr	r3, [r1, #0]
 80071f4:	429d      	cmp	r5, r3
 80071f6:	d003      	beq.n	8007200 <__mcmp+0x2c>
 80071f8:	2001      	movs	r0, #1
 80071fa:	429d      	cmp	r5, r3
 80071fc:	d303      	bcc.n	8007206 <__mcmp+0x32>
 80071fe:	bd30      	pop	{r4, r5, pc}
 8007200:	4294      	cmp	r4, r2
 8007202:	d3f3      	bcc.n	80071ec <__mcmp+0x18>
 8007204:	e7fb      	b.n	80071fe <__mcmp+0x2a>
 8007206:	4240      	negs	r0, r0
 8007208:	e7f9      	b.n	80071fe <__mcmp+0x2a>
	...

0800720c <__mdiff>:
 800720c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800720e:	000e      	movs	r6, r1
 8007210:	0007      	movs	r7, r0
 8007212:	0011      	movs	r1, r2
 8007214:	0030      	movs	r0, r6
 8007216:	b087      	sub	sp, #28
 8007218:	0014      	movs	r4, r2
 800721a:	f7ff ffdb 	bl	80071d4 <__mcmp>
 800721e:	1e05      	subs	r5, r0, #0
 8007220:	d110      	bne.n	8007244 <__mdiff+0x38>
 8007222:	0001      	movs	r1, r0
 8007224:	0038      	movs	r0, r7
 8007226:	f7ff fd4f 	bl	8006cc8 <_Balloc>
 800722a:	1e02      	subs	r2, r0, #0
 800722c:	d104      	bne.n	8007238 <__mdiff+0x2c>
 800722e:	4b40      	ldr	r3, [pc, #256]	; (8007330 <__mdiff+0x124>)
 8007230:	4940      	ldr	r1, [pc, #256]	; (8007334 <__mdiff+0x128>)
 8007232:	4841      	ldr	r0, [pc, #260]	; (8007338 <__mdiff+0x12c>)
 8007234:	f000 fb10 	bl	8007858 <__assert_func>
 8007238:	2301      	movs	r3, #1
 800723a:	6145      	str	r5, [r0, #20]
 800723c:	6103      	str	r3, [r0, #16]
 800723e:	0010      	movs	r0, r2
 8007240:	b007      	add	sp, #28
 8007242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007244:	2301      	movs	r3, #1
 8007246:	9301      	str	r3, [sp, #4]
 8007248:	2800      	cmp	r0, #0
 800724a:	db04      	blt.n	8007256 <__mdiff+0x4a>
 800724c:	0023      	movs	r3, r4
 800724e:	0034      	movs	r4, r6
 8007250:	001e      	movs	r6, r3
 8007252:	2300      	movs	r3, #0
 8007254:	9301      	str	r3, [sp, #4]
 8007256:	0038      	movs	r0, r7
 8007258:	6861      	ldr	r1, [r4, #4]
 800725a:	f7ff fd35 	bl	8006cc8 <_Balloc>
 800725e:	1e02      	subs	r2, r0, #0
 8007260:	d103      	bne.n	800726a <__mdiff+0x5e>
 8007262:	2190      	movs	r1, #144	; 0x90
 8007264:	4b32      	ldr	r3, [pc, #200]	; (8007330 <__mdiff+0x124>)
 8007266:	0089      	lsls	r1, r1, #2
 8007268:	e7e3      	b.n	8007232 <__mdiff+0x26>
 800726a:	9b01      	ldr	r3, [sp, #4]
 800726c:	2700      	movs	r7, #0
 800726e:	60c3      	str	r3, [r0, #12]
 8007270:	6920      	ldr	r0, [r4, #16]
 8007272:	3414      	adds	r4, #20
 8007274:	9401      	str	r4, [sp, #4]
 8007276:	9b01      	ldr	r3, [sp, #4]
 8007278:	0084      	lsls	r4, r0, #2
 800727a:	191b      	adds	r3, r3, r4
 800727c:	0034      	movs	r4, r6
 800727e:	9302      	str	r3, [sp, #8]
 8007280:	6933      	ldr	r3, [r6, #16]
 8007282:	3414      	adds	r4, #20
 8007284:	0099      	lsls	r1, r3, #2
 8007286:	1863      	adds	r3, r4, r1
 8007288:	9303      	str	r3, [sp, #12]
 800728a:	0013      	movs	r3, r2
 800728c:	3314      	adds	r3, #20
 800728e:	469c      	mov	ip, r3
 8007290:	9305      	str	r3, [sp, #20]
 8007292:	9b01      	ldr	r3, [sp, #4]
 8007294:	9304      	str	r3, [sp, #16]
 8007296:	9b04      	ldr	r3, [sp, #16]
 8007298:	cc02      	ldmia	r4!, {r1}
 800729a:	cb20      	ldmia	r3!, {r5}
 800729c:	9304      	str	r3, [sp, #16]
 800729e:	b2ab      	uxth	r3, r5
 80072a0:	19df      	adds	r7, r3, r7
 80072a2:	b28b      	uxth	r3, r1
 80072a4:	1afb      	subs	r3, r7, r3
 80072a6:	0c2d      	lsrs	r5, r5, #16
 80072a8:	0c09      	lsrs	r1, r1, #16
 80072aa:	1a69      	subs	r1, r5, r1
 80072ac:	141d      	asrs	r5, r3, #16
 80072ae:	1949      	adds	r1, r1, r5
 80072b0:	140f      	asrs	r7, r1, #16
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	0409      	lsls	r1, r1, #16
 80072b6:	430b      	orrs	r3, r1
 80072b8:	4661      	mov	r1, ip
 80072ba:	c108      	stmia	r1!, {r3}
 80072bc:	9b03      	ldr	r3, [sp, #12]
 80072be:	468c      	mov	ip, r1
 80072c0:	42a3      	cmp	r3, r4
 80072c2:	d8e8      	bhi.n	8007296 <__mdiff+0x8a>
 80072c4:	0031      	movs	r1, r6
 80072c6:	9c03      	ldr	r4, [sp, #12]
 80072c8:	3115      	adds	r1, #21
 80072ca:	2304      	movs	r3, #4
 80072cc:	428c      	cmp	r4, r1
 80072ce:	d304      	bcc.n	80072da <__mdiff+0xce>
 80072d0:	1ba3      	subs	r3, r4, r6
 80072d2:	3b15      	subs	r3, #21
 80072d4:	089b      	lsrs	r3, r3, #2
 80072d6:	3301      	adds	r3, #1
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	9901      	ldr	r1, [sp, #4]
 80072dc:	18cc      	adds	r4, r1, r3
 80072de:	9905      	ldr	r1, [sp, #20]
 80072e0:	0026      	movs	r6, r4
 80072e2:	18cb      	adds	r3, r1, r3
 80072e4:	469c      	mov	ip, r3
 80072e6:	9902      	ldr	r1, [sp, #8]
 80072e8:	428e      	cmp	r6, r1
 80072ea:	d310      	bcc.n	800730e <__mdiff+0x102>
 80072ec:	9e02      	ldr	r6, [sp, #8]
 80072ee:	1ee5      	subs	r5, r4, #3
 80072f0:	2100      	movs	r1, #0
 80072f2:	42ae      	cmp	r6, r5
 80072f4:	d304      	bcc.n	8007300 <__mdiff+0xf4>
 80072f6:	0031      	movs	r1, r6
 80072f8:	3103      	adds	r1, #3
 80072fa:	1b09      	subs	r1, r1, r4
 80072fc:	0889      	lsrs	r1, r1, #2
 80072fe:	0089      	lsls	r1, r1, #2
 8007300:	185b      	adds	r3, r3, r1
 8007302:	3b04      	subs	r3, #4
 8007304:	6819      	ldr	r1, [r3, #0]
 8007306:	2900      	cmp	r1, #0
 8007308:	d00f      	beq.n	800732a <__mdiff+0x11e>
 800730a:	6110      	str	r0, [r2, #16]
 800730c:	e797      	b.n	800723e <__mdiff+0x32>
 800730e:	ce02      	ldmia	r6!, {r1}
 8007310:	b28d      	uxth	r5, r1
 8007312:	19ed      	adds	r5, r5, r7
 8007314:	0c0f      	lsrs	r7, r1, #16
 8007316:	1429      	asrs	r1, r5, #16
 8007318:	1879      	adds	r1, r7, r1
 800731a:	140f      	asrs	r7, r1, #16
 800731c:	b2ad      	uxth	r5, r5
 800731e:	0409      	lsls	r1, r1, #16
 8007320:	430d      	orrs	r5, r1
 8007322:	4661      	mov	r1, ip
 8007324:	c120      	stmia	r1!, {r5}
 8007326:	468c      	mov	ip, r1
 8007328:	e7dd      	b.n	80072e6 <__mdiff+0xda>
 800732a:	3801      	subs	r0, #1
 800732c:	e7e9      	b.n	8007302 <__mdiff+0xf6>
 800732e:	46c0      	nop			; (mov r8, r8)
 8007330:	08008637 	.word	0x08008637
 8007334:	00000232 	.word	0x00000232
 8007338:	08008648 	.word	0x08008648

0800733c <__d2b>:
 800733c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800733e:	2101      	movs	r1, #1
 8007340:	0014      	movs	r4, r2
 8007342:	001e      	movs	r6, r3
 8007344:	9f08      	ldr	r7, [sp, #32]
 8007346:	f7ff fcbf 	bl	8006cc8 <_Balloc>
 800734a:	1e05      	subs	r5, r0, #0
 800734c:	d105      	bne.n	800735a <__d2b+0x1e>
 800734e:	0002      	movs	r2, r0
 8007350:	4b26      	ldr	r3, [pc, #152]	; (80073ec <__d2b+0xb0>)
 8007352:	4927      	ldr	r1, [pc, #156]	; (80073f0 <__d2b+0xb4>)
 8007354:	4827      	ldr	r0, [pc, #156]	; (80073f4 <__d2b+0xb8>)
 8007356:	f000 fa7f 	bl	8007858 <__assert_func>
 800735a:	0333      	lsls	r3, r6, #12
 800735c:	0076      	lsls	r6, r6, #1
 800735e:	0b1b      	lsrs	r3, r3, #12
 8007360:	0d76      	lsrs	r6, r6, #21
 8007362:	d124      	bne.n	80073ae <__d2b+0x72>
 8007364:	9301      	str	r3, [sp, #4]
 8007366:	2c00      	cmp	r4, #0
 8007368:	d027      	beq.n	80073ba <__d2b+0x7e>
 800736a:	4668      	mov	r0, sp
 800736c:	9400      	str	r4, [sp, #0]
 800736e:	f7ff fd71 	bl	8006e54 <__lo0bits>
 8007372:	9c00      	ldr	r4, [sp, #0]
 8007374:	2800      	cmp	r0, #0
 8007376:	d01e      	beq.n	80073b6 <__d2b+0x7a>
 8007378:	9b01      	ldr	r3, [sp, #4]
 800737a:	2120      	movs	r1, #32
 800737c:	001a      	movs	r2, r3
 800737e:	1a09      	subs	r1, r1, r0
 8007380:	408a      	lsls	r2, r1
 8007382:	40c3      	lsrs	r3, r0
 8007384:	4322      	orrs	r2, r4
 8007386:	616a      	str	r2, [r5, #20]
 8007388:	9301      	str	r3, [sp, #4]
 800738a:	9c01      	ldr	r4, [sp, #4]
 800738c:	61ac      	str	r4, [r5, #24]
 800738e:	1e63      	subs	r3, r4, #1
 8007390:	419c      	sbcs	r4, r3
 8007392:	3401      	adds	r4, #1
 8007394:	612c      	str	r4, [r5, #16]
 8007396:	2e00      	cmp	r6, #0
 8007398:	d018      	beq.n	80073cc <__d2b+0x90>
 800739a:	4b17      	ldr	r3, [pc, #92]	; (80073f8 <__d2b+0xbc>)
 800739c:	18f6      	adds	r6, r6, r3
 800739e:	2335      	movs	r3, #53	; 0x35
 80073a0:	1836      	adds	r6, r6, r0
 80073a2:	1a18      	subs	r0, r3, r0
 80073a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a6:	603e      	str	r6, [r7, #0]
 80073a8:	6018      	str	r0, [r3, #0]
 80073aa:	0028      	movs	r0, r5
 80073ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80073ae:	2280      	movs	r2, #128	; 0x80
 80073b0:	0352      	lsls	r2, r2, #13
 80073b2:	4313      	orrs	r3, r2
 80073b4:	e7d6      	b.n	8007364 <__d2b+0x28>
 80073b6:	616c      	str	r4, [r5, #20]
 80073b8:	e7e7      	b.n	800738a <__d2b+0x4e>
 80073ba:	a801      	add	r0, sp, #4
 80073bc:	f7ff fd4a 	bl	8006e54 <__lo0bits>
 80073c0:	2401      	movs	r4, #1
 80073c2:	9b01      	ldr	r3, [sp, #4]
 80073c4:	612c      	str	r4, [r5, #16]
 80073c6:	616b      	str	r3, [r5, #20]
 80073c8:	3020      	adds	r0, #32
 80073ca:	e7e4      	b.n	8007396 <__d2b+0x5a>
 80073cc:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <__d2b+0xc0>)
 80073ce:	18c0      	adds	r0, r0, r3
 80073d0:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <__d2b+0xc4>)
 80073d2:	6038      	str	r0, [r7, #0]
 80073d4:	18e3      	adds	r3, r4, r3
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	18eb      	adds	r3, r5, r3
 80073da:	6958      	ldr	r0, [r3, #20]
 80073dc:	f7ff fd20 	bl	8006e20 <__hi0bits>
 80073e0:	0164      	lsls	r4, r4, #5
 80073e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e4:	1a24      	subs	r4, r4, r0
 80073e6:	601c      	str	r4, [r3, #0]
 80073e8:	e7df      	b.n	80073aa <__d2b+0x6e>
 80073ea:	46c0      	nop			; (mov r8, r8)
 80073ec:	08008637 	.word	0x08008637
 80073f0:	0000030a 	.word	0x0000030a
 80073f4:	08008648 	.word	0x08008648
 80073f8:	fffffbcd 	.word	0xfffffbcd
 80073fc:	fffffbce 	.word	0xfffffbce
 8007400:	3fffffff 	.word	0x3fffffff

08007404 <_calloc_r>:
 8007404:	434a      	muls	r2, r1
 8007406:	b570      	push	{r4, r5, r6, lr}
 8007408:	0011      	movs	r1, r2
 800740a:	0015      	movs	r5, r2
 800740c:	f000 f852 	bl	80074b4 <_malloc_r>
 8007410:	1e04      	subs	r4, r0, #0
 8007412:	d003      	beq.n	800741c <_calloc_r+0x18>
 8007414:	002a      	movs	r2, r5
 8007416:	2100      	movs	r1, #0
 8007418:	f7fe f8e8 	bl	80055ec <memset>
 800741c:	0020      	movs	r0, r4
 800741e:	bd70      	pop	{r4, r5, r6, pc}

08007420 <_free_r>:
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	0005      	movs	r5, r0
 8007424:	2900      	cmp	r1, #0
 8007426:	d010      	beq.n	800744a <_free_r+0x2a>
 8007428:	1f0c      	subs	r4, r1, #4
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	da00      	bge.n	8007432 <_free_r+0x12>
 8007430:	18e4      	adds	r4, r4, r3
 8007432:	0028      	movs	r0, r5
 8007434:	f000 fa64 	bl	8007900 <__malloc_lock>
 8007438:	4a1d      	ldr	r2, [pc, #116]	; (80074b0 <_free_r+0x90>)
 800743a:	6813      	ldr	r3, [r2, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d105      	bne.n	800744c <_free_r+0x2c>
 8007440:	6063      	str	r3, [r4, #4]
 8007442:	6014      	str	r4, [r2, #0]
 8007444:	0028      	movs	r0, r5
 8007446:	f000 fa63 	bl	8007910 <__malloc_unlock>
 800744a:	bd70      	pop	{r4, r5, r6, pc}
 800744c:	42a3      	cmp	r3, r4
 800744e:	d908      	bls.n	8007462 <_free_r+0x42>
 8007450:	6821      	ldr	r1, [r4, #0]
 8007452:	1860      	adds	r0, r4, r1
 8007454:	4283      	cmp	r3, r0
 8007456:	d1f3      	bne.n	8007440 <_free_r+0x20>
 8007458:	6818      	ldr	r0, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	1841      	adds	r1, r0, r1
 800745e:	6021      	str	r1, [r4, #0]
 8007460:	e7ee      	b.n	8007440 <_free_r+0x20>
 8007462:	001a      	movs	r2, r3
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <_free_r+0x4e>
 800746a:	42a3      	cmp	r3, r4
 800746c:	d9f9      	bls.n	8007462 <_free_r+0x42>
 800746e:	6811      	ldr	r1, [r2, #0]
 8007470:	1850      	adds	r0, r2, r1
 8007472:	42a0      	cmp	r0, r4
 8007474:	d10b      	bne.n	800748e <_free_r+0x6e>
 8007476:	6820      	ldr	r0, [r4, #0]
 8007478:	1809      	adds	r1, r1, r0
 800747a:	1850      	adds	r0, r2, r1
 800747c:	6011      	str	r1, [r2, #0]
 800747e:	4283      	cmp	r3, r0
 8007480:	d1e0      	bne.n	8007444 <_free_r+0x24>
 8007482:	6818      	ldr	r0, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	1841      	adds	r1, r0, r1
 8007488:	6011      	str	r1, [r2, #0]
 800748a:	6053      	str	r3, [r2, #4]
 800748c:	e7da      	b.n	8007444 <_free_r+0x24>
 800748e:	42a0      	cmp	r0, r4
 8007490:	d902      	bls.n	8007498 <_free_r+0x78>
 8007492:	230c      	movs	r3, #12
 8007494:	602b      	str	r3, [r5, #0]
 8007496:	e7d5      	b.n	8007444 <_free_r+0x24>
 8007498:	6821      	ldr	r1, [r4, #0]
 800749a:	1860      	adds	r0, r4, r1
 800749c:	4283      	cmp	r3, r0
 800749e:	d103      	bne.n	80074a8 <_free_r+0x88>
 80074a0:	6818      	ldr	r0, [r3, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	1841      	adds	r1, r0, r1
 80074a6:	6021      	str	r1, [r4, #0]
 80074a8:	6063      	str	r3, [r4, #4]
 80074aa:	6054      	str	r4, [r2, #4]
 80074ac:	e7ca      	b.n	8007444 <_free_r+0x24>
 80074ae:	46c0      	nop			; (mov r8, r8)
 80074b0:	2000022c 	.word	0x2000022c

080074b4 <_malloc_r>:
 80074b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b6:	2303      	movs	r3, #3
 80074b8:	1ccd      	adds	r5, r1, #3
 80074ba:	439d      	bics	r5, r3
 80074bc:	3508      	adds	r5, #8
 80074be:	0006      	movs	r6, r0
 80074c0:	2d0c      	cmp	r5, #12
 80074c2:	d21f      	bcs.n	8007504 <_malloc_r+0x50>
 80074c4:	250c      	movs	r5, #12
 80074c6:	42a9      	cmp	r1, r5
 80074c8:	d81e      	bhi.n	8007508 <_malloc_r+0x54>
 80074ca:	0030      	movs	r0, r6
 80074cc:	f000 fa18 	bl	8007900 <__malloc_lock>
 80074d0:	4925      	ldr	r1, [pc, #148]	; (8007568 <_malloc_r+0xb4>)
 80074d2:	680a      	ldr	r2, [r1, #0]
 80074d4:	0014      	movs	r4, r2
 80074d6:	2c00      	cmp	r4, #0
 80074d8:	d11a      	bne.n	8007510 <_malloc_r+0x5c>
 80074da:	4f24      	ldr	r7, [pc, #144]	; (800756c <_malloc_r+0xb8>)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d104      	bne.n	80074ec <_malloc_r+0x38>
 80074e2:	0021      	movs	r1, r4
 80074e4:	0030      	movs	r0, r6
 80074e6:	f000 f9a5 	bl	8007834 <_sbrk_r>
 80074ea:	6038      	str	r0, [r7, #0]
 80074ec:	0029      	movs	r1, r5
 80074ee:	0030      	movs	r0, r6
 80074f0:	f000 f9a0 	bl	8007834 <_sbrk_r>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	d12b      	bne.n	8007550 <_malloc_r+0x9c>
 80074f8:	230c      	movs	r3, #12
 80074fa:	0030      	movs	r0, r6
 80074fc:	6033      	str	r3, [r6, #0]
 80074fe:	f000 fa07 	bl	8007910 <__malloc_unlock>
 8007502:	e003      	b.n	800750c <_malloc_r+0x58>
 8007504:	2d00      	cmp	r5, #0
 8007506:	dade      	bge.n	80074c6 <_malloc_r+0x12>
 8007508:	230c      	movs	r3, #12
 800750a:	6033      	str	r3, [r6, #0]
 800750c:	2000      	movs	r0, #0
 800750e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	1b5b      	subs	r3, r3, r5
 8007514:	d419      	bmi.n	800754a <_malloc_r+0x96>
 8007516:	2b0b      	cmp	r3, #11
 8007518:	d903      	bls.n	8007522 <_malloc_r+0x6e>
 800751a:	6023      	str	r3, [r4, #0]
 800751c:	18e4      	adds	r4, r4, r3
 800751e:	6025      	str	r5, [r4, #0]
 8007520:	e003      	b.n	800752a <_malloc_r+0x76>
 8007522:	6863      	ldr	r3, [r4, #4]
 8007524:	42a2      	cmp	r2, r4
 8007526:	d10e      	bne.n	8007546 <_malloc_r+0x92>
 8007528:	600b      	str	r3, [r1, #0]
 800752a:	0030      	movs	r0, r6
 800752c:	f000 f9f0 	bl	8007910 <__malloc_unlock>
 8007530:	0020      	movs	r0, r4
 8007532:	2207      	movs	r2, #7
 8007534:	300b      	adds	r0, #11
 8007536:	1d23      	adds	r3, r4, #4
 8007538:	4390      	bics	r0, r2
 800753a:	1ac2      	subs	r2, r0, r3
 800753c:	4298      	cmp	r0, r3
 800753e:	d0e6      	beq.n	800750e <_malloc_r+0x5a>
 8007540:	1a1b      	subs	r3, r3, r0
 8007542:	50a3      	str	r3, [r4, r2]
 8007544:	e7e3      	b.n	800750e <_malloc_r+0x5a>
 8007546:	6053      	str	r3, [r2, #4]
 8007548:	e7ef      	b.n	800752a <_malloc_r+0x76>
 800754a:	0022      	movs	r2, r4
 800754c:	6864      	ldr	r4, [r4, #4]
 800754e:	e7c2      	b.n	80074d6 <_malloc_r+0x22>
 8007550:	2303      	movs	r3, #3
 8007552:	1cc4      	adds	r4, r0, #3
 8007554:	439c      	bics	r4, r3
 8007556:	42a0      	cmp	r0, r4
 8007558:	d0e1      	beq.n	800751e <_malloc_r+0x6a>
 800755a:	1a21      	subs	r1, r4, r0
 800755c:	0030      	movs	r0, r6
 800755e:	f000 f969 	bl	8007834 <_sbrk_r>
 8007562:	1c43      	adds	r3, r0, #1
 8007564:	d1db      	bne.n	800751e <_malloc_r+0x6a>
 8007566:	e7c7      	b.n	80074f8 <_malloc_r+0x44>
 8007568:	2000022c 	.word	0x2000022c
 800756c:	20000230 	.word	0x20000230

08007570 <__ssputs_r>:
 8007570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007572:	688e      	ldr	r6, [r1, #8]
 8007574:	b085      	sub	sp, #20
 8007576:	0007      	movs	r7, r0
 8007578:	000c      	movs	r4, r1
 800757a:	9203      	str	r2, [sp, #12]
 800757c:	9301      	str	r3, [sp, #4]
 800757e:	429e      	cmp	r6, r3
 8007580:	d83c      	bhi.n	80075fc <__ssputs_r+0x8c>
 8007582:	2390      	movs	r3, #144	; 0x90
 8007584:	898a      	ldrh	r2, [r1, #12]
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	421a      	tst	r2, r3
 800758a:	d034      	beq.n	80075f6 <__ssputs_r+0x86>
 800758c:	2503      	movs	r5, #3
 800758e:	6909      	ldr	r1, [r1, #16]
 8007590:	6823      	ldr	r3, [r4, #0]
 8007592:	1a5b      	subs	r3, r3, r1
 8007594:	9302      	str	r3, [sp, #8]
 8007596:	6963      	ldr	r3, [r4, #20]
 8007598:	9802      	ldr	r0, [sp, #8]
 800759a:	435d      	muls	r5, r3
 800759c:	0feb      	lsrs	r3, r5, #31
 800759e:	195d      	adds	r5, r3, r5
 80075a0:	9b01      	ldr	r3, [sp, #4]
 80075a2:	106d      	asrs	r5, r5, #1
 80075a4:	3301      	adds	r3, #1
 80075a6:	181b      	adds	r3, r3, r0
 80075a8:	42ab      	cmp	r3, r5
 80075aa:	d900      	bls.n	80075ae <__ssputs_r+0x3e>
 80075ac:	001d      	movs	r5, r3
 80075ae:	0553      	lsls	r3, r2, #21
 80075b0:	d532      	bpl.n	8007618 <__ssputs_r+0xa8>
 80075b2:	0029      	movs	r1, r5
 80075b4:	0038      	movs	r0, r7
 80075b6:	f7ff ff7d 	bl	80074b4 <_malloc_r>
 80075ba:	1e06      	subs	r6, r0, #0
 80075bc:	d109      	bne.n	80075d2 <__ssputs_r+0x62>
 80075be:	230c      	movs	r3, #12
 80075c0:	603b      	str	r3, [r7, #0]
 80075c2:	2340      	movs	r3, #64	; 0x40
 80075c4:	2001      	movs	r0, #1
 80075c6:	89a2      	ldrh	r2, [r4, #12]
 80075c8:	4240      	negs	r0, r0
 80075ca:	4313      	orrs	r3, r2
 80075cc:	81a3      	strh	r3, [r4, #12]
 80075ce:	b005      	add	sp, #20
 80075d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075d2:	9a02      	ldr	r2, [sp, #8]
 80075d4:	6921      	ldr	r1, [r4, #16]
 80075d6:	f7ff fb6e 	bl	8006cb6 <memcpy>
 80075da:	89a3      	ldrh	r3, [r4, #12]
 80075dc:	4a14      	ldr	r2, [pc, #80]	; (8007630 <__ssputs_r+0xc0>)
 80075de:	401a      	ands	r2, r3
 80075e0:	2380      	movs	r3, #128	; 0x80
 80075e2:	4313      	orrs	r3, r2
 80075e4:	81a3      	strh	r3, [r4, #12]
 80075e6:	9b02      	ldr	r3, [sp, #8]
 80075e8:	6126      	str	r6, [r4, #16]
 80075ea:	18f6      	adds	r6, r6, r3
 80075ec:	6026      	str	r6, [r4, #0]
 80075ee:	6165      	str	r5, [r4, #20]
 80075f0:	9e01      	ldr	r6, [sp, #4]
 80075f2:	1aed      	subs	r5, r5, r3
 80075f4:	60a5      	str	r5, [r4, #8]
 80075f6:	9b01      	ldr	r3, [sp, #4]
 80075f8:	429e      	cmp	r6, r3
 80075fa:	d900      	bls.n	80075fe <__ssputs_r+0x8e>
 80075fc:	9e01      	ldr	r6, [sp, #4]
 80075fe:	0032      	movs	r2, r6
 8007600:	9903      	ldr	r1, [sp, #12]
 8007602:	6820      	ldr	r0, [r4, #0]
 8007604:	f000 f968 	bl	80078d8 <memmove>
 8007608:	68a3      	ldr	r3, [r4, #8]
 800760a:	2000      	movs	r0, #0
 800760c:	1b9b      	subs	r3, r3, r6
 800760e:	60a3      	str	r3, [r4, #8]
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	199e      	adds	r6, r3, r6
 8007614:	6026      	str	r6, [r4, #0]
 8007616:	e7da      	b.n	80075ce <__ssputs_r+0x5e>
 8007618:	002a      	movs	r2, r5
 800761a:	0038      	movs	r0, r7
 800761c:	f000 f980 	bl	8007920 <_realloc_r>
 8007620:	1e06      	subs	r6, r0, #0
 8007622:	d1e0      	bne.n	80075e6 <__ssputs_r+0x76>
 8007624:	0038      	movs	r0, r7
 8007626:	6921      	ldr	r1, [r4, #16]
 8007628:	f7ff fefa 	bl	8007420 <_free_r>
 800762c:	e7c7      	b.n	80075be <__ssputs_r+0x4e>
 800762e:	46c0      	nop			; (mov r8, r8)
 8007630:	fffffb7f 	.word	0xfffffb7f

08007634 <_svfiprintf_r>:
 8007634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007636:	b0a1      	sub	sp, #132	; 0x84
 8007638:	9003      	str	r0, [sp, #12]
 800763a:	001d      	movs	r5, r3
 800763c:	898b      	ldrh	r3, [r1, #12]
 800763e:	000f      	movs	r7, r1
 8007640:	0016      	movs	r6, r2
 8007642:	061b      	lsls	r3, r3, #24
 8007644:	d511      	bpl.n	800766a <_svfiprintf_r+0x36>
 8007646:	690b      	ldr	r3, [r1, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10e      	bne.n	800766a <_svfiprintf_r+0x36>
 800764c:	2140      	movs	r1, #64	; 0x40
 800764e:	f7ff ff31 	bl	80074b4 <_malloc_r>
 8007652:	6038      	str	r0, [r7, #0]
 8007654:	6138      	str	r0, [r7, #16]
 8007656:	2800      	cmp	r0, #0
 8007658:	d105      	bne.n	8007666 <_svfiprintf_r+0x32>
 800765a:	230c      	movs	r3, #12
 800765c:	9a03      	ldr	r2, [sp, #12]
 800765e:	3801      	subs	r0, #1
 8007660:	6013      	str	r3, [r2, #0]
 8007662:	b021      	add	sp, #132	; 0x84
 8007664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007666:	2340      	movs	r3, #64	; 0x40
 8007668:	617b      	str	r3, [r7, #20]
 800766a:	2300      	movs	r3, #0
 800766c:	ac08      	add	r4, sp, #32
 800766e:	6163      	str	r3, [r4, #20]
 8007670:	3320      	adds	r3, #32
 8007672:	7663      	strb	r3, [r4, #25]
 8007674:	3310      	adds	r3, #16
 8007676:	76a3      	strb	r3, [r4, #26]
 8007678:	9507      	str	r5, [sp, #28]
 800767a:	0035      	movs	r5, r6
 800767c:	782b      	ldrb	r3, [r5, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <_svfiprintf_r+0x52>
 8007682:	2b25      	cmp	r3, #37	; 0x25
 8007684:	d147      	bne.n	8007716 <_svfiprintf_r+0xe2>
 8007686:	1bab      	subs	r3, r5, r6
 8007688:	9305      	str	r3, [sp, #20]
 800768a:	42b5      	cmp	r5, r6
 800768c:	d00c      	beq.n	80076a8 <_svfiprintf_r+0x74>
 800768e:	0032      	movs	r2, r6
 8007690:	0039      	movs	r1, r7
 8007692:	9803      	ldr	r0, [sp, #12]
 8007694:	f7ff ff6c 	bl	8007570 <__ssputs_r>
 8007698:	1c43      	adds	r3, r0, #1
 800769a:	d100      	bne.n	800769e <_svfiprintf_r+0x6a>
 800769c:	e0ae      	b.n	80077fc <_svfiprintf_r+0x1c8>
 800769e:	6962      	ldr	r2, [r4, #20]
 80076a0:	9b05      	ldr	r3, [sp, #20]
 80076a2:	4694      	mov	ip, r2
 80076a4:	4463      	add	r3, ip
 80076a6:	6163      	str	r3, [r4, #20]
 80076a8:	782b      	ldrb	r3, [r5, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d100      	bne.n	80076b0 <_svfiprintf_r+0x7c>
 80076ae:	e0a5      	b.n	80077fc <_svfiprintf_r+0x1c8>
 80076b0:	2201      	movs	r2, #1
 80076b2:	2300      	movs	r3, #0
 80076b4:	4252      	negs	r2, r2
 80076b6:	6062      	str	r2, [r4, #4]
 80076b8:	a904      	add	r1, sp, #16
 80076ba:	3254      	adds	r2, #84	; 0x54
 80076bc:	1852      	adds	r2, r2, r1
 80076be:	1c6e      	adds	r6, r5, #1
 80076c0:	6023      	str	r3, [r4, #0]
 80076c2:	60e3      	str	r3, [r4, #12]
 80076c4:	60a3      	str	r3, [r4, #8]
 80076c6:	7013      	strb	r3, [r2, #0]
 80076c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80076ca:	2205      	movs	r2, #5
 80076cc:	7831      	ldrb	r1, [r6, #0]
 80076ce:	4854      	ldr	r0, [pc, #336]	; (8007820 <_svfiprintf_r+0x1ec>)
 80076d0:	f7ff fae6 	bl	8006ca0 <memchr>
 80076d4:	1c75      	adds	r5, r6, #1
 80076d6:	2800      	cmp	r0, #0
 80076d8:	d11f      	bne.n	800771a <_svfiprintf_r+0xe6>
 80076da:	6822      	ldr	r2, [r4, #0]
 80076dc:	06d3      	lsls	r3, r2, #27
 80076de:	d504      	bpl.n	80076ea <_svfiprintf_r+0xb6>
 80076e0:	2353      	movs	r3, #83	; 0x53
 80076e2:	a904      	add	r1, sp, #16
 80076e4:	185b      	adds	r3, r3, r1
 80076e6:	2120      	movs	r1, #32
 80076e8:	7019      	strb	r1, [r3, #0]
 80076ea:	0713      	lsls	r3, r2, #28
 80076ec:	d504      	bpl.n	80076f8 <_svfiprintf_r+0xc4>
 80076ee:	2353      	movs	r3, #83	; 0x53
 80076f0:	a904      	add	r1, sp, #16
 80076f2:	185b      	adds	r3, r3, r1
 80076f4:	212b      	movs	r1, #43	; 0x2b
 80076f6:	7019      	strb	r1, [r3, #0]
 80076f8:	7833      	ldrb	r3, [r6, #0]
 80076fa:	2b2a      	cmp	r3, #42	; 0x2a
 80076fc:	d016      	beq.n	800772c <_svfiprintf_r+0xf8>
 80076fe:	0035      	movs	r5, r6
 8007700:	2100      	movs	r1, #0
 8007702:	200a      	movs	r0, #10
 8007704:	68e3      	ldr	r3, [r4, #12]
 8007706:	782a      	ldrb	r2, [r5, #0]
 8007708:	1c6e      	adds	r6, r5, #1
 800770a:	3a30      	subs	r2, #48	; 0x30
 800770c:	2a09      	cmp	r2, #9
 800770e:	d94e      	bls.n	80077ae <_svfiprintf_r+0x17a>
 8007710:	2900      	cmp	r1, #0
 8007712:	d111      	bne.n	8007738 <_svfiprintf_r+0x104>
 8007714:	e017      	b.n	8007746 <_svfiprintf_r+0x112>
 8007716:	3501      	adds	r5, #1
 8007718:	e7b0      	b.n	800767c <_svfiprintf_r+0x48>
 800771a:	4b41      	ldr	r3, [pc, #260]	; (8007820 <_svfiprintf_r+0x1ec>)
 800771c:	6822      	ldr	r2, [r4, #0]
 800771e:	1ac0      	subs	r0, r0, r3
 8007720:	2301      	movs	r3, #1
 8007722:	4083      	lsls	r3, r0
 8007724:	4313      	orrs	r3, r2
 8007726:	002e      	movs	r6, r5
 8007728:	6023      	str	r3, [r4, #0]
 800772a:	e7ce      	b.n	80076ca <_svfiprintf_r+0x96>
 800772c:	9b07      	ldr	r3, [sp, #28]
 800772e:	1d19      	adds	r1, r3, #4
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	9107      	str	r1, [sp, #28]
 8007734:	2b00      	cmp	r3, #0
 8007736:	db01      	blt.n	800773c <_svfiprintf_r+0x108>
 8007738:	930b      	str	r3, [sp, #44]	; 0x2c
 800773a:	e004      	b.n	8007746 <_svfiprintf_r+0x112>
 800773c:	425b      	negs	r3, r3
 800773e:	60e3      	str	r3, [r4, #12]
 8007740:	2302      	movs	r3, #2
 8007742:	4313      	orrs	r3, r2
 8007744:	6023      	str	r3, [r4, #0]
 8007746:	782b      	ldrb	r3, [r5, #0]
 8007748:	2b2e      	cmp	r3, #46	; 0x2e
 800774a:	d10a      	bne.n	8007762 <_svfiprintf_r+0x12e>
 800774c:	786b      	ldrb	r3, [r5, #1]
 800774e:	2b2a      	cmp	r3, #42	; 0x2a
 8007750:	d135      	bne.n	80077be <_svfiprintf_r+0x18a>
 8007752:	9b07      	ldr	r3, [sp, #28]
 8007754:	3502      	adds	r5, #2
 8007756:	1d1a      	adds	r2, r3, #4
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	9207      	str	r2, [sp, #28]
 800775c:	2b00      	cmp	r3, #0
 800775e:	db2b      	blt.n	80077b8 <_svfiprintf_r+0x184>
 8007760:	9309      	str	r3, [sp, #36]	; 0x24
 8007762:	4e30      	ldr	r6, [pc, #192]	; (8007824 <_svfiprintf_r+0x1f0>)
 8007764:	2203      	movs	r2, #3
 8007766:	0030      	movs	r0, r6
 8007768:	7829      	ldrb	r1, [r5, #0]
 800776a:	f7ff fa99 	bl	8006ca0 <memchr>
 800776e:	2800      	cmp	r0, #0
 8007770:	d006      	beq.n	8007780 <_svfiprintf_r+0x14c>
 8007772:	2340      	movs	r3, #64	; 0x40
 8007774:	1b80      	subs	r0, r0, r6
 8007776:	4083      	lsls	r3, r0
 8007778:	6822      	ldr	r2, [r4, #0]
 800777a:	3501      	adds	r5, #1
 800777c:	4313      	orrs	r3, r2
 800777e:	6023      	str	r3, [r4, #0]
 8007780:	7829      	ldrb	r1, [r5, #0]
 8007782:	2206      	movs	r2, #6
 8007784:	4828      	ldr	r0, [pc, #160]	; (8007828 <_svfiprintf_r+0x1f4>)
 8007786:	1c6e      	adds	r6, r5, #1
 8007788:	7621      	strb	r1, [r4, #24]
 800778a:	f7ff fa89 	bl	8006ca0 <memchr>
 800778e:	2800      	cmp	r0, #0
 8007790:	d03c      	beq.n	800780c <_svfiprintf_r+0x1d8>
 8007792:	4b26      	ldr	r3, [pc, #152]	; (800782c <_svfiprintf_r+0x1f8>)
 8007794:	2b00      	cmp	r3, #0
 8007796:	d125      	bne.n	80077e4 <_svfiprintf_r+0x1b0>
 8007798:	2207      	movs	r2, #7
 800779a:	9b07      	ldr	r3, [sp, #28]
 800779c:	3307      	adds	r3, #7
 800779e:	4393      	bics	r3, r2
 80077a0:	3308      	adds	r3, #8
 80077a2:	9307      	str	r3, [sp, #28]
 80077a4:	6963      	ldr	r3, [r4, #20]
 80077a6:	9a04      	ldr	r2, [sp, #16]
 80077a8:	189b      	adds	r3, r3, r2
 80077aa:	6163      	str	r3, [r4, #20]
 80077ac:	e765      	b.n	800767a <_svfiprintf_r+0x46>
 80077ae:	4343      	muls	r3, r0
 80077b0:	0035      	movs	r5, r6
 80077b2:	2101      	movs	r1, #1
 80077b4:	189b      	adds	r3, r3, r2
 80077b6:	e7a6      	b.n	8007706 <_svfiprintf_r+0xd2>
 80077b8:	2301      	movs	r3, #1
 80077ba:	425b      	negs	r3, r3
 80077bc:	e7d0      	b.n	8007760 <_svfiprintf_r+0x12c>
 80077be:	2300      	movs	r3, #0
 80077c0:	200a      	movs	r0, #10
 80077c2:	001a      	movs	r2, r3
 80077c4:	3501      	adds	r5, #1
 80077c6:	6063      	str	r3, [r4, #4]
 80077c8:	7829      	ldrb	r1, [r5, #0]
 80077ca:	1c6e      	adds	r6, r5, #1
 80077cc:	3930      	subs	r1, #48	; 0x30
 80077ce:	2909      	cmp	r1, #9
 80077d0:	d903      	bls.n	80077da <_svfiprintf_r+0x1a6>
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0c5      	beq.n	8007762 <_svfiprintf_r+0x12e>
 80077d6:	9209      	str	r2, [sp, #36]	; 0x24
 80077d8:	e7c3      	b.n	8007762 <_svfiprintf_r+0x12e>
 80077da:	4342      	muls	r2, r0
 80077dc:	0035      	movs	r5, r6
 80077de:	2301      	movs	r3, #1
 80077e0:	1852      	adds	r2, r2, r1
 80077e2:	e7f1      	b.n	80077c8 <_svfiprintf_r+0x194>
 80077e4:	ab07      	add	r3, sp, #28
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	003a      	movs	r2, r7
 80077ea:	0021      	movs	r1, r4
 80077ec:	4b10      	ldr	r3, [pc, #64]	; (8007830 <_svfiprintf_r+0x1fc>)
 80077ee:	9803      	ldr	r0, [sp, #12]
 80077f0:	f7fd ffae 	bl	8005750 <_printf_float>
 80077f4:	9004      	str	r0, [sp, #16]
 80077f6:	9b04      	ldr	r3, [sp, #16]
 80077f8:	3301      	adds	r3, #1
 80077fa:	d1d3      	bne.n	80077a4 <_svfiprintf_r+0x170>
 80077fc:	89bb      	ldrh	r3, [r7, #12]
 80077fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007800:	065b      	lsls	r3, r3, #25
 8007802:	d400      	bmi.n	8007806 <_svfiprintf_r+0x1d2>
 8007804:	e72d      	b.n	8007662 <_svfiprintf_r+0x2e>
 8007806:	2001      	movs	r0, #1
 8007808:	4240      	negs	r0, r0
 800780a:	e72a      	b.n	8007662 <_svfiprintf_r+0x2e>
 800780c:	ab07      	add	r3, sp, #28
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	003a      	movs	r2, r7
 8007812:	0021      	movs	r1, r4
 8007814:	4b06      	ldr	r3, [pc, #24]	; (8007830 <_svfiprintf_r+0x1fc>)
 8007816:	9803      	ldr	r0, [sp, #12]
 8007818:	f7fe fa58 	bl	8005ccc <_printf_i>
 800781c:	e7ea      	b.n	80077f4 <_svfiprintf_r+0x1c0>
 800781e:	46c0      	nop			; (mov r8, r8)
 8007820:	080087a4 	.word	0x080087a4
 8007824:	080087aa 	.word	0x080087aa
 8007828:	080087ae 	.word	0x080087ae
 800782c:	08005751 	.word	0x08005751
 8007830:	08007571 	.word	0x08007571

08007834 <_sbrk_r>:
 8007834:	2300      	movs	r3, #0
 8007836:	b570      	push	{r4, r5, r6, lr}
 8007838:	4d06      	ldr	r5, [pc, #24]	; (8007854 <_sbrk_r+0x20>)
 800783a:	0004      	movs	r4, r0
 800783c:	0008      	movs	r0, r1
 800783e:	602b      	str	r3, [r5, #0]
 8007840:	f7fb fa8c 	bl	8002d5c <_sbrk>
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	d103      	bne.n	8007850 <_sbrk_r+0x1c>
 8007848:	682b      	ldr	r3, [r5, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d000      	beq.n	8007850 <_sbrk_r+0x1c>
 800784e:	6023      	str	r3, [r4, #0]
 8007850:	bd70      	pop	{r4, r5, r6, pc}
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	20000304 	.word	0x20000304

08007858 <__assert_func>:
 8007858:	b530      	push	{r4, r5, lr}
 800785a:	0014      	movs	r4, r2
 800785c:	001a      	movs	r2, r3
 800785e:	4b09      	ldr	r3, [pc, #36]	; (8007884 <__assert_func+0x2c>)
 8007860:	0005      	movs	r5, r0
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	b085      	sub	sp, #20
 8007866:	68d8      	ldr	r0, [r3, #12]
 8007868:	4b07      	ldr	r3, [pc, #28]	; (8007888 <__assert_func+0x30>)
 800786a:	2c00      	cmp	r4, #0
 800786c:	d101      	bne.n	8007872 <__assert_func+0x1a>
 800786e:	4b07      	ldr	r3, [pc, #28]	; (800788c <__assert_func+0x34>)
 8007870:	001c      	movs	r4, r3
 8007872:	9301      	str	r3, [sp, #4]
 8007874:	9100      	str	r1, [sp, #0]
 8007876:	002b      	movs	r3, r5
 8007878:	4905      	ldr	r1, [pc, #20]	; (8007890 <__assert_func+0x38>)
 800787a:	9402      	str	r4, [sp, #8]
 800787c:	f000 f80a 	bl	8007894 <fiprintf>
 8007880:	f000 fab2 	bl	8007de8 <abort>
 8007884:	2000000c 	.word	0x2000000c
 8007888:	080087b5 	.word	0x080087b5
 800788c:	080087f0 	.word	0x080087f0
 8007890:	080087c2 	.word	0x080087c2

08007894 <fiprintf>:
 8007894:	b40e      	push	{r1, r2, r3}
 8007896:	b503      	push	{r0, r1, lr}
 8007898:	0001      	movs	r1, r0
 800789a:	ab03      	add	r3, sp, #12
 800789c:	4804      	ldr	r0, [pc, #16]	; (80078b0 <fiprintf+0x1c>)
 800789e:	cb04      	ldmia	r3!, {r2}
 80078a0:	6800      	ldr	r0, [r0, #0]
 80078a2:	9301      	str	r3, [sp, #4]
 80078a4:	f000 f88a 	bl	80079bc <_vfiprintf_r>
 80078a8:	b002      	add	sp, #8
 80078aa:	bc08      	pop	{r3}
 80078ac:	b003      	add	sp, #12
 80078ae:	4718      	bx	r3
 80078b0:	2000000c 	.word	0x2000000c

080078b4 <__ascii_mbtowc>:
 80078b4:	b082      	sub	sp, #8
 80078b6:	2900      	cmp	r1, #0
 80078b8:	d100      	bne.n	80078bc <__ascii_mbtowc+0x8>
 80078ba:	a901      	add	r1, sp, #4
 80078bc:	1e10      	subs	r0, r2, #0
 80078be:	d006      	beq.n	80078ce <__ascii_mbtowc+0x1a>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d006      	beq.n	80078d2 <__ascii_mbtowc+0x1e>
 80078c4:	7813      	ldrb	r3, [r2, #0]
 80078c6:	600b      	str	r3, [r1, #0]
 80078c8:	7810      	ldrb	r0, [r2, #0]
 80078ca:	1e43      	subs	r3, r0, #1
 80078cc:	4198      	sbcs	r0, r3
 80078ce:	b002      	add	sp, #8
 80078d0:	4770      	bx	lr
 80078d2:	2002      	movs	r0, #2
 80078d4:	4240      	negs	r0, r0
 80078d6:	e7fa      	b.n	80078ce <__ascii_mbtowc+0x1a>

080078d8 <memmove>:
 80078d8:	b510      	push	{r4, lr}
 80078da:	4288      	cmp	r0, r1
 80078dc:	d902      	bls.n	80078e4 <memmove+0xc>
 80078de:	188b      	adds	r3, r1, r2
 80078e0:	4298      	cmp	r0, r3
 80078e2:	d303      	bcc.n	80078ec <memmove+0x14>
 80078e4:	2300      	movs	r3, #0
 80078e6:	e007      	b.n	80078f8 <memmove+0x20>
 80078e8:	5c8b      	ldrb	r3, [r1, r2]
 80078ea:	5483      	strb	r3, [r0, r2]
 80078ec:	3a01      	subs	r2, #1
 80078ee:	d2fb      	bcs.n	80078e8 <memmove+0x10>
 80078f0:	bd10      	pop	{r4, pc}
 80078f2:	5ccc      	ldrb	r4, [r1, r3]
 80078f4:	54c4      	strb	r4, [r0, r3]
 80078f6:	3301      	adds	r3, #1
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d1fa      	bne.n	80078f2 <memmove+0x1a>
 80078fc:	e7f8      	b.n	80078f0 <memmove+0x18>
	...

08007900 <__malloc_lock>:
 8007900:	b510      	push	{r4, lr}
 8007902:	4802      	ldr	r0, [pc, #8]	; (800790c <__malloc_lock+0xc>)
 8007904:	f000 fc47 	bl	8008196 <__retarget_lock_acquire_recursive>
 8007908:	bd10      	pop	{r4, pc}
 800790a:	46c0      	nop			; (mov r8, r8)
 800790c:	2000030c 	.word	0x2000030c

08007910 <__malloc_unlock>:
 8007910:	b510      	push	{r4, lr}
 8007912:	4802      	ldr	r0, [pc, #8]	; (800791c <__malloc_unlock+0xc>)
 8007914:	f000 fc40 	bl	8008198 <__retarget_lock_release_recursive>
 8007918:	bd10      	pop	{r4, pc}
 800791a:	46c0      	nop			; (mov r8, r8)
 800791c:	2000030c 	.word	0x2000030c

08007920 <_realloc_r>:
 8007920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007922:	0007      	movs	r7, r0
 8007924:	000d      	movs	r5, r1
 8007926:	0016      	movs	r6, r2
 8007928:	2900      	cmp	r1, #0
 800792a:	d105      	bne.n	8007938 <_realloc_r+0x18>
 800792c:	0011      	movs	r1, r2
 800792e:	f7ff fdc1 	bl	80074b4 <_malloc_r>
 8007932:	0004      	movs	r4, r0
 8007934:	0020      	movs	r0, r4
 8007936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007938:	2a00      	cmp	r2, #0
 800793a:	d103      	bne.n	8007944 <_realloc_r+0x24>
 800793c:	f7ff fd70 	bl	8007420 <_free_r>
 8007940:	0034      	movs	r4, r6
 8007942:	e7f7      	b.n	8007934 <_realloc_r+0x14>
 8007944:	f000 fc96 	bl	8008274 <_malloc_usable_size_r>
 8007948:	002c      	movs	r4, r5
 800794a:	42b0      	cmp	r0, r6
 800794c:	d2f2      	bcs.n	8007934 <_realloc_r+0x14>
 800794e:	0031      	movs	r1, r6
 8007950:	0038      	movs	r0, r7
 8007952:	f7ff fdaf 	bl	80074b4 <_malloc_r>
 8007956:	1e04      	subs	r4, r0, #0
 8007958:	d0ec      	beq.n	8007934 <_realloc_r+0x14>
 800795a:	0029      	movs	r1, r5
 800795c:	0032      	movs	r2, r6
 800795e:	f7ff f9aa 	bl	8006cb6 <memcpy>
 8007962:	0029      	movs	r1, r5
 8007964:	0038      	movs	r0, r7
 8007966:	f7ff fd5b 	bl	8007420 <_free_r>
 800796a:	e7e3      	b.n	8007934 <_realloc_r+0x14>

0800796c <__sfputc_r>:
 800796c:	6893      	ldr	r3, [r2, #8]
 800796e:	b510      	push	{r4, lr}
 8007970:	3b01      	subs	r3, #1
 8007972:	6093      	str	r3, [r2, #8]
 8007974:	2b00      	cmp	r3, #0
 8007976:	da04      	bge.n	8007982 <__sfputc_r+0x16>
 8007978:	6994      	ldr	r4, [r2, #24]
 800797a:	42a3      	cmp	r3, r4
 800797c:	db07      	blt.n	800798e <__sfputc_r+0x22>
 800797e:	290a      	cmp	r1, #10
 8007980:	d005      	beq.n	800798e <__sfputc_r+0x22>
 8007982:	6813      	ldr	r3, [r2, #0]
 8007984:	1c58      	adds	r0, r3, #1
 8007986:	6010      	str	r0, [r2, #0]
 8007988:	7019      	strb	r1, [r3, #0]
 800798a:	0008      	movs	r0, r1
 800798c:	bd10      	pop	{r4, pc}
 800798e:	f000 f94f 	bl	8007c30 <__swbuf_r>
 8007992:	0001      	movs	r1, r0
 8007994:	e7f9      	b.n	800798a <__sfputc_r+0x1e>

08007996 <__sfputs_r>:
 8007996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007998:	0006      	movs	r6, r0
 800799a:	000f      	movs	r7, r1
 800799c:	0014      	movs	r4, r2
 800799e:	18d5      	adds	r5, r2, r3
 80079a0:	42ac      	cmp	r4, r5
 80079a2:	d101      	bne.n	80079a8 <__sfputs_r+0x12>
 80079a4:	2000      	movs	r0, #0
 80079a6:	e007      	b.n	80079b8 <__sfputs_r+0x22>
 80079a8:	7821      	ldrb	r1, [r4, #0]
 80079aa:	003a      	movs	r2, r7
 80079ac:	0030      	movs	r0, r6
 80079ae:	f7ff ffdd 	bl	800796c <__sfputc_r>
 80079b2:	3401      	adds	r4, #1
 80079b4:	1c43      	adds	r3, r0, #1
 80079b6:	d1f3      	bne.n	80079a0 <__sfputs_r+0xa>
 80079b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079bc <_vfiprintf_r>:
 80079bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079be:	b0a1      	sub	sp, #132	; 0x84
 80079c0:	0006      	movs	r6, r0
 80079c2:	000c      	movs	r4, r1
 80079c4:	001f      	movs	r7, r3
 80079c6:	9203      	str	r2, [sp, #12]
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d004      	beq.n	80079d6 <_vfiprintf_r+0x1a>
 80079cc:	6983      	ldr	r3, [r0, #24]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <_vfiprintf_r+0x1a>
 80079d2:	f000 fb3f 	bl	8008054 <__sinit>
 80079d6:	4b8e      	ldr	r3, [pc, #568]	; (8007c10 <_vfiprintf_r+0x254>)
 80079d8:	429c      	cmp	r4, r3
 80079da:	d11c      	bne.n	8007a16 <_vfiprintf_r+0x5a>
 80079dc:	6874      	ldr	r4, [r6, #4]
 80079de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079e0:	07db      	lsls	r3, r3, #31
 80079e2:	d405      	bmi.n	80079f0 <_vfiprintf_r+0x34>
 80079e4:	89a3      	ldrh	r3, [r4, #12]
 80079e6:	059b      	lsls	r3, r3, #22
 80079e8:	d402      	bmi.n	80079f0 <_vfiprintf_r+0x34>
 80079ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079ec:	f000 fbd3 	bl	8008196 <__retarget_lock_acquire_recursive>
 80079f0:	89a3      	ldrh	r3, [r4, #12]
 80079f2:	071b      	lsls	r3, r3, #28
 80079f4:	d502      	bpl.n	80079fc <_vfiprintf_r+0x40>
 80079f6:	6923      	ldr	r3, [r4, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d11d      	bne.n	8007a38 <_vfiprintf_r+0x7c>
 80079fc:	0021      	movs	r1, r4
 80079fe:	0030      	movs	r0, r6
 8007a00:	f000 f97a 	bl	8007cf8 <__swsetup_r>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d017      	beq.n	8007a38 <_vfiprintf_r+0x7c>
 8007a08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a0a:	07db      	lsls	r3, r3, #31
 8007a0c:	d50d      	bpl.n	8007a2a <_vfiprintf_r+0x6e>
 8007a0e:	2001      	movs	r0, #1
 8007a10:	4240      	negs	r0, r0
 8007a12:	b021      	add	sp, #132	; 0x84
 8007a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a16:	4b7f      	ldr	r3, [pc, #508]	; (8007c14 <_vfiprintf_r+0x258>)
 8007a18:	429c      	cmp	r4, r3
 8007a1a:	d101      	bne.n	8007a20 <_vfiprintf_r+0x64>
 8007a1c:	68b4      	ldr	r4, [r6, #8]
 8007a1e:	e7de      	b.n	80079de <_vfiprintf_r+0x22>
 8007a20:	4b7d      	ldr	r3, [pc, #500]	; (8007c18 <_vfiprintf_r+0x25c>)
 8007a22:	429c      	cmp	r4, r3
 8007a24:	d1db      	bne.n	80079de <_vfiprintf_r+0x22>
 8007a26:	68f4      	ldr	r4, [r6, #12]
 8007a28:	e7d9      	b.n	80079de <_vfiprintf_r+0x22>
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	059b      	lsls	r3, r3, #22
 8007a2e:	d4ee      	bmi.n	8007a0e <_vfiprintf_r+0x52>
 8007a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a32:	f000 fbb1 	bl	8008198 <__retarget_lock_release_recursive>
 8007a36:	e7ea      	b.n	8007a0e <_vfiprintf_r+0x52>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	ad08      	add	r5, sp, #32
 8007a3c:	616b      	str	r3, [r5, #20]
 8007a3e:	3320      	adds	r3, #32
 8007a40:	766b      	strb	r3, [r5, #25]
 8007a42:	3310      	adds	r3, #16
 8007a44:	76ab      	strb	r3, [r5, #26]
 8007a46:	9707      	str	r7, [sp, #28]
 8007a48:	9f03      	ldr	r7, [sp, #12]
 8007a4a:	783b      	ldrb	r3, [r7, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d001      	beq.n	8007a54 <_vfiprintf_r+0x98>
 8007a50:	2b25      	cmp	r3, #37	; 0x25
 8007a52:	d14e      	bne.n	8007af2 <_vfiprintf_r+0x136>
 8007a54:	9b03      	ldr	r3, [sp, #12]
 8007a56:	1afb      	subs	r3, r7, r3
 8007a58:	9305      	str	r3, [sp, #20]
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	429f      	cmp	r7, r3
 8007a5e:	d00d      	beq.n	8007a7c <_vfiprintf_r+0xc0>
 8007a60:	9b05      	ldr	r3, [sp, #20]
 8007a62:	0021      	movs	r1, r4
 8007a64:	0030      	movs	r0, r6
 8007a66:	9a03      	ldr	r2, [sp, #12]
 8007a68:	f7ff ff95 	bl	8007996 <__sfputs_r>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d100      	bne.n	8007a72 <_vfiprintf_r+0xb6>
 8007a70:	e0b5      	b.n	8007bde <_vfiprintf_r+0x222>
 8007a72:	696a      	ldr	r2, [r5, #20]
 8007a74:	9b05      	ldr	r3, [sp, #20]
 8007a76:	4694      	mov	ip, r2
 8007a78:	4463      	add	r3, ip
 8007a7a:	616b      	str	r3, [r5, #20]
 8007a7c:	783b      	ldrb	r3, [r7, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d100      	bne.n	8007a84 <_vfiprintf_r+0xc8>
 8007a82:	e0ac      	b.n	8007bde <_vfiprintf_r+0x222>
 8007a84:	2201      	movs	r2, #1
 8007a86:	1c7b      	adds	r3, r7, #1
 8007a88:	9303      	str	r3, [sp, #12]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	4252      	negs	r2, r2
 8007a8e:	606a      	str	r2, [r5, #4]
 8007a90:	a904      	add	r1, sp, #16
 8007a92:	3254      	adds	r2, #84	; 0x54
 8007a94:	1852      	adds	r2, r2, r1
 8007a96:	602b      	str	r3, [r5, #0]
 8007a98:	60eb      	str	r3, [r5, #12]
 8007a9a:	60ab      	str	r3, [r5, #8]
 8007a9c:	7013      	strb	r3, [r2, #0]
 8007a9e:	65ab      	str	r3, [r5, #88]	; 0x58
 8007aa0:	9b03      	ldr	r3, [sp, #12]
 8007aa2:	2205      	movs	r2, #5
 8007aa4:	7819      	ldrb	r1, [r3, #0]
 8007aa6:	485d      	ldr	r0, [pc, #372]	; (8007c1c <_vfiprintf_r+0x260>)
 8007aa8:	f7ff f8fa 	bl	8006ca0 <memchr>
 8007aac:	9b03      	ldr	r3, [sp, #12]
 8007aae:	1c5f      	adds	r7, r3, #1
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	d120      	bne.n	8007af6 <_vfiprintf_r+0x13a>
 8007ab4:	682a      	ldr	r2, [r5, #0]
 8007ab6:	06d3      	lsls	r3, r2, #27
 8007ab8:	d504      	bpl.n	8007ac4 <_vfiprintf_r+0x108>
 8007aba:	2353      	movs	r3, #83	; 0x53
 8007abc:	a904      	add	r1, sp, #16
 8007abe:	185b      	adds	r3, r3, r1
 8007ac0:	2120      	movs	r1, #32
 8007ac2:	7019      	strb	r1, [r3, #0]
 8007ac4:	0713      	lsls	r3, r2, #28
 8007ac6:	d504      	bpl.n	8007ad2 <_vfiprintf_r+0x116>
 8007ac8:	2353      	movs	r3, #83	; 0x53
 8007aca:	a904      	add	r1, sp, #16
 8007acc:	185b      	adds	r3, r3, r1
 8007ace:	212b      	movs	r1, #43	; 0x2b
 8007ad0:	7019      	strb	r1, [r3, #0]
 8007ad2:	9b03      	ldr	r3, [sp, #12]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ad8:	d016      	beq.n	8007b08 <_vfiprintf_r+0x14c>
 8007ada:	2100      	movs	r1, #0
 8007adc:	68eb      	ldr	r3, [r5, #12]
 8007ade:	9f03      	ldr	r7, [sp, #12]
 8007ae0:	783a      	ldrb	r2, [r7, #0]
 8007ae2:	1c78      	adds	r0, r7, #1
 8007ae4:	3a30      	subs	r2, #48	; 0x30
 8007ae6:	4684      	mov	ip, r0
 8007ae8:	2a09      	cmp	r2, #9
 8007aea:	d94f      	bls.n	8007b8c <_vfiprintf_r+0x1d0>
 8007aec:	2900      	cmp	r1, #0
 8007aee:	d111      	bne.n	8007b14 <_vfiprintf_r+0x158>
 8007af0:	e017      	b.n	8007b22 <_vfiprintf_r+0x166>
 8007af2:	3701      	adds	r7, #1
 8007af4:	e7a9      	b.n	8007a4a <_vfiprintf_r+0x8e>
 8007af6:	4b49      	ldr	r3, [pc, #292]	; (8007c1c <_vfiprintf_r+0x260>)
 8007af8:	682a      	ldr	r2, [r5, #0]
 8007afa:	1ac0      	subs	r0, r0, r3
 8007afc:	2301      	movs	r3, #1
 8007afe:	4083      	lsls	r3, r0
 8007b00:	4313      	orrs	r3, r2
 8007b02:	602b      	str	r3, [r5, #0]
 8007b04:	9703      	str	r7, [sp, #12]
 8007b06:	e7cb      	b.n	8007aa0 <_vfiprintf_r+0xe4>
 8007b08:	9b07      	ldr	r3, [sp, #28]
 8007b0a:	1d19      	adds	r1, r3, #4
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	9107      	str	r1, [sp, #28]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	db01      	blt.n	8007b18 <_vfiprintf_r+0x15c>
 8007b14:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b16:	e004      	b.n	8007b22 <_vfiprintf_r+0x166>
 8007b18:	425b      	negs	r3, r3
 8007b1a:	60eb      	str	r3, [r5, #12]
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	602b      	str	r3, [r5, #0]
 8007b22:	783b      	ldrb	r3, [r7, #0]
 8007b24:	2b2e      	cmp	r3, #46	; 0x2e
 8007b26:	d10a      	bne.n	8007b3e <_vfiprintf_r+0x182>
 8007b28:	787b      	ldrb	r3, [r7, #1]
 8007b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b2c:	d137      	bne.n	8007b9e <_vfiprintf_r+0x1e2>
 8007b2e:	9b07      	ldr	r3, [sp, #28]
 8007b30:	3702      	adds	r7, #2
 8007b32:	1d1a      	adds	r2, r3, #4
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	9207      	str	r2, [sp, #28]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	db2d      	blt.n	8007b98 <_vfiprintf_r+0x1dc>
 8007b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b3e:	2203      	movs	r2, #3
 8007b40:	7839      	ldrb	r1, [r7, #0]
 8007b42:	4837      	ldr	r0, [pc, #220]	; (8007c20 <_vfiprintf_r+0x264>)
 8007b44:	f7ff f8ac 	bl	8006ca0 <memchr>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d007      	beq.n	8007b5c <_vfiprintf_r+0x1a0>
 8007b4c:	4b34      	ldr	r3, [pc, #208]	; (8007c20 <_vfiprintf_r+0x264>)
 8007b4e:	682a      	ldr	r2, [r5, #0]
 8007b50:	1ac0      	subs	r0, r0, r3
 8007b52:	2340      	movs	r3, #64	; 0x40
 8007b54:	4083      	lsls	r3, r0
 8007b56:	4313      	orrs	r3, r2
 8007b58:	3701      	adds	r7, #1
 8007b5a:	602b      	str	r3, [r5, #0]
 8007b5c:	7839      	ldrb	r1, [r7, #0]
 8007b5e:	1c7b      	adds	r3, r7, #1
 8007b60:	2206      	movs	r2, #6
 8007b62:	4830      	ldr	r0, [pc, #192]	; (8007c24 <_vfiprintf_r+0x268>)
 8007b64:	9303      	str	r3, [sp, #12]
 8007b66:	7629      	strb	r1, [r5, #24]
 8007b68:	f7ff f89a 	bl	8006ca0 <memchr>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	d045      	beq.n	8007bfc <_vfiprintf_r+0x240>
 8007b70:	4b2d      	ldr	r3, [pc, #180]	; (8007c28 <_vfiprintf_r+0x26c>)
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d127      	bne.n	8007bc6 <_vfiprintf_r+0x20a>
 8007b76:	2207      	movs	r2, #7
 8007b78:	9b07      	ldr	r3, [sp, #28]
 8007b7a:	3307      	adds	r3, #7
 8007b7c:	4393      	bics	r3, r2
 8007b7e:	3308      	adds	r3, #8
 8007b80:	9307      	str	r3, [sp, #28]
 8007b82:	696b      	ldr	r3, [r5, #20]
 8007b84:	9a04      	ldr	r2, [sp, #16]
 8007b86:	189b      	adds	r3, r3, r2
 8007b88:	616b      	str	r3, [r5, #20]
 8007b8a:	e75d      	b.n	8007a48 <_vfiprintf_r+0x8c>
 8007b8c:	210a      	movs	r1, #10
 8007b8e:	434b      	muls	r3, r1
 8007b90:	4667      	mov	r7, ip
 8007b92:	189b      	adds	r3, r3, r2
 8007b94:	3909      	subs	r1, #9
 8007b96:	e7a3      	b.n	8007ae0 <_vfiprintf_r+0x124>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	425b      	negs	r3, r3
 8007b9c:	e7ce      	b.n	8007b3c <_vfiprintf_r+0x180>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	001a      	movs	r2, r3
 8007ba2:	3701      	adds	r7, #1
 8007ba4:	606b      	str	r3, [r5, #4]
 8007ba6:	7839      	ldrb	r1, [r7, #0]
 8007ba8:	1c78      	adds	r0, r7, #1
 8007baa:	3930      	subs	r1, #48	; 0x30
 8007bac:	4684      	mov	ip, r0
 8007bae:	2909      	cmp	r1, #9
 8007bb0:	d903      	bls.n	8007bba <_vfiprintf_r+0x1fe>
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0c3      	beq.n	8007b3e <_vfiprintf_r+0x182>
 8007bb6:	9209      	str	r2, [sp, #36]	; 0x24
 8007bb8:	e7c1      	b.n	8007b3e <_vfiprintf_r+0x182>
 8007bba:	230a      	movs	r3, #10
 8007bbc:	435a      	muls	r2, r3
 8007bbe:	4667      	mov	r7, ip
 8007bc0:	1852      	adds	r2, r2, r1
 8007bc2:	3b09      	subs	r3, #9
 8007bc4:	e7ef      	b.n	8007ba6 <_vfiprintf_r+0x1ea>
 8007bc6:	ab07      	add	r3, sp, #28
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	0022      	movs	r2, r4
 8007bcc:	0029      	movs	r1, r5
 8007bce:	0030      	movs	r0, r6
 8007bd0:	4b16      	ldr	r3, [pc, #88]	; (8007c2c <_vfiprintf_r+0x270>)
 8007bd2:	f7fd fdbd 	bl	8005750 <_printf_float>
 8007bd6:	9004      	str	r0, [sp, #16]
 8007bd8:	9b04      	ldr	r3, [sp, #16]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	d1d1      	bne.n	8007b82 <_vfiprintf_r+0x1c6>
 8007bde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007be0:	07db      	lsls	r3, r3, #31
 8007be2:	d405      	bmi.n	8007bf0 <_vfiprintf_r+0x234>
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	059b      	lsls	r3, r3, #22
 8007be8:	d402      	bmi.n	8007bf0 <_vfiprintf_r+0x234>
 8007bea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bec:	f000 fad4 	bl	8008198 <__retarget_lock_release_recursive>
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	065b      	lsls	r3, r3, #25
 8007bf4:	d500      	bpl.n	8007bf8 <_vfiprintf_r+0x23c>
 8007bf6:	e70a      	b.n	8007a0e <_vfiprintf_r+0x52>
 8007bf8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007bfa:	e70a      	b.n	8007a12 <_vfiprintf_r+0x56>
 8007bfc:	ab07      	add	r3, sp, #28
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	0022      	movs	r2, r4
 8007c02:	0029      	movs	r1, r5
 8007c04:	0030      	movs	r0, r6
 8007c06:	4b09      	ldr	r3, [pc, #36]	; (8007c2c <_vfiprintf_r+0x270>)
 8007c08:	f7fe f860 	bl	8005ccc <_printf_i>
 8007c0c:	e7e3      	b.n	8007bd6 <_vfiprintf_r+0x21a>
 8007c0e:	46c0      	nop			; (mov r8, r8)
 8007c10:	0800891c 	.word	0x0800891c
 8007c14:	0800893c 	.word	0x0800893c
 8007c18:	080088fc 	.word	0x080088fc
 8007c1c:	080087a4 	.word	0x080087a4
 8007c20:	080087aa 	.word	0x080087aa
 8007c24:	080087ae 	.word	0x080087ae
 8007c28:	08005751 	.word	0x08005751
 8007c2c:	08007997 	.word	0x08007997

08007c30 <__swbuf_r>:
 8007c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c32:	0005      	movs	r5, r0
 8007c34:	000e      	movs	r6, r1
 8007c36:	0014      	movs	r4, r2
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	d004      	beq.n	8007c46 <__swbuf_r+0x16>
 8007c3c:	6983      	ldr	r3, [r0, #24]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <__swbuf_r+0x16>
 8007c42:	f000 fa07 	bl	8008054 <__sinit>
 8007c46:	4b22      	ldr	r3, [pc, #136]	; (8007cd0 <__swbuf_r+0xa0>)
 8007c48:	429c      	cmp	r4, r3
 8007c4a:	d12e      	bne.n	8007caa <__swbuf_r+0x7a>
 8007c4c:	686c      	ldr	r4, [r5, #4]
 8007c4e:	69a3      	ldr	r3, [r4, #24]
 8007c50:	60a3      	str	r3, [r4, #8]
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	071b      	lsls	r3, r3, #28
 8007c56:	d532      	bpl.n	8007cbe <__swbuf_r+0x8e>
 8007c58:	6923      	ldr	r3, [r4, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d02f      	beq.n	8007cbe <__swbuf_r+0x8e>
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	6922      	ldr	r2, [r4, #16]
 8007c62:	b2f7      	uxtb	r7, r6
 8007c64:	1a98      	subs	r0, r3, r2
 8007c66:	6963      	ldr	r3, [r4, #20]
 8007c68:	b2f6      	uxtb	r6, r6
 8007c6a:	4283      	cmp	r3, r0
 8007c6c:	dc05      	bgt.n	8007c7a <__swbuf_r+0x4a>
 8007c6e:	0021      	movs	r1, r4
 8007c70:	0028      	movs	r0, r5
 8007c72:	f000 f94d 	bl	8007f10 <_fflush_r>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	d127      	bne.n	8007cca <__swbuf_r+0x9a>
 8007c7a:	68a3      	ldr	r3, [r4, #8]
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	60a3      	str	r3, [r4, #8]
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	6022      	str	r2, [r4, #0]
 8007c88:	701f      	strb	r7, [r3, #0]
 8007c8a:	6963      	ldr	r3, [r4, #20]
 8007c8c:	4283      	cmp	r3, r0
 8007c8e:	d004      	beq.n	8007c9a <__swbuf_r+0x6a>
 8007c90:	89a3      	ldrh	r3, [r4, #12]
 8007c92:	07db      	lsls	r3, r3, #31
 8007c94:	d507      	bpl.n	8007ca6 <__swbuf_r+0x76>
 8007c96:	2e0a      	cmp	r6, #10
 8007c98:	d105      	bne.n	8007ca6 <__swbuf_r+0x76>
 8007c9a:	0021      	movs	r1, r4
 8007c9c:	0028      	movs	r0, r5
 8007c9e:	f000 f937 	bl	8007f10 <_fflush_r>
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	d111      	bne.n	8007cca <__swbuf_r+0x9a>
 8007ca6:	0030      	movs	r0, r6
 8007ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007caa:	4b0a      	ldr	r3, [pc, #40]	; (8007cd4 <__swbuf_r+0xa4>)
 8007cac:	429c      	cmp	r4, r3
 8007cae:	d101      	bne.n	8007cb4 <__swbuf_r+0x84>
 8007cb0:	68ac      	ldr	r4, [r5, #8]
 8007cb2:	e7cc      	b.n	8007c4e <__swbuf_r+0x1e>
 8007cb4:	4b08      	ldr	r3, [pc, #32]	; (8007cd8 <__swbuf_r+0xa8>)
 8007cb6:	429c      	cmp	r4, r3
 8007cb8:	d1c9      	bne.n	8007c4e <__swbuf_r+0x1e>
 8007cba:	68ec      	ldr	r4, [r5, #12]
 8007cbc:	e7c7      	b.n	8007c4e <__swbuf_r+0x1e>
 8007cbe:	0021      	movs	r1, r4
 8007cc0:	0028      	movs	r0, r5
 8007cc2:	f000 f819 	bl	8007cf8 <__swsetup_r>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d0c9      	beq.n	8007c5e <__swbuf_r+0x2e>
 8007cca:	2601      	movs	r6, #1
 8007ccc:	4276      	negs	r6, r6
 8007cce:	e7ea      	b.n	8007ca6 <__swbuf_r+0x76>
 8007cd0:	0800891c 	.word	0x0800891c
 8007cd4:	0800893c 	.word	0x0800893c
 8007cd8:	080088fc 	.word	0x080088fc

08007cdc <__ascii_wctomb>:
 8007cdc:	0003      	movs	r3, r0
 8007cde:	1e08      	subs	r0, r1, #0
 8007ce0:	d005      	beq.n	8007cee <__ascii_wctomb+0x12>
 8007ce2:	2aff      	cmp	r2, #255	; 0xff
 8007ce4:	d904      	bls.n	8007cf0 <__ascii_wctomb+0x14>
 8007ce6:	228a      	movs	r2, #138	; 0x8a
 8007ce8:	2001      	movs	r0, #1
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	4240      	negs	r0, r0
 8007cee:	4770      	bx	lr
 8007cf0:	2001      	movs	r0, #1
 8007cf2:	700a      	strb	r2, [r1, #0]
 8007cf4:	e7fb      	b.n	8007cee <__ascii_wctomb+0x12>
	...

08007cf8 <__swsetup_r>:
 8007cf8:	4b37      	ldr	r3, [pc, #220]	; (8007dd8 <__swsetup_r+0xe0>)
 8007cfa:	b570      	push	{r4, r5, r6, lr}
 8007cfc:	681d      	ldr	r5, [r3, #0]
 8007cfe:	0006      	movs	r6, r0
 8007d00:	000c      	movs	r4, r1
 8007d02:	2d00      	cmp	r5, #0
 8007d04:	d005      	beq.n	8007d12 <__swsetup_r+0x1a>
 8007d06:	69ab      	ldr	r3, [r5, #24]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d102      	bne.n	8007d12 <__swsetup_r+0x1a>
 8007d0c:	0028      	movs	r0, r5
 8007d0e:	f000 f9a1 	bl	8008054 <__sinit>
 8007d12:	4b32      	ldr	r3, [pc, #200]	; (8007ddc <__swsetup_r+0xe4>)
 8007d14:	429c      	cmp	r4, r3
 8007d16:	d10f      	bne.n	8007d38 <__swsetup_r+0x40>
 8007d18:	686c      	ldr	r4, [r5, #4]
 8007d1a:	230c      	movs	r3, #12
 8007d1c:	5ee2      	ldrsh	r2, [r4, r3]
 8007d1e:	b293      	uxth	r3, r2
 8007d20:	0711      	lsls	r1, r2, #28
 8007d22:	d42d      	bmi.n	8007d80 <__swsetup_r+0x88>
 8007d24:	06d9      	lsls	r1, r3, #27
 8007d26:	d411      	bmi.n	8007d4c <__swsetup_r+0x54>
 8007d28:	2309      	movs	r3, #9
 8007d2a:	2001      	movs	r0, #1
 8007d2c:	6033      	str	r3, [r6, #0]
 8007d2e:	3337      	adds	r3, #55	; 0x37
 8007d30:	4313      	orrs	r3, r2
 8007d32:	81a3      	strh	r3, [r4, #12]
 8007d34:	4240      	negs	r0, r0
 8007d36:	bd70      	pop	{r4, r5, r6, pc}
 8007d38:	4b29      	ldr	r3, [pc, #164]	; (8007de0 <__swsetup_r+0xe8>)
 8007d3a:	429c      	cmp	r4, r3
 8007d3c:	d101      	bne.n	8007d42 <__swsetup_r+0x4a>
 8007d3e:	68ac      	ldr	r4, [r5, #8]
 8007d40:	e7eb      	b.n	8007d1a <__swsetup_r+0x22>
 8007d42:	4b28      	ldr	r3, [pc, #160]	; (8007de4 <__swsetup_r+0xec>)
 8007d44:	429c      	cmp	r4, r3
 8007d46:	d1e8      	bne.n	8007d1a <__swsetup_r+0x22>
 8007d48:	68ec      	ldr	r4, [r5, #12]
 8007d4a:	e7e6      	b.n	8007d1a <__swsetup_r+0x22>
 8007d4c:	075b      	lsls	r3, r3, #29
 8007d4e:	d513      	bpl.n	8007d78 <__swsetup_r+0x80>
 8007d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d52:	2900      	cmp	r1, #0
 8007d54:	d008      	beq.n	8007d68 <__swsetup_r+0x70>
 8007d56:	0023      	movs	r3, r4
 8007d58:	3344      	adds	r3, #68	; 0x44
 8007d5a:	4299      	cmp	r1, r3
 8007d5c:	d002      	beq.n	8007d64 <__swsetup_r+0x6c>
 8007d5e:	0030      	movs	r0, r6
 8007d60:	f7ff fb5e 	bl	8007420 <_free_r>
 8007d64:	2300      	movs	r3, #0
 8007d66:	6363      	str	r3, [r4, #52]	; 0x34
 8007d68:	2224      	movs	r2, #36	; 0x24
 8007d6a:	89a3      	ldrh	r3, [r4, #12]
 8007d6c:	4393      	bics	r3, r2
 8007d6e:	81a3      	strh	r3, [r4, #12]
 8007d70:	2300      	movs	r3, #0
 8007d72:	6063      	str	r3, [r4, #4]
 8007d74:	6923      	ldr	r3, [r4, #16]
 8007d76:	6023      	str	r3, [r4, #0]
 8007d78:	2308      	movs	r3, #8
 8007d7a:	89a2      	ldrh	r2, [r4, #12]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	81a3      	strh	r3, [r4, #12]
 8007d80:	6923      	ldr	r3, [r4, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10b      	bne.n	8007d9e <__swsetup_r+0xa6>
 8007d86:	21a0      	movs	r1, #160	; 0xa0
 8007d88:	2280      	movs	r2, #128	; 0x80
 8007d8a:	89a3      	ldrh	r3, [r4, #12]
 8007d8c:	0089      	lsls	r1, r1, #2
 8007d8e:	0092      	lsls	r2, r2, #2
 8007d90:	400b      	ands	r3, r1
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d003      	beq.n	8007d9e <__swsetup_r+0xa6>
 8007d96:	0021      	movs	r1, r4
 8007d98:	0030      	movs	r0, r6
 8007d9a:	f000 fa27 	bl	80081ec <__smakebuf_r>
 8007d9e:	220c      	movs	r2, #12
 8007da0:	5ea3      	ldrsh	r3, [r4, r2]
 8007da2:	2001      	movs	r0, #1
 8007da4:	001a      	movs	r2, r3
 8007da6:	b299      	uxth	r1, r3
 8007da8:	4002      	ands	r2, r0
 8007daa:	4203      	tst	r3, r0
 8007dac:	d00f      	beq.n	8007dce <__swsetup_r+0xd6>
 8007dae:	2200      	movs	r2, #0
 8007db0:	60a2      	str	r2, [r4, #8]
 8007db2:	6962      	ldr	r2, [r4, #20]
 8007db4:	4252      	negs	r2, r2
 8007db6:	61a2      	str	r2, [r4, #24]
 8007db8:	2000      	movs	r0, #0
 8007dba:	6922      	ldr	r2, [r4, #16]
 8007dbc:	4282      	cmp	r2, r0
 8007dbe:	d1ba      	bne.n	8007d36 <__swsetup_r+0x3e>
 8007dc0:	060a      	lsls	r2, r1, #24
 8007dc2:	d5b8      	bpl.n	8007d36 <__swsetup_r+0x3e>
 8007dc4:	2240      	movs	r2, #64	; 0x40
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	81a3      	strh	r3, [r4, #12]
 8007dca:	3801      	subs	r0, #1
 8007dcc:	e7b3      	b.n	8007d36 <__swsetup_r+0x3e>
 8007dce:	0788      	lsls	r0, r1, #30
 8007dd0:	d400      	bmi.n	8007dd4 <__swsetup_r+0xdc>
 8007dd2:	6962      	ldr	r2, [r4, #20]
 8007dd4:	60a2      	str	r2, [r4, #8]
 8007dd6:	e7ef      	b.n	8007db8 <__swsetup_r+0xc0>
 8007dd8:	2000000c 	.word	0x2000000c
 8007ddc:	0800891c 	.word	0x0800891c
 8007de0:	0800893c 	.word	0x0800893c
 8007de4:	080088fc 	.word	0x080088fc

08007de8 <abort>:
 8007de8:	2006      	movs	r0, #6
 8007dea:	b510      	push	{r4, lr}
 8007dec:	f000 fa74 	bl	80082d8 <raise>
 8007df0:	2001      	movs	r0, #1
 8007df2:	f7fa ff41 	bl	8002c78 <_exit>
	...

08007df8 <__sflush_r>:
 8007df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dfa:	898b      	ldrh	r3, [r1, #12]
 8007dfc:	0005      	movs	r5, r0
 8007dfe:	000c      	movs	r4, r1
 8007e00:	071a      	lsls	r2, r3, #28
 8007e02:	d45f      	bmi.n	8007ec4 <__sflush_r+0xcc>
 8007e04:	684a      	ldr	r2, [r1, #4]
 8007e06:	2a00      	cmp	r2, #0
 8007e08:	dc04      	bgt.n	8007e14 <__sflush_r+0x1c>
 8007e0a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007e0c:	2a00      	cmp	r2, #0
 8007e0e:	dc01      	bgt.n	8007e14 <__sflush_r+0x1c>
 8007e10:	2000      	movs	r0, #0
 8007e12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e14:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007e16:	2f00      	cmp	r7, #0
 8007e18:	d0fa      	beq.n	8007e10 <__sflush_r+0x18>
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	2180      	movs	r1, #128	; 0x80
 8007e1e:	682e      	ldr	r6, [r5, #0]
 8007e20:	602a      	str	r2, [r5, #0]
 8007e22:	001a      	movs	r2, r3
 8007e24:	0149      	lsls	r1, r1, #5
 8007e26:	400a      	ands	r2, r1
 8007e28:	420b      	tst	r3, r1
 8007e2a:	d034      	beq.n	8007e96 <__sflush_r+0x9e>
 8007e2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e2e:	89a3      	ldrh	r3, [r4, #12]
 8007e30:	075b      	lsls	r3, r3, #29
 8007e32:	d506      	bpl.n	8007e42 <__sflush_r+0x4a>
 8007e34:	6863      	ldr	r3, [r4, #4]
 8007e36:	1ac0      	subs	r0, r0, r3
 8007e38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <__sflush_r+0x4a>
 8007e3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e40:	1ac0      	subs	r0, r0, r3
 8007e42:	0002      	movs	r2, r0
 8007e44:	6a21      	ldr	r1, [r4, #32]
 8007e46:	2300      	movs	r3, #0
 8007e48:	0028      	movs	r0, r5
 8007e4a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007e4c:	47b8      	blx	r7
 8007e4e:	89a1      	ldrh	r1, [r4, #12]
 8007e50:	1c43      	adds	r3, r0, #1
 8007e52:	d106      	bne.n	8007e62 <__sflush_r+0x6a>
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	2b1d      	cmp	r3, #29
 8007e58:	d831      	bhi.n	8007ebe <__sflush_r+0xc6>
 8007e5a:	4a2c      	ldr	r2, [pc, #176]	; (8007f0c <__sflush_r+0x114>)
 8007e5c:	40da      	lsrs	r2, r3
 8007e5e:	07d3      	lsls	r3, r2, #31
 8007e60:	d52d      	bpl.n	8007ebe <__sflush_r+0xc6>
 8007e62:	2300      	movs	r3, #0
 8007e64:	6063      	str	r3, [r4, #4]
 8007e66:	6923      	ldr	r3, [r4, #16]
 8007e68:	6023      	str	r3, [r4, #0]
 8007e6a:	04cb      	lsls	r3, r1, #19
 8007e6c:	d505      	bpl.n	8007e7a <__sflush_r+0x82>
 8007e6e:	1c43      	adds	r3, r0, #1
 8007e70:	d102      	bne.n	8007e78 <__sflush_r+0x80>
 8007e72:	682b      	ldr	r3, [r5, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d100      	bne.n	8007e7a <__sflush_r+0x82>
 8007e78:	6560      	str	r0, [r4, #84]	; 0x54
 8007e7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e7c:	602e      	str	r6, [r5, #0]
 8007e7e:	2900      	cmp	r1, #0
 8007e80:	d0c6      	beq.n	8007e10 <__sflush_r+0x18>
 8007e82:	0023      	movs	r3, r4
 8007e84:	3344      	adds	r3, #68	; 0x44
 8007e86:	4299      	cmp	r1, r3
 8007e88:	d002      	beq.n	8007e90 <__sflush_r+0x98>
 8007e8a:	0028      	movs	r0, r5
 8007e8c:	f7ff fac8 	bl	8007420 <_free_r>
 8007e90:	2000      	movs	r0, #0
 8007e92:	6360      	str	r0, [r4, #52]	; 0x34
 8007e94:	e7bd      	b.n	8007e12 <__sflush_r+0x1a>
 8007e96:	2301      	movs	r3, #1
 8007e98:	0028      	movs	r0, r5
 8007e9a:	6a21      	ldr	r1, [r4, #32]
 8007e9c:	47b8      	blx	r7
 8007e9e:	1c43      	adds	r3, r0, #1
 8007ea0:	d1c5      	bne.n	8007e2e <__sflush_r+0x36>
 8007ea2:	682b      	ldr	r3, [r5, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d0c2      	beq.n	8007e2e <__sflush_r+0x36>
 8007ea8:	2b1d      	cmp	r3, #29
 8007eaa:	d001      	beq.n	8007eb0 <__sflush_r+0xb8>
 8007eac:	2b16      	cmp	r3, #22
 8007eae:	d101      	bne.n	8007eb4 <__sflush_r+0xbc>
 8007eb0:	602e      	str	r6, [r5, #0]
 8007eb2:	e7ad      	b.n	8007e10 <__sflush_r+0x18>
 8007eb4:	2340      	movs	r3, #64	; 0x40
 8007eb6:	89a2      	ldrh	r2, [r4, #12]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	81a3      	strh	r3, [r4, #12]
 8007ebc:	e7a9      	b.n	8007e12 <__sflush_r+0x1a>
 8007ebe:	2340      	movs	r3, #64	; 0x40
 8007ec0:	430b      	orrs	r3, r1
 8007ec2:	e7fa      	b.n	8007eba <__sflush_r+0xc2>
 8007ec4:	690f      	ldr	r7, [r1, #16]
 8007ec6:	2f00      	cmp	r7, #0
 8007ec8:	d0a2      	beq.n	8007e10 <__sflush_r+0x18>
 8007eca:	680a      	ldr	r2, [r1, #0]
 8007ecc:	600f      	str	r7, [r1, #0]
 8007ece:	1bd2      	subs	r2, r2, r7
 8007ed0:	9201      	str	r2, [sp, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	079b      	lsls	r3, r3, #30
 8007ed6:	d100      	bne.n	8007eda <__sflush_r+0xe2>
 8007ed8:	694a      	ldr	r2, [r1, #20]
 8007eda:	60a2      	str	r2, [r4, #8]
 8007edc:	9b01      	ldr	r3, [sp, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	dc00      	bgt.n	8007ee4 <__sflush_r+0xec>
 8007ee2:	e795      	b.n	8007e10 <__sflush_r+0x18>
 8007ee4:	003a      	movs	r2, r7
 8007ee6:	0028      	movs	r0, r5
 8007ee8:	9b01      	ldr	r3, [sp, #4]
 8007eea:	6a21      	ldr	r1, [r4, #32]
 8007eec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007eee:	47b0      	blx	r6
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	dc06      	bgt.n	8007f02 <__sflush_r+0x10a>
 8007ef4:	2340      	movs	r3, #64	; 0x40
 8007ef6:	2001      	movs	r0, #1
 8007ef8:	89a2      	ldrh	r2, [r4, #12]
 8007efa:	4240      	negs	r0, r0
 8007efc:	4313      	orrs	r3, r2
 8007efe:	81a3      	strh	r3, [r4, #12]
 8007f00:	e787      	b.n	8007e12 <__sflush_r+0x1a>
 8007f02:	9b01      	ldr	r3, [sp, #4]
 8007f04:	183f      	adds	r7, r7, r0
 8007f06:	1a1b      	subs	r3, r3, r0
 8007f08:	9301      	str	r3, [sp, #4]
 8007f0a:	e7e7      	b.n	8007edc <__sflush_r+0xe4>
 8007f0c:	20400001 	.word	0x20400001

08007f10 <_fflush_r>:
 8007f10:	690b      	ldr	r3, [r1, #16]
 8007f12:	b570      	push	{r4, r5, r6, lr}
 8007f14:	0005      	movs	r5, r0
 8007f16:	000c      	movs	r4, r1
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d102      	bne.n	8007f22 <_fflush_r+0x12>
 8007f1c:	2500      	movs	r5, #0
 8007f1e:	0028      	movs	r0, r5
 8007f20:	bd70      	pop	{r4, r5, r6, pc}
 8007f22:	2800      	cmp	r0, #0
 8007f24:	d004      	beq.n	8007f30 <_fflush_r+0x20>
 8007f26:	6983      	ldr	r3, [r0, #24]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <_fflush_r+0x20>
 8007f2c:	f000 f892 	bl	8008054 <__sinit>
 8007f30:	4b14      	ldr	r3, [pc, #80]	; (8007f84 <_fflush_r+0x74>)
 8007f32:	429c      	cmp	r4, r3
 8007f34:	d11b      	bne.n	8007f6e <_fflush_r+0x5e>
 8007f36:	686c      	ldr	r4, [r5, #4]
 8007f38:	220c      	movs	r2, #12
 8007f3a:	5ea3      	ldrsh	r3, [r4, r2]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d0ed      	beq.n	8007f1c <_fflush_r+0xc>
 8007f40:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f42:	07d2      	lsls	r2, r2, #31
 8007f44:	d404      	bmi.n	8007f50 <_fflush_r+0x40>
 8007f46:	059b      	lsls	r3, r3, #22
 8007f48:	d402      	bmi.n	8007f50 <_fflush_r+0x40>
 8007f4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f4c:	f000 f923 	bl	8008196 <__retarget_lock_acquire_recursive>
 8007f50:	0028      	movs	r0, r5
 8007f52:	0021      	movs	r1, r4
 8007f54:	f7ff ff50 	bl	8007df8 <__sflush_r>
 8007f58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f5a:	0005      	movs	r5, r0
 8007f5c:	07db      	lsls	r3, r3, #31
 8007f5e:	d4de      	bmi.n	8007f1e <_fflush_r+0xe>
 8007f60:	89a3      	ldrh	r3, [r4, #12]
 8007f62:	059b      	lsls	r3, r3, #22
 8007f64:	d4db      	bmi.n	8007f1e <_fflush_r+0xe>
 8007f66:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f68:	f000 f916 	bl	8008198 <__retarget_lock_release_recursive>
 8007f6c:	e7d7      	b.n	8007f1e <_fflush_r+0xe>
 8007f6e:	4b06      	ldr	r3, [pc, #24]	; (8007f88 <_fflush_r+0x78>)
 8007f70:	429c      	cmp	r4, r3
 8007f72:	d101      	bne.n	8007f78 <_fflush_r+0x68>
 8007f74:	68ac      	ldr	r4, [r5, #8]
 8007f76:	e7df      	b.n	8007f38 <_fflush_r+0x28>
 8007f78:	4b04      	ldr	r3, [pc, #16]	; (8007f8c <_fflush_r+0x7c>)
 8007f7a:	429c      	cmp	r4, r3
 8007f7c:	d1dc      	bne.n	8007f38 <_fflush_r+0x28>
 8007f7e:	68ec      	ldr	r4, [r5, #12]
 8007f80:	e7da      	b.n	8007f38 <_fflush_r+0x28>
 8007f82:	46c0      	nop			; (mov r8, r8)
 8007f84:	0800891c 	.word	0x0800891c
 8007f88:	0800893c 	.word	0x0800893c
 8007f8c:	080088fc 	.word	0x080088fc

08007f90 <std>:
 8007f90:	2300      	movs	r3, #0
 8007f92:	b510      	push	{r4, lr}
 8007f94:	0004      	movs	r4, r0
 8007f96:	6003      	str	r3, [r0, #0]
 8007f98:	6043      	str	r3, [r0, #4]
 8007f9a:	6083      	str	r3, [r0, #8]
 8007f9c:	8181      	strh	r1, [r0, #12]
 8007f9e:	6643      	str	r3, [r0, #100]	; 0x64
 8007fa0:	0019      	movs	r1, r3
 8007fa2:	81c2      	strh	r2, [r0, #14]
 8007fa4:	6103      	str	r3, [r0, #16]
 8007fa6:	6143      	str	r3, [r0, #20]
 8007fa8:	6183      	str	r3, [r0, #24]
 8007faa:	2208      	movs	r2, #8
 8007fac:	305c      	adds	r0, #92	; 0x5c
 8007fae:	f7fd fb1d 	bl	80055ec <memset>
 8007fb2:	4b05      	ldr	r3, [pc, #20]	; (8007fc8 <std+0x38>)
 8007fb4:	6263      	str	r3, [r4, #36]	; 0x24
 8007fb6:	4b05      	ldr	r3, [pc, #20]	; (8007fcc <std+0x3c>)
 8007fb8:	6224      	str	r4, [r4, #32]
 8007fba:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fbc:	4b04      	ldr	r3, [pc, #16]	; (8007fd0 <std+0x40>)
 8007fbe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fc0:	4b04      	ldr	r3, [pc, #16]	; (8007fd4 <std+0x44>)
 8007fc2:	6323      	str	r3, [r4, #48]	; 0x30
 8007fc4:	bd10      	pop	{r4, pc}
 8007fc6:	46c0      	nop			; (mov r8, r8)
 8007fc8:	08008319 	.word	0x08008319
 8007fcc:	08008341 	.word	0x08008341
 8007fd0:	08008379 	.word	0x08008379
 8007fd4:	080083a5 	.word	0x080083a5

08007fd8 <_cleanup_r>:
 8007fd8:	b510      	push	{r4, lr}
 8007fda:	4902      	ldr	r1, [pc, #8]	; (8007fe4 <_cleanup_r+0xc>)
 8007fdc:	f000 f8ba 	bl	8008154 <_fwalk_reent>
 8007fe0:	bd10      	pop	{r4, pc}
 8007fe2:	46c0      	nop			; (mov r8, r8)
 8007fe4:	08007f11 	.word	0x08007f11

08007fe8 <__sfmoreglue>:
 8007fe8:	b570      	push	{r4, r5, r6, lr}
 8007fea:	2568      	movs	r5, #104	; 0x68
 8007fec:	1e4a      	subs	r2, r1, #1
 8007fee:	4355      	muls	r5, r2
 8007ff0:	000e      	movs	r6, r1
 8007ff2:	0029      	movs	r1, r5
 8007ff4:	3174      	adds	r1, #116	; 0x74
 8007ff6:	f7ff fa5d 	bl	80074b4 <_malloc_r>
 8007ffa:	1e04      	subs	r4, r0, #0
 8007ffc:	d008      	beq.n	8008010 <__sfmoreglue+0x28>
 8007ffe:	2100      	movs	r1, #0
 8008000:	002a      	movs	r2, r5
 8008002:	6001      	str	r1, [r0, #0]
 8008004:	6046      	str	r6, [r0, #4]
 8008006:	300c      	adds	r0, #12
 8008008:	60a0      	str	r0, [r4, #8]
 800800a:	3268      	adds	r2, #104	; 0x68
 800800c:	f7fd faee 	bl	80055ec <memset>
 8008010:	0020      	movs	r0, r4
 8008012:	bd70      	pop	{r4, r5, r6, pc}

08008014 <__sfp_lock_acquire>:
 8008014:	b510      	push	{r4, lr}
 8008016:	4802      	ldr	r0, [pc, #8]	; (8008020 <__sfp_lock_acquire+0xc>)
 8008018:	f000 f8bd 	bl	8008196 <__retarget_lock_acquire_recursive>
 800801c:	bd10      	pop	{r4, pc}
 800801e:	46c0      	nop			; (mov r8, r8)
 8008020:	20000310 	.word	0x20000310

08008024 <__sfp_lock_release>:
 8008024:	b510      	push	{r4, lr}
 8008026:	4802      	ldr	r0, [pc, #8]	; (8008030 <__sfp_lock_release+0xc>)
 8008028:	f000 f8b6 	bl	8008198 <__retarget_lock_release_recursive>
 800802c:	bd10      	pop	{r4, pc}
 800802e:	46c0      	nop			; (mov r8, r8)
 8008030:	20000310 	.word	0x20000310

08008034 <__sinit_lock_acquire>:
 8008034:	b510      	push	{r4, lr}
 8008036:	4802      	ldr	r0, [pc, #8]	; (8008040 <__sinit_lock_acquire+0xc>)
 8008038:	f000 f8ad 	bl	8008196 <__retarget_lock_acquire_recursive>
 800803c:	bd10      	pop	{r4, pc}
 800803e:	46c0      	nop			; (mov r8, r8)
 8008040:	2000030b 	.word	0x2000030b

08008044 <__sinit_lock_release>:
 8008044:	b510      	push	{r4, lr}
 8008046:	4802      	ldr	r0, [pc, #8]	; (8008050 <__sinit_lock_release+0xc>)
 8008048:	f000 f8a6 	bl	8008198 <__retarget_lock_release_recursive>
 800804c:	bd10      	pop	{r4, pc}
 800804e:	46c0      	nop			; (mov r8, r8)
 8008050:	2000030b 	.word	0x2000030b

08008054 <__sinit>:
 8008054:	b513      	push	{r0, r1, r4, lr}
 8008056:	0004      	movs	r4, r0
 8008058:	f7ff ffec 	bl	8008034 <__sinit_lock_acquire>
 800805c:	69a3      	ldr	r3, [r4, #24]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <__sinit+0x14>
 8008062:	f7ff ffef 	bl	8008044 <__sinit_lock_release>
 8008066:	bd13      	pop	{r0, r1, r4, pc}
 8008068:	64a3      	str	r3, [r4, #72]	; 0x48
 800806a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800806c:	6523      	str	r3, [r4, #80]	; 0x50
 800806e:	4b13      	ldr	r3, [pc, #76]	; (80080bc <__sinit+0x68>)
 8008070:	4a13      	ldr	r2, [pc, #76]	; (80080c0 <__sinit+0x6c>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	62a2      	str	r2, [r4, #40]	; 0x28
 8008076:	9301      	str	r3, [sp, #4]
 8008078:	42a3      	cmp	r3, r4
 800807a:	d101      	bne.n	8008080 <__sinit+0x2c>
 800807c:	2301      	movs	r3, #1
 800807e:	61a3      	str	r3, [r4, #24]
 8008080:	0020      	movs	r0, r4
 8008082:	f000 f81f 	bl	80080c4 <__sfp>
 8008086:	6060      	str	r0, [r4, #4]
 8008088:	0020      	movs	r0, r4
 800808a:	f000 f81b 	bl	80080c4 <__sfp>
 800808e:	60a0      	str	r0, [r4, #8]
 8008090:	0020      	movs	r0, r4
 8008092:	f000 f817 	bl	80080c4 <__sfp>
 8008096:	2200      	movs	r2, #0
 8008098:	2104      	movs	r1, #4
 800809a:	60e0      	str	r0, [r4, #12]
 800809c:	6860      	ldr	r0, [r4, #4]
 800809e:	f7ff ff77 	bl	8007f90 <std>
 80080a2:	2201      	movs	r2, #1
 80080a4:	2109      	movs	r1, #9
 80080a6:	68a0      	ldr	r0, [r4, #8]
 80080a8:	f7ff ff72 	bl	8007f90 <std>
 80080ac:	2202      	movs	r2, #2
 80080ae:	2112      	movs	r1, #18
 80080b0:	68e0      	ldr	r0, [r4, #12]
 80080b2:	f7ff ff6d 	bl	8007f90 <std>
 80080b6:	2301      	movs	r3, #1
 80080b8:	61a3      	str	r3, [r4, #24]
 80080ba:	e7d2      	b.n	8008062 <__sinit+0xe>
 80080bc:	0800857c 	.word	0x0800857c
 80080c0:	08007fd9 	.word	0x08007fd9

080080c4 <__sfp>:
 80080c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c6:	0007      	movs	r7, r0
 80080c8:	f7ff ffa4 	bl	8008014 <__sfp_lock_acquire>
 80080cc:	4b1f      	ldr	r3, [pc, #124]	; (800814c <__sfp+0x88>)
 80080ce:	681e      	ldr	r6, [r3, #0]
 80080d0:	69b3      	ldr	r3, [r6, #24]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d102      	bne.n	80080dc <__sfp+0x18>
 80080d6:	0030      	movs	r0, r6
 80080d8:	f7ff ffbc 	bl	8008054 <__sinit>
 80080dc:	3648      	adds	r6, #72	; 0x48
 80080de:	68b4      	ldr	r4, [r6, #8]
 80080e0:	6873      	ldr	r3, [r6, #4]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	d504      	bpl.n	80080f0 <__sfp+0x2c>
 80080e6:	6833      	ldr	r3, [r6, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d022      	beq.n	8008132 <__sfp+0x6e>
 80080ec:	6836      	ldr	r6, [r6, #0]
 80080ee:	e7f6      	b.n	80080de <__sfp+0x1a>
 80080f0:	220c      	movs	r2, #12
 80080f2:	5ea5      	ldrsh	r5, [r4, r2]
 80080f4:	2d00      	cmp	r5, #0
 80080f6:	d11a      	bne.n	800812e <__sfp+0x6a>
 80080f8:	0020      	movs	r0, r4
 80080fa:	4b15      	ldr	r3, [pc, #84]	; (8008150 <__sfp+0x8c>)
 80080fc:	3058      	adds	r0, #88	; 0x58
 80080fe:	60e3      	str	r3, [r4, #12]
 8008100:	6665      	str	r5, [r4, #100]	; 0x64
 8008102:	f000 f847 	bl	8008194 <__retarget_lock_init_recursive>
 8008106:	f7ff ff8d 	bl	8008024 <__sfp_lock_release>
 800810a:	0020      	movs	r0, r4
 800810c:	2208      	movs	r2, #8
 800810e:	0029      	movs	r1, r5
 8008110:	6025      	str	r5, [r4, #0]
 8008112:	60a5      	str	r5, [r4, #8]
 8008114:	6065      	str	r5, [r4, #4]
 8008116:	6125      	str	r5, [r4, #16]
 8008118:	6165      	str	r5, [r4, #20]
 800811a:	61a5      	str	r5, [r4, #24]
 800811c:	305c      	adds	r0, #92	; 0x5c
 800811e:	f7fd fa65 	bl	80055ec <memset>
 8008122:	6365      	str	r5, [r4, #52]	; 0x34
 8008124:	63a5      	str	r5, [r4, #56]	; 0x38
 8008126:	64a5      	str	r5, [r4, #72]	; 0x48
 8008128:	64e5      	str	r5, [r4, #76]	; 0x4c
 800812a:	0020      	movs	r0, r4
 800812c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800812e:	3468      	adds	r4, #104	; 0x68
 8008130:	e7d7      	b.n	80080e2 <__sfp+0x1e>
 8008132:	2104      	movs	r1, #4
 8008134:	0038      	movs	r0, r7
 8008136:	f7ff ff57 	bl	8007fe8 <__sfmoreglue>
 800813a:	1e04      	subs	r4, r0, #0
 800813c:	6030      	str	r0, [r6, #0]
 800813e:	d1d5      	bne.n	80080ec <__sfp+0x28>
 8008140:	f7ff ff70 	bl	8008024 <__sfp_lock_release>
 8008144:	230c      	movs	r3, #12
 8008146:	603b      	str	r3, [r7, #0]
 8008148:	e7ef      	b.n	800812a <__sfp+0x66>
 800814a:	46c0      	nop			; (mov r8, r8)
 800814c:	0800857c 	.word	0x0800857c
 8008150:	ffff0001 	.word	0xffff0001

08008154 <_fwalk_reent>:
 8008154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008156:	0004      	movs	r4, r0
 8008158:	0006      	movs	r6, r0
 800815a:	2700      	movs	r7, #0
 800815c:	9101      	str	r1, [sp, #4]
 800815e:	3448      	adds	r4, #72	; 0x48
 8008160:	6863      	ldr	r3, [r4, #4]
 8008162:	68a5      	ldr	r5, [r4, #8]
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	9b00      	ldr	r3, [sp, #0]
 8008168:	3b01      	subs	r3, #1
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	d504      	bpl.n	8008178 <_fwalk_reent+0x24>
 800816e:	6824      	ldr	r4, [r4, #0]
 8008170:	2c00      	cmp	r4, #0
 8008172:	d1f5      	bne.n	8008160 <_fwalk_reent+0xc>
 8008174:	0038      	movs	r0, r7
 8008176:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008178:	89ab      	ldrh	r3, [r5, #12]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d908      	bls.n	8008190 <_fwalk_reent+0x3c>
 800817e:	220e      	movs	r2, #14
 8008180:	5eab      	ldrsh	r3, [r5, r2]
 8008182:	3301      	adds	r3, #1
 8008184:	d004      	beq.n	8008190 <_fwalk_reent+0x3c>
 8008186:	0029      	movs	r1, r5
 8008188:	0030      	movs	r0, r6
 800818a:	9b01      	ldr	r3, [sp, #4]
 800818c:	4798      	blx	r3
 800818e:	4307      	orrs	r7, r0
 8008190:	3568      	adds	r5, #104	; 0x68
 8008192:	e7e8      	b.n	8008166 <_fwalk_reent+0x12>

08008194 <__retarget_lock_init_recursive>:
 8008194:	4770      	bx	lr

08008196 <__retarget_lock_acquire_recursive>:
 8008196:	4770      	bx	lr

08008198 <__retarget_lock_release_recursive>:
 8008198:	4770      	bx	lr
	...

0800819c <__swhatbuf_r>:
 800819c:	b570      	push	{r4, r5, r6, lr}
 800819e:	000e      	movs	r6, r1
 80081a0:	001d      	movs	r5, r3
 80081a2:	230e      	movs	r3, #14
 80081a4:	5ec9      	ldrsh	r1, [r1, r3]
 80081a6:	0014      	movs	r4, r2
 80081a8:	b096      	sub	sp, #88	; 0x58
 80081aa:	2900      	cmp	r1, #0
 80081ac:	da07      	bge.n	80081be <__swhatbuf_r+0x22>
 80081ae:	2300      	movs	r3, #0
 80081b0:	602b      	str	r3, [r5, #0]
 80081b2:	89b3      	ldrh	r3, [r6, #12]
 80081b4:	061b      	lsls	r3, r3, #24
 80081b6:	d411      	bmi.n	80081dc <__swhatbuf_r+0x40>
 80081b8:	2380      	movs	r3, #128	; 0x80
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	e00f      	b.n	80081de <__swhatbuf_r+0x42>
 80081be:	466a      	mov	r2, sp
 80081c0:	f000 f91c 	bl	80083fc <_fstat_r>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	dbf2      	blt.n	80081ae <__swhatbuf_r+0x12>
 80081c8:	23f0      	movs	r3, #240	; 0xf0
 80081ca:	9901      	ldr	r1, [sp, #4]
 80081cc:	021b      	lsls	r3, r3, #8
 80081ce:	4019      	ands	r1, r3
 80081d0:	4b05      	ldr	r3, [pc, #20]	; (80081e8 <__swhatbuf_r+0x4c>)
 80081d2:	18c9      	adds	r1, r1, r3
 80081d4:	424b      	negs	r3, r1
 80081d6:	4159      	adcs	r1, r3
 80081d8:	6029      	str	r1, [r5, #0]
 80081da:	e7ed      	b.n	80081b8 <__swhatbuf_r+0x1c>
 80081dc:	2340      	movs	r3, #64	; 0x40
 80081de:	2000      	movs	r0, #0
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	b016      	add	sp, #88	; 0x58
 80081e4:	bd70      	pop	{r4, r5, r6, pc}
 80081e6:	46c0      	nop			; (mov r8, r8)
 80081e8:	ffffe000 	.word	0xffffe000

080081ec <__smakebuf_r>:
 80081ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081ee:	2602      	movs	r6, #2
 80081f0:	898b      	ldrh	r3, [r1, #12]
 80081f2:	0005      	movs	r5, r0
 80081f4:	000c      	movs	r4, r1
 80081f6:	4233      	tst	r3, r6
 80081f8:	d006      	beq.n	8008208 <__smakebuf_r+0x1c>
 80081fa:	0023      	movs	r3, r4
 80081fc:	3347      	adds	r3, #71	; 0x47
 80081fe:	6023      	str	r3, [r4, #0]
 8008200:	6123      	str	r3, [r4, #16]
 8008202:	2301      	movs	r3, #1
 8008204:	6163      	str	r3, [r4, #20]
 8008206:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008208:	466a      	mov	r2, sp
 800820a:	ab01      	add	r3, sp, #4
 800820c:	f7ff ffc6 	bl	800819c <__swhatbuf_r>
 8008210:	9900      	ldr	r1, [sp, #0]
 8008212:	0007      	movs	r7, r0
 8008214:	0028      	movs	r0, r5
 8008216:	f7ff f94d 	bl	80074b4 <_malloc_r>
 800821a:	2800      	cmp	r0, #0
 800821c:	d108      	bne.n	8008230 <__smakebuf_r+0x44>
 800821e:	220c      	movs	r2, #12
 8008220:	5ea3      	ldrsh	r3, [r4, r2]
 8008222:	059a      	lsls	r2, r3, #22
 8008224:	d4ef      	bmi.n	8008206 <__smakebuf_r+0x1a>
 8008226:	2203      	movs	r2, #3
 8008228:	4393      	bics	r3, r2
 800822a:	431e      	orrs	r6, r3
 800822c:	81a6      	strh	r6, [r4, #12]
 800822e:	e7e4      	b.n	80081fa <__smakebuf_r+0xe>
 8008230:	4b0f      	ldr	r3, [pc, #60]	; (8008270 <__smakebuf_r+0x84>)
 8008232:	62ab      	str	r3, [r5, #40]	; 0x28
 8008234:	2380      	movs	r3, #128	; 0x80
 8008236:	89a2      	ldrh	r2, [r4, #12]
 8008238:	6020      	str	r0, [r4, #0]
 800823a:	4313      	orrs	r3, r2
 800823c:	81a3      	strh	r3, [r4, #12]
 800823e:	9b00      	ldr	r3, [sp, #0]
 8008240:	6120      	str	r0, [r4, #16]
 8008242:	6163      	str	r3, [r4, #20]
 8008244:	9b01      	ldr	r3, [sp, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00d      	beq.n	8008266 <__smakebuf_r+0x7a>
 800824a:	0028      	movs	r0, r5
 800824c:	230e      	movs	r3, #14
 800824e:	5ee1      	ldrsh	r1, [r4, r3]
 8008250:	f000 f8e6 	bl	8008420 <_isatty_r>
 8008254:	2800      	cmp	r0, #0
 8008256:	d006      	beq.n	8008266 <__smakebuf_r+0x7a>
 8008258:	2203      	movs	r2, #3
 800825a:	89a3      	ldrh	r3, [r4, #12]
 800825c:	4393      	bics	r3, r2
 800825e:	001a      	movs	r2, r3
 8008260:	2301      	movs	r3, #1
 8008262:	4313      	orrs	r3, r2
 8008264:	81a3      	strh	r3, [r4, #12]
 8008266:	89a0      	ldrh	r0, [r4, #12]
 8008268:	4307      	orrs	r7, r0
 800826a:	81a7      	strh	r7, [r4, #12]
 800826c:	e7cb      	b.n	8008206 <__smakebuf_r+0x1a>
 800826e:	46c0      	nop			; (mov r8, r8)
 8008270:	08007fd9 	.word	0x08007fd9

08008274 <_malloc_usable_size_r>:
 8008274:	1f0b      	subs	r3, r1, #4
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	1f18      	subs	r0, r3, #4
 800827a:	2b00      	cmp	r3, #0
 800827c:	da01      	bge.n	8008282 <_malloc_usable_size_r+0xe>
 800827e:	580b      	ldr	r3, [r1, r0]
 8008280:	18c0      	adds	r0, r0, r3
 8008282:	4770      	bx	lr

08008284 <_raise_r>:
 8008284:	b570      	push	{r4, r5, r6, lr}
 8008286:	0004      	movs	r4, r0
 8008288:	000d      	movs	r5, r1
 800828a:	291f      	cmp	r1, #31
 800828c:	d904      	bls.n	8008298 <_raise_r+0x14>
 800828e:	2316      	movs	r3, #22
 8008290:	6003      	str	r3, [r0, #0]
 8008292:	2001      	movs	r0, #1
 8008294:	4240      	negs	r0, r0
 8008296:	bd70      	pop	{r4, r5, r6, pc}
 8008298:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800829a:	2b00      	cmp	r3, #0
 800829c:	d004      	beq.n	80082a8 <_raise_r+0x24>
 800829e:	008a      	lsls	r2, r1, #2
 80082a0:	189b      	adds	r3, r3, r2
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	2a00      	cmp	r2, #0
 80082a6:	d108      	bne.n	80082ba <_raise_r+0x36>
 80082a8:	0020      	movs	r0, r4
 80082aa:	f000 f831 	bl	8008310 <_getpid_r>
 80082ae:	002a      	movs	r2, r5
 80082b0:	0001      	movs	r1, r0
 80082b2:	0020      	movs	r0, r4
 80082b4:	f000 f81a 	bl	80082ec <_kill_r>
 80082b8:	e7ed      	b.n	8008296 <_raise_r+0x12>
 80082ba:	2000      	movs	r0, #0
 80082bc:	2a01      	cmp	r2, #1
 80082be:	d0ea      	beq.n	8008296 <_raise_r+0x12>
 80082c0:	1c51      	adds	r1, r2, #1
 80082c2:	d103      	bne.n	80082cc <_raise_r+0x48>
 80082c4:	2316      	movs	r3, #22
 80082c6:	3001      	adds	r0, #1
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	e7e4      	b.n	8008296 <_raise_r+0x12>
 80082cc:	2400      	movs	r4, #0
 80082ce:	0028      	movs	r0, r5
 80082d0:	601c      	str	r4, [r3, #0]
 80082d2:	4790      	blx	r2
 80082d4:	0020      	movs	r0, r4
 80082d6:	e7de      	b.n	8008296 <_raise_r+0x12>

080082d8 <raise>:
 80082d8:	b510      	push	{r4, lr}
 80082da:	4b03      	ldr	r3, [pc, #12]	; (80082e8 <raise+0x10>)
 80082dc:	0001      	movs	r1, r0
 80082de:	6818      	ldr	r0, [r3, #0]
 80082e0:	f7ff ffd0 	bl	8008284 <_raise_r>
 80082e4:	bd10      	pop	{r4, pc}
 80082e6:	46c0      	nop			; (mov r8, r8)
 80082e8:	2000000c 	.word	0x2000000c

080082ec <_kill_r>:
 80082ec:	2300      	movs	r3, #0
 80082ee:	b570      	push	{r4, r5, r6, lr}
 80082f0:	4d06      	ldr	r5, [pc, #24]	; (800830c <_kill_r+0x20>)
 80082f2:	0004      	movs	r4, r0
 80082f4:	0008      	movs	r0, r1
 80082f6:	0011      	movs	r1, r2
 80082f8:	602b      	str	r3, [r5, #0]
 80082fa:	f7fa fcad 	bl	8002c58 <_kill>
 80082fe:	1c43      	adds	r3, r0, #1
 8008300:	d103      	bne.n	800830a <_kill_r+0x1e>
 8008302:	682b      	ldr	r3, [r5, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d000      	beq.n	800830a <_kill_r+0x1e>
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	bd70      	pop	{r4, r5, r6, pc}
 800830c:	20000304 	.word	0x20000304

08008310 <_getpid_r>:
 8008310:	b510      	push	{r4, lr}
 8008312:	f7fa fc9b 	bl	8002c4c <_getpid>
 8008316:	bd10      	pop	{r4, pc}

08008318 <__sread>:
 8008318:	b570      	push	{r4, r5, r6, lr}
 800831a:	000c      	movs	r4, r1
 800831c:	250e      	movs	r5, #14
 800831e:	5f49      	ldrsh	r1, [r1, r5]
 8008320:	f000 f8a4 	bl	800846c <_read_r>
 8008324:	2800      	cmp	r0, #0
 8008326:	db03      	blt.n	8008330 <__sread+0x18>
 8008328:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800832a:	181b      	adds	r3, r3, r0
 800832c:	6563      	str	r3, [r4, #84]	; 0x54
 800832e:	bd70      	pop	{r4, r5, r6, pc}
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	4a02      	ldr	r2, [pc, #8]	; (800833c <__sread+0x24>)
 8008334:	4013      	ands	r3, r2
 8008336:	81a3      	strh	r3, [r4, #12]
 8008338:	e7f9      	b.n	800832e <__sread+0x16>
 800833a:	46c0      	nop			; (mov r8, r8)
 800833c:	ffffefff 	.word	0xffffefff

08008340 <__swrite>:
 8008340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008342:	001f      	movs	r7, r3
 8008344:	898b      	ldrh	r3, [r1, #12]
 8008346:	0005      	movs	r5, r0
 8008348:	000c      	movs	r4, r1
 800834a:	0016      	movs	r6, r2
 800834c:	05db      	lsls	r3, r3, #23
 800834e:	d505      	bpl.n	800835c <__swrite+0x1c>
 8008350:	230e      	movs	r3, #14
 8008352:	5ec9      	ldrsh	r1, [r1, r3]
 8008354:	2200      	movs	r2, #0
 8008356:	2302      	movs	r3, #2
 8008358:	f000 f874 	bl	8008444 <_lseek_r>
 800835c:	89a3      	ldrh	r3, [r4, #12]
 800835e:	4a05      	ldr	r2, [pc, #20]	; (8008374 <__swrite+0x34>)
 8008360:	0028      	movs	r0, r5
 8008362:	4013      	ands	r3, r2
 8008364:	81a3      	strh	r3, [r4, #12]
 8008366:	0032      	movs	r2, r6
 8008368:	230e      	movs	r3, #14
 800836a:	5ee1      	ldrsh	r1, [r4, r3]
 800836c:	003b      	movs	r3, r7
 800836e:	f000 f81f 	bl	80083b0 <_write_r>
 8008372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008374:	ffffefff 	.word	0xffffefff

08008378 <__sseek>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	000c      	movs	r4, r1
 800837c:	250e      	movs	r5, #14
 800837e:	5f49      	ldrsh	r1, [r1, r5]
 8008380:	f000 f860 	bl	8008444 <_lseek_r>
 8008384:	89a3      	ldrh	r3, [r4, #12]
 8008386:	1c42      	adds	r2, r0, #1
 8008388:	d103      	bne.n	8008392 <__sseek+0x1a>
 800838a:	4a05      	ldr	r2, [pc, #20]	; (80083a0 <__sseek+0x28>)
 800838c:	4013      	ands	r3, r2
 800838e:	81a3      	strh	r3, [r4, #12]
 8008390:	bd70      	pop	{r4, r5, r6, pc}
 8008392:	2280      	movs	r2, #128	; 0x80
 8008394:	0152      	lsls	r2, r2, #5
 8008396:	4313      	orrs	r3, r2
 8008398:	81a3      	strh	r3, [r4, #12]
 800839a:	6560      	str	r0, [r4, #84]	; 0x54
 800839c:	e7f8      	b.n	8008390 <__sseek+0x18>
 800839e:	46c0      	nop			; (mov r8, r8)
 80083a0:	ffffefff 	.word	0xffffefff

080083a4 <__sclose>:
 80083a4:	b510      	push	{r4, lr}
 80083a6:	230e      	movs	r3, #14
 80083a8:	5ec9      	ldrsh	r1, [r1, r3]
 80083aa:	f000 f815 	bl	80083d8 <_close_r>
 80083ae:	bd10      	pop	{r4, pc}

080083b0 <_write_r>:
 80083b0:	b570      	push	{r4, r5, r6, lr}
 80083b2:	0004      	movs	r4, r0
 80083b4:	0008      	movs	r0, r1
 80083b6:	0011      	movs	r1, r2
 80083b8:	001a      	movs	r2, r3
 80083ba:	2300      	movs	r3, #0
 80083bc:	4d05      	ldr	r5, [pc, #20]	; (80083d4 <_write_r+0x24>)
 80083be:	602b      	str	r3, [r5, #0]
 80083c0:	f7fa fc83 	bl	8002cca <_write>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d103      	bne.n	80083d0 <_write_r+0x20>
 80083c8:	682b      	ldr	r3, [r5, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d000      	beq.n	80083d0 <_write_r+0x20>
 80083ce:	6023      	str	r3, [r4, #0]
 80083d0:	bd70      	pop	{r4, r5, r6, pc}
 80083d2:	46c0      	nop			; (mov r8, r8)
 80083d4:	20000304 	.word	0x20000304

080083d8 <_close_r>:
 80083d8:	2300      	movs	r3, #0
 80083da:	b570      	push	{r4, r5, r6, lr}
 80083dc:	4d06      	ldr	r5, [pc, #24]	; (80083f8 <_close_r+0x20>)
 80083de:	0004      	movs	r4, r0
 80083e0:	0008      	movs	r0, r1
 80083e2:	602b      	str	r3, [r5, #0]
 80083e4:	f7fa fc8d 	bl	8002d02 <_close>
 80083e8:	1c43      	adds	r3, r0, #1
 80083ea:	d103      	bne.n	80083f4 <_close_r+0x1c>
 80083ec:	682b      	ldr	r3, [r5, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d000      	beq.n	80083f4 <_close_r+0x1c>
 80083f2:	6023      	str	r3, [r4, #0]
 80083f4:	bd70      	pop	{r4, r5, r6, pc}
 80083f6:	46c0      	nop			; (mov r8, r8)
 80083f8:	20000304 	.word	0x20000304

080083fc <_fstat_r>:
 80083fc:	2300      	movs	r3, #0
 80083fe:	b570      	push	{r4, r5, r6, lr}
 8008400:	4d06      	ldr	r5, [pc, #24]	; (800841c <_fstat_r+0x20>)
 8008402:	0004      	movs	r4, r0
 8008404:	0008      	movs	r0, r1
 8008406:	0011      	movs	r1, r2
 8008408:	602b      	str	r3, [r5, #0]
 800840a:	f7fa fc84 	bl	8002d16 <_fstat>
 800840e:	1c43      	adds	r3, r0, #1
 8008410:	d103      	bne.n	800841a <_fstat_r+0x1e>
 8008412:	682b      	ldr	r3, [r5, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d000      	beq.n	800841a <_fstat_r+0x1e>
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	bd70      	pop	{r4, r5, r6, pc}
 800841c:	20000304 	.word	0x20000304

08008420 <_isatty_r>:
 8008420:	2300      	movs	r3, #0
 8008422:	b570      	push	{r4, r5, r6, lr}
 8008424:	4d06      	ldr	r5, [pc, #24]	; (8008440 <_isatty_r+0x20>)
 8008426:	0004      	movs	r4, r0
 8008428:	0008      	movs	r0, r1
 800842a:	602b      	str	r3, [r5, #0]
 800842c:	f7fa fc81 	bl	8002d32 <_isatty>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d103      	bne.n	800843c <_isatty_r+0x1c>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d000      	beq.n	800843c <_isatty_r+0x1c>
 800843a:	6023      	str	r3, [r4, #0]
 800843c:	bd70      	pop	{r4, r5, r6, pc}
 800843e:	46c0      	nop			; (mov r8, r8)
 8008440:	20000304 	.word	0x20000304

08008444 <_lseek_r>:
 8008444:	b570      	push	{r4, r5, r6, lr}
 8008446:	0004      	movs	r4, r0
 8008448:	0008      	movs	r0, r1
 800844a:	0011      	movs	r1, r2
 800844c:	001a      	movs	r2, r3
 800844e:	2300      	movs	r3, #0
 8008450:	4d05      	ldr	r5, [pc, #20]	; (8008468 <_lseek_r+0x24>)
 8008452:	602b      	str	r3, [r5, #0]
 8008454:	f7fa fc76 	bl	8002d44 <_lseek>
 8008458:	1c43      	adds	r3, r0, #1
 800845a:	d103      	bne.n	8008464 <_lseek_r+0x20>
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d000      	beq.n	8008464 <_lseek_r+0x20>
 8008462:	6023      	str	r3, [r4, #0]
 8008464:	bd70      	pop	{r4, r5, r6, pc}
 8008466:	46c0      	nop			; (mov r8, r8)
 8008468:	20000304 	.word	0x20000304

0800846c <_read_r>:
 800846c:	b570      	push	{r4, r5, r6, lr}
 800846e:	0004      	movs	r4, r0
 8008470:	0008      	movs	r0, r1
 8008472:	0011      	movs	r1, r2
 8008474:	001a      	movs	r2, r3
 8008476:	2300      	movs	r3, #0
 8008478:	4d05      	ldr	r5, [pc, #20]	; (8008490 <_read_r+0x24>)
 800847a:	602b      	str	r3, [r5, #0]
 800847c:	f7fa fc08 	bl	8002c90 <_read>
 8008480:	1c43      	adds	r3, r0, #1
 8008482:	d103      	bne.n	800848c <_read_r+0x20>
 8008484:	682b      	ldr	r3, [r5, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d000      	beq.n	800848c <_read_r+0x20>
 800848a:	6023      	str	r3, [r4, #0]
 800848c:	bd70      	pop	{r4, r5, r6, pc}
 800848e:	46c0      	nop			; (mov r8, r8)
 8008490:	20000304 	.word	0x20000304

08008494 <_init>:
 8008494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008496:	46c0      	nop			; (mov r8, r8)
 8008498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800849a:	bc08      	pop	{r3}
 800849c:	469e      	mov	lr, r3
 800849e:	4770      	bx	lr

080084a0 <_fini>:
 80084a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a2:	46c0      	nop			; (mov r8, r8)
 80084a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a6:	bc08      	pop	{r3}
 80084a8:	469e      	mov	lr, r3
 80084aa:	4770      	bx	lr
